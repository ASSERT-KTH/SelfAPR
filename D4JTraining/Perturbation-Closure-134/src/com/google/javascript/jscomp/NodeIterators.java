[REPLACE]^private final Stack<Node> ancestors ;^44^^^^^^^[REPLACE] private final Stack<Node> ancestors = new Stack<Node> (  ) ;^ [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  
[REPLACE]^private  boolean valueHasSideEffects;^154^^^^^^^[REPLACE] private final boolean valueHasSideEffects;^ [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  
[REPLACE]^Preconditions.checkArgument ( ancestors.length *  0 .5  > 0  ) ;^52^^^^^51^61^[REPLACE] Preconditions.checkArgument ( ancestors.length > 0 ) ;^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  [TYPE]  Stack ancestors 
[REPLACE]^if  ( n .getString (  )    ||  Token.FUNCTION )  {^55^^^^^51^61^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  [TYPE]  Stack ancestors 
[REPLACE]^Node current = ancestors.pop (  ) ;^54^^^^^51^61^[REPLACE] for  ( Node n : ancestors )  {^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( nameNode.getType (  )   &&  Token.NAME ) ;^194^^^^^193^201^[REPLACE] Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^194^^^^^193^201^[ADD] Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( name      == Token.NAME ) ;^194^^^^^193^201^[REPLACE] Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^Node valueNode = NodeUtil.getAssignedValue ( valueNode ) ;^195^^^^^193^201^[REPLACE] Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^this.varName =  valueNode.getString (  ) ;^196^^^^^193^201^[REPLACE] this.varName = nameNode.getString (  ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^this.valueHasSideEffects = valueNode != null || NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^[REPLACE] this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^this.iterator =  null;^199^^^^^193^201^[REPLACE] this.iterator = iterator;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^199^200^^^^193^201^[ADD] this.iterator = iterator; advanceLookAhead ( true ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^advanceLookAhead ( false ) ;^200^^^^^193^201^[REPLACE] advanceLookAhead ( true ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return ! ( ancestors.size (  )  == 1 && ancestors .pop (  )  .getNext (  )  == null ) ;^66^^^^^64^67^[REPLACE] return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[METHOD] hasNext [TYPE] boolean [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^Node current = ancestors .peek (  )  ;^71^^^^^70^100^[REPLACE] Node current = ancestors.pop (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^70^100^[REPLACE] while  ( current.hasChildren (  )  )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^88^89^^^^70^100^[ADD] while  ( current.hasChildren (  )  )  { current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^93^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return lookAhead != null;^94^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getNext (  ) ; ;^89^^^^^70^100^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getNext (  )  != this  )  {^72^^^^^70^100^[REPLACE] if  ( current.getNext (  )  == null )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^current = ancestors.peek (  ) ;^72^73^^^^70^100^[ADD] if  ( current.getNext (  )  == null )  { current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^72^97^[REPLACE] while  ( current.hasChildren (  )  )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   !=  Token.FUNCTION )  {^93^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return lookAhead != null;^94^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getNext (  ) ; ;^89^^^^^72^97^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^84^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return lookAhead != null;^85^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current .getString (  )    ||  Token.FUNCTION )  {^93^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^93^94^95^^^72^97^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getFirstChild (  ) ; ;^80^^^^^72^97^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^80^^^^^72^97^[ADD] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^76^77^78^^^70^100^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return lookAhead != null;^77^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current  =  current ;^73^^^^^70^100^[REPLACE] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current .getString (  )    !=  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^84^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^^84^85^86^^^70^100^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return lookAhead != null;^85^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[ADD]^return next (  ) ;^93^94^95^^^70^100^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^current = current.getFirstChild (  ) ; ;^80^^^^^70^100^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return valueNode;^99^^^^^70^100^[REPLACE] return current;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return ;^104^^^^^103^105^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return ancestors.pop (  ) ;^111^^^^^110^112^[REPLACE] return ancestors.peek (  ) ;^[METHOD] current [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return ancestors.push (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^[REPLACE] return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[METHOD] currentParent [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^List<Node> list =   ancestors   ;^127^^^^^126^130^[REPLACE] List<Node> list = Lists.newArrayList ( ancestors ) ;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  List list  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^Collections.reverse ( null ) ;^128^^^^^126^130^[REPLACE] Collections.reverse ( list ) ;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  List list  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^return 0;^129^^^^^126^130^[REPLACE] return list;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  List list  [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node current  lookAhead  n  nameNode  valueNode  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( var.getType (  )   !=  Token.VAR ) ;^165^^^^^163^173^[REPLACE] Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  current  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.VAR ) ;^165^^^^^163^173^[REPLACE] Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  current  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isStatement ( valueNode )  ) ;^166^^^^^163^173^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  current  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^[REPLACE] return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  current  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( valueNode.getType (  )   !=  Token.ASSIGN ) ;^181^^^^^179^187^[REPLACE] Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( value      == Token.ASSIGN ) ;^181^^^^^179^187^[REPLACE] Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( expr.getType (  )   !=  Token.EXPR_RESULT ) ;^182^^^^^179^187^[REPLACE] Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( var.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^[REPLACE] Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^[REPLACE] return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^returnvar ;^205^^^^^204^206^[REPLACE] return lookAhead != null;^[METHOD] hasNext [TYPE] boolean [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node current = ancestors.pop (  ) ;^210^^^^^209^213^[REPLACE] Node next = lookAhead;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^210^211^^^^209^213^[ADD] Node next = lookAhead; advanceLookAhead ( false ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^advanceLookAhead ( true ) ;^211^^^^^209^213^[REPLACE] advanceLookAhead ( false ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return valueNode;^212^^^^^209^213^[REPLACE] return next;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return ;^217^^^^^216^218^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^217^^^^^216^218^[ADD] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( atStart )  {^221^^^^^220^283^[REPLACE] if  ( !atStart )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (var != this )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^return;^222^223^224^^^220^283^[ADD] if  ( lookAhead == null )  { return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^223^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (  varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^232^^^^^229^233^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^231^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^return;^231^232^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^232^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node curNode = iterator.next (  ) ;^228^^^^^220^283^[REPLACE] Node curNode = iterator.current (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( lookAhead != null )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^231^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( !iterator.FunctionlessLocalScope (  )  )  {^236^^^^^220^283^[REPLACE] if  ( !iterator.hasNext (  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^lookAhead = null;return;^236^237^238^239^^220^283^[ADD] if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^237^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^238^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^237^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node.hasNextNode = iterator.next (  ) ;^241^^^^^220^283^[REPLACE] Node nextNode = iterator.next (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Node nextParent = iterator.current (  ) ;^242^^^^^220^283^[REPLACE] Node nextParent = iterator.currentParent (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^int type = nextNode.getNext (  ) ;^243^^^^^220^283^[REPLACE] int type = nextNode.getType (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^245^^^^^220^283^[REPLACE] if  ( valueHasSideEffects )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( type == Token.NAME ) {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nextParent !=var )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName ) {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^259^^^^^251^261^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  |  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^254^255^^^^251^261^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   !=  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^252^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (  !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^blocked = false;^259^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( valueHasSideEffects )  {^263^^^^^220^283^[REPLACE] if  ( blocked )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^lookAhead = null;return;^263^264^265^266^^220^283^[ADD] if  ( blocked )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^265^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = this;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^264^265^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean blocked = true;^250^^^^^220^283^[REPLACE] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  >=  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   &&  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nextParent != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^259^^^^^251^261^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( valueHasSideEffects && !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^263^264^265^266^^220^283^[ADD] if  ( blocked )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^252^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^259^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   !=  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( type == Token.NAME && varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( nextParent != this  )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^blocked = true;&& nextNode == nextParent.getFirstChild (  )  ) ;^251^252^253^254^255^220^283^[ADD] if  ( nextParent == null )  { blocked = true; } else { boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName && !valueHasSideEffects )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nameNode.getType (  )   &&  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^258^259^260^^^220^283^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   ||  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( var != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( valueHasSideEffects &&isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^258^259^260^^^251^261^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  ^  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  ( assignsName ) {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^264^^^^^220^283^[ADD] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^250^^^^^220^283^[ADD] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  ^  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^254^255^^^^220^283^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^256^^^^^220^283^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^if  (  type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^220^283^[REPLACE] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[ADD]^^276^277^278^279^280^220^283^[ADD] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = false;^278^^^^^276^280^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^279^^^^^276^280^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead = true;^278^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^return current;^279^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^lookAhead =  valueNode;^282^^^^^220^283^[REPLACE] lookAhead = nextNode;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^private  Stack<Node> ancestors = new Stack<Node> (  ) ;^44^^^^^^^[REPLACE] private final Stack<Node> ancestors = new Stack<Node> (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] FunctionlessLocalScope   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  [TYPE]  Stack ancestors 
[REPLACE]^Preconditions.checkArgument ( ancestors.length %  2 > 0 ) ;^52^^^^^51^61^[REPLACE] Preconditions.checkArgument ( ancestors.length > 0 ) ;^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] FunctionlessLocalScope   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  [TYPE]  Stack ancestors  [TYPE]  Node n 
[ADD]^^52^^^^^51^61^[ADD] Preconditions.checkArgument ( ancestors.length > 0 ) ;^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] FunctionlessLocalScope   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  [TYPE]  Stack ancestors  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^55^^^^^51^61^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] FunctionlessLocalScope   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  [TYPE]  Stack ancestors  [TYPE]  Node n 
[REPLACE]^Node current = ancestors.pop (  ) ;^54^^^^^51^61^[REPLACE] for  ( Node n : ancestors )  {^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] FunctionlessLocalScope   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  [TYPE]  Stack ancestors  [TYPE]  Node n 
[ADD]^^54^55^56^57^^51^61^[ADD] for  ( Node n : ancestors )  { if  ( n.getType (  )  == Token.FUNCTION )  { break; }^[METHOD] <init> [TYPE] Node[]) [PARAMETER]  ancestors [CLASS] FunctionlessLocalScope   [TYPE]  Node[] ancestors  [TYPE]  boolean false  true  [TYPE]  Stack ancestors  [TYPE]  Node n 
[REPLACE]^return ! ( ancestors.size (  )  == 1 && ancestors.pop (  ) .getNext (  )  == null ) ;^66^^^^^64^67^[REPLACE] return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[METHOD] hasNext [TYPE] boolean [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^Node current = ancestors.peek (  ) ;^71^^^^^70^100^[REPLACE] Node current = ancestors.pop (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^93^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;^94^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getNext (  ) ; ;^89^^^^^70^100^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^89^^^^^70^100^[ADD] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getNext (  )  != false )  {^72^^^^^70^100^[REPLACE] if  ( current.getNext (  )  == null )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^while  ( current.getFirstChild (  )  )  {^88^^^^^72^97^[REPLACE] while  ( current.hasChildren (  )  )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^93^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^return next (  ) ;^93^94^95^^^72^97^[ADD] if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;^94^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getNext (  ) ; ;^89^^^^^72^97^[REPLACE] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^89^^^^^72^97^[ADD] current = current.getFirstChild (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^84^^^^^72^97^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;^85^^^^^72^97^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getFirstChild (  ) ; ;^80^^^^^72^97^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^80^^^^^72^97^[ADD] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;^77^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current  = null ;^73^^^^^70^100^[REPLACE] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[ADD]^^73^^^^^70^100^[ADD] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   ||  Token.FUNCTION )  {^76^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^if  ( current.getType (  )   &&  Token.FUNCTION )  {^84^^^^^70^100^[REPLACE] if  ( current.getType (  )  == Token.FUNCTION )  {^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return current;^85^^^^^70^100^[REPLACE] return next (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current  =  current ;^73^^^^^70^100^[REPLACE] current = ancestors.peek (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^current = current.getFirstChild (  ) ; ;^80^^^^^70^100^[REPLACE] current = current.getNext (  ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return list;^99^^^^^70^100^[REPLACE] return current;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  Node current  [TYPE]  boolean false  true 
[REPLACE]^return ;^104^^^^^103^105^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[ADD]^^104^^^^^103^105^[ADD] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^return ancestors.pop (  ) ;^111^^^^^110^112^[REPLACE] return ancestors.peek (  ) ;^[METHOD] current [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^return ancestors.push (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^[REPLACE] return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[METHOD] currentParent [TYPE] Node [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^List<Node> list =   ancestors   ;^127^^^^^126^130^[REPLACE] List<Node> list = Lists.newArrayList ( ancestors ) ;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  List list  [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^Collections.reverse ( null ) ;^128^^^^^126^130^[REPLACE] Collections.reverse ( list ) ;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  List list  [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^return null;^129^^^^^126^130^[REPLACE] return list;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] FunctionlessLocalScope   [TYPE]  List list  [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^private final  boolean  varName;^156^^^^^^^[REPLACE] private final String varName;^[METHOD] currentAncestors [TYPE] List [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  List list  [TYPE]  Stack ancestors  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( nameNode.getType (  )   !=  Token.NAME ) ;^194^^^^^193^201^[REPLACE] Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^[REPLACE] Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^Node valueNode = NodeUtil .nodeTypeMayHaveSideEffects ( nameNode )  ;^195^^^^^193^201^[REPLACE] Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^this.varName =  valueNode.getString (  ) ;^196^^^^^193^201^[REPLACE] this.varName = nameNode.getString (  ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^this.valueHasSideEffects = valueNode == null ;^197^198^^^^193^201^[REPLACE] this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^this.iterator =  null;^199^^^^^193^201^[REPLACE] this.iterator = iterator;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^advanceLookAhead ( false ) ;^200^^^^^193^201^[REPLACE] advanceLookAhead ( true ) ;^[METHOD] <init> [TYPE] NodeIterators$FunctionlessLocalScope) [PARAMETER] Node nameNode FunctionlessLocalScope iterator [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node lookAhead  nameNode  valueNode 
[REPLACE]^Preconditions.checkArgument ( var.getType (  )   &&  Token.VAR ) ;^165^^^^^163^173^[REPLACE] Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( valueNode .getString (  )   == Token.VAR ) ;^165^^^^^163^173^[REPLACE] Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  lookAhead  name  nameNode  valueNode  var 
[ADD]^^165^166^^^^163^173^[ADD] Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ; Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.getAssignedValue ( valueNode )  ) ;^166^^^^^163^173^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^[REPLACE] return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[METHOD] forVar [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node var Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node block  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( assign.getType (  )   !=  Token.ASSIGN ) ;^181^^^^^179^187^[REPLACE] Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[ADD]^^181^^^^^179^187^[ADD] Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^[REPLACE] Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( var.getType (  )   ||  Token.EXPR_RESULT ) ;^182^^^^^179^187^[REPLACE] Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Preconditions.checkArgument ( var.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^[REPLACE] Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^[REPLACE] return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[METHOD] forAssign [TYPE] NodeIterators$LocalVarMotion [PARAMETER] Node name Node assign Node expr Node block [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^return lookAhead ;^205^^^^^204^206^[REPLACE] return lookAhead != null;^[METHOD] hasNext [TYPE] boolean [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  valueNode  var 
[REPLACE]^Node nextNode = iterator.next (  ) ;^210^^^^^209^213^[REPLACE] Node next = lookAhead;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  next  valueNode  var 
[REPLACE]^advanceLookAhead ( true ) ;^211^^^^^209^213^[REPLACE] advanceLookAhead ( false ) ;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  next  valueNode  var 
[ADD]^return next;^211^212^^^^209^213^[ADD] advanceLookAhead ( false ) ; return next;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  next  valueNode  var 
[REPLACE]^return valueNode;^212^^^^^209^213^[REPLACE] return next;^[METHOD] next [TYPE] Node [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  next  valueNode  var 
[REPLACE]^return ;^217^^^^^216^218^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] LocalVarMotion   [TYPE]  boolean false  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  Node assign  block  expr  lookAhead  name  nameNode  next  valueNode  var 
[REPLACE]^if  ( atStart )  {^221^^^^^220^283^[REPLACE] if  ( !atStart )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^221^222^223^224^^220^283^[ADD] if  ( !atStart )  { if  ( lookAhead == null )  { return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (var != false )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^223^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^return;^231^232^^^^229^233^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^232^^^^^229^233^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = true;^231^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^232^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node curNode = iterator.hasNext (  ) ;^228^^^^^220^283^[REPLACE] Node curNode = iterator.current (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (var != null )  {^222^^^^^220^283^[REPLACE] if  ( lookAhead == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^return;^222^223^224^^^220^283^[ADD] if  ( lookAhead == null )  { return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( var.getType (  )  == Token.NAME ) {^229^230^^^^220^283^[REPLACE] if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^231^^^^^229^233^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( !iterator.FunctionlessLocalScope (  )  )  {^236^^^^^220^283^[REPLACE] if  ( !iterator.hasNext (  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^237^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^238^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^237^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node.hasNextNode = iterator.next (  ) ;^241^^^^^220^283^[REPLACE] Node nextNode = iterator.next (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^241^242^^^^220^283^[ADD] Node nextNode = iterator.next (  ) ; Node nextParent = iterator.currentParent (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^Node nextParent = iterator.current (  ) ;^242^^^^^220^283^[REPLACE] Node nextParent = iterator.currentParent (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^int type = valueNode.getType (  ) ;^243^^^^^220^283^[REPLACE] int type = nextNode.getType (  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^245^^^^^220^283^[REPLACE] if  ( valueHasSideEffects )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( type == Token.NAME ) {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^boolean blocked = false;blocked = true;^249^250^251^252^^220^283^[ADD] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  { boolean blocked = false; if  ( nextParent == null )  { blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( nextParent != null )  {^251^^^^^220^283^[REPLACE] if  ( nextParent == null )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (  !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^258^259^260^^^251^261^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^259^^^^^251^261^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN ;^254^255^^^^251^261^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   &&  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^252^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^blocked = false;^259^^^^^220^283^[REPLACE] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( valueHasSideEffects )  {^263^^^^^220^283^[REPLACE] if  ( blocked )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = this;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^264^265^^^^220^283^[ADD] lookAhead = null; return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^265^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^259^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean blocked = true;^250^^^^^220^283^[REPLACE] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   !=  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REMOVE]^if  (  ( type ==  ( NAME )  )  &&  ( ! ( varName.equals ( nextNode.getString (  )  )  )  )  )  {     boolean blocked = false;     if  ( nextParent == null )  {         blocked = true;     }else {         boolean assignsName =  (  ( nextParent.getType (  )  )  ==  ( ASSIGN )  )  &&  ( nextNode ==  ( nextParent.getFirstChild (  )  )  ) ;         boolean isVarDeclaration =  ( nextParent.getType (  )  )  ==  ( VAR ) ;         if  (  ( !assignsName )  &&  ( !isVarDeclaration )  )  {             blocked = true;         }     }     if  ( blocked )  {         lookAhead = null;         return ;     } }^251^^^^^220^283^[REMOVE] ^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !isVarDeclaration )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^254^255^^^^251^261^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^blocked = true;^258^259^260^^^220^283^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^263^264^265^266^^220^283^[ADD] if  ( blocked )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^250^^^^^220^283^[ADD] boolean blocked = false;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN  <  nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^254^255^^^^220^283^[ADD] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    &&  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (  varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^220^283^[REPLACE] if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && !true )  {^258^^^^^251^261^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^blocked = true;^258^259^260^^^251^261^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent.getType (  )   ||  Token.VAR ) ;^256^^^^^251^261^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  (  !isVarDeclaration )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^258^259^260^^^220^283^[ADD] if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = true;^264^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^220^283^[REPLACE] boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextNode.getType (  )   ||  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^251^252^253^254^255^220^283^[ADD] if  ( nextParent == null )  { blocked = true; } else { boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^259^^^^^251^261^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^256^^^^^251^261^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^252^^^^^220^283^[ADD] blocked = true;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( assignsName && valueHasSideEffects )  {^258^^^^^220^283^[REPLACE] if  ( !assignsName && !isVarDeclaration )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^boolean isVarDeclaration =  ( nextParent .getString (  )    !=  Token.VAR ) ;^256^^^^^220^283^[REPLACE] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^256^^^^^220^283^[ADD] boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^220^283^[REPLACE] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^276^277^278^279^280^220^283^[ADD] if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^278^^^^^276^280^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^279^^^^^276^280^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead = false;^278^^^^^220^283^[REPLACE] lookAhead = null;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^return next;^279^^^^^220^283^[REPLACE] return;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[REPLACE]^lookAhead =  nextParent;^282^^^^^220^283^[REPLACE] lookAhead = nextNode;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
[ADD]^^282^^^^^220^283^[ADD] lookAhead = nextNode;^[METHOD] advanceLookAhead [TYPE] void [PARAMETER] boolean atStart [CLASS] LocalVarMotion   [TYPE]  boolean assignsName  atStart  blocked  false  isVarDeclaration  true  valueHasSideEffects  [TYPE]  String varName  [TYPE]  FunctionlessLocalScope iterator  [TYPE]  int type  [TYPE]  Node assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var 
