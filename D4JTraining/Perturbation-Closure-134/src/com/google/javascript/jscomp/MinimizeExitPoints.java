[REPLACE]^this.compiler =  null;^41^^^^^40^42^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^switch  ( n.getType (  )  )  { case Token.LABEL:^46^^^^^45^47^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isLiteralValue ( cond )  && NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^50^82^[REPLACE] if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[ADD]^^68^69^^^72^50^82^[ADD] if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {  tryMinimizeExits (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^tryMinimizeExits ( parent.getFirstChild (  ) , Token.BREAK, true ) ;^72^73^^^^50^82^[REPLACE] tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^n.getFirstChild (  ) , Token.BREAK, parentull ) ;^73^^^^^50^82^[REPLACE] n.getFirstChild (  ) , Token.BREAK, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^Node cond = NodeUtil.isFunctionDeclaration ( n ) ;^67^^^^^50^82^[REPLACE] Node cond = NodeUtil.getConditionExpression ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^115^^^^^112^205^[REPLACE] if  ( matchingExitNode ( n, exitType, labelName )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return false;^118^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( n.getType (  )   &&  Token.IF )  {^122^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.IF )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^122^123^124^125^^112^205^[ADD] if  ( n.getType (  )  == Token.IF )  { Node ifBlock = n.getFirstChild (  ) .getNext (  ) ; tryMinimizeExits ( ifBlock, exitType, labelName ) ; Node elseBlock = ifBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( tryBlock == null )  { else {^126^^^^^112^205^[REPLACE] if  ( elseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^127^^^^^112^205^[REPLACE] tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REMOVE]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^127^^^^^112^205^[REMOVE] ^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return false;^129^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node ifBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^112^205^[REPLACE] Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node elseBlock = ifBlock.getParent (  ) ;^125^^^^^112^205^[REPLACE] Node elseBlock = ifBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  (tryBlock == this )  {^126^^^^^112^205^[REPLACE] if  ( elseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeExits ( trueBlock, exitType, labelName ) ;^127^^^^^112^205^[REPLACE] tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node elseBlock = trueBlock.getParent (  ) ;^125^^^^^112^205^[REPLACE] Node elseBlock = ifBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( n.getType (  )   !=  Token.TRY )  {^133^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.TRY )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( NodeUtil.getCatchBlock ( allCatchNodes )  )  {^137^^^^^112^205^[REPLACE] if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = tryBlock.getFirstChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = tryBlock.getFirstChild (  ) ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( NodeUtil.hasFinally ( catchNode )  )  {^143^^^^^112^205^[REPLACE] if  ( NodeUtil.hasFinally ( n )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = n.getFirstChild (  ) ;^144^^^^^112^205^[REPLACE] Node finallyBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node tryBlock = finallyBlock.getFirstChild (  ) ;^134^^^^^112^205^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node allCatchNodes = NodeUtil.getLoopCodeBlock ( finallyBlock ) ;^136^^^^^112^205^[REPLACE] Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = labelBlock.getFirstChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^Node catchCodeBlock = catchNode.getLastChild (  ) ;^139^140^^^^112^205^[ADD] Node catchNode = allCatchNodes.getFirstChild (  ) ; Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = n.getFirstChild (  ) ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = finallyBlock.getLastChild (  ) ;^144^^^^^112^205^[REPLACE] Node finallyBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( labelBlock )  )  {^137^^^^^112^205^[REPLACE] if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = ifTree.getFirstChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^139^^^^^112^205^[ADD] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = catchNode .getFirstChild (  )  ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( n )  )  {^143^^^^^112^205^[REPLACE] if  ( NodeUtil.hasFinally ( n )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node tryBlock = finallyBlock.getLastChild (  ) ;^134^^^^^112^205^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = allCatchNodes.getLastChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = n.getLastChild (  ) ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( finallyBlock.getType (  )   ||  Token.LABEL )  {^150^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node labelBlock = finallyBlock .getFirstChild (  )  ;^151^^^^^112^205^[REPLACE] Node labelBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node labelBlock = finallyBlock.getLastChild (  ) ;^151^^^^^112^205^[REPLACE] Node labelBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  (  n.getLastChild (  )  != null )  {^158^^^^^112^205^[REPLACE] if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return false;^159^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c.getType (  )   &&  Token.IF )  {^169^^^^^112^205^[REPLACE] if  ( c.getType (  )  == Token.IF )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^169^170^171^^^112^205^[ADD] if  ( c.getType (  )  == Token.IF )  { Node ifTree = c; Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( falseBlock == null )  {^183^^^^^112^205^[REPLACE] if  ( falseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeIfBlockExits ( tryBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^112^205^[REPLACE] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^trueBlock =  ifBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^112^205^[REPLACE] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  tryBlock.getNext (  ) ;^175^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^trueBlock =  null.getFirstChild (  ) .getNext (  ) ;^181^^^^^112^205^[REPLACE] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  tryBlock.getNext (  ) ;^182^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node ifTree = ifBlock;^170^^^^^112^205^[REPLACE] Node ifTree = c;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^Node trueBlock, falseBlock;trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^170^171^^^174^112^205^[ADD] Node ifTree = c; Node trueBlock, falseBlock; trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = n.getLastChild (  ) ;^171^^^^^112^205^[REPLACE] Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeIfBlockExits ( falseBlock, tryBlock, ifTree, exitType, labelName ) ;^184^185^^^^112^205^[REPLACE] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  (tryBlock  !=  n.getLastChild (  )  )  {^189^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^falseBlock = trueBlock.getNext (  ) ;ifTree, exitType, labelName ) ;^174^175^176^177^^112^205^[ADD] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ; falseBlock = trueBlock.getNext (  ) ; tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^trueBlock =  ifBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^112^205^[REPLACE] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  ifTree.getNext (  ) ;^182^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^182^^^^^112^205^[ADD] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = n.getLastChild (  ) ;^166^^^^^112^205^[REPLACE] for  ( Node c : n.children (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^166^167^^169^170^112^205^[ADD] for  ( Node c : n.children (  )  )  {  if  ( c.getType (  )  == Token.IF )  { Node ifTree = c;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node ifTree = tryBlock;^170^^^^^112^205^[REPLACE] Node ifTree = c;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^171^^^^^112^205^[ADD] Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c  ||  n.getLastChild (  )  )  {^199^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c = n.getLastChild (  ) ; c == true; c = n.getLastChild (  )  )  {^196^^^^^112^205^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c  ||  finallyBlock.getLastChild (  )  )  {^199^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c =  finallyBlock.getLastChild (  ) ; c !^196^^^^^112^205^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c = finallyBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^112^205^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return false;^204^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node exitNodeParent = true;^222^^^^^221^271^[REPLACE] Node exitNodeParent = null;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^Node exitNode = true;^223^^^^^221^271^[REPLACE] Node exitNode = null;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( srcBlock.getType (  )   !=  Token.BLOCK )  {^226^^^^^221^271^[REPLACE] if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNodeParent = srcBlock; ;^234^^^^^226^236^[REPLACE] exitNodeParent = ifNode;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^234^235^236^^^226^236^[ADD] exitNodeParent = ifNode; exitNode = srcBlock; }^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNodeParent = srcBlock; ;^235^^^^^226^236^[REPLACE] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^235^^^^^226^236^[ADD] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( !srcBlock.removeChild (  )  )  {^227^^^^^221^271^[REPLACE] if  ( !srcBlock.hasChildren (  )  )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^return;^227^228^229^^^221^271^[ADD] if  ( !srcBlock.hasChildren (  )  )  { return; }^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^return false;^228^^^^^221^271^[REPLACE] return;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNodeParent = ifNode; ;^230^^^^^221^271^[REPLACE] exitNodeParent = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNode =  srcBlock.getLastChild (  ) ;^231^^^^^221^271^[REPLACE] exitNode = exitNodeParent.getLastChild (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( !srcBlock .children (  )   )  {^227^^^^^221^271^[REPLACE] if  ( !srcBlock.hasChildren (  )  )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^230^231^^^^221^271^[ADD] exitNodeParent = srcBlock; exitNode = exitNodeParent.getLastChild (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNodeParent = srcBlock; ;^234^^^^^221^271^[REPLACE] exitNodeParent = ifNode;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNodeParent = srcBlock; ;^235^^^^^221^271^[REPLACE] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^235^^^^^221^271^[ADD] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( matchingExitNode ( exitNode, exitType, labelName )  )  {^239^^^^^221^271^[REPLACE] if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^return false;^240^^^^^221^271^[REPLACE] return;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( ifNode.getNext (  )  == null )  {^244^^^^^221^271^[REPLACE] if  ( ifNode.getNext (  )  != null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^244^245^^247^^221^271^[ADD] if  ( ifNode.getNext (  )  != null )  {  Node newDestBlock = new Node ( Token.BLOCK ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( destBlock != false )  {^248^^^^^221^271^[REPLACE] if  ( destBlock == null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  if  ( destBlock.getType (  )   !=  Token.EMPTY )  {^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  if  ( destBlock.getType (  )   ||  Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode .getLastChild (  )  ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( ifNode )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock =  srcBlock;^256^^^^^221^271^[REPLACE] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode .getLastChild (  )  ;^253^^^^^221^271^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  if  ( destBlock.getType (  )   !=  Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^}   newDestBlock = destBlock;^254^255^256^257^^221^271^[ADD] else if  ( destBlock.getType (  )  == Token.BLOCK )  {  newDestBlock = destBlock; } else {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( newDestBlock )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^260^^^^^254^261^[ADD] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.addChildToFront ( newDestBlock ) ;^250^^^^^221^271^[REPLACE] ifNode.addChildToBack ( newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^250^251^^253^^221^271^[ADD] ifNode.addChildToBack ( newDestBlock ) ; } else if  ( destBlock.getType (  )  == Token.EMPTY )  { ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  else {^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^} else if  ( destBlock.getType (  )   !=  Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( destBlock )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^256^^^^^221^271^[ADD] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^253^^^^^221^271^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  else {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( exitNodeParent )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^Node finallyBlock = n.getLastChild (  ) ;^247^^^^^221^271^[REPLACE] Node newDestBlock = new Node ( Token.BLOCK ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( destBlock != true )  {^248^^^^^221^271^[REPLACE] if  ( destBlock == null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^} else if  ( destBlock.getType (  )   ||  Token.EMPTY )  {^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( exitNode )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock =  null;^256^^^^^221^271^[REPLACE] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock.addChildToFront ( destBlock ) ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^NodeUtil.isFunctionDeclaration ( n ) ;^268^^^^^221^271^[REPLACE] NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REMOVE]^Node finallyBlock = n.getLastChild (  ) ;^268^^^^^221^271^[REMOVE] ^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^NodeUtil.isFunctionDeclaration ( n ) ;^270^^^^^221^271^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( n.getType (  )   !=  type )  {^285^^^^^284^299^[REPLACE] if  ( n.getType (  )  == type )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[ADD]^^285^286^^288^^284^299^[ADD] if  ( n.getType (  )  == type )  { if  ( type == Token.RETURN )  { return !n.hasChildren (  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( type  ||  Token.RETURN )  {^286^^^^^284^299^[REPLACE] if  ( type == Token.RETURN )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( labelName != null )  {^290^^^^^284^299^[REPLACE] if  ( labelName == null )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[ADD]^^290^291^292^293^294^284^299^[ADD] if  ( labelName == null )  { return !n.hasChildren (  ) ; } else { return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return   labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^[REPLACE] return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return !n.removeChild (  ) ;^291^^^^^284^299^[REPLACE] return !n.hasChildren (  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return !n .children (  )  ;^291^^^^^284^299^[REPLACE] return !n.hasChildren (  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return n.hasChildren (  ) ;^293^294^^^^284^299^[REPLACE] return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return !n.removeChild (  ) ;^288^^^^^284^299^[REPLACE] return !n.hasChildren (  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( labelName != false )  {^290^^^^^284^299^[REPLACE] if  ( labelName == null )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[ADD]^return !n.hasChildren (  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^290^291^292^293^294^284^299^[ADD] if  ( labelName == null )  { return !n.hasChildren (  ) ; } else { return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  )  .getNext (  )   ) ;^293^294^^^^284^299^[REPLACE] return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return n.hasChildren (  ) && labelName.equals ( n.getLastChild (  ) .getString (  )  ) ;^293^294^^^^284^299^[REPLACE] return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( type  !=  Token.RETURN )  {^286^^^^^284^299^[REPLACE] if  ( type == Token.RETURN )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( labelName != this  )  {^290^^^^^284^299^[REPLACE] if  ( labelName == null )  {^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return   labelName.equals ( n.getLastChild (  ) .getString (  )  ) ;^293^294^^^^284^299^[REPLACE] return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^return true;^298^^^^^284^299^[REPLACE] return false;^[METHOD] matchingExitNode [TYPE] boolean [PARAMETER] Node n int type String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node n 
[REPLACE]^if  ( true )  {^316^^^^^308^322^[REPLACE] if  ( isFunctionDeclaration )  {^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^destParent.addChildToFront ( n ) ;^319^^^^^308^322^[REPLACE] destParent.addChildToBack ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^destParent.addChildToBack ( n ) ;^317^^^^^308^322^[REPLACE] destParent.addChildToFront ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^for  ( NodesrcParent = start.getNext (  ) ; n == true; n = start.getNext (  )  )  {^310^^^^^308^322^[REPLACE] for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[ADD]^^310^311^312^^314^308^322^[ADD] for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  { boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ; srcParent.removeChild ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^destParent .addChildToFront ( srcParent )  ;^319^^^^^308^322^[REPLACE] destParent.addChildToBack ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REMOVE]^Node catchNode = allCatchNodes.getFirstChild (  ) ;^319^^^^^308^322^[REMOVE] ^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^destParent.addChildToFront ( srcParent ) ;^317^^^^^308^322^[REPLACE] destParent.addChildToFront ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[ADD]^^317^^^^^308^322^[ADD] destParent.addChildToFront ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( srcParent ) ;^311^312^^^^308^322^[REPLACE] boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  { boolean isFunctionDeclaration = ;^310^^^^^308^322^[REPLACE] for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
[REPLACE]^for  ( Node n = srcParent.getNext (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^[REPLACE] for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[METHOD] moveAllFollowing [TYPE] void [PARAMETER] Node start Node srcParent Node destParent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  Node destParent  n  srcParent  start  [TYPE]  boolean false  isFunctionDeclaration  true 
