[REPLACE]^if  ( NodeUtil.isLiteralValue ( cond )  ) {^68^^^^^50^82^[REPLACE] if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[ADD]^^68^69^^^72^50^82^[ADD] if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {  tryMinimizeExits (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, true ) ;^72^73^^^^50^82^[REPLACE] tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^n.getFirstChild (  ) , Token.BREAK, parentull ) ;^73^^^^^50^82^[REPLACE] n.getFirstChild (  ) , Token.BREAK, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REMOVE]^ifTree.getFirstChild (  ) .getNext (  )  ;^73^^^^^50^82^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^Node allCatchNodes = getCatchBlock ( n )  ;^67^^^^^50^82^[REPLACE] Node cond = NodeUtil.getConditionExpression ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node cond  n  parent 
[REPLACE]^if   (  !matchingExitNode  (  exitNode, exitType, labelName  )    )   {  ;^115^^^^^112^205^[REPLACE] if  ( matchingExitNode ( n, exitType, labelName )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^NodeUtil.removeChild ( n.getParent (  ) , n ) ;compiler.reportCodeChange (  ) ;return;^115^116^117^118^119^112^205^[ADD] if  ( matchingExitNode ( n, exitType, labelName )  )  { NodeUtil.removeChild ( n.getParent (  ) , n ) ; compiler.reportCodeChange (  ) ; return; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return;  ;^118^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( n.getType (  )   ) {^122^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.IF )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  (  else {^126^^^^^112^205^[REPLACE] if  ( elseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeExits ( finallyBlock, exitType, labelName )  ;^127^^^^^112^205^[REPLACE] tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return;  ;^129^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;Node elseBlock = ifBlock.getNext (  ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^123^124^125^126^127^112^205^[ADD] Node ifBlock = n.getFirstChild (  ) .getNext (  ) ; tryMinimizeExits ( ifBlock, exitType, labelName ) ; Node elseBlock = ifBlock.getNext (  ) ; if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node elseBlock = tryBlock.getNext (  ) ;^125^^^^^112^205^[REPLACE] Node elseBlock = ifBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( Block == false )  {^126^^^^^112^205^[REPLACE] if  ( elseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^126^127^128^^^112^205^[ADD] if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^125^126^127^128^^112^205^[ADD] Node elseBlock = ifBlock.getNext (  ) ; if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.LABEL  )   {  ;^133^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.TRY )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.LABEL  )   {  ;^137^^^^^112^205^[REPLACE] if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node labelBlock = n.getLastChild (  )  ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node labelBlock = n.getLastChild (  )  ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( NodeUtil.hasCatchHandler ( n )  )  {^143^^^^^112^205^[REPLACE] if  ( NodeUtil.hasFinally ( n )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^143^144^145^146^^112^205^[ADD] if  ( NodeUtil.hasFinally ( n )  )  { Node finallyBlock = n.getLastChild (  ) ; tryMinimizeExits ( finallyBlock, exitType, labelName ) ; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = finallyBlock .getFirstChild (  )  ;^144^^^^^112^205^[REPLACE] Node finallyBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node tryBlock = finallyBlock.getFirstChild (  ) ;^134^^^^^112^205^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^136^^^^^112^205^[ADD] Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = tryBlock.getFirstChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = catchNode .getFirstChild (  )  ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node labelBlock = n.getLastChild (  )  ;^144^^^^^112^205^[REPLACE] Node finallyBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = tryBlock.getLastChild (  ) ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.LABEL  )   {  ;^143^^^^^112^205^[REPLACE] if  ( NodeUtil.hasFinally ( n )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node finallyBlock = finallyBlock.getLastChild (  ) ;^144^^^^^112^205^[REPLACE] Node finallyBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node allCatchNodes = NodeUtil.getLoopCodeBlock ( n ) ;^136^^^^^112^205^[REPLACE] Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchNode = ifBlock.getLastChild (  ) ;^139^^^^^112^205^[REPLACE] Node catchNode = allCatchNodes.getFirstChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node catchCodeBlock = catchNode.getFirstChild (  ) ;^140^^^^^112^205^[REPLACE] Node catchCodeBlock = catchNode.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( n.removeChild (  )   !=  Token.LABEL )  {^150^^^^^112^205^[REPLACE] if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^Node labelBlock = n.getLastChild (  ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^150^151^152^153^^112^205^[ADD] if  ( n.getType (  )  == Token.LABEL )  { Node labelBlock = n.getLastChild (  ) ; tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node ifBlock = n.getFirstChild (  ) .getNext (  )  ;^151^^^^^112^205^[REPLACE] Node labelBlock = n.getLastChild (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( n.getType (  )  != Token.BLOCK ) {^158^^^^^112^205^[REPLACE] if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^158^159^160^^^112^205^[ADD] if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  { return; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return;  ;^159^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c.getType (  )   ||  Token.IF )  {^169^^^^^112^205^[REPLACE] if  ( c.getType (  )  == Token.IF )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( falseBlock == this )  {^183^^^^^112^205^[REPLACE] if  ( falseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^183^184^185^186^^112^205^[ADD] if  ( falseBlock != null )  { tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, trueBlock, exitType, labelName ) ;^184^185^^^^112^205^[REPLACE] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^184^185^^^^112^205^[ADD] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^trueBlock =  ifBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^112^205^[REPLACE] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  ifTree.getNext (  ) ;^175^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^trueBlock =  ifBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^112^205^[REPLACE] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^182^^^^^112^205^[ADD] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node ifTree = tryBlock;^170^^^^^112^205^[REPLACE] Node ifTree = c;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node falseBlock  ;^171^^^^^112^205^[REPLACE] Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node trueBlock  ;^171^^^^^112^205^[REPLACE] Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( falseBlock == null )  {^183^^^^^112^205^[REPLACE] if  ( falseBlock != null )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeIfBlockExits ( falseBlock, ifTree, ifTree, exitType, labelName ) ;^184^185^^^^112^205^[REPLACE] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( trueBlock  !=  n.getLastChild (  )  )  {^189^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c : finallyBlock.children (  )  )  {^166^^^^^112^205^[REPLACE] for  ( Node c : n.children (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.LABEL  )   {  ;^169^^^^^112^205^[REPLACE] if  ( c.getType (  )  == Token.IF )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^tryMinimizeIfBlockExits ( tryBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^112^205^[REPLACE] tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^175^^^^^112^205^[ADD] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  ifBlock.getNext (  ) ;^182^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node trueBlock  ;^170^^^^^112^205^[REPLACE] Node ifTree = c;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^^171^^^^^112^205^[ADD] Node trueBlock, falseBlock;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c  !=  finallyBlock.removeChild (  )  )  {^189^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^break;^189^190^191^^^112^205^[ADD] if  ( c == n.getLastChild (  )  )  { break; }^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  null.getNext (  ) ;^175^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  tryBlock.getNext (  ) ;^175^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^falseBlock = trueBlock.getNext (  ) ;ifTree, exitType, labelName ) ;^181^182^183^184^185^112^205^[ADD] trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ; falseBlock = trueBlock.getNext (  ) ; if  ( falseBlock != null )  { tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^falseBlock =  tryBlock.getNext (  ) ;^182^^^^^112^205^[REPLACE] falseBlock = trueBlock.getNext (  ) ;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^Node trueBlock  ;^166^^^^^112^205^[REPLACE] for  ( Node c : n.children (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^if  ( c  ) {^199^^^^^112^205^[REPLACE] if  ( c == n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c =  null.getLastChild (  ) ; c !^196^^^^^112^205^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^for  ( Node c = finallyBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^112^205^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[REPLACE]^return;  ;^204^^^^^112^205^[REPLACE] return;^[METHOD] tryMinimizeExits [TYPE] void [PARAMETER] Node n int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock 
[ADD]^Node exitNode = null;^222^223^^^^221^271^[ADD] Node exitNodeParent = null; Node exitNode = null;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^Node exitNode = this;^223^^^^^221^271^[REPLACE] Node exitNode = null;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( srcBlock.getType (  )   ) {^226^^^^^221^271^[REPLACE] if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^234^235^236^^^226^236^[ADD] exitNodeParent = ifNode; exitNode = srcBlock; }^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^235^^^^^226^236^[ADD] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( !srcBlock.removeChild (  )  )  {^227^^^^^221^271^[REPLACE] if  ( !srcBlock.hasChildren (  )  )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^return;  ;^228^^^^^221^271^[REPLACE] return;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNode = srcBlock  ;^230^^^^^221^271^[REPLACE] exitNodeParent = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^exitNode =  srcBlock.getLastChild (  ) ;^231^^^^^221^271^[REPLACE] exitNode = exitNodeParent.getLastChild (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^exitNode = srcBlock;^234^235^236^^^221^271^[ADD] exitNodeParent = ifNode; exitNode = srcBlock; }^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^235^^^^^221^271^[ADD] exitNode = srcBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( matchingExitNode ( exitNode, exitType, labelName )  )  {^239^^^^^221^271^[REPLACE] if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^return;  ;^240^^^^^221^271^[REPLACE] return;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( ifNode.getNext (  )  == this  )  {^244^^^^^221^271^[REPLACE] if  ( ifNode.getNext (  )  != null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  (srcBlock != null )  {^248^^^^^221^271^[REPLACE] if  ( destBlock == null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  if  ( destBlock.getType (  )   !=  Token.EMPTY )  {^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REMOVE]^if  ( type ==  ( RETURN )  )  {     return ! ( n.hasChildren (  )  ) ; }else {     if  ( labelName == null )  {         return ! ( n.hasChildren (  )  ) ;     }else {         return  ( n.hasChildren (  )  )  &&  ( labelName.equals ( n.getFirstChild (  ) .getString (  )  )  ) ;     } }^251^^^^^221^271^[REMOVE] ^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  if  (   Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {     Node labelBlock = n.getLastChild (  ) ;     tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^254^^^^^221^271^[REMOVE] ^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock.addChildToFront ( destBlock ) ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^260^^^^^254^261^[ADD] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^256^^^^^221^271^[ADD] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock =  srcBlock;^256^^^^^221^271^[REPLACE] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^253^^^^^221^271^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if   (  srcBlock.getType  (    )   == Token.BLOCK  )   {  ;^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^}   newDestBlock = destBlock;^254^255^256^257^^221^271^[ADD] else if  ( destBlock.getType (  )  == Token.BLOCK )  {  newDestBlock = destBlock; } else {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode .getLastChild (  )  ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock.addChildToFront ( srcBlock ) ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock =  null;^256^^^^^221^271^[REPLACE] newDestBlock = destBlock;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.addChildToFront ( newDestBlock ) ;^250^^^^^221^271^[REPLACE] ifNode.addChildToBack ( newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  else {^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^}   ifNode.replaceChild ( destBlock, newDestBlock ) ;^251^252^253^254^^221^271^[ADD] else if  ( destBlock.getType (  )  == Token.EMPTY )  {  ifNode.replaceChild ( destBlock, newDestBlock ) ; } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^254^261^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^newDestBlock.addChildToBack ( destBlock ) ;^259^260^261^^^254^261^[ADD] ifNode.replaceChild ( destBlock, newDestBlock ) ; newDestBlock.addChildToBack ( destBlock ) ; }^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode.replaceChild ( destBlock, srcBlock ) ;^253^^^^^221^271^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^} else if  ( destBlock.getType (  )   ||  Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^Node labelBlock = n.getLastChild (  )  ;^247^^^^^221^271^[REPLACE] Node newDestBlock = new Node ( Token.BLOCK ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^if  ( destBlock != null )  {^248^^^^^221^271^[REPLACE] if  ( destBlock == null )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^} else if   (  destBlock.getType  (    )   == Token.BLOCK  )   {  ;^251^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^}  else {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode .getLastChild (  )  ;^253^^^^^221^271^[REPLACE] ifNode.replaceChild ( destBlock, newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifNode .addChildToFront ( destBlock )  ;^250^^^^^221^271^[REPLACE] ifNode.addChildToBack ( newDestBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^} else if  ( destBlock.getType (  )   &&  Token.BLOCK )  {^254^^^^^221^271^[REPLACE] } else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^newDestBlock .addChildToFront ( srcBlock )  ;^260^^^^^254^261^[REPLACE] newDestBlock.addChildToBack ( destBlock ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^NodeUtil.removeChild ( srcBlock, exitNode ) ;^268^^^^^221^271^[REPLACE] NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^268^^^^^221^271^[ADD] NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[REPLACE]^ifTree.getFirstChild (  ) .getNext (  )  ;^270^^^^^221^271^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
[ADD]^^270^^^^^221^271^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] tryMinimizeIfBlockExits [TYPE] void [PARAMETER] Node srcBlock Node destBlock Node ifNode int exitType String labelName [CLASS] MinimizeExitPoints   [TYPE]  AbstractCompiler compiler  [TYPE]  String labelName  [TYPE]  boolean false  true  [TYPE]  int exitType  [TYPE]  Node destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock 
