[REPLACE]^if  ( convention.isConstant ( parent.getString (  )  )  )  {^57^^^^^53^96^[REPLACE] if  ( convention.isConstant ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true )  ;^58^^^^^53^96^[REPLACE] n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^if  ( fnInfo != null )  {^64^^^^^53^96^[REPLACE] if  ( fnInfo == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^66^^^^^53^96^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^} else if  (   Token.NAME )  {^69^^^^^53^96^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^fnInfo = parent.getJSDocInfo (  )  ;^71^^^^^53^96^[REPLACE] fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[ADD]^^68^^^^^53^96^[ADD] fnInfo = parent.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^} else if  ( parent.getType (  )   &&  Token.NAME )  {^69^^^^^53^96^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^if  ( parent.putBooleanProp (  )   ||  Token.ASSIGN )  {^66^^^^^53^96^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[ADD]^^66^67^68^69^^53^96^[ADD] if  ( parent.getType (  )  == Token.ASSIGN )  {  fnInfo = parent.getJSDocInfo (  ) ; } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.NAME )  {^69^^^^^53^96^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[ADD]^^71^^^^^53^96^[ADD] fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^fnInfo = parent.getParent (  ) .getJSDocInfo (  )  ;^68^^^^^53^96^[REPLACE] fnInfo = parent.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^}  else {^69^^^^^53^96^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^if   (  convention.isVarArgsParameter  (  arg  )   || typeExpr != null && typeExpr.isVarArgs  (    )    )   {  ;^85^86^^^^53^96^[REPLACE] if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^85^88^[REPLACE] arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^if  (  typeExpr == null && typeExpr.isVarArgs (  )  )  {^89^90^^^^53^96^[REPLACE] if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true )  ;^91^^^^^89^92^[REPLACE] arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[ADD]^^91^^^^^89^92^[ADD] arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^arg =  parent.getNext (  )  )  {^80^^^^^53^96^[REPLACE] arg = arg.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^JSDocInfo fnInfo = parent.getJSDocInfo (  ) ;^63^^^^^53^96^[REPLACE] JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^Node args = parent.getFirstChild (  ) .getNext (  ) ;^77^^^^^53^96^[REPLACE] Node args = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^for  ( Node arg = parent.getFirstChild (  ) ;^78^^^^^53^96^[REPLACE] for  ( Node arg = args.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^String argName = arg .getParent (  )  ;^81^^^^^53^96^[REPLACE] String argName = arg.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
[REPLACE]^JSTypeExpression typeExpr  =  true ;^82^83^^^^53^96^[REPLACE] JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CodingConventionAnnotator   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention convention  [TYPE]  Node arg  args  n  parent  [TYPE]  JSTypeExpression typeExpr  [TYPE]  String argName  [TYPE]  JSDocInfo fnInfo 
