[REPLACE]^static final DiagnosticType CANNOT_PARSE_GENERATED_CODE ;^34^35^36^^^34^36^[REPLACE] static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^ [CLASS] SanityCheck  
[REPLACE]^static final DiagnosticType GENERATED_BAD_CODE ;^38^39^40^41^^38^44^[REPLACE] static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^ [CLASS] SanityCheck  
[REPLACE]^this.compiler =  null;^49^^^^^48^50^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  boolean false  true 
[ADD]^^49^^^^^48^50^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  boolean false  true 
[REPLACE]^sanityCheckNormalization ( reparsedRoot, root ) ;^53^^^^^52^63^[REPLACE] sanityCheckNormalization ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[REPLACE]^Node reparsedRoot = sanityCheckCodeGeneration ( reparsedRoot ) ;^54^^^^^52^63^[REPLACE] Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[REPLACE]^if  ( reparsedRoot == null )  {^55^^^^^52^63^[REPLACE] if  ( reparsedRoot != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[REPLACE]^Node clonedExterns = reparsedRoot.cloneTree (  ) ;^56^^^^^52^63^[REPLACE] Node clonedExterns = externs.cloneTree (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[ADD]^^56^^^^^52^63^[ADD] Node clonedExterns = externs.cloneTree (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[REPLACE]^Node clonedExterns = reparsedRoot.getParent (  ) ;^56^^^^^52^63^[REPLACE] Node clonedExterns = externs.cloneTree (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node clonedExterns  externs  reparsedRoot  root 
[REPLACE]^SymbolTable table = compiler.report (  ) ;^69^^^^^68^72^[REPLACE] SymbolTable table = compiler.acquireSymbolTable (  ) ;^[METHOD] sanityCheckSymbolTable [TYPE] void [PARAMETER] Node reparsedRoot Node originalRoot [CLASS] SanityCheck   [TYPE]  SymbolTable table  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node originalRoot  reparsedRoot 
[REPLACE]^table .release (  )  ;^70^^^^^68^72^[REPLACE] table.verify ( reparsedRoot, originalRoot ) ;^[METHOD] sanityCheckSymbolTable [TYPE] void [PARAMETER] Node reparsedRoot Node originalRoot [CLASS] SanityCheck   [TYPE]  SymbolTable table  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node originalRoot  reparsedRoot 
[REPLACE]^table .verify ( originalRoot , reparsedRoot )  ;^71^^^^^68^72^[REPLACE] table.release (  ) ;^[METHOD] sanityCheckSymbolTable [TYPE] void [PARAMETER] Node reparsedRoot Node originalRoot [CLASS] SanityCheck   [TYPE]  SymbolTable table  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node originalRoot  reparsedRoot 
[REPLACE]^if  ( compiler.report (  )  )  {^82^^^^^81^104^[REPLACE] if  ( compiler.hasHaltingErrors (  )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^82^83^^85^86^81^104^[ADD] if  ( compiler.hasHaltingErrors (  )  )  {  return null; }^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return false;^85^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^String source = compiler.parseSyntheticCode ( root2 ) ;^88^^^^^81^104^[REPLACE] String source = compiler.toSource ( root ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^Node root2 = compiler.addChangeHandler ( source2 ) ;^89^^^^^81^104^[REPLACE] Node root2 = compiler.parseSyntheticCode ( source ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^if  ( reparsedRoot != null )  {^90^^^^^81^104^[REPLACE] if  ( compiler.hasHaltingErrors (  )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^90^91^92^93^94^81^104^[ADD] if  ( compiler.hasHaltingErrors (  )  )  { compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ; return null; }^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return true;^93^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^String source2 = compiler.parseSyntheticCode ( root ) ;^96^^^^^81^104^[REPLACE] String source2 = compiler.toSource ( root2 ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^if  ( source.equals ( source2 )  )  {^97^^^^^81^104^[REPLACE] if  ( !source.equals ( source2 )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^97^98^99^100^101^81^104^[ADD] if  ( !source.equals ( source2 )  )  { compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ; }^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 1, true ) , StringUtil.truncateAtMaxLength ( source2, 1, true )  )  ) ;^98^99^100^^^81^104^[REPLACE] compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100 - 4, true ) , StringUtil.truncateAtMaxLength ( source2, 100 - 4, true )  )  ) ;^98^99^100^^^81^104^[REPLACE] compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^StringUtil.truncateAtMaxLength ( source, 1, true ) , StringUtil.truncateAtMaxLength ( source2, 1, true )  )  ) ;^99^100^^^^81^104^[REPLACE] StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^StringUtil.truncateAtMaxLength ( source2, 94, true )  )  ) ;^100^^^^^81^104^[REPLACE] StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return root;^103^^^^^81^104^[REPLACE] return root2;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.addChangeHandler ( this ) ;^114^^^^^110^135^[REPLACE] compiler.addChangeHandler ( handler ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^new NodeTypeNormalizer ( false ) .process ( null, root ) ;^119^^^^^110^135^[REPLACE] new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^120^121^^^^110^135^[ADD] Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, NodeTypeNormalizer should assert first." ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( reparsedRoot != null )  {^123^^^^^110^135^[REPLACE] if  ( compiler.isNormalized (  )  )  {^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;"This should never fire, Normalize should assert first." ) ;^123^124^125^126^^110^135^[ADD] if  ( compiler.isNormalized (  )  )  { ( new Normalize ( compiler, true )  ) .process ( externs, root ) ; Preconditions.checkState ( !handler.hasCodeChanged (  ) , "This should never fire, Normalize should assert first." ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^boolean checkUserDeclarations = false;^128^^^^^110^135^[REPLACE] boolean checkUserDeclarations = true;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^CompilerPass pass = new Normalize.VerifyConstants ( compiler, true ) ;^129^130^^^^110^135^[REPLACE] CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^128^^^^^110^135^[ADD] boolean checkUserDeclarations = true;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^compiler.removeChangeHandler ( null ) ;^134^^^^^110^135^[REPLACE] compiler.removeChangeHandler ( handler ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
