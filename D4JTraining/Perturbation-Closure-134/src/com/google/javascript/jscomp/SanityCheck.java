[REPLACE]^static  DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^34^35^36^^^34^36^[REPLACE] static final DiagnosticType CANNOT_PARSE_GENERATED_CODE = DiagnosticType.error ( "JSC_CANNOT_PARSE_GENERATED_CODE", "Internal compiler error. Cannot parse generated code: {0}" ) ;^ [CLASS] SanityCheck  
[REPLACE]^static  DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^38^39^40^41^^38^44^[REPLACE] static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error ( "JSC_GENERATED_BAD_CODE", "Internal compiler error. Generated bad code." + "----------------------------------------\n" +^ [CLASS] SanityCheck  
[REPLACE]^private  AbstractCompiler compiler;^46^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] SanityCheck  
[REPLACE]^if  ( compiler .parseSyntheticCode ( source )   )  {^82^^^^^81^104^[REPLACE] if  ( compiler.hasHaltingErrors (  )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return true;^85^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return this;^85^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^String source = compiler.toSource ( root2 ) ;^88^^^^^81^104^[REPLACE] String source = compiler.toSource ( root ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^Node root2 = compiler.addChangeHandler ( source ) ;^89^^^^^81^104^[REPLACE] Node root2 = compiler.parseSyntheticCode ( source ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^if   (  reparsedRoot != null  )   {  ;^90^^^^^81^104^[REPLACE] if  ( compiler.hasHaltingErrors (  )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REMOVE]^if  ( ! ( source.equals ( source2 )  )  )  {     compiler.report ( make ( GENERATED_BAD_CODE, truncateAtMaxLength ( source, 100, true ) , truncateAtMaxLength ( source2, 100, true )  )  ) ; }^90^^^^^81^104^[REMOVE] ^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return null;  ;^93^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return this;^93^^^^^81^104^[REPLACE] return null;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^String source2 = compiler.toSource ( root ) ;^96^^^^^81^104^[REPLACE] String source2 = compiler.toSource ( root2 ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^if  ( source.equals ( source2 )  )  {^97^^^^^81^104^[REPLACE] if  ( !source.equals ( source2 )  )  {^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100 + 3, true ) , StringUtil.truncateAtMaxLength ( source2, 100 + 3, true )  )  ) ;^98^99^100^^^81^104^[REPLACE] compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 4, true ) , StringUtil.truncateAtMaxLength ( source2, 4, true )  )  ) ;^98^99^100^^^81^104^[REPLACE] compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^98^99^100^^^81^104^[ADD] compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^StringUtil.truncateAtMaxLength ( source, 4, true ) , StringUtil.truncateAtMaxLength ( source2, 4, true )  )  ) ;^99^100^^^^81^104^[REPLACE] StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^99^100^^^^81^104^[ADD] StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^StringUtil.truncateAtMaxLength ( source2, 100 / 1, true )  )  ) ;^100^^^^^81^104^[REPLACE] StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[ADD]^^100^^^^^81^104^[ADD] StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^return root2;  ;^103^^^^^81^104^[REPLACE] return root2;^[METHOD] sanityCheckCodeGeneration [TYPE] Node [PARAMETER] Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  String source  source2  [TYPE]  boolean false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node root  root2 
[REPLACE]^compiler.removeChangeHandler ( handler )  ;^114^^^^^110^135^[REPLACE] compiler.addChangeHandler ( handler ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^114^^^^^110^135^[ADD] compiler.addChangeHandler ( handler ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^new NodeTypeNormalizer ( false ) .process ( null, root ) ;^119^^^^^110^135^[REPLACE] new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if   (  reparsedRoot != null  )   {  ;^123^^^^^110^135^[REPLACE] if  ( compiler.isNormalized (  )  )  {^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^boolean checkUserDeclarations = false;^128^^^^^110^135^[REPLACE] boolean checkUserDeclarations = true;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^CompilerPass pass = new Normalize.VerifyConstants ( compiler, true ) ;^129^130^^^^110^135^[REPLACE] CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^compiler.removeChangeHandler ( null ) ;^134^^^^^110^135^[REPLACE] compiler.removeChangeHandler ( handler ) ;^[METHOD] sanityCheckNormalization [TYPE] void [PARAMETER] Node externs Node root [CLASS] SanityCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  RecentChange handler  [TYPE]  boolean checkUserDeclarations  false  true  [TYPE]  DiagnosticType CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
