[REPLACE]^private static final long serialVersionUID ;^51^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap (  ) ;^54^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap (  ) ;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  transient FunctionListExtractor functionListExtractor;^55^^^^^^^[REPLACE] private final transient FunctionListExtractor functionListExtractor;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static final  short  serialVersionUID = 1L;^113^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^public final  long  id;^115^^^^^^^[REPLACE] public final int id;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^public  Node parent;^116^^^^^^^[REPLACE] public final Node parent;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^127^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private int nextId  = null ;^128^^^^^^^[REPLACE] private int nextId = 0;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static final String DELIMITER = '.';^150^^^^^^^[REPLACE] private static final char DELIMITER = '.';^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static final NodeNameExtractor extractor ;^151^152^^^^151^152^[REPLACE] private static final NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^153^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^FunctionRecord record = functionMap.get ( fnNode )  ;^85^^^^^84^110^[REPLACE] FunctionRecord record = functionMap.get ( f ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( record != this )  {^86^^^^^84^110^[REPLACE] if  ( record == null )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return null;  ;^88^^^^^84^110^[REPLACE] return null;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return false;^88^^^^^84^110^[REPLACE] return null;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node parent = record.parent  ;^91^^^^^84^110^[REPLACE] String str = record.name;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( str .replaceFirst ( name , name )   )  {^92^^^^^84^110^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str ;^93^^^^^84^110^[REPLACE] str = "<anonymous>";^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str  = null ;^93^^^^^84^110^[REPLACE] str = "<anonymous>";^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node enclosingFunction = t.getEnclosingFunction (  )  ;^96^^^^^84^110^[REPLACE] Node parent = record.parent;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  (root == true )  {^97^^^^^84^110^[REPLACE] if  ( parent != null )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = getFunctionName ( parent )   "::"  str;^98^^^^^84^110^[REPLACE] str = getFunctionName ( parent )  + "::" + str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^98^^^^^84^110^[ADD] str = getFunctionName ( parent )  + "::" + str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^102^^^^^84^110^[ADD] str = str.replaceAll ( "::this\\.", "." ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = str.replaceAll ( "::this\\.", "." )  ;^106^^^^^84^110^[REPLACE] str = str.replaceAll ( "\\.\\.", "." ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str =  null.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^108^^^^^84^110^[REPLACE] str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return str;  ;^109^^^^^84^110^[REPLACE] return str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^private static final long serialVersionUID ;^113^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^public  int id;^115^^^^^^^[REPLACE] public final int id;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^public  Node parent;^116^^^^^^^[REPLACE] public final Node parent;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^private int nextId ;^128^^^^^^^[REPLACE] private int nextId = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionListExtractor   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^private static final char DELIMITER  = null ;^150^^^^^^^[REPLACE] private static final char DELIMITER = '.';^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamer   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^private static final NodeNameExtractor extractor  = null ;^151^152^^^^151^152^[REPLACE] private static final NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamer   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^153^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamer   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
