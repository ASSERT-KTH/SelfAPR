[REPLACE]^private static   double  TYPEDEF_NAME = "goog.typedef";^39^^^^^^^[REPLACE] private static final String TYPEDEF_NAME = "goog.typedef";^ [CLASS] ClosureCodingConvention  
[REPLACE]^static  DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^41^42^43^^^41^43^[REPLACE] static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^ [CLASS] ClosureCodingConvention  
[REPLACE]^private  Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^[REPLACE] private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^ [CLASS] ClosureCodingConvention  
[REPLACE]^Node callName = callName.getFirstChild (  ) ;^68^^^^^67^107^[REPLACE] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node typeArray = callName.getNext (  ) .getNext (  )  ;^69^^^^^67^107^[REPLACE] SubclassType type = typeofClassDefiningName ( callName ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( type == false )  {^70^^^^^67^107^[REPLACE] if  ( type != null )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  (  callName.getType (  )  == Token.GETPROP )  {^81^82^^^^67^107^[REPLACE] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^81^82^^84^^67^107^[ADD] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  { subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^}  else {^85^^^^^67^107^[REPLACE] } else if  ( callNode.getChildCount (  )  == 3 )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^87^^^^^67^107^[ADD] subclass = callName.getNext (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getFirstChild (  )  ;^87^^^^^67^107^[REPLACE] subclass = callName.getNext (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getNext (  )  ;^84^^^^^81^88^[REPLACE] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( subclass == null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^67^107^[REPLACE] if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^94^95^96^^^67^107^[ADD] if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getNext (  )  ;^84^^^^^67^107^[REPLACE] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( callName ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^67^107^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node subclass = true;^71^^^^^67^107^[REPLACE] Node subclass = null;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node superclass = callName.getLastChild (  ) ;^72^^^^^67^107^[REPLACE] Node superclass = callNode.getLastChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( callNode.getChildCount (  )  == 2 ) {^81^82^^^^67^107^[REPLACE] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^}  if  ( callNode.getChildCount (  )   &&  0 )  {^85^^^^^67^107^[REPLACE] } else if  ( callNode.getChildCount (  )  == 3 )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( callName ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^67^107^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return null;  ;^106^^^^^67^107^[REPLACE] return null;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^String methodName = this;^116^^^^^114^135^[REPLACE] String methodName = null;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( callName.getType (  )   &&  Token.GETPROP )  {^117^^^^^114^135^[REPLACE] if  ( callName.getType (  )  == Token.GETPROP )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^} else if  ( callName.getType (  )   ||  Token.NAME )  {^119^^^^^114^135^[REPLACE] } else if  ( callName.getType (  )  == Token.NAME )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^}   String name = callName.getString (  ) ;int dollarIndex = name.lastIndexOf ( '$' ) ;methodName = name.substring ( dollarIndex + 1 ) ;^119^120^121^122^123^114^135^[ADD] else if  ( callName.getType (  )  == Token.NAME )  { String name = callName.getString (  ) ; int dollarIndex = name.lastIndexOf ( '$' ) ; if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -0 )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^methodName = name.substring ( dollarIndex + 1 ) ;^122^123^124^^^114^135^[ADD] if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ; }^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  1 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^123^^^^^114^135^[ADD] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^120^^^^^114^135^[ADD] String name = callName.getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^121^^^^^114^135^[ADD] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -1L )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  1L ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^String name = callName.getType (  ) ;^120^^^^^114^135^[REPLACE] String name = callName.getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^int dollarIndex = methodName.lastIndexOf ( '$' ) ;^121^^^^^114^135^[REPLACE] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^118^^^^^114^135^[ADD] methodName = callName.getLastChild (  ) .getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  else {^119^^^^^114^135^[REPLACE] } else if  ( callName.getType (  )  == Token.NAME )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -1 )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^int dollarIndex = methodName .substring ( dollarIndex )  ;^121^^^^^114^135^[REPLACE] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName =  null.getLastChild (  ) .getString (  ) ;^118^^^^^114^135^[REPLACE] methodName = callName.getLastChild (  ) .getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^String name = callName .getNext (  )  ;^120^^^^^114^135^[REPLACE] String name = callName.getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^int dollarIndex = methodName.substring ( '$' ) ;^121^^^^^114^135^[REPLACE] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( methodName == null )  {^127^^^^^114^135^[REPLACE] if  ( methodName != null )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( name.equals ( "inherits" )  )  {^128^^^^^114^135^[REPLACE] if  ( methodName.equals ( "inherits" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return SubclassType.INHERITS;  ;^131^^^^^114^135^[REPLACE] return SubclassType.MIXIN;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return SubclassType.INHERITS;  ;^129^^^^^114^135^[REPLACE] return SubclassType.INHERITS;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^} else if  ( name.substring ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^}^130^131^132^^^114^135^[ADD] else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( name.substring ( "inherits" )  )  {^128^^^^^114^135^[REPLACE] if  ( methodName.equals ( "inherits" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  if  ( name.substring ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^} else if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return this;^134^^^^^114^135^[REPLACE] return null;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^Node callName = n .getLastChild (  )  ;^213^^^^^212^229^[REPLACE] Node callName = n.getFirstChild (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  || n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^[REPLACE] if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( typeArray.getType (  )   ||  Token.ARRAYLIT )  {^217^^^^^214^227^[REPLACE] if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( name.getType (  )   &&  Token.STRING )  {^221^^^^^214^227^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^typeNames.add ( name.getString (  )  ) ;^221^222^223^^^214^227^[ADD] if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^name =  typeArray.getNext (  )  )  {^220^^^^^214^227^[REPLACE] name = name.getNext (  )  )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return typeNames;  ;^225^^^^^214^227^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node typeArray = name.getNext (  ) .getNext (  ) ;^216^^^^^214^227^[REPLACE] Node typeArray = callName.getNext (  ) .getNext (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node typeArray = callName.getNext (  ) .getNext (  )  ;^218^^^^^214^227^[REPLACE] List<String> typeNames = Lists.newArrayList (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = name.getFirstChild (  ) ; name != null;^219^^^^^214^227^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( typeArray.getType (  )   !=  Token.ARRAYLIT )  {^217^^^^^212^229^[REPLACE] if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( typeArray.getType (  )   ) {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( name.getType (  )  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^callName.getString (  )  ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REMOVE]^node.getFirstChild (  )  ;^222^^^^^212^229^[REMOVE] ^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^name =  typeArray.getNext (  )  )  {^220^^^^^212^229^[REPLACE] name = name.getNext (  )  )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return null;^225^^^^^212^229^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^218^^^^^212^229^[ADD] List<String> typeNames = Lists.newArrayList (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = name.getLastChild (  ) ; name != null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  (   Token.STRING )  {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^221^222^223^^^212^229^[ADD] if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( typeArray.getString (  )  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return this;^225^^^^^212^229^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^216^^^^^212^229^[ADD] Node typeArray = callName.getNext (  ) .getNext (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node typeArray = callName.getNext (  ) .getNext (  )  ;^218^^^^^212^229^[REPLACE] List<String> typeNames = Lists.newArrayList (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = typeArray.getLastChild (  ) ; name != null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return this;^228^^^^^212^229^[REPLACE] return null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Preconditions.checkArgument ( callNode.getType (  )   !=  Token.CALL ) ;^297^^^^^296^318^[REPLACE] Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Preconditions.checkArgument ( typeNode .getString (  )   == Token.CALL ) ;^297^^^^^296^318^[REPLACE] Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node callName = typeNode.getFirstChild (  ) ;^298^^^^^296^318^[REPLACE] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  && callName.getChildCount (  )  != 2 )  {^299^300^^^^296^318^[REPLACE] if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[ADD]^^299^300^301^302^^296^318^[ADD] if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return false;^301^^^^^299^302^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return this;^301^^^^^296^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node typeArray = callName.getNext (  ) .getNext (  )  ;^304^^^^^296^318^[REPLACE] Node typeNode = callName.getNext (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( typeNode.isQualifiedName (  )  )  {^305^^^^^296^318^[REPLACE] if  ( !typeNode.isQualifiedName (  )  )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return true;^306^^^^^296^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return false;^306^^^^^296^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node objectNode = objectNode.getNext (  ) ;^309^^^^^296^318^[REPLACE] Node objectNode = typeNode.getNext (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( objectNode.getType (  )   ==  Token.OBJECTLIT )  {^310^^^^^296^318^[REPLACE] if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return true;^313^^^^^296^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return false;^313^^^^^296^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return new ObjectLiteralCast ( objectNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^316^317^^^^296^318^[REPLACE] return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
