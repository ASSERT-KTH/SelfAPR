[REPLACE]^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ ;^47^48^^^^47^55^[REPLACE] private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE ;^60^61^^^^60^68^[REPLACE] private static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ  = null ;^74^75^^^^74^82^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE ;^88^89^^^^88^96^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ  = null ;^102^103^^^^102^109^[REPLACE] Function<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ = new Function<Pair<JSType, JSType>, Pair<JSType, JSType>> (  )  {^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^private  ObjectType target;^451^^^^^^^[REPLACE] private final ObjectType target;^ [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  
[REPLACE]^if  ( left.getType (  )  == Token.TYPEOF || right.getType (  )  == Token.STRING )  {^131^^^^^120^238^[REPLACE] if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^}  if  ( stringNode.getType (  )  == Token.TYPEOF || left.getType (  )  == Token.STRING )  {^134^135^^^^120^238^[REPLACE] } else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^}   typeOfNode = right;stringNode = left;^134^135^136^137^138^120^238^[ADD] else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  { typeOfNode = right; stringNode = left; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = left  ;^136^^^^^134^138^[REPLACE] typeOfNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = right  ;^137^^^^^134^138^[REPLACE] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^136^137^^^^120^238^[ADD] typeOfNode = right; stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = right  ;^137^^^^^120^238^[REPLACE] stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^132^133^^^^120^238^[ADD] typeOfNode = left; stringNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^133^^^^^120^238^[ADD] stringNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^} else if  ( right.getType (  )  == Token.TYPEOF ) {^134^135^^^^120^238^[REPLACE] } else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^stringNode = left;^136^137^^^^134^138^[ADD] typeOfNode = right; stringNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( typeOfNode == this ) {^139^^^^^120^238^[REPLACE] if  ( typeOfNode != null && stringNode != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( operandType == this )  {^142^^^^^120^238^[REPLACE] if  ( operandType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  outcome  )   {  ;^145^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^resultEqualsValue = !resultEqualsValue;^145^146^147^^^120^238^[ADD] if  ( !outcome )  { resultEqualsValue = !resultEqualsValue; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^resultEqualsValue =  !true;^146^^^^^120^238^[REPLACE] resultEqualsValue = !resultEqualsValue;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseTypeOf  (  operandNode, operandType, stringNode.getString  (    )  , resultEqualsValue, blindScope  )  ;  ;^148^149^^^^120^238^[REPLACE] return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = condition.getType (  )  == Token.EQ ;^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( outcome )  {^145^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseTypeOf ( operandNode, operandType, stringNode.getType (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^120^238^[REPLACE] return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^140^141^^^^120^238^[ADD] Node operandNode = typeOfNode.getFirstChild (  ) ; JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType operandType = getTypeIfRefinable ( typeOfNode, blindScope ) ;^141^^^^^120^238^[REPLACE] JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^143^144^^^^120^238^[ADD] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( operandType == null )  {^142^^^^^120^238^[REPLACE] if  ( operandType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( !true )  {^145^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = right  ;^132^^^^^120^238^[REPLACE] typeOfNode = left;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^stringNode = left  ;^133^^^^^120^238^[REPLACE] stringNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^typeOfNode = left  ;^136^^^^^120^238^[REPLACE] typeOfNode = right;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^146^^^^^120^238^[ADD] resultEqualsValue = !resultEqualsValue;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^127^128^^^^120^238^[ADD] Node left = condition.getFirstChild (  ) ; Node right = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = stringNode.getLastChild (  ) ;^128^^^^^120^238^[REPLACE] Node right = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node stringNode = null  ;^129^^^^^120^238^[REPLACE] Node typeOfNode = null;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^Node stringNode = this;^130^^^^^120^238^[REPLACE] Node stringNode = null;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^140^^^^^120^238^[ADD] Node operandNode = typeOfNode.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType leftType = getTypeIfRefinable ( left, blindScope )  ;^141^^^^^120^238^[REPLACE] JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^boolean resultEqualsValue = typeOfNode.getType (  )  == Token.EQ  <=  condition.getType (  )  == Token.SHEQ;^143^144^^^^120^238^[REPLACE] boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  !outcome  )   {  ;^155^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^155^161^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^156^157^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( outcome )  {^164^^^^^120^238^[REPLACE] if  ( !outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^164^170^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^165^166^^^^120^238^[REPLACE] return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  !outcome  )   {  ;^173^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^return caseEquality ( condition, blindScope, EQ ) ;return caseEquality ( condition, blindScope, NE ) ;^173^174^175^176^177^120^238^[ADD] if  ( outcome )  { return caseEquality ( condition, blindScope, EQ ) ; } else { return caseEquality ( condition, blindScope, NE ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( stringNode, blindScope, NE ) ;^176^^^^^173^177^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome  (  condition.getFirstChild  (    )  ,  ;^174^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  !outcome  )   {  ;^180^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^180^184^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( stringNode, blindScope, NE ) ;^181^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  !outcome  )   {  ;^187^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^return caseEquality ( condition, blindScope, SHEQ ) ;return caseEquality ( condition, blindScope, SHNE ) ;^187^188^189^190^191^120^238^[ADD] if  ( outcome )  { return caseEquality ( condition, blindScope, SHEQ ) ; } else { return caseEquality ( condition, blindScope, SHNE ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^187^191^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome  (  condition.getFirstChild  (    )  ,  ;^188^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( true )  {^194^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome  (  condition.getFirstChild  (    )  ,  ;^197^^^^^194^198^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^195^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if   (  !outcome  )   {  ;^219^^^^^120^238^[REPLACE] if  ( outcome )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, INEQ ) ;^220^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, INEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( outcome ) {^230^^^^^120^238^[REPLACE] if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^^230^231^232^233^^120^238^[ADD] if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  { return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseIn ( typeOfNode.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^120^238^[REPLACE] return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^120^238^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^120^238^[REPLACE] return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^174^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome  (  condition.getFirstChild  (    )  ,  ;^176^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, NE ) ;^181^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, NE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, EQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHNE ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^197^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, SHEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseNameOrGetProp ( condition, blindScope, true ) ;^202^^^^^120^238^[REPLACE] return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, true ) ,^205^206^207^208^^120^238^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( stringNode.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^120^238^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseEquality  (  condition, blindScope, EQ  )  ;  ;^220^^^^^120^238^[REPLACE] return caseEquality ( condition, blindScope, INEQ ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return caseInstanceOf ( condition.getLastChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^120^238^[REPLACE] return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome  (  condition.getFirstChild  (    )  , blindScope, !outcome  )  ;  ;^236^237^^^^120^238^[REPLACE] return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  [TYPE]  ObjectType target  [TYPE]  boolean false  outcome  resultEqualsValue  true  [TYPE]  JSType operandType  [TYPE]  Node condition  left  operandNode  right  stringNode  typeOfNode  [TYPE]  FlowScope blindScope 
[ADD]^Node right = condition.getLastChild (  ) ;^242^243^^^^241^282^[ADD] Node left = condition.getFirstChild (  ) ; Node right = condition.getLastChild (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^Node right = right.getLastChild (  ) ;^243^^^^^241^282^[REPLACE] Node right = condition.getLastChild (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^boolean leftIsRefineable;^246^247^^^^241^282^[ADD] JSType leftType = getTypeIfRefinable ( left, blindScope ) ; boolean leftIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^boolean rightIsRefineable  ;^247^^^^^241^282^[REPLACE] boolean leftIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( leftType == true )  {^248^^^^^241^282^[REPLACE] if  ( leftType != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^248^249^250^251^252^241^282^[ADD] if  ( leftType != null )  { leftIsRefineable = true; } else { leftIsRefineable = false; leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = false  ;^251^^^^^248^253^[REPLACE] leftIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightType = right.getJSType (  )  ;^252^^^^^248^253^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = false;^249^^^^^241^282^[REPLACE] leftIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = false  ;^249^^^^^241^282^[REPLACE] leftIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^251^252^^^^241^282^[ADD] leftIsRefineable = false; leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightType = right.getJSType (  )  ;^252^^^^^241^282^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^256^^^^^241^282^[REPLACE] JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^boolean leftIsRefineable  ;^257^^^^^241^282^[REPLACE] boolean rightIsRefineable;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( leftType == null )  {^258^^^^^241^282^[REPLACE] if  ( rightType != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^rightIsRefineable = true;rightIsRefineable = false;rightType = right.getJSType (  ) ;^258^259^260^261^262^241^282^[ADD] if  ( rightType != null )  { rightIsRefineable = true; } else { rightIsRefineable = false; rightType = right.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftIsRefineable = false  ;^261^^^^^258^263^[REPLACE] rightIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^leftType = left.getJSType (  )  ;^262^^^^^258^263^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = false;^259^^^^^241^282^[REPLACE] rightIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^259^^^^^241^282^[ADD] rightIsRefineable = true;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^rightIsRefineable = true;^261^^^^^241^282^[REPLACE] rightIsRefineable = false;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^262^^^^^241^282^[ADD] rightType = right.getJSType (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope,  ( !condition )  )  ;^266^^^^^241^282^[REPLACE] Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( merged == null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^241^282^[REPLACE] if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^^269^270^271^272^^241^282^[ADD] if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  { FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  (true && true.first == null )  {^273^^^^^269^280^[REPLACE] if  ( leftIsRefineable && merged.first != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[ADD]^declareNameInScope ( informed, left, merged.first ) ;^273^274^275^^^269^280^[ADD] if  ( leftIsRefineable && merged.first != null )  { declareNameInScope ( informed, left, merged.first ) ; }^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( rightIsRefineable && merged.second == null )  {^276^^^^^269^280^[REPLACE] if  ( rightIsRefineable && merged.second != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return blindScope;^279^^^^^269^280^[REPLACE] return informed;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^269^280^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  (  merged.first == null )  {^273^^^^^241^282^[REPLACE] if  ( leftIsRefineable && merged.first != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^declareNameInScope ( informed, left, false.first ) ;^274^^^^^241^282^[REPLACE] declareNameInScope ( informed, left, merged.first ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^if  ( true && merged.second == false )  {^276^^^^^241^282^[REPLACE] if  ( rightIsRefineable && merged.second != null )  {^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^declareNameInScope ( informed, left, merged.second ) ;^277^^^^^241^282^[REPLACE] declareNameInScope ( informed, right, merged.second ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return informed;  ;^279^^^^^241^282^[REPLACE] return informed;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^241^282^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^return informed;^281^^^^^241^282^[REPLACE] return blindScope;^[METHOD] caseEquality [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope JSType>> merging [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  JSType leftType  rightType  [TYPE]  boolean false  leftIsRefineable  rightIsRefineable  true  [TYPE]  Node condition  left  right  [TYPE]  FlowScope blindScope  informed  [TYPE]  Pair merged 
[REPLACE]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^285^336^[REPLACE] JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean rightIsRefineable  ;^288^^^^^285^336^[REPLACE] boolean leftIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (rightType == null )  {^289^^^^^285^336^[REPLACE] if  ( leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = true;^292^^^^^289^296^[REPLACE] leftIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType = right.getJSType (  )  ;^293^^^^^289^296^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^294^295^^^^289^296^[ADD] blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = false  ;^290^^^^^285^336^[REPLACE] leftIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = false;^290^^^^^285^336^[REPLACE] leftIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = true;^292^^^^^285^336^[REPLACE] leftIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType = right.getJSType (  )  ;^293^^^^^285^336^[REPLACE] leftType = left.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^285^336^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType  =  null ;^299^300^^^^285^336^[REPLACE] leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  restrictedType == null  )   {  ;^301^^^^^285^336^[REPLACE] if  ( leftType == null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^301^302^303^304^^285^336^[ADD] if  ( leftType == null )  { return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^302^303^^^^285^336^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return nextPreciserScopeKnowingConditionOutcome  (  condition, blindScope, outcome  )  ;  ;^302^303^^^^285^336^[REPLACE] return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^307^^^^^285^336^[REPLACE] JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean leftIsRefineable  ;^308^^^^^285^336^[REPLACE] boolean rightIsRefineable;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (leftType == null )  {^309^^^^^285^336^[REPLACE] if  ( rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^rightIsRefineable = true;rightIsRefineable = false;rightType = right.getJSType (  ) ;^309^310^311^312^313^285^336^[ADD] if  ( rightType != null )  { rightIsRefineable = true; } else { rightIsRefineable = false; rightType = right.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = true;^312^^^^^309^316^[REPLACE] rightIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType = left.getJSType (  )  ;^313^^^^^309^316^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^314^315^^^^309^316^[ADD] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = false  ;^310^^^^^285^336^[REPLACE] rightIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightIsRefineable = false;^310^^^^^285^336^[REPLACE] rightIsRefineable = true;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftIsRefineable = false  ;^312^^^^^285^336^[REPLACE] rightIsRefineable = false;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^leftType = left.getJSType (  )  ;^313^^^^^285^336^[REPLACE] rightType = right.getJSType (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^blindScope =  firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^285^336^[REPLACE] blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  leftIsRefineable && leftType != null  )   {  ;^318^^^^^285^336^[REPLACE] if  ( condition )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  ( leftType == true && leftIsRefineable )  || ( rightType != true && rightIsRefineable )  )  {^323^324^^^^285^336^[REPLACE] if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  leftType == true )  {^326^^^^^323^333^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  leftIsRefineable && leftType != null  )   {  ;^329^^^^^323^333^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^332^^^^^323^333^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^325^326^327^328^^323^333^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; if  ( leftIsRefineable && leftType != null )  { declareNameInScope ( informed, left, leftType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  leftType == null )  {^326^^^^^285^336^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, right, merged.second )  ;^327^^^^^285^336^[REPLACE] declareNameInScope ( informed, left, leftType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightIsRefineable && rightType == this )  {^329^^^^^285^336^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, left, leftType )  ;^330^^^^^285^336^[REPLACE] declareNameInScope ( informed, right, rightType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType  =  rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^285^336^[REPLACE] rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;  ;^332^^^^^285^336^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed .inferSlotType ( leftType )  ;^325^^^^^285^336^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (  ( leftType == null && leftIsRefineable )  ) {^323^324^^^^285^336^[REPLACE] if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (true ) {^326^^^^^323^333^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^323^333^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^declareNameInScope ( informed, right, rightType ) ;^329^330^331^^^323^333^[ADD] if  ( rightIsRefineable && rightType != null )  { declareNameInScope ( informed, right, rightType ) ; }^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^323^333^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  (true && leftType == null )  {^326^^^^^285^336^[REPLACE] if  ( leftIsRefineable && leftType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^285^336^[REPLACE] if  ( rightIsRefineable && rightType != null )  {^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^285^336^[REPLACE] declareNameInScope ( informed, right, rightType ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^rightType  = leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^285^336^[REPLACE] rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^332^^^^^285^336^[REPLACE] return informed;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^285^336^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^335^^^^^285^336^[REPLACE] return blindScope;^[METHOD] caseAndOrNotShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  boolean condition  false  leftIsRefineable  rightIsRefineable  true  [TYPE]  JSType leftType  rightType  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^340^341^^^^339^358^[ADD] FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope )  ;^342^^^^^339^358^[REPLACE] StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^if  ( leftVar != null )  {^343^^^^^339^358^[REPLACE] if  ( leftVar == null )  {^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^343^344^345^^^339^358^[ADD] if  ( leftVar == null )  { return blindScope; }^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^344^^^^^339^358^[REPLACE] return blindScope;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^^346^347^^^^339^358^[ADD] FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^rightScope =  firstPreciserScopeKnowingConditionOutcome ( left, leftScope, !condition ) ;^348^349^^^^339^358^[REPLACE] rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^StaticSlot<JSType> rightVar = leftScope.inferSlotType ( blindScope ) ;^350^^^^^339^358^[REPLACE] StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^if  ( rightVar != this || !leftVar.getType (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^339^358^[REPLACE] if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[ADD]^return blindScope;^351^352^353^^^339^358^[ADD] if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  { return blindScope; }^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^352^^^^^339^358^[REPLACE] return blindScope;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^JSType type = true.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^354^^^^^339^358^[REPLACE] JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^355^^^^^339^358^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^informed.inferSlotType ( leftVar.getType (  ) , type ) ;^356^^^^^339^358^[REPLACE] informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^informed.inferSlotType ( null.getName (  ) , type ) ;^356^^^^^339^358^[REPLACE] informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^return rightScope;^357^^^^^339^358^[REPLACE] return informed;^[METHOD] caseAndOrMaybeShortCircuiting [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean condition [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  [TYPE]  StaticSlot leftVar  rightVar  [TYPE]  boolean condition  false  true  [TYPE]  JSType type  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed  leftScope  rightScope 
[REPLACE]^JSType type = getTypeIfRefinable ( name, blindScope )  ;^387^^^^^386^410^[REPLACE] JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( leftType != null )  {^388^^^^^386^410^[REPLACE] if  ( leftType == null )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^388^389^390^^^386^410^[ADD] if  ( leftType == null )  { return blindScope; }^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^389^^^^^386^410^[REPLACE] return blindScope;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType leftType = right.getJSType (  ) ;^391^^^^^386^410^[REPLACE] JSType rightType = right.getJSType (  ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^392^393^^^^386^410^[ADD] ObjectType targetType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  target instanceof FunctionType  )   {  ;^394^^^^^386^410^[REPLACE] if  ( rightType instanceof FunctionType )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^targetType =   ( FunctionType )  rightType;^395^^^^^386^410^[REPLACE] targetType =  ( FunctionType )  rightType;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^ObjectType objectType = cast ( jsType )  ;^397^^^^^386^410^[REPLACE] Visitor<JSType> visitor;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  !outcome  )   {  ;^398^^^^^386^410^[REPLACE] if  ( outcome )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType )  ;^401^^^^^398^402^[REPLACE] visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType )  ;^399^^^^^386^410^[REPLACE] visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType )  ;^401^^^^^386^410^[REPLACE] visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType restrictedLeftType = rightType.visit ( visitor ) ;^403^^^^^386^410^[REPLACE] JSType restrictedLeftType = leftType.visit ( visitor ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( restrictedLeftType == null && !restrictedLeftType.equals ( leftType )  )  {^404^^^^^386^410^[REPLACE] if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^407^^^^^386^410^[REPLACE] return informed;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope,  ( !condition )  )  ;^405^^^^^386^410^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;  ;^407^^^^^386^410^[REPLACE] return informed;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^405^^^^^386^410^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^409^^^^^386^410^[REPLACE] return blindScope;^[METHOD] caseInstanceOf [TYPE] FlowScope [PARAMETER] Node left Node right FlowScope blindScope boolean outcome [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType target  targetType  [TYPE]  boolean false  outcome  true  [TYPE]  JSType leftType  restrictedLeftType  rightType  [TYPE]  Visitor visitor  [TYPE]  Node left  right  [TYPE]  FlowScope blindScope  informed 
[ADD]^^420^^^^^419^444^[ADD] JSType jsType = object.getJSType (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^jsType = this.getRestrictedWithoutUndefined ( jsType )  ;^421^^^^^419^444^[REPLACE] jsType = this.getRestrictedWithoutNull ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^jsType = this.getRestrictedWithoutNull ( jsType )  ;^422^^^^^419^444^[REPLACE] jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^boolean hasProperty = true;^424^^^^^419^444^[REPLACE] boolean hasProperty = false;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^ObjectType objectType = ObjectType.cast ( unknownType ) ;^425^^^^^419^444^[REPLACE] ObjectType objectType = ObjectType.cast ( jsType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if   (  rightType != null  )   {  ;^426^^^^^419^444^[REPLACE] if  ( objectType != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^hasProperty =  null.hasProperty ( propertyName ) ;^427^^^^^419^444^[REPLACE] hasProperty = objectType.hasProperty ( propertyName ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( hasProperty )  {^429^^^^^419^444^[REPLACE] if  ( !hasProperty )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^429^430^431^432^^419^444^[ADD] if  ( !hasProperty )  { String qualifiedName = object.getQualifiedName (  ) ; if  ( qualifiedName != null )  { String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( qualifiedName == null )  {^431^^^^^419^444^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^String propertyQualifiedName = qualifiedName + "." + propertyName;FlowScope informed = blindScope.createChildFlowScope (  ) ;^431^432^433^434^435^419^444^[ADD] if  ( qualifiedName != null )  { String propertyQualifiedName = qualifiedName + "." + propertyName; if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType (^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( blindScope.getSlot ( qualifiedName )  != null )  {^433^^^^^419^444^[REPLACE] if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^439^^^^^419^444^[REPLACE] return informed;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^434^^^^^419^444^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^JSType unknownType = typeRegistry .getNativeObjectType (  )  ;^435^436^^^^419^444^[REPLACE] JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = qualifiedName  "."  propertyName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^435^436^^^^419^444^[ADD] JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( blindScope.getSlot ( propertyQualifiedName )  != null )  {^433^^^^^419^444^[REPLACE] if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^430^431^432^433^434^419^444^[ADD] String qualifiedName = object.getQualifiedName (  ) ; if  ( qualifiedName != null )  { String propertyQualifiedName = qualifiedName + "." + propertyName; if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = qualifiedName  "." qualifiedName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( qualifiedName == true )  {^431^^^^^419^444^[REPLACE] if  ( qualifiedName != null )  {^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^FlowScope informed = blindScope.createChildFlowScope (  ) ;^433^434^435^436^437^419^444^[ADD] if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; informed.inferQualifiedSlot (^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^432^433^434^435^436^419^444^[ADD] String propertyQualifiedName = qualifiedName + "." + propertyName; if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  { FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[ADD]^^434^435^436^437^438^419^444^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; JSType unknownType = typeRegistry.getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ; informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String qualifiedName = object .getLastChild (  )  ;^430^^^^^419^444^[REPLACE] String qualifiedName = object.getQualifiedName (  ) ;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^String propertyQualifiedName = propertyQualifiedName  "."  propertyName;^432^^^^^419^444^[REPLACE] String propertyQualifiedName = qualifiedName + "." + propertyName;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^443^^^^^419^444^[REPLACE] return blindScope;^[METHOD] caseIn [TYPE] FlowScope [PARAMETER] Node object String propertyName FlowScope blindScope [CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor   [TYPE]  Function EQ  INEQ  NE  SHEQ  SHNE  merging  [TYPE]  ObjectType objectType  target  targetType  [TYPE]  JSType jsType  unknownType  [TYPE]  boolean false  hasProperty  true  [TYPE]  Node object  [TYPE]  String propertyName  propertyQualifiedName  qualifiedName  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^private  ObjectType target;^507^^^^^^^[REPLACE] private final ObjectType target;^[METHOD] applyCommonRestriction [TYPE] JSType [PARAMETER] JSType type [CLASS] RestrictByFalseInstanceOfResultVisitor   [TYPE]  ObjectType target  type  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  FunctionType funcTarget 
