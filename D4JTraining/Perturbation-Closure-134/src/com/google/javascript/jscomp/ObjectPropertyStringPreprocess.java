[REPLACE]^static final  boolean  OBJECT_PROPERTY_STRING = "goog.testing.ObjectProperty boolean ";^41^42^^^^41^42^[REPLACE] static final String OBJECT_PROPERTY_STRING = "goog.testing.ObjectPropertyString";^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^public static final String EXTERN_OBJECT_PROPERTY_STRING  = null ;^44^45^^^^44^45^[REPLACE] public static final String EXTERN_OBJECT_PROPERTY_STRING = "JSCompiler_ObjectPropertyString";^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^static  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^47^48^49^50^^47^50^[REPLACE] static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR  = null ;^52^53^54^55^^52^55^[REPLACE] static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR  = null ;^57^58^59^60^^57^60^[REPLACE] static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^private  AbstractCompiler compiler;^62^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ObjectPropertyStringPreprocess Callback  
[REPLACE]^this.compiler =  null;^65^^^^^64^66^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR 
[ADD]^^65^^^^^64^66^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR 
[REPLACE]^externs .getChildCount (  )   ) ;^69^70^71^^^68^73^[REPLACE] externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node externs  root 
[REPLACE]^Node.replaceChild ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^[REPLACE] Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )  != Token.NEW )  { return;^72^^^^^68^73^[REPLACE] NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node externs  root 
[REPLACE]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^76^133^[REPLACE] if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newName = Node.replaceChild ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^78^79^^^^76^133^[REPLACE] Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( secondArgument.getType (  )   ==  Token.NEW )  {^89^^^^^76^133^[REPLACE] if  ( n.getType (  )  != Token.NEW )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node objectName = secondArgument.getFirstChild (  ) ;^93^^^^^76^133^[REPLACE] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.isQualifiedName (  )  )  )  {^95^96^^^^76^133^[REPLACE] if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( n.getChildCount (  )   ==  3 )  {^100^^^^^76^133^[REPLACE] if  ( n.getChildCount (  )  != 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^100^101^102^103^104^76^133^[ADD] if  ( n.getChildCount (  )  != 3 )  { compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ; return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node firstArgument = newSecondArgument.getNext (  ) ;^106^^^^^76^133^[REPLACE] Node firstArgument = objectName.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( !firstArgument.newString (  )  )  {^107^^^^^76^133^[REPLACE] if  ( !firstArgument.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node secondArgument = parent .getLineno (  )  ;^114^^^^^76^133^[REPLACE] Node secondArgument = firstArgument.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( secondArgument.newString (  )   ==  Token.STRING )  {^115^^^^^76^133^[REPLACE] if  ( secondArgument.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^76^133^[REPLACE] Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument .isQualifiedName (  )    ^  "."  ^  firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^76^133^[REPLACE] Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^129^^^^^76^133^[REPLACE] n.replaceChild ( firstArgument, newFirstArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^130^^^^^76^133^[REPLACE] n.replaceChild ( secondArgument, newSecondArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^compiler .report (  )  ;^132^^^^^76^133^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ObjectPropertyStringPreprocess Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^76^133^[REPLACE] if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^77^78^79^80^81^76^133^[ADD] if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  { Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ; newName.copyInformationFrom ( n ) ; parent.replaceChild ( n, newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newName = Node .getFirstChild (  )  ;^78^79^^^^76^133^[REPLACE] Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newName = Node.replaceChild ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^78^79^^^^76^133^[REPLACE] Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( n.getType (  )   ==  Token.NEW )  {^89^^^^^76^133^[REPLACE] if  ( n.getType (  )  != Token.NEW )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node objectName = secondArgument.getFirstChild (  ) ;^93^^^^^76^133^[REPLACE] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^93^^^^^76^133^[ADD] Node objectName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^95^96^^^^76^133^[REPLACE] if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( n.getChildCount (  )   ==  3 )  {^100^^^^^76^133^[REPLACE] if  ( n.getChildCount (  )  != 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node firstArgument = secondArgument.getNext (  ) ;^106^^^^^76^133^[REPLACE] Node firstArgument = objectName.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( firstArgument.isQualifiedName (  )  )  {^107^^^^^76^133^[REPLACE] if  ( !firstArgument.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^107^108^109^110^111^76^133^[ADD] if  ( !firstArgument.isQualifiedName (  )  )  { compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node secondArgument = secondArgument.getLineno (  ) ;^114^^^^^76^133^[REPLACE] Node secondArgument = firstArgument.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^if  ( secondArgument.getType (  )   ==  Token.STRING )  {^115^^^^^76^133^[REPLACE] if  ( secondArgument.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REMOVE]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^115^^^^^76^133^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , objectName.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^76^133^[REPLACE] Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^122^123^124^125^126^76^133^[ADD] Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ; Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." +^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   >  "."  >  firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^76^133^[REPLACE] Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[ADD]^^125^126^127^128^129^76^133^[ADD] Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ; n.replaceChild ( firstArgument, newFirstArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^129^^^^^76^133^[REPLACE] n.replaceChild ( firstArgument, newFirstArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^130^^^^^76^133^[REPLACE] n.replaceChild ( secondArgument, newSecondArgument ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REPLACE]^compiler.report (  ) ;^132^^^^^76^133^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
[REMOVE]^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^132^^^^^76^133^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument 
