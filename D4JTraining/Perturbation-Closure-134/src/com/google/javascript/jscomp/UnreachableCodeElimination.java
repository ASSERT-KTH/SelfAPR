[REPLACE]^private static final Logger logger  = null ;^47^48^^^^47^48^[REPLACE] private static final Logger logger = Logger.getLogger ( UnreachableCodeElimination.class.getName (  )  ) ;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^Deque<ControlFlowGraph<Node>> cfgStack  = null ;^53^54^^^^53^54^[REPLACE] Deque<ControlFlowGraph<Node>> cfgStack = new LinkedList<ControlFlowGraph<Node>> (  ) ;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^ControlFlowGraph<Node> curCfg = this;^56^^^^^^^[REPLACE] ControlFlowGraph<Node> curCfg = null;^ [CLASS] UnreachableCodeElimination  
[REPLACE]^if  ( parent != this )  {^90^^^^^89^118^[REPLACE] if  ( parent == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^return;  ;^91^^^^^89^118^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( n .getNext (  )   == Token.FUNCTION && n^93^^^^^89^118^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION || n.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^return;  ;^94^^^^^89^118^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  (   Token.TRY )  {^97^^^^^89^118^[REPLACE] if  ( n.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock != null || !finallyBlock.hasChildren (  )  )  )  {^102^103^^^^89^118^[REPLACE] if  ( !catchOrFinallyBlock.hasChildren (  )  && ( finallyBlock == null || !finallyBlock.hasChildren (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^n =  null;^107^^^^^102^108^[REPLACE] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^107^^^^^89^118^[ADD] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node body = parent.getFirstChild (  ) ;^98^^^^^89^118^[REPLACE] Node body = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node finallyBlock = catchOrFinallyBlock.getNext (  )  ;^99^^^^^89^118^[REPLACE] Node catchOrFinallyBlock = body.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node catchOrFinallyBlock = body.getNext (  )  ;^100^^^^^89^118^[REPLACE] Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^n =  finallyBlock;^107^^^^^89^118^[REPLACE] n = body;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^99^^^^^89^118^[ADD] Node catchOrFinallyBlock = body.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^Node finallyBlock = n.getType (  ) ;^100^^^^^89^118^[REPLACE] Node finallyBlock = catchOrFinallyBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^GraphNode<Node, Branch> gNode = curCfg.getNode ( parent ) ;^110^^^^^89^118^[REPLACE] GraphNode<Node, Branch> gNode = curCfg.getNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( gNode != this  )  {^111^^^^^89^118^[REPLACE] if  ( gNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^111^112^113^^^89^118^[ADD] if  ( gNode == null )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^return;  ;^112^^^^^89^118^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE ) {^114^115^^^^89^118^[REPLACE] if  ( gNode.getAnnotation (  )  != GraphReachability.REACHABLE || ( removeNoOpStatements && !NodeUtil.mayHaveSideEffects ( n )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^removeDeadExprStatementSafely ( n, finallyBlock ) ;^116^^^^^114^117^[REPLACE] removeDeadExprStatementSafely ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[ADD]^^116^^^^^114^117^[ADD] removeDeadExprStatementSafely ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node body  catchOrFinallyBlock  finallyBlock  n  parent  [TYPE]  GraphNode gNode  [TYPE]  Logger logger  [TYPE]  Deque cfgStack 
[REPLACE]^if  ( parent.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && n.hasChildren (  )  )  )  {^121^122^^^^120^143^[REPLACE] if  ( n.getType (  )  == Token.EMPTY || ( n.getType (  )  == Token.BLOCK && !n.hasChildren (  )  )  )  {^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^124^^^^^121^125^[REPLACE] return;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^124^^^^^120^143^[REPLACE] return;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^134^^^^^120^143^[REPLACE] return;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^NodeUtil.redeclareVarsInsideBranch ( parent ) ;^137^^^^^120^143^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( n ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^removeChild ( parent, n )  ;^138^^^^^120^143^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[ADD]^^138^^^^^120^143^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^if   (  n.getType  (    )   == Token.EMPTY ||  (  n.getType  (    )   == Token.BLOCK && !n.hasChildren  (    )    )    )   {  ;^139^^^^^120^143^[REPLACE] if  ( logger.isLoggable ( Level.FINE )  )  {^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^isLoggable ( FINE )  ;^140^^^^^120^143^[REPLACE] logger.fine ( "Removing " + n.toString (  )  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^logger.fine ( "Removing " + parent.toString (  )  ) ;^140^^^^^120^143^[REPLACE] logger.fine ( "Removing " + n.toString (  )  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[ADD]^^140^^^^^120^143^[ADD] logger.fine ( "Removing " + n.toString (  )  ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
[REPLACE]^redeclareVarsInsideBranch ( n )  ;^142^^^^^120^143^[REPLACE] NodeUtil.removeChild ( parent, n ) ;^[METHOD] removeDeadExprStatementSafely [TYPE] void [PARAMETER] Node n Node parent [CLASS] UnreachableCodeElimination   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  removeNoOpStatements  true  [TYPE]  Logger logger  [TYPE]  Deque cfgStack  [TYPE]  ControlFlowGraph curCfg  [TYPE]  Node n  parent 
