[REPLACE]^static  DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^46^47^48^49^^46^49^[REPLACE] static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^static  DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^51^52^53^54^^51^54^[REPLACE] static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^56^57^58^59^^56^60^[REPLACE] static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^static final DiagnosticType SCOPE_MISMATCH  = null ;^62^63^64^65^^62^66^[REPLACE] static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private  AbstractCompiler compiler;^68^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private boolean locked  = null ;^73^^^^^^^[REPLACE] private boolean locked = false;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private MemoizedData cache ;^77^^^^^^^[REPLACE] private MemoizedData cache = null;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private Map<Node, Scope> scopes ;^140^^^^^^^[REPLACE] private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private final List<Scope> expectedScopes  = null ;^163^^^^^^^[REPLACE] private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private  List<Scope> actualScopes = Lists.newArrayList (  ) ;^164^^^^^^^[REPLACE] private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private boolean collectingExpected  = null ;^165^^^^^^^[REPLACE] private boolean collectingExpected = true;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^collectingExpected = false;^207^^^^^206^257^[REPLACE] collectingExpected = true;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^NodeTraversal .traverse ( actualRoot )  ;^208^^^^^206^257^[REPLACE] NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^make ( MISSING_VARIABLE, var.getName (  )  )  ;^208^^^^^206^257^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^collectingExpected = true;^210^^^^^206^257^[REPLACE] collectingExpected = false;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.length (  )  == actualScopes.length (  )  ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^215^^^^^206^257^[ADD] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScopes.get ( i )  ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.get (  )  == actualScopes.size (  )  ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^257^[REPLACE] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^[REPLACE] compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^223^224^225^^^221^229^[ADD] compiler.report ( JSError.make ( SCOPE_MISMATCH,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScope.getRootNode (  ) .toStringTree (  )  ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScope.getRootNode (  )  ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^actualScopes.add ( t.getScope (  )  )  ;^227^^^^^221^229^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( expectedScope.getVarCount (  )   ==  actualScope.getVarCount (  )  )  {^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNodeNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^252^^^^^246^253^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^245^^^^^242^253^[ADD] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^}^246^247^248^249^^231^255^[ADD] else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = this .hasNext (  )  ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) ,^232^233^234^235^^206^257^[REPLACE] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^232^233^234^^^206^257^[ADD] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVars (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^233^234^235^^^206^257^[ADD] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^( expectedScope.getVarCount (  )  )  ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^actualScopes.add ( t.getScope (  )  )  ;^236^^^^^206^257^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null ) {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^242^243^244^245^246^206^257^[ADD] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ; } else if  (^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^make ( MISSING_VARIABLE, var.getName (  )  )  ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^}^246^247^248^249^^206^257^[ADD] else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope expectedScope = expectedScopes .put ( expectedRoot )  ;^218^^^^^206^257^[REPLACE] Scope expectedScope = expectedScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^219^^^^^206^257^[ADD] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^206^257^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = true.next (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^private Map<Node, Scope> scopes  = null ;^140^^^^^^^[REPLACE] private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] MemoizedData   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^private final List<Scope> expectedScopes  = null ;^163^^^^^^^[REPLACE] private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private final List<Scope> actualScopes  = null ;^164^^^^^^^[REPLACE] private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private boolean collectingExpected ;^165^^^^^^^[REPLACE] private boolean collectingExpected = true;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private  Node actualRoot;^166^^^^^^^[REPLACE] private final Node actualRoot;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private  Node expectedRoot;^167^^^^^^^[REPLACE] private final Node expectedRoot;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[ADD]^^207^208^^^^206^257^[ADD] collectingExpected = true; NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^NodeTraversal .traverse ( parent )  ;^208^^^^^206^257^[REPLACE] NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^collectingExpected = true;^210^^^^^206^257^[REPLACE] collectingExpected = false;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^211^212^^^^206^257^[ADD] ( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.length (  )  == actualScopes.length (  )  ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^expectedScopes.get ( i )  ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^actualScopes.get ( i )  ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^257^[REPLACE] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^[REPLACE] compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^226^227^^^^221^229^[ADD] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^actualScope.getVarCount (  ) .toStringTree (  )  )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( expectedScope.getVarCount (  )   ==  actualScope.getVarCount (  )  )  {^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^231^232^233^234^235^206^257^[ADD] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  { compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != this || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REMOVE]^if  (  ( ! ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  )  )  ||  ( ! ( isNodeAttached ( actualVar.getNameNode (  )  )  )  )  )  {     compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  ) ; }^242^^^^^231^255^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^}^246^247^248^249^^231^255^[ADD] else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^251^252^^^^246^253^[ADD] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^make ( MISSING_VARIABLE, var.getName (  )  )  ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REMOVE]^( isNodeAttached ( actualVar.getNameNode (  )  )  )  ;^252^^^^^246^253^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^252^^^^^246^253^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^var.getNameNode (  )  ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^238^^^^^231^255^[ADD] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = null.next (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = expectedScope .getVars (  )  ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVars (  )  ) ,^232^233^234^235^^206^257^[REPLACE] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope.getVars (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVars (  )  )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  )  ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes.get ( i )  ;^218^^^^^206^257^[REPLACE] Scope expectedScope = expectedScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope expectedScope = expectedScopes.get ( i )  ;^219^^^^^206^257^[REPLACE] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^206^257^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = null .hasNext (  )  ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes.get ( i )  ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
