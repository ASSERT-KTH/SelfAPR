[REPLACE]^static final DiagnosticType MISSING_VARIABLE  = null ;^46^47^48^49^^46^49^[REPLACE] static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^static final DiagnosticType MOVED_VARIABLE ;^51^52^53^54^^51^54^[REPLACE] static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^static final DiagnosticType VARIABLE_COUNT_MISMATCH  = null ;^56^57^58^59^^56^60^[REPLACE] static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^static  DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^62^63^64^65^^62^66^[REPLACE] static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private boolean locked ;^73^^^^^^^[REPLACE] private boolean locked = false;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private MemoizedData cache ;^77^^^^^^^[REPLACE] private MemoizedData cache = null;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private Map<Node, Scope> scopes ;^140^^^^^^^[REPLACE] private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private final List<Scope> expectedScopes ;^163^^^^^^^[REPLACE] private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private final List<Scope> actualScopes  = null ;^164^^^^^^^[REPLACE] private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private boolean collectingExpected ;^165^^^^^^^[REPLACE] private boolean collectingExpected = true;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^private  Node expectedRoot;^167^^^^^^^[REPLACE] private final Node expectedRoot;^ [CLASS] SymbolTable MemoizedData VerifyingCallback  
[REPLACE]^this.compiler =  null;^80^^^^^79^84^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^compiler.addChangeHandler ( this ) ;^80^81^^^^79^84^[ADD] this.compiler = compiler; compiler.addChangeHandler ( this ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^actualScopes.add ( t.getScope (  )  ) ;^81^^^^^79^84^[REPLACE] compiler.addChangeHandler ( this ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^scopeCreator =  new SyntacticScopeCreator ( null ) ;^83^^^^^79^84^[REPLACE] scopeCreator = new SyntacticScopeCreator ( compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^83^^^^^79^84^[ADD] scopeCreator = new SyntacticScopeCreator ( compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^this.actualRoot =  expectedRoot;^170^^^^^169^172^[REPLACE] this.actualRoot = actualRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^170^^^^^169^172^[ADD] this.actualRoot = actualRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^this.expectedRoot =  null;^171^^^^^169^172^[REPLACE] this.expectedRoot = expectedRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^87^^^^^86^89^[REPLACE] Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[METHOD] acquire [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^locked = false; ;^88^^^^^86^89^[REPLACE] locked = true;^[METHOD] acquire [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^88^^^^^86^89^[ADD] locked = true;^[METHOD] acquire [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^92^^^^^91^94^[REPLACE] Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[METHOD] release [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^locked = true;^93^^^^^91^94^[REPLACE] locked = false;^[METHOD] release [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^93^^^^^91^94^[ADD] locked = false;^[METHOD] release [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK  <=  n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^[REPLACE] Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^102^103^104^^^100^113^[ADD] Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION,^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^( n .getParent (  )   == Token.BLOCK && n.getParent (  )  == null )  || n^103^104^105^^^100^113^[REPLACE] ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^103^104^105^^^100^113^[ADD] ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^( n.getType (  )  == Token.BLOCK && n.isEquivalentTo (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^[REPLACE] ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^n.isEquivalentTo (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^104^105^^^^100^113^[REPLACE] n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^104^105^^^^100^113^[ADD] n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Var var = it.next (  ) ;^106^^^^^100^113^[REPLACE] ensureCacheInitialized (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( cache.scopes.containsKey ( n )  )  {^108^^^^^100^113^[REPLACE] if  ( !cache.scopes.containsKey ( n )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^108^109^110^^^100^113^[ADD] if  ( !cache.scopes.containsKey ( n )  )  { cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ; }^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^cache.scopes.put ( n, scopeCreator .ensureCacheInitialized (  )   ) ;^109^^^^^100^113^[REPLACE] cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return cache.scopes.put ( n ) ;^112^^^^^100^113^[REPLACE] return cache.scopes.get ( n ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope parent  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Preconditions .checkState (  )  ;^119^^^^^118^123^[REPLACE] Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[METHOD] ensureCacheInitialized [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( cache != true )  {^120^^^^^118^123^[REPLACE] if  ( cache == null )  {^[METHOD] ensureCacheInitialized [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^120^121^122^^^118^123^[ADD] if  ( cache == null )  { cache = new MemoizedData (  ) ; }^[METHOD] ensureCacheInitialized [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^cache ;^121^^^^^118^123^[REPLACE] cache = new MemoizedData (  ) ;^[METHOD] ensureCacheInitialized [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^cache  = null ;^121^^^^^118^123^[REPLACE] cache = new MemoizedData (  ) ;^[METHOD] ensureCacheInitialized [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( locked )  {^131^^^^^130^134^[REPLACE] if  ( !locked )  {^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^cache = null;^131^132^133^^^130^134^[ADD] if  ( !locked )  { cache = null; }^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^cache = true;^132^^^^^130^134^[REPLACE] cache = null;^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^cache = false;^132^^^^^130^134^[REPLACE] cache = null;^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^callback.verifyScopes (  ) ;^155^^^^^152^156^[REPLACE] callback.verify (  ) ;^[METHOD] verify [TYPE] void [PARAMETER] Node expectedRoot Node actualRoot [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  VerifyingCallback callback 
[REPLACE]^return false;^177^^^^^175^178^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( current.getType (  )  == Token.SCRIPT )  {^188^^^^^187^193^[REPLACE] if  ( collectingExpected )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^actualScopes.add ( t .traverse ( compiler , expectedRoot , null )   ) ;^191^^^^^187^193^[REPLACE] actualScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^191^^^^^187^193^[REPLACE] actualScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^expectedScopes.get ( t.getScope (  )  ) ;^189^^^^^187^193^[REPLACE] expectedScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^189^^^^^187^193^[REPLACE] expectedScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( cache != null )  {^196^^^^^195^204^[REPLACE] if  ( cache == null )  {^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return false;^198^^^^^195^204^[REPLACE] return;^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( !cache.scopes .get ( expectedRoot )   )  {^201^^^^^195^204^[REPLACE] if  ( !cache.scopes.isEmpty (  )  )  {^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^verifyScopes (  ) ;^201^202^203^^^195^204^[ADD] if  ( !cache.scopes.isEmpty (  )  )  { verifyScopes (  ) ; }^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^collectingExpected = false; ;^207^^^^^206^257^[REPLACE] collectingExpected = true;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^NodeTraversal .traverse ( n )  ;^208^^^^^206^257^[REPLACE] NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^collectingExpected = true;^210^^^^^206^257^[REPLACE] collectingExpected = false;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^( new NodeTraversal ( compiler, this, SymbolTable.this )  )  .traverse ( parent )  ;^211^212^^^^206^257^[REPLACE] ( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.size (  )  /  2 == actualScopes.size (  )  /  2 ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.get (  )  == actualScopes.size (  )  ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^242^243^244^245^246^206^257^[ADD] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ; } else if  (^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^245^^^^^242^253^[ADD] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = true.next (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^240^^^^^206^257^[ADD] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^241^^^^^206^257^[ADD] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( !checkNodesMatch ( expectedScope.getVarCount (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^257^[REPLACE] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^[REPLACE] compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^226^227^^^^221^229^[ADD] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^actualScope.getVarCount (  ) .toStringTree (  )  )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( expectedScope.getVarCount (  )   ==  actualScope.getVarCount (  )  )  {^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  (  actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^242^243^244^245^246^231^255^[ADD] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ; } else if  (^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^251^252^^^^231^255^[ADD] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^251^252^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^252^^^^^231^255^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = it.hasNext (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != false ) {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^252^^^^^231^255^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var.getNameNode (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getNameNode (  )  )  ) ;^251^252^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = expectedScope.getVar (  ) ;^238^^^^^231^255^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = 0.next (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^240^241^^^^231^255^[ADD] Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope .getVars (  )  ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.addChangeHandler ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^206^257^[REPLACE] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVars (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVars (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope .getVars (  )   )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^236^^^^^206^257^[ADD] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^251^252^^^^246^253^[ADD] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var.getNameNode (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^252^^^^^246^253^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < expectedScopes.size (  )  - 1; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != true || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^244^245^^^^242^253^[ADD] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^245^^^^^242^253^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^252^^^^^246^253^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = this.hasNext (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^257^[REPLACE] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^221^222^223^224^225^206^257^[ADD] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  { compiler.report ( JSError.make ( SCOPE_MISMATCH,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( expectedScope.getVarCount (  )   ==  expectedScope.getVarCount (  )  )  {^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != true ) {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^245^^^^^231^255^[ADD] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = true.hasNext (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null ) {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^245^^^^^231^255^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = this.next (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^241^^^^^231^255^[ADD] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVars (  )  ) ,^232^233^234^235^^206^257^[REPLACE] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH,   expectedScope.getVarCount (  )  , Integer.^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^actualScope.getVarCount (  )   )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes.get ( i ) ;^218^^^^^206^257^[REPLACE] Scope expectedScope = expectedScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes .put ( actualRoot )  ;^219^^^^^206^257^[REPLACE] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^219^^^^^206^257^[ADD] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^206^257^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = this.next (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^^217^218^219^^221^206^257^[ADD] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  { Scope expectedScope = expectedScopes.get ( i ) ; Scope actualScope = actualScopes.get ( i ) ; if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope expectedScope = expectedScopes .put ( expectedRoot )  ;^218^^^^^206^257^[REPLACE] Scope expectedScope = expectedScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[ADD]^Scope actualScope = actualScopes.get ( i ) ;^218^219^^^^206^257^[ADD] Scope expectedScope = expectedScopes.get ( i ) ; Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes .put ( n )  ;^219^^^^^206^257^[REPLACE] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Var var = false.next (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^actualVar.getName (  )  ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes  [TYPE]  int i 
[REPLACE]^Node currentA = parent;^263^^^^^262^276^[REPLACE] Node currentA = nodeA;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^263^264^^^^262^276^[ADD] Node currentA = nodeA; Node currentB = nodeB;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^Node currentB = nodeA;^264^^^^^262^276^[REPLACE] Node currentB = nodeB;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^while  ( currentA != null ;^265^^^^^262^276^[REPLACE] while  ( currentA != null && currentB != null )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^[REPLACE] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^266^267^268^269^^262^276^[ADD] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return true;^268^^^^^262^276^[REPLACE] return false;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^currentB = currentB.getParent (  ) ; ;^271^^^^^262^276^[REPLACE] currentA = currentA.getParent (  ) ;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^currentA = currentA.getParent (  ) ; ;^272^^^^^262^276^[REPLACE] currentB = currentB.getParent (  ) ;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( currentA.isEquivalentTo (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^[REPLACE] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return   currentB ;^275^^^^^262^276^[REPLACE] return currentA == null && currentB == null;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( current.getType (  )   ||  Token.SCRIPT )  {^282^^^^^278^287^[REPLACE] if  ( current.getType (  )  == Token.SCRIPT )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return false;^283^^^^^278^287^[REPLACE] return true;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^for  ( NodenodeA = node;^280^^^^^278^287^[REPLACE] for  ( Node current = node;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[ADD]^^280^281^282^283^284^278^287^[ADD] for  ( Node current = node; current != null; current = current.getParent (  )  )  { if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^if  ( current.getType (  )   !=  Token.SCRIPT )  {^282^^^^^278^287^[REPLACE] if  ( current.getType (  )  == Token.SCRIPT )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REMOVE]^if  (  (  ( currentA.getType (  )  )  !=  ( currentB.getType (  )  )  )  ||  ( ! ( currentA.isEquivalentTo ( currentB )  )  )  )  {     return false; }^282^^^^^278^287^[REMOVE] ^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^current !=  null; parent^281^^^^^278^287^[REPLACE] current != null; current = current.getParent (  )  )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^for  ( Node current = parent;^280^^^^^278^287^[REPLACE] for  ( Node current = node;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] SymbolTable MemoizedData VerifyingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^private Map<Node, Scope> scopes ;^140^^^^^^^[REPLACE] private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] MemoizedData   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collectingExpected  false  locked  true  [TYPE]  DiagnosticType MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List actualScopes  expectedScopes  [TYPE]  MemoizedData cache  [TYPE]  Map scopes 
[REPLACE]^private final List<Scope> expectedScopes  = null ;^163^^^^^^^[REPLACE] private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private final List<Scope> actualScopes  = null ;^164^^^^^^^[REPLACE] private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^private boolean collectingExpected ;^165^^^^^^^[REPLACE] private boolean collectingExpected = true;^[METHOD] <init> [TYPE] SymbolTable$MemoizedData() [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^this.actualRoot =  null;^170^^^^^169^172^[REPLACE] this.actualRoot = actualRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot 
[ADD]^^170^171^^^^169^172^[ADD] this.actualRoot = actualRoot; this.expectedRoot = expectedRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot 
[REPLACE]^this.expectedRoot =  actualRoot;^171^^^^^169^172^[REPLACE] this.expectedRoot = expectedRoot;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node expectedRoot Node actualRoot [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot 
[REPLACE]^return false;^177^^^^^175^178^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^if  ( current.getType (  )  == Token.SCRIPT )  {^188^^^^^187^193^[REPLACE] if  ( collectingExpected )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^actualScopes.get ( t.getScope (  )  ) ;^191^^^^^187^193^[REPLACE] actualScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^191^^^^^187^193^[REPLACE] actualScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[ADD]^^191^^^^^187^193^[ADD] actualScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^189^^^^^187^193^[REPLACE] expectedScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[ADD]^^189^^^^^187^193^[ADD] expectedScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^expectedScopes.add ( t .traverse ( false , parent , null )   ) ;^189^^^^^187^193^[REPLACE] expectedScopes.add ( t.getScope (  )  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  NodeTraversal t  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^if  ( cache != this  )  {^196^^^^^195^204^[REPLACE] if  ( cache == null )  {^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^return false;^198^^^^^195^204^[REPLACE] return;^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^if  ( cache.scopes.isEmpty (  )  )  {^201^^^^^195^204^[REPLACE] if  ( !cache.scopes.isEmpty (  )  )  {^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[ADD]^^202^203^^^^195^204^[ADD] verifyScopes (  ) ; }^[METHOD] verify [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  expectedRoot  n  parent 
[REPLACE]^collectingExpected = false;^207^^^^^206^257^[REPLACE] collectingExpected = true;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^207^208^^^^206^257^[ADD] collectingExpected = true; NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^NodeTraversal .traverse ( parent )  ;^208^^^^^206^257^[REPLACE] NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^collectingExpected = true;^210^^^^^206^257^[REPLACE] collectingExpected = false;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^( new NodeTraversal ( compiler, this, SymbolTable.this )  )  .traverse ( expectedRoot )  ;^211^212^^^^206^257^[REPLACE] ( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.size (  )  + 3 == actualScopes.size (  )  + 3 ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Preconditions.checkState ( expectedScopes.get (  )  == actualScopes.size (  )  ) ;^215^^^^^206^257^[REPLACE] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^215^^^^^206^257^[ADD] Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^239^240^^^^206^257^[ADD] while  ( it.hasNext (  )  )  { Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != true || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^252^^^^^246^253^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = this.next (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^257^[REPLACE] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^221^222^223^224^225^206^257^[ADD] if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  { compiler.report ( JSError.make ( SCOPE_MISMATCH,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^221^229^[REPLACE] compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^224^225^226^^^221^229^[ADD] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^221^229^[REPLACE] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^actualScope.getVarCount (  ) .toStringTree (  )  )  ) ;^227^^^^^221^229^[REPLACE] actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( expected       ==  actualScope.^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^242^243^244^245^246^231^255^[ADD] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ; } else if  (^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^252^^^^^231^255^[ADD] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^} else if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = 1.next (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^241^^^^^231^255^[ADD] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != this || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^}^246^247^248^249^^231^255^[ADD] else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^251^252^^^^231^255^[ADD] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = expectedScope.getVar (  ) ;^238^^^^^231^255^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^238^^^^^231^255^[ADD] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = 0.next (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH,   expectedScope.getVarCount (  )  ,^232^233^234^235^^206^257^[REPLACE] compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH,   expectedScope.getVarCount (  )  , Integer.^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^206^257^[REPLACE] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null ) {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^}  if  ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^206^257^[REPLACE] } else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getNameNode (  )  )  ) ;^251^252^^^^246^253^[REPLACE] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, var.getNameNode (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < expectedScopes.length (  ) ; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^while  ( true.hasNext (  )  )  {^239^^^^^206^257^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^244^245^^^^242^253^[ADD] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^245^^^^^242^253^[ADD] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^252^^^^^246^253^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = null.hasNext (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^240^241^^^^206^257^[ADD] Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getNameNode (  )  ) ;^241^^^^^206^257^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^[REPLACE] compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( SCOPE_MISMATCH, expectedScope.getVarCount (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^[REPLACE] JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^226^227^^^^221^229^[ADD] expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( expectedScope.getVarCount (  )   ==  expectedScope.getVarCount (  )  )  {^231^^^^^206^257^[REPLACE] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^231^232^233^234^235^206^257^[ADD] if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  { compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, actualVar.getNameNode (  )  )  ) ;^252^^^^^231^255^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = 1 .hasNext (  )  ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != true ) {^242^243^^^^231^255^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, var.getNameNode (  )  )  ) ;^245^^^^^231^255^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^245^^^^^231^255^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = it.hasNext (  ) ;^240^^^^^231^255^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getNameNode (  )  ) ;^241^^^^^231^255^[REPLACE] Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^233^234^235^236^^206^257^[REPLACE] JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^235^236^^^^206^257^[ADD] Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^actualScope.getVarCount (  )   )  ) ;^236^^^^^206^257^[REPLACE] Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^206^257^[REPLACE] if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MOVED_VARIABLE, var.getNameNode (  )  )  ) ;^252^^^^^246^253^[REPLACE] JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^244^245^^^^242^253^[REPLACE] compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^JSError.make ( MISSING_VARIABLE, actualVar.getNameNode (  )  )  ) ;^245^^^^^242^253^[REPLACE] JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REMOVE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^245^^^^^242^253^[REMOVE] ^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^251^252^^^^246^253^[ADD] compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope actualScope = actualScopes.get ( i ) ;^218^^^^^206^257^[REPLACE] Scope expectedScope = expectedScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^219^^^^^206^257^[REPLACE] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^206^257^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Var var = it.hasNext (  ) ;^240^^^^^206^257^[REPLACE] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^240^^^^^206^257^[ADD] Var var = it.next (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^206^257^[REPLACE] for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[ADD]^^219^^^^^206^257^[ADD] Scope actualScope = actualScopes.get ( i ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Iterator<Var> it = actualScope.getVar (  ) ;^238^^^^^206^257^[REPLACE] Iterator<Var> it = expectedScope.getVars (  ) ;^[METHOD] verifyScopes [TYPE] void [PARAMETER] [CLASS] VerifyingCallback   [TYPE]  boolean collectingExpected  false  true  [TYPE]  Scope actualScope  expectedScope  [TYPE]  Var actualVar  var  [TYPE]  Node actualRoot  expectedRoot  n  parent  [TYPE]  Iterator it  [TYPE]  List actualScopes  expectedScopes  [TYPE]  int i 
[REPLACE]^Node currentB = nodeB;^263^^^^^262^276^[REPLACE] Node currentA = nodeA;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[ADD]^^263^^^^^262^276^[ADD] Node currentA = nodeA;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^Node currentB = parent;^264^^^^^262^276^[REPLACE] Node currentB = nodeB;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[ADD]^^264^^^^^262^276^[ADD] Node currentB = nodeB;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^while  ( parent != this ;^265^^^^^262^276^[REPLACE] while  ( currentA != null && currentB != null )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^if  ( parent.getType (  )  != currentB.getType (  )  ) {^266^267^^^^262^276^[REPLACE] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[ADD]^^266^267^268^269^^262^276^[ADD] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^return true;^268^^^^^262^276^[REPLACE] return false;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^currentB = currentB.getParent (  ) ; ;^271^^^^^262^276^[REPLACE] currentA = currentA.getParent (  ) ;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^currentA = currentA.getParent (  ) ; ;^272^^^^^262^276^[REPLACE] currentB = currentB.getParent (  ) ;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^[REPLACE] if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^return false ;^275^^^^^262^276^[REPLACE] return currentA == null && currentB == null;^[METHOD] checkNodesMatch [TYPE] boolean [PARAMETER] Node nodeA Node nodeB [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent 
[REPLACE]^if  ( current.getType (  )   ||  Token.SCRIPT )  {^282^^^^^278^287^[REPLACE] if  ( current.getType (  )  == Token.SCRIPT )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[ADD]^return true;^282^283^284^^^278^287^[ADD] if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^return false;^283^^^^^278^287^[REPLACE] return true;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^for  ( Node nodeB = node;^280^^^^^278^287^[REPLACE] for  ( Node current = node;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^if  ( current.getType (  )   !=  Token.SCRIPT )  {^282^^^^^278^287^[REPLACE] if  ( current.getType (  )  == Token.SCRIPT )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^current !=  null; null^281^^^^^278^287^[REPLACE] current != null; current = current.getParent (  )  )  {^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^for  ( Node current = n;^280^^^^^278^287^[REPLACE] for  ( Node current = node;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[ADD]^^280^281^282^283^284^278^287^[ADD] for  ( Node current = node; current != null; current = current.getParent (  )  )  { if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] isNodeAttached [TYPE] boolean [PARAMETER] Node node [CLASS] VerifyingCallback   [TYPE]  List actualScopes  expectedScopes  [TYPE]  boolean collectingExpected  false  true  [TYPE]  Node actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent 
