[REPLACE]^private  Map<String, String> map;^36^^^^^^^[REPLACE] private final Map<String, String> map;^ [CLASS] VariableMap  
[REPLACE]^private Map<String, String> reverseMap ;^39^^^^^^^[REPLACE] private Map<String, String> reverseMap = null;^ [CLASS] VariableMap  
[REPLACE]^private static final char SEPARATOR ;^41^^^^^^^[REPLACE] private static final char SEPARATOR = ':';^ [CLASS] VariableMap  
[REPLACE]^reverseMap = Collections.unmodifiableMap ( rm ) ; ;^44^^^^^43^45^[REPLACE] this.map = Collections.unmodifiableMap ( map ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> map [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  [TYPE]  boolean false  true 
[ADD]^^44^45^^^^43^45^[ADD] this.map = Collections.unmodifiableMap ( map ) ; }^[METHOD] <init> [TYPE] Map) [PARAMETER] String> map [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  [TYPE]  boolean false  true 
[REPLACE]^return map;^52^^^^^51^53^[REPLACE] return map.get ( sourceName ) ;^[METHOD] lookupNewName [TYPE] String [PARAMETER] String sourceName [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap 
[REPLACE]^if  ( reverseMap != null )  {^60^^^^^59^64^[REPLACE] if  ( reverseMap == null )  {^[METHOD] lookupSourceName [TYPE] String [PARAMETER] String newName [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String newName  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap 
[REPLACE]^writer.write ( entry.getValue (  )  ) ;^61^^^^^59^64^[REPLACE] initReverseMap (  ) ;^[METHOD] lookupSourceName [TYPE] String [PARAMETER] String newName [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String newName  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap 
[ADD]^^61^^^^^59^64^[ADD] initReverseMap (  ) ;^[METHOD] lookupSourceName [TYPE] String [PARAMETER] String newName [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String newName  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap 
[REPLACE]^return reverse  newName   ;^63^^^^^59^64^[REPLACE] return reverseMap.get ( newName ) ;^[METHOD] lookupSourceName [TYPE] String [PARAMETER] String newName [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String newName  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap 
[REPLACE]^if  ( reverseMap != false )  {^70^^^^^69^77^[REPLACE] if  ( reverseMap == null )  {^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^this.map = Collections.unmodifiableMap ( map ) ; ;^75^^^^^69^77^[REPLACE] reverseMap = Collections.unmodifiableMap ( rm ) ;^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[ADD]^^75^76^^^^69^77^[ADD] reverseMap = Collections.unmodifiableMap ( rm ) ; }^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^Map<String, String> map = new HashMap<String, String> (  ) ;^71^^^^^69^77^[REPLACE] Map<String, String> rm = new HashMap<String, String> (  ) ;^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[ADD]^^71^^^^^69^77^[ADD] Map<String, String> rm = new HashMap<String, String> (  ) ;^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^for  ( Map.Entry<String, String> entry : map.entrySet (  )  )  { rm.put ( entry.getValue (  ) , entry.getKey (  )  ) ;^72^^^^^69^77^[REPLACE] for  ( Map.Entry<String, String> entry : map.entrySet (  )  )  {^[METHOD] initReverseMap [TYPE] void [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^return reverseMap.get ( newName ) ;^83^^^^^82^84^[REPLACE] return map;^[METHOD] getOriginalNameToNewNameMap [TYPE] Map [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  rm  [TYPE]  boolean false  true 
[REPLACE]^if  ( reverseMap != null )  {^90^^^^^89^94^[REPLACE] if  ( reverseMap == null )  {^[METHOD] getNewNameToOriginalNameMap [TYPE] Map [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  rm  [TYPE]  boolean false  true 
[REPLACE]^writer.write ( entry.getValue (  )  ) ;^91^^^^^89^94^[REPLACE] initReverseMap (  ) ;^[METHOD] getNewNameToOriginalNameMap [TYPE] Map [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  rm  [TYPE]  boolean false  true 
[REPLACE]^return map;^93^^^^^89^94^[REPLACE] return reverseMap;^[METHOD] getNewNameToOriginalNameMap [TYPE] Map [PARAMETER] [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  rm  [TYPE]  boolean false  true 
[REPLACE]^Files.toByteArray ( toBytes (  ) , new File ( filename )  ) ;^100^^^^^99^101^[REPLACE] Files.write ( toBytes (  ) , new File ( filename )  ) ;^[METHOD] save [TYPE] void [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[ADD]^^100^^^^^99^101^[ADD] Files.write ( toBytes (  ) , new File ( filename )  ) ;^[METHOD] save [TYPE] void [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^writer.write ( entry.getValue (  )  ) ;^100^^^^^99^101^[REPLACE] Files.write ( toBytes (  ) , new File ( filename )  ) ;^[METHOD] save [TYPE] void [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[ADD]^return fromBytes ( Files.toByteArray ( new File ( filename )  )  ) ;^107^108^109^^111^106^113^[ADD] try { return fromBytes ( Files.toByteArray ( new File ( filename )  )  ) ; } catch  ( ParseException e )  { throw new IOException  (" ")  ;^[METHOD] load [TYPE] VariableMap [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  ParseException e  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^return fromBytes ( Files .write ( null , 1 )   ) ;^108^^^^^106^113^[REPLACE] return fromBytes ( Files.toByteArray ( new File ( filename )  )  ) ;^[METHOD] load [TYPE] VariableMap [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  ParseException e  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^return reverseMap.get ( newName ) ;^108^^^^^106^113^[REPLACE] return fromBytes ( Files.toByteArray ( new File ( filename )  )  ) ;^[METHOD] load [TYPE] VariableMap [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  ParseException e  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^throw new ParseException  (" ")  ; ;^111^^^^^106^113^[REPLACE] throw new IOException  (" ")  ;^[METHOD] load [TYPE] VariableMap [PARAMETER] String filename [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  String filename  [TYPE]  ParseException e  [TYPE]  boolean false  true  [TYPE]  Map map  reverseMap  rm 
[REPLACE]^for  ( String line : lines )  { int pos = line.lastIndexOf ( SEPARATOR ) ;^119^^^^^118^135^[REPLACE] ByteArrayOutputStream baos = new ByteArrayOutputStream (  ) ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[REPLACE]^for  ( String line : lines )  { int pos = line.lastIndexOf ( SEPARATOR ) ;^120^^^^^118^135^[REPLACE] Writer writer = new OutputStreamWriter ( baos, Charsets.UTF_8 ) ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[ADD]^writer.write ( entry.getKey (  )  ) ;writer.write ( SEPARATOR ) ;writer.write ( entry.getValue (  )  ) ;^121^122^123^124^125^118^135^[ADD] try { for  ( Map.Entry<String, String> entry : map.entrySet (  )  )  { writer.write ( entry.getKey (  )  ) ; writer.write ( SEPARATOR ) ; writer.write ( entry.getValue (  )  ) ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[REPLACE]^for  ( Map.Entry<String, String> entry : map.entrySet (  )  )  { rm.put ( entry.getValue (  ) , entry.getKey (  )  ) ;^122^^^^^118^135^[REPLACE] for  ( Map.Entry<String, String> entry : map.entrySet (  )  )  {^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[REPLACE]^throw new ParseException  (" ")  ; ;^132^^^^^118^135^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[ADD]^^132^^^^^118^135^[ADD] throw new RuntimeException  (" ")  ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[ADD]^^129^130^131^^^118^135^[ADD] catch  ( IOException e )  {^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[REPLACE]^return baos.ByteArrayOutputStream (  ) ;^134^^^^^118^135^[REPLACE] return baos.toByteArray (  ) ;^[METHOD] toBytes [TYPE] byte[] [PARAMETER] [CLASS] VariableMap   [TYPE]  Entry entry  [TYPE]  boolean false  true  [TYPE]  char SEPARATOR  [TYPE]  ByteArrayOutputStream baos  [TYPE]  IOException e  [TYPE]  Map map  reverseMap  rm  [TYPE]  Writer writer 
[REPLACE]^for  ( String line : lines )  { int pos = line.lastIndexOf ( SEPARATOR ) ;^142^^^^^141^162^[REPLACE] Iterable<String> lines;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[ADD]^ByteStreams.newInputStreamSupplier ( bytes ) , Charsets.UTF_8 )  ) ;^143^144^145^146^147^141^162^[ADD] try { lines = CharStreams.readLines ( CharStreams.newReaderSupplier ( ByteStreams.newInputStreamSupplier ( bytes ) , Charsets.UTF_8 )  ) ; } catch  ( IOException e )  {^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^lines =  CharStreams.readLines ( CharStreams.newReaderSupplier ( ByteStreams.newInputStreamSupplier ( null ) , Charsets.UTF_8 )  ) ;^144^145^^^^141^162^[REPLACE] lines = CharStreams.readLines ( CharStreams.newReaderSupplier ( ByteStreams.newInputStreamSupplier ( bytes ) , Charsets.UTF_8 )  ) ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^return ;^149^^^^^141^162^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[ADD]^^146^147^148^^^141^162^[ADD] catch  ( IOException e )  {^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^Map<String, String> rm = new HashMap<String, String> (  ) ;^152^^^^^141^162^[REPLACE] Map<String, String> map = new HashMap<String, String> (  ) ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^if  ( pos <= 0 || pos == line.length (  )  /  0.5  - 1 )  {^156^^^^^141^162^[REPLACE] if  ( pos <= 0 || pos == line.length (  )  - 1 )  {^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^return ;^157^^^^^141^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[ADD]^^157^^^^^141^162^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^for  ( String line : lines )  { int pos = line.lastIndexOf ( SEPARATOR ) ;^154^^^^^141^162^[REPLACE] for  ( String line : lines )  {^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^int pos = line .length (  )  ;^155^^^^^141^162^[REPLACE] int pos = line.lastIndexOf ( SEPARATOR ) ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^return new VariableMap ( false ) ;^161^^^^^141^162^[REPLACE] return new VariableMap ( map ) ;^[METHOD] fromBytes [TYPE] VariableMap [PARAMETER] byte[] bytes [CLASS] VariableMap   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  Iterable lines  [TYPE]  char SEPARATOR  [TYPE]  IOException e  [TYPE]  String line  [TYPE]  Map map  reverseMap  rm  [TYPE]  int pos 
[REPLACE]^return new VariableMap (   map    ) ;^171^^^^^170^172^[REPLACE] return new VariableMap ( Maps.newHashMap ( map )  ) ;^[METHOD] fromMap [TYPE] VariableMap [PARAMETER] String> map [CLASS] VariableMap   [TYPE]  char SEPARATOR  [TYPE]  Map map  reverseMap  rm  [TYPE]  boolean false  true 
