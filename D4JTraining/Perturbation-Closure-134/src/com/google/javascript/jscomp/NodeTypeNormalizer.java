[REPLACE]^if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^69^^^^^68^84^[REPLACE] if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  ( key.getJSDocInfo (  )  != false && key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^[REPLACE] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value .getJSDocInfo (  )  ;^75^^^^^73^76^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value.setJSDocInfo ( key.setJSDocInfo (  )  ) ;^75^^^^^73^76^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^key !=  null; null^71^^^^^68^84^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node key = n.getType (  ) ;^70^^^^^68^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^Node value = key.getParent (  ) ;^72^^^^^68^84^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  (  key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^[REPLACE] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^73^74^75^76^^68^84^[ADD] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  { value.setJSDocInfo ( key.getJSDocInfo (  )  ) ; }^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value.setWasEmptyNode ( key.getJSDocInfo (  )  ) ;^75^^^^^73^76^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node key = n .replaceChild ( value , n )  ;^70^^^^^68^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^Node value = key .getParent (  )  ;^72^^^^^68^84^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^child !=  null; null^81^^^^^68^84^[REPLACE] child != null; child = child.getNext (  )  )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^80^81^82^83^^68^84^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { normalizeJsDocAnnotations ( child ) ; }^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if   (  c.getType  (    )   != Token.EMPTY  )   {  ;^90^^^^^89^111^[REPLACE] if  ( n.getType (  )  == Token.EXPR_VOID )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^n.setType ( Token.EXPR_RESULT ) ;reportChange (  ) ;^90^91^92^93^^89^111^[ADD] if  ( n.getType (  )  == Token.EXPR_VOID )  { n.setType ( Token.EXPR_RESULT ) ; reportChange (  ) ; }^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^n.setWasEmptyNode ( Token.EXPR_RESULT ) ;^91^^^^^89^111^[REPLACE] n.setType ( Token.EXPR_RESULT ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^checkState (  (  ( n.getProp ( Node.FUNCTION_PROP )  )  == null )  )  ;^92^^^^^89^111^[REPLACE] reportChange (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^^92^^^^^89^111^[ADD] reportChange (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^if   (  c.getType  (    )   != Token.EMPTY  )   {  ;^97^^^^^89^111^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^checkState (  (  ( child.getParent (  )  )  == n )  )  ;^98^^^^^89^111^[REPLACE] Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^Preconditions.checkState ( n.setWasEmptyNode ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^[REPLACE] Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^checkState (  (  ( n.getProp ( Node.FUNCTION_PROP )  )  == null )  )  ;^101^^^^^89^111^[REPLACE] normalizeBlocks ( n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^^101^^^^^89^111^[ADD] normalizeBlocks ( n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^child !=  null; null^104^^^^^89^111^[REPLACE] child != null; child = child.getNext (  )  )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^for  ( Node child = n .replaceChild ( n , child )  ;^103^^^^^89^111^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^if  ( NodeUtil.isControlStructure ( n ) || n.getType (  )  != Token.LABEL || n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  || newBlock.getType (  )  != Token.BLOCK )  {^121^122^^^^117^134^[REPLACE] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^121^122^123^124^^117^134^[ADD] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  { Node newBlock = new Node ( Token.BLOCK ) ; n.replaceChild ( c, newBlock ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.FUNCTION  )   {  ;^125^^^^^121^132^[REPLACE] if  ( c.getType (  )  != Token.EMPTY )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^c =  n;^130^^^^^121^132^[REPLACE] c = newBlock;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^Node key = n.getFirstChild (  )  ;^123^^^^^121^132^[REPLACE] Node newBlock = new Node ( Token.BLOCK ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if   (  n.getType  (    )   == Token.FUNCTION  )   {  ;^125^^^^^117^134^[REPLACE] if  ( c.getType (  )  != Token.EMPTY )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^newBlock.addChildrenToFront ( c ) ;newBlock.setWasEmptyNode ( true ) ;^125^126^127^128^129^117^134^[ADD] if  ( c.getType (  )  != Token.EMPTY )  { newBlock.addChildrenToFront ( c ) ; } else { newBlock.setWasEmptyNode ( true ) ; }^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock .setType (  )  ;^128^^^^^125^129^[REPLACE] newBlock.setWasEmptyNode ( true ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.setWasEmptyNode ( c ) ;^126^^^^^117^134^[REPLACE] newBlock.addChildrenToFront ( c ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; newBlock !^120^^^^^117^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^c =  n;^130^^^^^117^134^[REPLACE] c = newBlock;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = n.getType (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^117^134^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^Node key = n.getFirstChild (  )  ;^123^^^^^117^134^[REPLACE] Node newBlock = new Node ( Token.BLOCK ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  || c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( c.getType (  )   ==  Token.EMPTY )  {^125^^^^^116^135^[REPLACE] if  ( c.getType (  )  != Token.EMPTY )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.setWasEmptyNode ( false ) ;^128^^^^^125^129^[REPLACE] newBlock.setWasEmptyNode ( true ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.setWasEmptyNode ( c ) ;^126^^^^^116^135^[REPLACE] newBlock.addChildrenToFront ( c ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^child = child.getNext (  )  ;^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^c =  n;^130^^^^^116^135^[REPLACE] c = newBlock;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = newBlock .replaceChild ( n , c )  ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^Node key = n.getFirstChild (  )  ;^123^^^^^116^135^[REPLACE] Node newBlock = new Node ( Token.BLOCK ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
