[REPLACE]^if  ( functionName.length (  )  /  0.5  == 0 )  {^80^^^^^69^109^[REPLACE] if  ( functionName.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^81^^^^^69^109^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^81^82^^^^69^109^[ADD] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^} else if  (   Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( rhs ) ;^92^^^^^69^109^[REPLACE] String name = namer.getName ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = rhs.getString (  ) ;^86^^^^^69^109^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^87^^^^^69^109^[ADD] String name = namer.getName ( lhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  if  (   Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( lhs )  ;^92^^^^^69^109^[REPLACE] String name = namer.getName ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^86^^^^^69^109^[ADD] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^if  (   Token.ASSIGN )  {^81^^^^^69^109^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REMOVE]^if  ( type ==  ( FUNCTION )  )  {     Node functionNameNode = valueNode.getFirstChild (  ) ;     String functionName = functionNameNode.getString (  ) ;     if  ( functionName.isEmpty (  )  )  {         namer.setFunctionName ( name, valueNode ) ;     } }else     if  ( type ==  ( OBJECTLIT )  )  {         nameObjectLiteralMethods ( valueNode, name ) ;     }^81^^^^^69^109^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  if  ( parent .getString (  )    &&  Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^92^93^^^^69^109^[ADD] String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( parent )  ;^87^^^^^69^109^[REPLACE] String name = namer.getName ( lhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^if  ( rhs .getString (  )    &&  Token.OBJECTLIT )  {^105^^^^^69^109^[REPLACE] if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REMOVE]^if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {     String name = namer.getName ( parent ) ;     namer.setFunctionName ( name, n ) ; }^105^^^^^69^109^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^nameObjectLiteralMethods ( parent, namer.getName ( lhs )  ) ;^106^^^^^69^109^[REPLACE] nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^namer.getName ( parent )  ;^106^^^^^69^109^[REPLACE] nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node keyNode = objectLiteral.getFirstChild (  )  ;^78^^^^^69^109^[REPLACE] Node functionNameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String functionName = functionNameNode.getType (  ) ;^79^^^^^69^109^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = rhs.getFirstChild (  ) ;^86^^^^^69^109^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( rhs ) ;^87^^^^^69^109^[REPLACE] String name = namer.getName ( lhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node keyNode = objectLiteral.getFirstChild (  )  ;^103^^^^^69^109^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node rhs = rhs.getType (  ) ;^104^^^^^69^109^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Preconditions.checkState ( valueNode.getChildCount (  )  % 2  &&  0 ) ;^115^^^^^111^143^[REPLACE] Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^115^^^^^111^143^[ADD] Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Preconditions.checkState ( valueNode.getChildCount (  )  % 2 == 0 ) ;^115^^^^^111^143^[REPLACE] Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( keyNode.getType (  )   &&  Token.STRING )  {^125^^^^^111^143^[REPLACE] if  ( keyNode.getType (  )  == Token.STRING )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  ) {^130^^^^^111^143^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  !=  Token.OBJECTLIT )  {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^111^143^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^139^^^^^111^143^[ADD] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if   (  functionName.length  (    )   == 0  )   {  ;^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^111^143^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral.getString (  ) ;^132^^^^^111^143^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^133^^^^^111^143^[ADD] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( name, n )  ;^135^^^^^111^143^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  else {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^}   nameObjectLiteralMethods ( valueNode, name ) ;^137^138^139^140^^111^143^[ADD] else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  )  ;^139^^^^^111^143^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String name = namer .getName ( functionNameNode )  ;^127^^^^^111^143^[REPLACE] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^int type = objectLiteral.getType (  ) ;^129^^^^^111^143^[REPLACE] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node keyNode = objectLiteral.getFirstChild (  )  ;^132^^^^^111^143^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = valueNode.getString (  ) ;^133^^^^^111^143^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  ||  Token.FUNCTION )  {^130^^^^^111^143^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^111^143^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( name.isEmpty (  )  )  {^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^135^^^^^111^143^[ADD] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^132^^^^^111^143^[ADD] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REMOVE]^namer.getCombinedName ( context, namer.getName ( keyNode )  )  ;^135^^^^^111^143^[REMOVE] ^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^} else if  (   Token.OBJECTLIT )  {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^keyNode =  valueNode.getNext (  ) .getNext (  )  )  {^119^^^^^111^143^[REPLACE] keyNode = keyNode.getNext (  ) .getNext (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^for  ( Node keyNode = objectLiteral.getString (  ) ;^117^^^^^111^143^[REPLACE] for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^111^143^[REPLACE] Node valueNode = keyNode.getNext (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^127^^^^^111^143^[ADD] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral .getString (  )  ;^132^^^^^111^143^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
