[REPLACE]^static final DiagnosticType NON_GLOBAL_ERROR  = null ;^47^48^49^50^^47^50^[REPLACE] static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  LinkedHashMap<String, GenerateNodeContext> exports;^56^^^^^^^[REPLACE] private final LinkedHashMap<String, GenerateNodeContext> exports;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  Node contextNode;^116^^^^^^^[REPLACE] private final Node contextNode;^ [CLASS] FindExportableNodes GenerateNodeContext  
[ADD]^^67^^^^^66^104^[ADD] JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( docInfo == null && docInfo.isExport (  )  )  {^68^^^^^66^104^[REPLACE] if  ( docInfo != null && docInfo.isExport (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^68^69^70^^^66^104^[ADD] if  ( docInfo != null && docInfo.isExport (  )  )  { String export = null; GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   ||  Token.SCRIPT )  {^74^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^export = NodeUtil.getFunctionName ( n, parent ) ;context = new GenerateNodeContext ( n, parent, n ) ;^74^75^76^77^^66^104^[ADD] if  ( parent.getType (  )  == Token.SCRIPT )  { export = NodeUtil.getFunctionName ( n, parent ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^75^^^^^66^104^[ADD] export = NodeUtil.getFunctionName ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, grandparent, parent )   ;^76^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( scriptNode != null && grandparent.getType (  )  != Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^104^[REPLACE] if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getString (  )  ;^84^^^^^81^86^[REPLACE] export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^85^^^^^81^86^[ADD] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( scriptNode.getType (  )   &&  Token.SCRIPT )  {^89^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^89^90^91^92^93^66^104^[ADD] if  ( parent.getType (  )  == Token.SCRIPT )  { if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( n.getFirstChild (  ) .hasChildren (  )  || n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^66^104^[REPLACE] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^context = new GenerateNodeContext ( n, parent, n ) ;^92^93^^^^90^94^[ADD] export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent )  ;^93^^^^^90^94^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^92^^^^^66^104^[ADD] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent )  ;^93^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( n.getFirstChild (  ) .hasChildren (  )  ) {^90^91^^^^66^104^[REPLACE] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getQualifiedName (  )  ;^92^^^^^90^94^[REPLACE] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^93^^^^^90^94^[ADD] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( export == false )  {^98^^^^^66^104^[REPLACE] if  ( export != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^[REPLACE] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^compiler.report ( make ( t, n, NON_GLOBAL_ERROR )  )  ;^101^^^^^98^102^[REPLACE] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^n.getFirstChild (  ) .getFirstChild (  )  ;^99^^^^^66^104^[REPLACE] exports.put ( export, context ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^99^^^^^66^104^[ADD] exports.put ( export, context ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^75^76^^^^66^104^[ADD] export = NodeUtil.getFunctionName ( n, parent ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent )  ;^76^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getString (  )  ;^84^^^^^66^104^[REPLACE] export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, parent, n )  ;^85^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getQualifiedName (  )  ;^92^^^^^66^104^[REPLACE] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^String export = true;^69^^^^^66^104^[REPLACE] String export = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^GenerateNodeContext context = this;^70^^^^^66^104^[REPLACE] GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^80^^^^^66^104^[ADD] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   !=  Token.SCRIPT )  {^74^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( grandparent != false && grandparent.getType (  )  != Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^104^[REPLACE] if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, parent, n )  ;^85^^^^^81^86^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   ||  Token.SCRIPT )  {^89^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, grandparent, parent )   ;^93^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( n .getLastChild (  )  .hasChildren (  )  || n^90^91^^^^66^104^[REPLACE] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^92^^^^^90^94^[ADD] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( export == null )  {^98^^^^^66^104^[REPLACE] if  ( export != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^exports.put ( export, context ) ;compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^98^99^100^101^102^66^104^[ADD] if  ( export != null )  { exports.put ( export, context ) ; } else { compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^make ( t, n, NON_GLOBAL_ERROR )  ;^101^^^^^98^102^[REPLACE] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^101^^^^^98^102^[ADD] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REMOVE]^compiler.report ( make ( t, n, NON_GLOBAL_ERROR )  )  ;^101^^^^^98^102^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export =  NodeUtil.getFuscriptNodectioscriptNodeName ( scriptNode, parescriptNodet ) ;^75^^^^^66^104^[REPLACE] export = NodeUtil.getFunctionName ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^context = new GenerateNodeContext ( n, grandparent, parent ) ;^84^85^86^^^66^104^[ADD] export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, parent, n )   ;^85^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^String export = false;^69^^^^^66^104^[REPLACE] String export = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^GenerateNodeContext context = false;^70^^^^^66^104^[REPLACE] GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^Node grandparent = node.getParent (  ) ;^80^^^^^66^104^[REPLACE] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^private  Node contextNode;^116^^^^^^^[REPLACE] private final Node contextNode;^[METHOD] getContextNode [TYPE] Node [PARAMETER] [CLASS] GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
