[REPLACE]^static  DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^47^48^49^50^^47^50^[REPLACE] static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  LinkedHashMap<String, GenerateNodeContext> exports;^56^^^^^^^[REPLACE] private final LinkedHashMap<String, GenerateNodeContext> exports;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  Node scriptNode;^115^^^^^^^[REPLACE] private final Node scriptNode;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  Node contextNode;^116^^^^^^^[REPLACE] private final Node contextNode;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^private  Node node;^117^^^^^^^[REPLACE] private final Node node;^ [CLASS] FindExportableNodes GenerateNodeContext  
[REPLACE]^this.compiler =  null;^61^^^^^60^63^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[ADD]^^61^^^^^60^63^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^this.exports ;^62^^^^^60^63^[REPLACE] this.exports = Maps.newLinkedHashMap (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^this.node =  scriptNode;^120^^^^^119^123^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[ADD]^^120^121^^^^119^123^[ADD] this.node = node; this.scriptNode = scriptNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^this.scriptNode =  node;^121^^^^^119^123^[REPLACE] this.scriptNode = scriptNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[ADD]^^121^122^^^^119^123^[ADD] this.scriptNode = scriptNode; this.contextNode = contextNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^this.contextNode =  scriptNode;^122^^^^^119^123^[REPLACE] this.contextNode = contextNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  node  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^JSDocInfo docInfo = scriptNode.getParent (  ) ;^67^^^^^66^104^[REPLACE] JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^67^^^^^66^104^[ADD] JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( docInfo == true && docInfo.isExport (  )  )  {^68^^^^^66^104^[REPLACE] if  ( docInfo != null && docInfo.isExport (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   &&  Token.SCRIPT )  {^74^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export =  NodeUtil.getFuscriptNodectioscriptNodeName ( scriptNode, parescriptNodet ) ;^75^^^^^66^104^[REPLACE] export = NodeUtil.getFunctionName ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent ) ; ;^76^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( grandparent != null ) {^81^82^83^^^66^104^[REPLACE] if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^81^82^83^84^85^66^104^[ADD] if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getString (  ) ; ;^84^^^^^81^86^[REPLACE] export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, parent, n )  ; ;^85^^^^^81^86^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   &&  Token.SCRIPT )  {^89^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( n.getFirstChild (  ) .hasChildren (  )  || n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^66^104^[REPLACE] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^90^91^92^93^94^66^104^[ADD] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getQualifiedName (  ) ; ;^92^^^^^90^94^[REPLACE] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent ) ; ;^93^^^^^90^94^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^93^^^^^90^94^[ADD] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getQualifiedName (  ) ; ;^92^^^^^66^104^[REPLACE] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, grandparent, parent ) ; ;^93^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^93^^^^^66^104^[ADD] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^92^^^^^90^94^[ADD] export = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( export == true )  {^98^^^^^66^104^[REPLACE] if  ( export != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^[REPLACE] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getString (  ) ;^99^^^^^66^104^[REPLACE] exports.put ( export, context ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, grandparent, parent )  ; ;^76^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getString (  ) ; ;^84^^^^^66^104^[REPLACE] export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, parent, n ) ; ;^85^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, grandparent, parent )  ; ;^93^^^^^66^104^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^String export = true;^69^^^^^66^104^[REPLACE] String export = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^69^70^^^^66^104^[ADD] String export = null; GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^GenerateNodeContext context = false;^70^^^^^66^104^[REPLACE] GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^Node grandparent = scriptNode.getParent (  ) ;^80^^^^^66^104^[REPLACE] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( parent.getType (  )   ||  Token.SCRIPT )  {^74^^^^^66^104^[REPLACE] if  ( parent.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export =  NodeUtil.getFuparentctioparentName ( parent, pareparentt ) ;^75^^^^^66^104^[REPLACE] export = NodeUtil.getFunctionName ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  (  grandparent.getType (  )  != Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^104^[REPLACE] if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context = new GenerateNodeContext ( n, parent, n ) ; ;^85^^^^^81^86^[REPLACE] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^85^^^^^81^86^[ADD] context = new GenerateNodeContext ( n, grandparent, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^89^90^91^92^93^66^104^[ADD] if  ( parent.getType (  )  == Token.SCRIPT )  { if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  (  n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^66^104^[REPLACE] if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^context = new GenerateNodeContext ( n, parent, n ) ;^92^93^^^^90^94^[ADD] export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^context =  new GenerateNodeContext ( n, grandparent, parent )  ; ;^93^^^^^90^94^[REPLACE] context = new GenerateNodeContext ( n, parent, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^if  ( export == null )  {^98^^^^^66^104^[REPLACE] if  ( export != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^exports.put ( export, context ) ;compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^98^99^100^101^102^66^104^[ADD] if  ( export != null )  { exports.put ( export, context ) ; } else { compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^101^^^^^98^102^[REPLACE] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^101^^^^^98^102^[ADD] compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^GenerateNodeContext context = this;^70^^^^^66^104^[REPLACE] GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[ADD]^^70^^^^^66^104^[ADD] GenerateNodeContext context = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^Node grandparent = scriptNode.getType (  ) ;^80^^^^^66^104^[REPLACE] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  String export  [TYPE]  JSDocInfo docInfo  [TYPE]  GenerateNodeContext context  [TYPE]  LinkedHashMap exports 
[REPLACE]^return node;^107^^^^^106^108^[REPLACE] return exports;^[METHOD] getExports [TYPE] LinkedHashMap [PARAMETER] [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^return exports;^126^^^^^125^127^[REPLACE] return node;^[METHOD] getNode [TYPE] Node [PARAMETER] [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^return exports;^130^^^^^129^131^[REPLACE] return scriptNode;^[METHOD] getScriptNode [TYPE] Node [PARAMETER] [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^return exports;^134^^^^^133^135^[REPLACE] return contextNode;^[METHOD] getContextNode [TYPE] Node [PARAMETER] [CLASS] FindExportableNodes GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^private  Node scriptNode;^115^^^^^^^[REPLACE] private final Node scriptNode;^[METHOD] getContextNode [TYPE] Node [PARAMETER] [CLASS] GenerateNodeContext   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType NON_GLOBAL_ERROR  [TYPE]  Node contextNode  grandparent  n  node  parent  scriptNode  [TYPE]  LinkedHashMap exports 
[REPLACE]^this.node =  scriptNode;^120^^^^^119^123^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[REPLACE]^this.scriptNode =  node;^121^^^^^119^123^[REPLACE] this.scriptNode = scriptNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[ADD]^^121^^^^^119^123^[ADD] this.scriptNode = scriptNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[REPLACE]^this.contextNode =  scriptNode;^122^^^^^119^123^[REPLACE] this.contextNode = contextNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node Node scriptNode Node contextNode [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[REPLACE]^return scriptNode;^126^^^^^125^127^[REPLACE] return node;^[METHOD] getNode [TYPE] Node [PARAMETER] [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[REPLACE]^return node;^130^^^^^129^131^[REPLACE] return scriptNode;^[METHOD] getScriptNode [TYPE] Node [PARAMETER] [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
[REPLACE]^return node;^134^^^^^133^135^[REPLACE] return contextNode;^[METHOD] getContextNode [TYPE] Node [PARAMETER] [CLASS] GenerateNodeContext   [TYPE]  Node contextNode  node  scriptNode  [TYPE]  boolean false  true 
