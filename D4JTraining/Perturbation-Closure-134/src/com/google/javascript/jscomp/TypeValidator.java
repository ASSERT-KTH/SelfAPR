[REPLACE]^private  JSTypeRegistry typeRegistry;^61^^^^^^^[REPLACE] private final JSTypeRegistry typeRegistry;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private  JSType allValueTypes;^62^^^^^^^[REPLACE] private final JSType allValueTypes;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private  List<TypeMismatch> mismatches = Lists.newArrayList (  ) ;^67^^^^^^^[REPLACE] private final List<TypeMismatch> mismatches = Lists.newArrayList (  ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private static final  byte  FOUND_REQUIRED = "{0}\n" + "found   : {1}\n" + "required: {2}";^70^71^72^73^^70^73^[REPLACE] private static final String FOUND_REQUIRED = "{0}\n" + "found   : {1}\n" + "required: {2}";^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType INVALID_CAST ;^75^76^77^78^^75^79^[REPLACE] static final DiagnosticType INVALID_CAST = DiagnosticType.warning ( "JSC_INVALID_CAST", "invalid cast - must be a subtype or supertype\n" + "from: {0}\n" +^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType TYPE_MISMATCH_WARNING  = null ;^81^82^83^84^^81^84^[REPLACE] static final DiagnosticType TYPE_MISMATCH_WARNING = DiagnosticType.warning ( "JSC_TYPE_MISMATCH", "{0}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType MISSING_EXTENDS_TAG_WARNING  = null ;^86^87^88^89^^86^89^[REPLACE] static final DiagnosticType MISSING_EXTENDS_TAG_WARNING = DiagnosticType.warning ( "JSC_MISSING_EXTENDS_TAG", "Missing @extends tag on type {0}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType DUP_VAR_DECLARATION ;^91^92^93^94^^91^94^[REPLACE] static final DiagnosticType DUP_VAR_DECLARATION = DiagnosticType.warning ( "JSC_DUP_VAR_DECLARATION", "variable {0} redefined with type {1}, " + "original definition at {2}:{3} with type {4}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^final DiagnosticType HIDDEN_PROPERTY_MISMATCH = DiagnosticType.warning ( "JSC_HIDDEN_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + "of the property it overrides from superclass {1}\n" +^96^97^98^99^^96^101^[REPLACE] static final DiagnosticType HIDDEN_PROPERTY_MISMATCH = DiagnosticType.warning ( "JSC_HIDDEN_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + "of the property it overrides from superclass {1}\n" +^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED ;^103^104^105^106^^103^106^[REPLACE] static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED = DiagnosticType.warning ( "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", "property {0} on interface {1} is not implemented by type {2}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticGroup ALL_DIAGNOSTICS ;^108^109^110^111^^108^114^[REPLACE] static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup ( INVALID_CAST, TYPE_MISMATCH_WARNING, MISSING_EXTENDS_TAG_WARNING,^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private static final long serialVersionUID  = null ;^680^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^this.compiler =  null;^117^^^^^116^121^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType allValueTypes  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  [TYPE]  long serialVersionUID 
[REPLACE]^this.typeRegistry =  null.getTypeRegistry (  ) ;^118^^^^^116^121^[REPLACE] this.typeRegistry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType allValueTypes  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  [TYPE]  long serialVersionUID 
[REPLACE]^this.allValueTypes  =  this.allValueTypes ;^119^120^^^^116^121^[REPLACE] this.allValueTypes = typeRegistry.createUnionType ( STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType allValueTypes  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  [TYPE]  long serialVersionUID 
[REPLACE]^super ( allValueTypes, b ) ;^688^^^^^687^689^[REPLACE] super ( a, b ) ;^[METHOD] <init> [TYPE] JSType) [PARAMETER] JSType a JSType b [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  [TYPE]  long serialVersionUID 
[REPLACE]^return "function";^130^^^^^129^131^[REPLACE] return mismatches;^[METHOD] getMismatches [TYPE] Iterable [PARAMETER] [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.matchesObjectContext (  )  )  {^145^^^^^144^150^[REPLACE] if  ( !type.matchesObjectContext (  )  )  {^[METHOD] expectObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^mismatch ( t, n, msg, type, OBJECT_TYPE ) ;return false;^145^146^147^148^^144^150^[ADD] if  ( !type.matchesObjectContext (  )  )  { mismatch ( t, n, msg, type, OBJECT_TYPE ) ; return false; }^[METHOD] expectObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^147^^^^^144^150^[REPLACE] return false;^[METHOD] expectObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^149^^^^^144^150^[REPLACE] return true;^[METHOD] expectObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type .toObjectType (  )   )  {^157^^^^^156^160^[REPLACE] if  ( !type.isObject (  )  )  {^[METHOD] expectActualObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^mismatch ( t, n, msg, type, OBJECT_TYPE ) ;^157^158^159^^^156^160^[ADD] if  ( !type.isObject (  )  )  { mismatch ( t, n, msg, type, OBJECT_TYPE ) ; }^[METHOD] expectActualObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^158^^^^^156^160^[REPLACE] mismatch ( t, n, msg, type, OBJECT_TYPE ) ;^[METHOD] expectActualObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .dereference (  ) ;^167^^^^^166^171^[REPLACE] JSType anyObjectType = getNativeType ( NO_OBJECT_TYPE ) ;^[METHOD] expectAnyObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( anyObjectType.isSubtype ( type )  )  {^168^^^^^166^171^[REPLACE] if  ( !anyObjectType.isSubtype ( type )  )  {^[METHOD] expectAnyObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^169^^^^^166^171^[REPLACE] mismatch ( t, n, msg, type, anyObjectType ) ;^[METHOD] expectAnyObject [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type .matchesObjectContext (  )   )  {^179^^^^^178^182^[REPLACE] if  ( !type.matchesStringContext (  )  )  {^[METHOD] expectString [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^180^^^^^178^182^[REPLACE] mismatch ( t, n, msg, type, STRING_TYPE ) ;^[METHOD] expectString [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.matchesNumberContext (  )  )  {^190^^^^^189^193^[REPLACE] if  ( !type.matchesNumberContext (  )  )  {^[METHOD] expectNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( type.isVoidType (  )  )  {     mismatch ( t, n, msg, type, expectedType ) ;     return false; }^190^^^^^189^193^[REMOVE] ^[METHOD] expectNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, OBJECT_TYPE ) ;^191^^^^^189^193^[REPLACE] mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^[METHOD] expectNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.matchesNumberContext (  )  ) {^201^^^^^200^204^[REPLACE] if  ( !type.matchesNumberContext (  )  && !type.isSubtype ( allValueTypes )  )  {^[METHOD] expectBitwiseable [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, anyObjectType, allValueTypes ) ;^202^^^^^200^204^[REPLACE] mismatch ( t, n, msg, type, allValueTypes ) ;^[METHOD] expectBitwiseable [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.matchesNumberContext (  )  ) {^213^^^^^211^216^[REPLACE] if  ( !type.matchesNumberContext (  )  && !type.matchesStringContext (  )  )  {^[METHOD] expectStringOrNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^213^214^215^^^211^216^[ADD] if  ( !type.matchesNumberContext (  )  && !type.matchesStringContext (  )  )  { mismatch ( t, n, msg, type, NUMBER_STRING ) ; }^[METHOD] expectStringOrNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^214^^^^^211^216^[REPLACE] mismatch ( t, n, msg, type, NUMBER_STRING ) ;^[METHOD] expectStringOrNumber [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objType.isUnknownType (  )  )  {^227^^^^^225^232^[REPLACE] if  ( type.isVoidType (  )  )  {^[METHOD] expectNotVoid [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg JSType expectedType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  expectedType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^229^^^^^225^232^[REPLACE] return false;^[METHOD] expectNotVoid [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg JSType expectedType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  expectedType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^231^^^^^225^232^[REPLACE] return true;^[METHOD] expectNotVoid [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType type String msg JSType expectedType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  expectedType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  !caseType.autoboxesTo (  ) .isSubtype ( type )  )  )  {^244^245^246^^^238^251^[REPLACE] if  ( !switchType.canTestForShallowEqualityWith ( caseType )  && ( caseType.autoboxesTo (  )  == null || !caseType.autoboxesTo (  ) .isSubtype ( switchType )  )  )  {^[METHOD] expectSwitchMatchesCase [TYPE] void [PARAMETER] NodeTraversal t Node n JSType switchType JSType caseType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n.getFirstChild (  ) , "case expression doesn't match switch", type, switchType ) ;^247^248^249^^^238^251^[REPLACE] mismatch ( t, n.getFirstChild (  ) , "case expression doesn't match switch", caseType, switchType ) ;^[METHOD] expectSwitchMatchesCase [TYPE] void [PARAMETER] NodeTraversal t Node n JSType switchType JSType caseType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n.getLastChild (  ) , "case expression doesn't match switch", caseType, switchType ) ;^247^248^249^^^238^251^[REPLACE] mismatch ( t, n.getFirstChild (  ) , "case expression doesn't match switch", caseType, switchType ) ;^[METHOD] expectSwitchMatchesCase [TYPE] void [PARAMETER] NodeTraversal t Node n JSType switchType JSType caseType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.isVoidType (  )  )  {^265^^^^^263^279^[REPLACE] if  ( objType.isUnknownType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^} else if  ( objType.toObjectType (  )  == true && objType.toObjectType (  ) .getIndexType (  )  != true )  {^267^268^^^^263^279^[REPLACE] } else if  ( objType.toObjectType (  )  != null && objType.toObjectType (  ) .getIndexType (  )  != null )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type.matchesNumberContext (  )  && !type.isSubtype ( allValueTypes )  )  {^271^^^^^263^279^[REPLACE] } else if  ( objType.isArrayType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^}   expectNumber ( t, n, indexType, "array access" ) ;expectString ( t, n, indexType, "property access" ) ;^271^272^273^274^^263^279^[ADD] else if  ( objType.isArrayType (  )  )  { expectNumber ( t, n, indexType, "array access" ) ; } else if  ( objType.matchesObjectContext (  )  )  { expectString ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^273^^^^^263^279^[REPLACE] } else if  ( objType.matchesObjectContext (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^}   expectString ( t, n, indexType, "property access" ) ;objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^273^274^275^276^277^263^279^[ADD] else if  ( objType.matchesObjectContext (  )  )  { expectString ( t, n, indexType, "property access" ) ; } else { mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^277^^^^^263^279^[REPLACE] objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^277^^^^^263^279^[ADD] objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectStringOrNumber ( t, n, indexType, "property access" ) ;^274^^^^^263^279^[REPLACE] expectString ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^272^^^^^263^279^[REPLACE] expectNumber ( t, n, indexType, "array access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( objType.matchesObjectContext (  )  )  {^273^^^^^263^279^[REPLACE] } else if  ( objType.matchesObjectContext (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry .getNativeType ( null )   ) ;^276^277^^^^263^279^[REPLACE] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^276^277^^^^263^279^[ADD] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectString ( t, n, type, "property access" ) ;^274^^^^^263^279^[REPLACE] expectString ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .contains (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, switchType.isObject (  ) .getIndexType (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^269^270^^^^263^279^[ADD] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, type.isObject (  ) .getIndexType (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^271^^^^^263^279^[REPLACE] } else if  ( objType.isArrayType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "only arrays or objects can be accessed", switchType, typeRegistry .getNativeType ( this )   ) ;^276^277^^^^263^279^[REPLACE] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^274^^^^^263^279^[ADD] expectString ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectNumber ( t, n, type, "array access" ) ;^272^^^^^263^279^[REPLACE] expectNumber ( t, n, indexType, "array access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^}   objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^273^274^275^276^277^263^279^[ADD] else if  ( objType.matchesObjectContext (  )  )  { expectString ( t, n, indexType, "property access" ) ; } else { mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "only arrays or objects can be accessed", switchType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^276^277^^^^263^279^[REPLACE] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^objType, typeRegistry .getNativeType ( false )   ) ;^277^^^^^263^279^[REPLACE] objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectStringOrNumber ( t, n, type, "property access" ) ;^266^^^^^263^279^[REPLACE] expectStringOrNumber ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[ADD]^^266^^^^^263^279^[ADD] expectStringOrNumber ( t, n, indexType, "property access" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  (  objType.toObjectType (  ) .getIndexType (  )  != true )  {^267^268^^^^263^279^[REPLACE] } else if  ( objType.toObjectType (  )  != null && objType.toObjectType (  ) .getIndexType (  )  != null )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( objType.isUnknownType (  )  )  {     expectStringOrNumber ( t, n, indexType, "property access" ) ; }else     if  (  (  ( objType.toObjectType (  )  )  != null )  &&  (  ( objType.toObjectType (  ) .getIndexType (  )  )  != null )  )  {         expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;     }else         if  ( objType.isArrayType (  )  )  {             expectNumber ( t, n, indexType, "array access" ) ;         }else             if  ( objType.matchesObjectContext (  )  )  {                 expectString ( t, n, indexType, "property access" ) ;             }else {                 mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;             }^267^^^^^263^279^[REMOVE] ^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( objType.isArrayType (  )  )  {^271^^^^^263^279^[REPLACE] } else if  ( objType.isArrayType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( objType.matchesStringContext (  )  )  {^273^^^^^263^279^[REPLACE] } else if  ( objType.matchesObjectContext (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "only arrays or objects can be accessed", type, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^276^277^^^^263^279^[REPLACE] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REMOVE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^272^^^^^263^279^[REMOVE] ^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type.matchesObjectContext (  )  )  {^273^^^^^263^279^[REPLACE] } else if  ( objType.matchesObjectContext (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, type.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, type.toObjectType (  ) .contains (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^expectCanAssignTo ( t, n, indexType, type .isObject (  )  .getIndexType (  ) , "restricted index type" ) ;^269^270^^^^263^279^[REPLACE] expectCanAssignTo ( t, n, indexType, objType.toObjectType (  ) .getIndexType (  ) , "restricted index type" ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "only arrays or objects can be accessed", type, typeRegistry .getNativeType ( null )   ) ;^276^277^^^^263^279^[REPLACE] mismatch ( t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^objType, typeRegistry .getNativeType ( null )   ) ;^277^^^^^263^279^[REPLACE] objType, typeRegistry.createUnionType ( ARRAY_TYPE, OBJECT_TYPE )  ) ;^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( leftType.isNoType (  )  ) {^296^^^^^293^310^[REPLACE] if  ( !leftType.isNoType (  )  && !rightType.canAssignTo ( leftType )  )  {^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type.matchesNumberContext (  )  && !type.isSubtype ( allValueTypes )  )  {^297^^^^^293^310^[REPLACE] if  ( bothIntrinsics ( rightType, leftType )  )  {^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "assignment to property "  !=  propName  !=  " of "  !=  getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^302^303^304^305^^293^310^[REPLACE] mismatch ( t, n, "assignment to property " + propName + " of " + getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^getReadableJSTypeName ( owner, false ) , rightType, leftType ) ;^304^305^^^^293^310^[REPLACE] getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( rightType, type ) ;^300^^^^^293^310^[REPLACE] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[ADD]^^300^^^^^293^310^[ADD] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^307^^^^^293^310^[REPLACE] return false;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[ADD]^^297^298^^300^^293^310^[ADD] if  ( bothIntrinsics ( rightType, leftType )  )  {  registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^getReadableJSTypeName ( n, false ) , rightType, leftType ) ;^304^305^^^^293^310^[REPLACE] getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^300^^^^^293^310^[REPLACE] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^309^^^^^293^310^[REPLACE] return true;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !rightType.canAssignTo ( switchType )  )  {^325^^^^^323^336^[REPLACE] if  ( !rightType.canAssignTo ( leftType )  )  {^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !type.matchesNumberContext (  )  && !type.isSubtype ( allValueTypes )  )  {^326^^^^^323^336^[REPLACE] if  ( bothIntrinsics ( rightType, leftType )  )  {^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^331^^^^^323^336^[REPLACE] mismatch ( t, n, msg, rightType, leftType ) ;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( type, leftType ) ;^329^^^^^323^336^[REPLACE] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^333^^^^^323^336^[REPLACE] return false;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( bothIntrinsics ( type, leftType )  )  {^326^^^^^323^336^[REPLACE] if  ( bothIntrinsics ( rightType, leftType )  )  {^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, leftType ) ;^331^^^^^323^336^[REPLACE] mismatch ( t, n, msg, rightType, leftType ) ;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( rightType, type ) ;^329^^^^^323^336^[REPLACE] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^335^^^^^323^336^[REPLACE] return true;^[METHOD] expectCanAssignTo [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType String msg [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return  ( leftType.equals (  )  || leftType.isEnumType (  )  )  && ( rightType.isConstructor (  )  || rightType.isEnumType (  )  ) ;^339^340^^^^338^341^[REPLACE] return  ( leftType.isConstructor (  )  || leftType.isEnumType (  )  )  && ( rightType.isConstructor (  )  || rightType.isEnumType (  )  ) ;^[METHOD] bothIntrinsics [TYPE] boolean [PARAMETER] JSType rightType JSType leftType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( argType.canAssignTo ( paramType )  )  {^356^^^^^354^363^[REPLACE] if  ( !argType.canAssignTo ( paramType )  )  {^[METHOD] expectArgumentMatchesParameter [TYPE] void [PARAMETER] NodeTraversal t Node n JSType argType JSType paramType Node callNode int ordinal [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  indexType  leftType  objType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node callNode  n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID  [TYPE]  int ordinal 
[REPLACE]^mismatch ( t, n, String.format (propName + "formal parameter", ordinal, getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) ,^357^358^359^360^^354^363^[REPLACE] mismatch ( t, n, String.format ( "actual parameter %d of %s does not match " + "formal parameter", ordinal, getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) ,^[METHOD] expectArgumentMatchesParameter [TYPE] void [PARAMETER] NodeTraversal t Node n JSType argType JSType paramType Node callNode int ordinal [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  indexType  leftType  objType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node callNode  n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID  [TYPE]  int ordinal 
[REPLACE]^String.format ( propName + propName, ordinal, getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) , argType, paramType ) ;^358^359^360^361^^354^363^[REPLACE] String.format ( "actual parameter %d of %s does not match " + "formal parameter", ordinal, getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) , argType, paramType ) ;^[METHOD] expectArgumentMatchesParameter [TYPE] void [PARAMETER] NodeTraversal t Node n JSType argType JSType paramType Node callNode int ordinal [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  indexType  leftType  objType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node callNode  n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID  [TYPE]  int ordinal 
[REPLACE]^getReadableJSTypeName ( callNode.getFirstChild (  ) , true )  ) , argType, paramType ) ;^360^361^^^^354^363^[REPLACE] getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) , argType, paramType ) ;^[METHOD] expectArgumentMatchesParameter [TYPE] void [PARAMETER] NodeTraversal t Node n JSType argType JSType paramType Node callNode int ordinal [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  indexType  leftType  objType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node callNode  n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID  [TYPE]  int ordinal 
[REPLACE]^getReadableJSTypeName ( n.getFirstChild (  ) , false )  ) , argType, paramType ) ;^360^361^^^^354^363^[REPLACE] getReadableJSTypeName ( callNode.getFirstChild (  ) , false )  ) , argType, paramType ) ;^[METHOD] expectArgumentMatchesParameter [TYPE] void [PARAMETER] NodeTraversal t Node n JSType argType JSType paramType Node callNode int ordinal [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  indexType  leftType  objType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node callNode  n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID  [TYPE]  int ordinal 
[REPLACE]^if  ( overridingType.canAssignTo ( hiddenType )  )  {^380^^^^^378^387^[REPLACE] if  ( !overridingType.canAssignTo ( hiddenType )  )  {^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[ADD]^registerMismatch ( overridingType, hiddenType ) ;^380^381^382^383^384^378^387^[ADD] if  ( !overridingType.canAssignTo ( hiddenType )  )  { registerMismatch ( overridingType, hiddenType ) ; compiler.report ( JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) ,^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( overridingType, type ) ;^381^^^^^378^387^[REPLACE] registerMismatch ( overridingType, hiddenType ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REMOVE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^381^^^^^378^387^[REMOVE] ^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, type.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^382^383^384^385^^378^387^[REPLACE] compiler.report ( JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[ADD]^^382^383^384^^^378^387^[ADD] compiler.report ( JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) ,^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) , type.toString (  ) , overridingType.toString (  )  )  ) ;^383^384^385^^^378^387^[REPLACE] JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[ADD]^^383^384^385^^^378^387^[ADD] JSError.make ( t, n, HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^propertyName, type.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^384^385^^^^378^387^[REPLACE] propertyName, ownerType.toString (  ) , hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^hiddenType.isObject (  ) , overridingType.toString (  )  )  ) ;^385^^^^^378^387^[REPLACE] hiddenType.toString (  ) , overridingType.toString (  )  )  ) ;^[METHOD] expectCanOverride [TYPE] void [PARAMETER] NodeTraversal t Node n JSType overridingType JSType hiddenType String propertyName JSType ownerType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^FunctionType subCtor = subObject .toString (  )  ;^399^^^^^397^419^[REPLACE] FunctionType subCtor = subObject.getConstructor (  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^399^^^^^397^419^[ADD] FunctionType subCtor = subObject.getConstructor (  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^ObjectType declaredSuper = superObject.setJSType (  ) .getImplicitPrototype (  ) ;^400^401^^^^397^419^[REPLACE] ObjectType declaredSuper = subObject.getImplicitPrototype (  ) .getImplicitPrototype (  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( !declaredSuper.equals ( subObject )  )  {^402^^^^^397^419^[REPLACE] if  ( !declaredSuper.equals ( superObject )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( !type.matchesNumberContext (  )  && !type.isSubtype ( allValueTypes )  )  {^403^^^^^397^419^[REPLACE] if  ( declaredSuper.equals ( getNativeType ( OBJECT_TYPE )  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^mismatch ( t.getSourceName (  ) , n, "mismatch in declaration of superclass type", subObject, declaredSuper ) ;^409^410^411^^^397^419^[REPLACE] mismatch ( t.getSourceName (  ) , n, "mismatch in declaration of superclass type", superObject, declaredSuper ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, superObject.toString (  )  )  ) ;^404^405^406^^^397^419^[REPLACE] compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject .matchesStringContext (  )   )  ) ;^405^406^^^^397^419^[REPLACE] JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^subObject.equals (  )  )  ) ;^406^^^^^397^419^[REPLACE] subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^registerMismatch ( subObject, declaredSuper ) ;^407^^^^^397^419^[REPLACE] registerMismatch ( superObject, declaredSuper ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( !subCtor.setPrototypeBasedOn (  )  )  {^415^^^^^397^419^[REPLACE] if  ( !subCtor.hasCachedValues (  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^415^416^417^^^397^419^[ADD] if  ( !subCtor.hasCachedValues (  )  )  { subCtor.setPrototypeBasedOn ( superObject ) ; }^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^subCtor .getParameters (  )  ;^416^^^^^397^419^[REPLACE] subCtor.setPrototypeBasedOn ( superObject ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^403^404^405^406^407^397^419^[ADD] if  ( declaredSuper.equals ( getNativeType ( OBJECT_TYPE )  )  )  { compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ; registerMismatch ( superObject, declaredSuper ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.equals (  )  )  ) ;^405^406^^^^397^419^[REPLACE] JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^subObject .matchesStringContext (  )   )  ) ;^406^^^^^397^419^[REPLACE] subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REMOVE]^prop, implemented.toString (  ) , instance.toString (  )  )  ) ;^406^^^^^397^419^[REMOVE] ^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( subCtor.hasCachedValues (  )  )  {^415^^^^^397^419^[REPLACE] if  ( !subCtor.hasCachedValues (  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^subCtor.setPrototypeBasedOn ( subObject ) ;^416^^^^^397^419^[REPLACE] subCtor.setPrototypeBasedOn ( superObject ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^found = found.restrictByNotNullOrUndefined (  ) ; ;^431^^^^^430^440^[REPLACE] castType = castType.restrictByNotNullOrUndefined (  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[ADD]^^431^^^^^430^440^[ADD] castType = castType.restrictByNotNullOrUndefined (  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^found = found.restrictByNotNullOrUndefined (  ) ; ;^432^^^^^430^440^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  !castType.canAssignTo ( type )  )  {^434^^^^^430^440^[REPLACE] if  ( !type.canAssignTo ( castType )  && !castType.canAssignTo ( type )  )  {^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( t, n, INVALID_CAST, castType .matchesStringContext (  )  , type^435^436^437^^^430^440^[REPLACE] compiler.report ( JSError.make ( t, n, INVALID_CAST, castType.toString (  ) , type.toString (  )  )  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( t, n, INVALID_CAST, castType.isObject (  ) , type.toString (  )  )  ) ;^436^437^^^^430^440^[REPLACE] JSError.make ( t, n, INVALID_CAST, castType.toString (  ) , type.toString (  )  )  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^castType.isObject (  ) , type.toString (  )  )  ) ;^437^^^^^430^440^[REPLACE] castType.toString (  ) , type.toString (  )  )  ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( rightType, castType ) ;^438^^^^^430^440^[REPLACE] registerMismatch ( type, castType ) ;^[METHOD] expectCanCast [TYPE] void [PARAMETER] NodeTraversal t Node n JSType type JSType castType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID 
[REPLACE]^boolean allowDupe = true;^455^^^^^454^506^[REPLACE] boolean allowDupe = false;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.setJSType (  )   ||  Token.GETPROP )  {^456^^^^^454^506^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( info != null )  {^458^^^^^454^506^[REPLACE] if  ( info == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^info =  n.getJSDocInfo (  ) ;^459^^^^^454^506^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^allowDupe = info != null  ^  info.getSuppressions (  ) .contains ( "duplicate" ) ;^461^462^^^^454^506^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSDocInfo info = parent.getJSType (  ) ;^457^^^^^454^506^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^459^^^^^454^506^[ADD] info = parent.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^459^^^^^454^506^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^allowDupe = info != true ;^461^462^^^^454^506^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^457^^^^^454^506^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^457^^^^^454^506^[ADD] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSType varType = var .getJSType (  )  ;^465^^^^^454^506^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( varType == null ) {^470^471^472^473^^454^506^[REPLACE] if  ( varType != null && varType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  && newType != null && newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( var.input != null )  {^479^^^^^470^505^[REPLACE] if  ( var.input == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^479^504^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^479^504^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var .getParentNode (  )  , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^479^504^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, overridingType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^479^504^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, newType.toString (  ) , var.getParentNode (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^479^504^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^var.nameNode.getLineno (  )  , varType.toString (  )  )  ) ;^501^502^^^^479^504^[REPLACE] String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^501^502^^^^479^504^[ADD] String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^varType.isObject (  )  )  ) ;^502^^^^^479^504^[REPLACE] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getType (  )   &&  Token.VAR )  {^481^^^^^470^505^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^481^482^483^484^^470^505^[ADD] if  ( parent.getType (  )  == Token.VAR )  { if  ( n.getFirstChild (  )  != null )  { n.getFirstChild (  ) .setJSType ( varType ) ; }^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   !=  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.setJSType (  )  == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getLastChild (  )  == null )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .setJSType ( ownerType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .setJSType ( type ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n .getLastChild (  )  .setJSType ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REMOVE]^var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^483^^^^^470^505^[REMOVE] ^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.setJSType (  )   !=  Token.VAR )  {^481^^^^^470^505^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n .getJSType (  )    ||  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^486^487^^^^481^488^[ADD] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ; parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^parent.setJSType ( type ) ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == true )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^482^483^484^^^470^505^[ADD] if  ( n.getFirstChild (  )  != null )  { n.getFirstChild (  ) .setJSType ( varType ) ; }^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .isSubtype ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getFirstChild (  )  == false )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^483^^^^^470^505^[ADD] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^470^505^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^495^496^497^498^499^470^505^[ADD] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  { compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( variableName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, DUP_VAR_DECLARATION, sourceName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, overridingType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, newType.toString (  ) , var.getParentNode (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^500^501^502^^^495^503^[ADD] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^var.nameNode.getLineno (  )  , varType.toString (  )  )  ) ;^501^502^^^^495^503^[REPLACE] String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^varType.isObject (  )  )  ) ;^502^^^^^495^503^[REPLACE] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( var.input != null )  {^479^^^^^454^506^[REPLACE] if  ( var.input == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^479^504^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^495^496^497^498^499^479^504^[ADD] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  { compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^479^504^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , switchType.toString (  )  )  ) ;^499^500^501^502^^479^504^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, paramType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^479^504^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^500^501^502^^^479^504^[ADD] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^502^^^^^479^504^[ADD] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getType (  )   ||  Token.VAR )  {^481^^^^^454^506^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   &&  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REMOVE]^registerMismatch ( overridingType, hiddenType ) ;^486^^^^^481^488^[REMOVE] ^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^parent.setJSType ( paramType ) ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.setJSType (  )  == this  )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  )  .getJSType (  )  ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^483^^^^^454^506^[ADD] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n .getLastChild (  )  .setJSType ( varType ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n .getLastChild (  )   == this )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^482^483^484^^^454^506^[ADD] if  ( n.getFirstChild (  )  != null )  { n.getFirstChild (  ) .setJSType ( varType ) ; }^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( varType ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent .getJSType (  )    !=  Token.VAR )  {^481^^^^^454^506^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   ||  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n.setJSType (  )  == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^parent.setJSType ( overridingType ) ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == true )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .setJSType ( type ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^454^506^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( propertyName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, parent, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, type.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^501^502^^^^495^503^[ADD] String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REMOVE]^newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^502^^^^^495^503^[REMOVE] ^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType instance = type.getReturnType (  ) ;^513^^^^^512^532^[REPLACE] ObjectType instance = type.getInstanceType (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^513^^^^^512^532^[ADD] ObjectType instance = type.getInstanceType (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( implemented.getImplicitPrototype (  )  == null )  {^515^^^^^512^532^[REPLACE] if  ( implemented.getImplicitPrototype (  )  != null )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( instance.hasProperty ( prop )  )  {^518^^^^^512^532^[REPLACE] if  ( !instance.hasProperty ( prop )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  =  "" ;^522^^^^^512^532^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Node source = type.getReturnType (  ) ;^519^^^^^512^532^[REPLACE] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String sourceName =  ( String )  source.getType ( Node.SOURCENAME_PROP ) ;^521^^^^^512^532^[REPLACE] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^518^519^520^521^522^512^532^[ADD] if  ( !instance.hasProperty ( prop )  )  { Node source = type.getSource (  ) ; Preconditions.checkNotNull ( source ) ; String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ; sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  =  sourceName;^522^^^^^512^532^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( ObjectType implemented : type.getAllImplementedInterfaces (  )  )  { if  ( implemented.getImplicitPrototype (  )  != null )  {^514^^^^^512^532^[REPLACE] for  ( ObjectType implemented : type.getAllImplementedInterfaces (  )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^514^515^516^517^^512^532^[ADD] for  ( ObjectType implemented : type.getAllImplementedInterfaces (  )  )  { if  ( implemented.getImplicitPrototype (  )  != null )  { for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^516^517^518^519^520^512^532^[ADD] for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  { if  ( !instance.hasProperty ( prop )  )  { Node source = type.getSource (  ) ; Preconditions.checkNotNull ( source ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Node source = type .getReturnType (  )  ;^519^^^^^512^532^[REPLACE] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t.getSourceName (  ) , n, msg, found, ownerType ) ;^539^^^^^537^540^[REPLACE] mismatch ( t.getSourceName (  ) , n, msg, found, required ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] NodeTraversal t Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^539^^^^^537^540^[ADD] mismatch ( t.getSourceName (  ) , n, msg, found, required ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] NodeTraversal t Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^539^^^^^537^540^[REPLACE] mismatch ( t.getSourceName (  ) , n, msg, found, required ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] NodeTraversal t Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, required, getNativeType ( required )  ) ;^544^^^^^542^545^[REPLACE] mismatch ( t, n, msg, found, getNativeType ( required )  ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] NodeTraversal t Node n String msg JSType found JSTypeNative required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  JSTypeNative required  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^544^^^^^542^545^[REPLACE] mismatch ( t, n, msg, found, getNativeType ( required )  ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] NodeTraversal t Node n String msg JSType found JSTypeNative required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  JSTypeNative required  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( ownerType, required ) ;^549^^^^^547^553^[REPLACE] registerMismatch ( found, required ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] String sourceName Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSError .make ( false , n , TYPE_MISMATCH_WARNING )   ) ;^551^552^^^^547^553^[REPLACE] JSError.make ( sourceName, n, TYPE_MISMATCH_WARNING, formatFoundRequired ( msg, found, required )  )  ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] String sourceName Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, TYPE_MISMATCH_WARNING, formatFoundRequired ( msg, found, required )  )  ) ;^552^^^^^547^553^[REPLACE] formatFoundRequired ( msg, found, required )  )  ) ;^[METHOD] mismatch [TYPE] void [PARAMETER] String sourceName Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^552^553^^^^547^553^[ADD] formatFoundRequired ( msg, found, required )  )  ) ; }^[METHOD] mismatch [TYPE] void [PARAMETER] String sourceName Node n String msg JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^castType = castType.restrictByNotNullOrUndefined (  ) ; ;^558^^^^^555^578^[REPLACE] found = found.restrictByNotNullOrUndefined (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^found = found.restrictByNotNullOrUndefined (  ) ; ;^559^^^^^555^578^[REPLACE] required = required.restrictByNotNullOrUndefined (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  required.canAssignTo ( found )  )  {^560^^^^^555^578^[REPLACE] if  ( found.canAssignTo ( required )  || required.canAssignTo ( found )  )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return "function";^561^^^^^555^578^[REPLACE] return;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatches.add ( new TypeMismatch ( ownerType, required )  ) ;^564^^^^^555^578^[REPLACE] mismatches.add ( new TypeMismatch ( found, required )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REMOVE]^mismatch ( t, n, msg, type, NUMBER_TYPE ) ;^564^^^^^555^578^[REMOVE] ^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^while  ( null.hasNext (  )  ;^571^^^^^555^578^[REPLACE] while  ( paramItA.hasNext (  )  && paramItB.hasNext (  )  )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , null.next (  ) .getJSType (  )  ) ;^572^573^^^^555^578^[REPLACE] registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerIfMismatch ( 0.hasNext (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^572^573^^^^555^578^[REPLACE] registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerIfMismatch ( null.hasNext (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^572^573^^^^555^578^[REPLACE] registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^paramItB .hasNext (  )  .getJSType (  )  ) ;^573^^^^^555^578^[REPLACE] paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^paramItB.hasNext (  ) .getJSType (  )  ) ;^573^^^^^555^578^[REPLACE] paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! found instanceof FunctionType ) {^565^566^^^^555^578^[REPLACE] if  ( found instanceof FunctionType && required instanceof FunctionType )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^while  ( paramItA.hasNext (  )   <=  paramItB.hasNext (  )  )  {^571^^^^^555^578^[REPLACE] while  ( paramItA.hasNext (  )  && paramItB.hasNext (  )  )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerIfMismatch ( this.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^572^573^^^^555^578^[REPLACE] registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerIfMismatch ( null.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^572^573^^^^555^578^[REPLACE] registerIfMismatch ( paramItA.next (  ) .getJSType (  ) , paramItB.next (  ) .getJSType (  )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REMOVE]^newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^573^^^^^555^578^[REMOVE] ^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^FunctionType fnTypeB =  (  ( FunctionType )  required ) ;^567^^^^^555^578^[REPLACE] FunctionType fnTypeA =  (  ( FunctionType )  found ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^FunctionType fnTypeA =  (  ( FunctionType )  found ) ;^568^^^^^555^578^[REPLACE] FunctionType fnTypeB =  (  ( FunctionType )  required ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItA = fnTypeA .getInstanceType (  )  .iterator (  ) ;^569^^^^^555^578^[REPLACE] Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^Iterator<Node> paramItB = fnTypeB.getParameters (  ) .iterator (  ) ;^569^570^^^^555^578^[ADD] Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ; Iterator<Node> paramItB = fnTypeB.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItB = fnTypeA.getParameters (  ) .iterator (  ) ;^570^^^^^555^578^[REPLACE] Iterator<Node> paramItB = fnTypeB.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^567^568^^^^555^578^[ADD] FunctionType fnTypeA =  (  ( FunctionType )  found ) ; FunctionType fnTypeB =  (  ( FunctionType )  required ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^568^569^^^^555^578^[ADD] FunctionType fnTypeB =  (  ( FunctionType )  required ) ; Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItA = fnTypeB.getParameters (  ) .iterator (  ) ;^569^^^^^555^578^[REPLACE] Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( found == null && required != null && !found.equals ( required )  )  {^581^582^^^^580^585^[REPLACE] if  ( found != null && required != null && !found.canAssignTo ( required )  )  {^[METHOD] registerIfMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( ownerType, required ) ;^583^^^^^580^585^[REPLACE] registerMismatch ( found, required ) ;^[METHOD] registerIfMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^583^^^^^580^585^[ADD] registerMismatch ( found, required ) ;^[METHOD] registerIfMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return MessageFormat.format ( FOUND_REQUIRED, variableName, found, required ) ;^592^^^^^590^593^[REPLACE] return MessageFormat.format ( FOUND_REQUIRED, description, found, required ) ;^[METHOD] formatFoundRequired [TYPE] String [PARAMETER] String description JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^while  ( objectType != null ;^614^^^^^606^649^[REPLACE] while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^objectType =  dereferenced.getImplicitPrototype (  ) ;^615^^^^^606^649^[REPLACE] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^610^^^^^606^649^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^while  ( objectType == null || !objectType.hasProperty ( propName )  )  {^614^^^^^606^649^[REPLACE] while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^objectType =  null.getImplicitPrototype (  ) ;^615^^^^^606^649^[REPLACE] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (dereferenced == null )  {^612^^^^^606^649^[REPLACE] if  ( objectType != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^String propName = n.getLastChild (  ) .getString (  ) ;objectType = objectType.getImplicitPrototype (  ) ;^612^613^614^615^616^606^649^[ADD] if  ( objectType != null )  { String propName = n.getLastChild (  ) .getString (  ) ; while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  { objectType = objectType.getImplicitPrototype (  ) ; }^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^615^^^^^606^649^[ADD] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == null && ( objectType.getConstructor (  )  != null ) {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.hasProperty (  )  + "." + propName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType .matchesStringContext (  )   + "." + propName;^623^^^^^606^649^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = n.getFirstChild (  ) .getString (  ) ;^613^^^^^606^649^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^613^^^^^606^649^[ADD] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  objectType.isFunctionPrototypeType (  )  )  )  {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType .matchesStringContext (  )   + "." + propName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType .matchesStringContext (  )    ;^623^^^^^606^649^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType anyObjectType = getNativeType ( NO_OBJECT_TYPE ) ;^611^^^^^606^649^[REPLACE] ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dereferenced == true )  {^612^^^^^606^649^[REPLACE] if  ( objectType != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^612^613^614^615^616^606^649^[ADD] if  ( objectType != null )  { String propName = n.getLastChild (  ) .getString (  ) ; while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  { objectType = objectType.getImplicitPrototype (  ) ; }^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^614^615^^^^606^649^[ADD] while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  { objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  objectType.hasProperty (  )  )  )  {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = n.getLastChild (  )  .getType (  )  ;^613^^^^^606^649^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.hasProperty (  )   &&  "."  &&  propName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType objectType = getJSType ( n.getLastChild (  )  ) .dereference (  ) ;^611^^^^^606^649^[REPLACE] ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n.getJSType (  ) ;^628^^^^^606^649^[REPLACE] JSType type = getJSType ( n ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^628^^^^^606^649^[ADD] JSType type = getJSType ( n ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( true )  {^629^^^^^606^649^[REPLACE] if  ( dereference )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == false )  {^631^^^^^606^649^[REPLACE] if  ( dereferenced != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^type =  objectType;^632^^^^^606^649^[REPLACE] type = dereferenced;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^632^^^^^606^649^[ADD] type = dereferenced;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType.isObjectd = rightType.dereference (  ) ;^630^^^^^606^649^[REPLACE] ObjectType dereferenced = type.dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^630^^^^^606^649^[ADD] ObjectType dereferenced = type.dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == null )  {^631^^^^^606^649^[REPLACE] if  ( dereferenced != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType dereferenced = required.dereference (  ) ;^630^^^^^606^649^[REPLACE] ObjectType dereferenced = type.dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String qualifiedName = n.getJSDocInfo (  ) ;^636^^^^^606^649^[REPLACE] String qualifiedName = n.getQualifiedName (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( type.isFunctionPrototypeType (  )  || ( type .isObject (  )   == false && type^637^638^639^^^606^649^[REPLACE] if  ( type.isFunctionPrototypeType (  )  || ( type.toObjectType (  )  != null && type.toObjectType (  ) .getConstructor (  )  != null )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( variableName == null )  {^641^^^^^606^649^[REPLACE] } else if  ( qualifiedName != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^}   return "function";^641^642^643^^645^606^649^[ADD] else if  ( qualifiedName != null )  { return qualifiedName; } else if  ( type instanceof FunctionType )  { return "function";^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^} else if  ( ! varType instanceof FunctionType )  {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type.isObject (  ) ;^647^^^^^643^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type.toString (  ) ;^645^^^^^606^649^[REPLACE] return "function";^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type.isObject (  ) ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return variableName;^642^^^^^606^649^[REPLACE] return qualifiedName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return sourceName;^642^^^^^606^649^[REPLACE] return qualifiedName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type .matchesStringContext (  )  ;^640^^^^^637^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^641^^^^^606^649^[REPLACE] } else if  ( qualifiedName != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^} else if  ( ! type instanceof FunctionType )  {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type .matchesStringContext (  )  ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^}   return "function";return type.toString (  ) ;^643^644^645^646^647^606^649^[ADD] else if  ( type instanceof FunctionType )  {  return "function"; } else { return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return varType.isObject (  ) ;^640^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return paramType.isObject (  ) ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n .getJSType (  )  ;^656^^^^^655^666^[REPLACE] JSType jsType = n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^656^^^^^655^666^[ADD] JSType jsType = n.getJSType (  ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( jsType != true )  {^657^^^^^655^666^[REPLACE] if  ( jsType == null )  {^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return varType;^664^^^^^655^666^[REPLACE] return jsType;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return MessageFormat.format ( FOUND_REQUIRED, description, found, required ) ;^662^^^^^655^666^[REPLACE] return getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] getJSType [TYPE] JSType [PARAMETER] Node n [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return typeRegistry .getJSType (  )  ;^669^^^^^668^670^[REPLACE] return typeRegistry.getNativeType ( typeId ) ;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  JSTypeNative typeId  [TYPE]  long serialVersionUID 
[REPLACE]^private static  long serialVersionUID = 1;^680^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  JSTypeNative typeId  [TYPE]  long serialVersionUID 
