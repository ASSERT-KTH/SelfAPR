[REPLACE]^private final List<TypeMismatch> mismatches ;^67^^^^^^^[REPLACE] private final List<TypeMismatch> mismatches = Lists.newArrayList (  ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private static   short  FOUND_REQUIRED = "{0}\n" + "found   : {1}\n" + "required: {2}";^70^71^72^73^^70^73^[REPLACE] private static final String FOUND_REQUIRED = "{0}\n" + "found   : {1}\n" + "required: {2}";^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType INVALID_CAST ;^75^76^77^78^^75^79^[REPLACE] static final DiagnosticType INVALID_CAST = DiagnosticType.warning ( "JSC_INVALID_CAST", "invalid cast - must be a subtype or supertype\n" + "from: {0}\n" +^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType TYPE_MISMATCH_WARNING ;^81^82^83^84^^81^84^[REPLACE] static final DiagnosticType TYPE_MISMATCH_WARNING = DiagnosticType.warning ( "JSC_TYPE_MISMATCH", "{0}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static  DiagnosticType MISSING_EXTENDS_TAG_WARNING = DiagnosticType.warning ( "JSC_MISSING_EXTENDS_TAG", "Missing @extends tag on type {0}" ) ;^86^87^88^89^^86^89^[REPLACE] static final DiagnosticType MISSING_EXTENDS_TAG_WARNING = DiagnosticType.warning ( "JSC_MISSING_EXTENDS_TAG", "Missing @extends tag on type {0}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static  DiagnosticType DUP_VAR_DECLARATION = DiagnosticType.warning ( "JSC_DUP_VAR_DECLARATION", "variable {0} redefined with type {1}, " + "original definition at {2}:{3} with type {4}" ) ;^91^92^93^94^^91^94^[REPLACE] static final DiagnosticType DUP_VAR_DECLARATION = DiagnosticType.warning ( "JSC_DUP_VAR_DECLARATION", "variable {0} redefined with type {1}, " + "original definition at {2}:{3} with type {4}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType HIDDEN_PROPERTY_MISMATCH ;^96^97^98^99^^96^101^[REPLACE] static final DiagnosticType HIDDEN_PROPERTY_MISMATCH = DiagnosticType.warning ( "JSC_HIDDEN_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + "of the property it overrides from superclass {1}\n" +^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED ;^103^104^105^106^^103^106^[REPLACE] static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED = DiagnosticType.warning ( "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", "property {0} on interface {1} is not implemented by type {2}" ) ;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^static final DiagnosticGroup ALL_DIAGNOSTICS  = null ;^108^109^110^111^^108^114^[REPLACE] static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup ( INVALID_CAST, TYPE_MISMATCH_WARNING, MISSING_EXTENDS_TAG_WARNING,^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^private static final long serialVersionUID ;^680^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^ [CLASS] TypeValidator TypeMismatch  
[REPLACE]^if  ( type.isUnknownType (  )  )  {^265^^^^^264^279^[REPLACE] if  ( objType.isUnknownType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^267^268^^^^264^279^[REPLACE] } else if  ( objType.toObjectType (  )  != null && objType.toObjectType (  ) .getIndexType (  )  != null )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( objType.isArrayType (  )  )  {^271^^^^^264^279^[REPLACE] } else if  ( objType.isArrayType (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^273^^^^^264^279^[REPLACE] } else if  ( objType.matchesObjectContext (  )  )  {^[METHOD] expectIndexMatch [TYPE] void [PARAMETER] NodeTraversal t Node n JSType objType JSType indexType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  objType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( leftType.equals (  )  && !rightType.canAssignTo ( leftType )  )  {^296^^^^^294^310^[REPLACE] if  ( !leftType.isNoType (  )  && !rightType.canAssignTo ( leftType )  )  {^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^if   (  !type.matchesNumberContext  (    )   && !type.isSubtype  (  allValueTypes  )    )   {  ;^297^^^^^294^310^[REPLACE] if  ( bothIntrinsics ( rightType, leftType )  )  {^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatch ( t, n, "assignment to property "  propName  " of "  getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^302^303^304^305^^297^306^[REPLACE] mismatch ( t, n, "assignment to property " + propName + " of " + getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^getReadableJSTypeName ( owner, false ) , rightType, leftType ) ;^304^305^^^^297^306^[REPLACE] getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[ADD]^^304^305^^^^297^306^[ADD] getReadableJSTypeName ( owner, true ) , rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^registerMismatch ( overridingType, hiddenType )  ;^300^^^^^294^310^[REPLACE] registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^307^^^^^294^310^[REPLACE] return false;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[ADD]^^297^298^^300^^294^310^[ADD] if  ( bothIntrinsics ( rightType, leftType )  )  {  registerMismatch ( rightType, leftType ) ;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[ADD]^^302^303^304^^^297^306^[ADD] mismatch ( t, n, "assignment to property " + propName + " of " + getReadableJSTypeName ( owner, true ) ,^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return false;  ;^307^^^^^294^310^[REPLACE] return false;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^309^^^^^294^310^[REPLACE] return true;^[METHOD] expectCanAssignToPropertyOf [TYPE] boolean [PARAMETER] NodeTraversal t Node n JSType rightType JSType leftType Node owner String propName [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  b  caseType  expectedType  indexType  leftType  objType  rightType  switchType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  owner  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  [TYPE]  long serialVersionUID 
[REPLACE]^FunctionType subCtor = superObject.getConstructor (  ) ;^399^^^^^398^419^[REPLACE] FunctionType subCtor = subObject.getConstructor (  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^ObjectType declaredSuper = superObject.getImplicitPrototype (  ) .getImplicitPrototype (  ) ;^400^401^^^^398^419^[REPLACE] ObjectType declaredSuper = subObject.getImplicitPrototype (  ) .getImplicitPrototype (  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if   (  !type.matchesNumberContext  (    )   && !type.isSubtype  (  allValueTypes  )    )   {  ;^402^^^^^398^419^[REPLACE] if  ( !declaredSuper.equals ( superObject )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^402^403^404^405^406^398^419^[ADD] if  ( !declaredSuper.equals ( superObject )  )  { if  ( declaredSuper.equals ( getNativeType ( OBJECT_TYPE )  )  )  { compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if   (  !type.matchesNumberContext  (    )   && !type.isSubtype  (  allValueTypes  )    )   {  ;^403^^^^^398^419^[REPLACE] if  ( declaredSuper.equals ( getNativeType ( OBJECT_TYPE )  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^mismatch ( t.getSourceName (  ) , n, "mismatch in declaration of superclass type", superObject, subObject ) ;^409^410^411^^^403^412^[REPLACE] mismatch ( t.getSourceName (  ) , n, "mismatch in declaration of superclass type", superObject, declaredSuper ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, superObject.toString (  )  )  ) ;^404^405^406^^^398^419^[REPLACE] compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^404^405^406^^^398^419^[ADD] compiler.report ( JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject .matchesStringContext (  )   )  ) ;^405^406^^^^398^419^[REPLACE] JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^( objectType.toString (  )  )  ;^406^^^^^398^419^[REPLACE] subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^registerMismatch ( subObject, declaredSuper ) ;^407^^^^^398^419^[REPLACE] registerMismatch ( superObject, declaredSuper ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( !subCtor.setPrototypeBasedOn (  )  )  {^415^^^^^398^419^[REPLACE] if  ( !subCtor.hasCachedValues (  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^subCtor.setPrototypeBasedOn ( subObject ) ;^416^^^^^398^419^[REPLACE] subCtor.setPrototypeBasedOn ( superObject ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^416^^^^^398^419^[ADD] subCtor.setPrototypeBasedOn ( superObject ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^JSError .make ( t , n , HIDDEN_PROPERTY_MISMATCH )   ) ;^405^406^^^^398^419^[REPLACE] JSError.make ( t, n, MISSING_EXTENDS_TAG_WARNING, subObject.toString (  )  )  ) ;^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^if  ( subCtor.hasCachedValues (  )  )  {^415^^^^^398^419^[REPLACE] if  ( !subCtor.hasCachedValues (  )  )  {^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[ADD]^^415^416^417^^^398^419^[ADD] if  ( !subCtor.hasCachedValues (  )  )  { subCtor.setPrototypeBasedOn ( superObject ) ; }^[METHOD] expectSuperType [TYPE] void [PARAMETER] NodeTraversal t Node n ObjectType superObject ObjectType subObject [CLASS] TypeValidator TypeMismatch   [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  expectedType  hiddenType  indexType  leftType  objType  overridingType  ownerType  paramType  rightType  switchType  type  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  FunctionType subCtor  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  [TYPE]  long serialVersionUID  [TYPE]  ObjectType declaredSuper  subObject  superObject  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  List mismatches 
[REPLACE]^boolean allowDupe = true;^455^^^^^454^506^[REPLACE] boolean allowDupe = false;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getType (  )   &&  Token.GETPROP )  {^456^^^^^454^506^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( info != null )  {^458^^^^^454^506^[REPLACE] if  ( info == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^info =  n.getJSDocInfo (  ) ;^459^^^^^454^506^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^allowDupe = info == null  >=  info.getSuppressions (  ) .contains ( "duplicate" ) ;^461^462^^^^454^506^[REPLACE] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^457^^^^^454^506^[ADD] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^info =  null.getJSDocInfo (  ) ;^459^^^^^454^506^[REPLACE] info = parent.getJSDocInfo (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^461^462^^^^454^506^[ADD] allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSType varType = var.getInputName (  ) ;^465^^^^^454^506^[REPLACE] JSType varType = var.getType (  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  varType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  && newType != null && newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^470^471^472^473^^454^506^[REPLACE] if  ( varType != null && varType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  && newType != null && newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^470^471^472^473^^454^506^[ADD] if  ( varType != null && varType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  && newType != null && newType != typeRegistry.getNativeType ( UNKNOWN_TYPE )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( var.input != true )  {^479^^^^^470^505^[REPLACE] if  ( var.input == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( allowDupe ) {^495^496^497^^^479^504^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var .getParentNode (  )  , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( propertyName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, paramType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, newType.toString (  ) , var .getParentNode (  )  , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^varType.isObject (  )  )  ) ;^502^^^^^495^503^[REPLACE] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getType (  )   ||  Token.VAR )  {^481^^^^^470^505^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^481^482^483^484^^470^505^[ADD] if  ( parent.getType (  )  == Token.VAR )  { if  ( n.getFirstChild (  )  != null )  { n.getFirstChild (  ) .setJSType ( varType ) ; }^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   !=  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n.setJSType (  )  == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^parent.setJSType ( newType ) ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .setJSType ( newType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REMOVE]^registerIfMismatch ( fnTypeA.getReturnType (  ) , fnTypeB.getReturnType (  )  )  ;^483^^^^^470^505^[REMOVE] ^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^callNode.getFirstChild (  )  ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getLastChild (  )  == null )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^483^^^^^470^505^[ADD] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getType (  )   ) {^481^^^^^470^505^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( parent.getType (  )   ||  Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^486^487^^^^481^488^[ADD] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ; parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n .getJSType (  )   == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == this )  {^482^^^^^470^505^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( paramType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .isSubtype ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n .getLastChild (  )  .setJSType ( varType ) ;^483^^^^^470^505^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^470^505^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, sourceName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, varType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^501^502^^^^495^503^[ADD] String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^type.toString (  )  ;^502^^^^^495^503^[REPLACE] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( var.input != null )  {^479^^^^^454^506^[REPLACE] if  ( var.input == null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^n.setJSType ( varType ) ;n.getFirstChild (  ) .setJSType ( varType ) ;^479^480^481^482^483^454^506^[ADD] if  ( var.input == null )  { n.setJSType ( varType ) ; if  ( parent.getType (  )  == Token.VAR )  { if  ( n.getFirstChild (  )  != null )  { n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^479^504^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, paramType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( sourceName, n, DUP_VAR_DECLARATION, sourceName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, overridingType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, newType.toString (  ) , var.getParentNode (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^500^501^502^^^495^503^[ADD] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( parent.getType (  )   &&  Token.VAR )  {^481^^^^^454^506^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^486^^^^^481^488^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.setJSType ( varType )  ;^487^^^^^481^488^[REPLACE] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^487^^^^^481^488^[ADD] parent.setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == null )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( type ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^callNode.getFirstChild (  )  ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getFirstChild (  )  == this )  {^482^^^^^454^506^[REPLACE] if  ( n.getFirstChild (  )  != null )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n .getLastChild (  )  .setJSType ( type ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getLastChild (  ) .setJSType ( varType ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getType (  )   &&  Token.VAR )  {^481^^^^^454^506^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^n.getFirstChild (  ) .setJSType ( type ) ;^483^^^^^454^506^[REPLACE] n.getFirstChild (  ) .setJSType ( varType ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^495^496^497^^^454^506^[REPLACE] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  {^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[ADD]^^495^496^497^498^499^454^506^[ADD] if  ( ! ( allowDupe || var.getParentNode (  ) .getType (  )  == Token.EXPR_RESULT )  || !newType.equals ( varType )  )  { compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^498^499^500^501^^495^503^[REPLACE] compiler.report ( JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) ,^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^JSError.make ( variableName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^499^500^501^502^^495^503^[REPLACE] JSError.make ( sourceName, n, DUP_VAR_DECLARATION, variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^variableName, newType.isObject (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^500^501^502^^^495^503^[REPLACE] variableName, newType.toString (  ) , var.getInputName (  ) , String.valueOf ( var.nameNode.getLineno (  )  ) , varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^varType .matchesStringContext (  )   )  ) ;^502^^^^^495^503^[REPLACE] varType.toString (  )  )  ) ;^[METHOD] expectUndeclaredVariable [TYPE] void [PARAMETER] String sourceName Node n Node parent Var var String variableName JSType newType [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean allowDupe  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  propName  propertyName  sourceName  variableName  [TYPE]  JSDocInfo info  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType instance = type .getReturnType (  )  ;^513^^^^^512^532^[REPLACE] ObjectType instance = type.getInstanceType (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( implemented.getImplicitPrototype (  )  == null )  {^515^^^^^512^532^[REPLACE] if  ( implemented.getImplicitPrototype (  )  != null )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( instance.hasProperty ( prop )  )  {^518^^^^^512^532^[REPLACE] if  ( !instance.hasProperty ( prop )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^518^519^520^521^522^512^532^[ADD] if  ( !instance.hasProperty ( prop )  )  { Node source = type.getSource (  ) ; Preconditions.checkNotNull ( source ) ; String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ; sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  =  sourceName;^522^^^^^512^532^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^519^^^^^512^532^[ADD] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String sourceName =  ( String )  source.getType ( Node.SOURCENAME_PROP ) ;^521^^^^^512^532^[REPLACE] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^516^517^518^519^520^515^530^[ADD] for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  { if  ( !instance.hasProperty ( prop )  )  { Node source = type.getSource (  ) ; Preconditions.checkNotNull ( source ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName = sourceName != null ? "" : sourceName;^522^^^^^515^530^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^519^^^^^515^530^[REPLACE] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String sourceName =  ( String )  source.getType ( Node.SOURCENAME_PROP ) ;^521^^^^^515^530^[REPLACE] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  =  "" ;^522^^^^^512^532^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String sourceName =  ( String )  source .getJSType (  )  ;^521^^^^^512^532^[REPLACE] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^514^515^516^517^^512^532^[ADD] for  ( ObjectType implemented : type.getAllImplementedInterfaces (  )  )  { if  ( implemented.getImplicitPrototype (  )  != null )  { for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^515^516^517^518^519^512^532^[ADD] if  ( implemented.getImplicitPrototype (  )  != null )  { for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  { if  ( !instance.hasProperty ( prop )  )  { Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Node source = type.getReturnType (  ) ;^519^^^^^512^532^[REPLACE] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( String variableName : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  {^516^517^^^^515^530^[REPLACE] for  ( String prop : implemented.getImplicitPrototype (  ) .getOwnPropertyNames (  )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  =  sourceName;^522^^^^^515^530^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^521^522^^^^515^530^[ADD] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ; sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName = sourceName != false ? "" : sourceName;^522^^^^^512^532^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^519^^^^^512^532^[REPLACE] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^522^^^^^515^530^[ADD] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^519^^^^^515^530^[ADD] Node source = type.getSource (  ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^sourceName  = variableName;^522^^^^^515^530^[REPLACE] sourceName = sourceName == null ? "" : sourceName;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^514^^^^^515^530^[REPLACE] for  ( ObjectType implemented : type.getAllImplementedInterfaces (  )  )  {^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String sourceName =  ( String )  source .getJSType (  )  ;^521^^^^^515^530^[REPLACE] String sourceName =  ( String )  source.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] expectAllInterfacePropertiesImplemented [TYPE] void [PARAMETER] FunctionType type [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType implemented  instance  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType type  [TYPE]  Node source  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^558^^^^^555^578^[ADD] found = found.restrictByNotNullOrUndefined (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^type = type.restrictByNotNullOrUndefined (  )  ;^559^^^^^555^578^[REPLACE] required = required.restrictByNotNullOrUndefined (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ownerType .matchesStringContext (  )   && required^560^^^^^555^578^[REPLACE] if  ( found.canAssignTo ( required )  || required.canAssignTo ( found )  )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^560^561^562^^^555^578^[ADD] if  ( found.canAssignTo ( required )  || required.canAssignTo ( found )  )  { return; }^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return;  ;^561^^^^^555^578^[REPLACE] return;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^mismatches.add ( new TypeMismatch ( found, varType )  ) ;^564^^^^^555^578^[REPLACE] mismatches.add ( new TypeMismatch ( found, required )  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! found instanceof FunctionType ) {^565^566^^^^555^578^[REPLACE] if  ( found instanceof FunctionType && required instanceof FunctionType )  {^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^FunctionType fnTypeB =  (  ( FunctionType )   ( required )  )  ;^567^^^^^565^577^[REPLACE] FunctionType fnTypeA =  (  ( FunctionType )  found ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^568^569^^^^565^577^[ADD] FunctionType fnTypeB =  (  ( FunctionType )  required ) ; Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^569^^^^^565^577^[ADD] Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItB = fnTypeA.getParameters (  ) .iterator (  ) ;^570^^^^^565^577^[REPLACE] Iterator<Node> paramItB = fnTypeB.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^567^^^^^555^578^[ADD] FunctionType fnTypeA =  (  ( FunctionType )  found ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^568^569^^^^555^578^[ADD] FunctionType fnTypeB =  (  ( FunctionType )  required ) ; Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItA = fnTypeB.getParameters (  ) .iterator (  ) ;^569^^^^^555^578^[REPLACE] Iterator<Node> paramItA = fnTypeA.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^Iterator<Node> paramItB = fnTypeA.getParameters (  ) .iterator (  ) ;^570^^^^^555^578^[REPLACE] Iterator<Node> paramItB = fnTypeB.getParameters (  ) .iterator (  ) ;^[METHOD] registerMismatch [TYPE] void [PARAMETER] JSType found JSType required [CLASS] TypeValidator TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  FunctionType fnTypeA  fnTypeB  [TYPE]  Iterator paramItA  paramItB  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  msg  prop  propName  propertyName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^610^^^^^606^649^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dereferenced == null )  {^612^^^^^606^649^[REPLACE] if  ( objectType != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dereferenced == null && ( objectType.getConstructor (  )  != null || objectType.hasProperty (  )  )  )  {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.toString (  )   "."  propName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^objectType =  dereferenced.getImplicitPrototype (  ) ;^615^^^^^606^649^[REPLACE] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return dereferenced.toString (  )   "."  propName;^623^^^^^606^649^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = n.getLastChild (  ) .contains (  ) ;^613^^^^^606^649^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.toString (  )   "."  variableName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.toString (  )   "."  propName;^623^^^^^606^649^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^611^^^^^606^649^[ADD] ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if   (  jsType == null  )   {  ;^612^^^^^606^649^[REPLACE] if  ( objectType != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^612^613^614^615^616^606^649^[ADD] if  ( objectType != null )  { String propName = n.getLastChild (  ) .getString (  ) ; while  ( objectType != null && !objectType.hasOwnProperty ( propName )  )  { objectType = objectType.getImplicitPrototype (  ) ; }^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.toString (  )   "."  sourceName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^615^^^^^606^649^[ADD] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return objectType.hasProperty (  )   "."  propName;^623^^^^^606^649^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = n.getLastChild (  )  .getType (  )  ;^613^^^^^606^649^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( objectType == true && ( objectType.getConstructor (  )  != true ) {^620^621^622^^^606^649^[REPLACE] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^620^621^622^623^624^606^649^[ADD] if  ( objectType != null && ( objectType.getConstructor (  )  != null || objectType.isFunctionPrototypeType (  )  )  )  { return objectType.toString (  )  + "." + propName; }^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return dereferenced.toString (  )   "."  propName;^623^^^^^620^624^[REPLACE] return objectType.toString (  )  + "." + propName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .setJSType (  ) ;^611^^^^^606^649^[REPLACE] ObjectType objectType = getJSType ( n.getFirstChild (  )  ) .dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = n.getFirstChild (  ) .getString (  ) ;^613^^^^^606^649^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^JSType jsType = n.getJSType (  )  ;^628^^^^^606^649^[REPLACE] JSType type = getJSType ( n ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if   (  !type.matchesNumberContext  (    )   && !type.isSubtype  (  allValueTypes  )    )   {  ;^629^^^^^606^649^[REPLACE] if  ( dereference )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (objectType == null )  {^631^^^^^606^649^[REPLACE] if  ( dereferenced != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^632^^^^^606^649^[ADD] type = dereferenced;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^type =  objectType;^632^^^^^606^649^[REPLACE] type = dereferenced;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType dereferenced = type .getOwnPropertyNames (  )  ;^630^^^^^606^649^[REPLACE] ObjectType dereferenced = type.dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( dereferenced == null )  {^631^^^^^606^649^[REPLACE] if  ( dereferenced != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^ObjectType dereferenced = varType.dereference (  ) ;^630^^^^^606^649^[REPLACE] ObjectType dereferenced = type.dereference (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^636^637^638^639^640^606^649^[ADD] String qualifiedName = n.getQualifiedName (  ) ; if  ( type.isFunctionPrototypeType (  )  || ( type.toObjectType (  )  != null && type.toObjectType (  ) .getConstructor (  )  != null )  )  { return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( type.toObjectType (  )  == null && type.toObjectType (  ) .getConstructor (  )  != null )  )  {^637^638^639^^^606^649^[REPLACE] if  ( type.isFunctionPrototypeType (  )  || ( type.toObjectType (  )  != null && type.toObjectType (  ) .getConstructor (  )  != null )  )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^^637^638^639^640^^606^649^[ADD] if  ( type.isFunctionPrototypeType (  )  || ( type.toObjectType (  )  != null && type.toObjectType (  ) .getConstructor (  )  != null )  )  { return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( sourceName == null )  {^641^^^^^606^649^[REPLACE] } else if  ( qualifiedName != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^}   return qualifiedName;return "function";^641^642^643^^645^606^649^[ADD] else if  ( qualifiedName != null )  { return qualifiedName; } else if  ( type instanceof FunctionType )  { return "function";^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( ! type instanceof FunctionType )  {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return varType.toString (  ) ;^647^^^^^643^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return "function";  ;^645^^^^^606^649^[REPLACE] return "function";^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return required.toString (  ) ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return variableName;^642^^^^^606^649^[REPLACE] return qualifiedName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^} else if  ( ! varType instanceof FunctionType )  {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return ownerType .matchesStringContext (  )  ;^647^^^^^643^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return sourceName;^642^^^^^606^649^[REPLACE] return qualifiedName;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return paramType.toString (  ) ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return rightType .matchesStringContext (  )  ;^640^^^^^637^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^641^^^^^606^649^[REPLACE] } else if  ( qualifiedName != null )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^}  else {^643^^^^^606^649^[REPLACE] } else if  ( type instanceof FunctionType )  {^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[ADD]^}   return "function";return type.toString (  ) ;^643^644^645^646^647^606^649^[ADD] else if  ( type instanceof FunctionType )  {  return "function"; } else { return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return overridingType.toString (  ) ;^647^^^^^643^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return required.isObject (  ) ;^647^^^^^643^648^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return required .matchesStringContext (  )  ;^640^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^return type.toString  (    )  ;  ;^647^^^^^606^649^[REPLACE] return type.toString (  ) ;^[METHOD] getReadableJSTypeName [TYPE] String [PARAMETER] Node n boolean dereference [CLASS] TypeValidator TypeMismatch   [TYPE]  ObjectType dereferenced  objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean dereference  false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  Node n  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  long serialVersionUID 
[REPLACE]^private static  long serialVersionUID = 4;^680^^^^^^^[REPLACE] private static final long serialVersionUID = 1;^[METHOD] getNativeType [TYPE] JSType [PARAMETER] JSTypeNative typeId [CLASS] TypeMismatch   [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType a  allValueTypes  anyObjectType  argType  b  caseType  castType  expectedType  found  hiddenType  indexType  jsType  leftType  newType  objType  overridingType  ownerType  paramType  required  rightType  switchType  type  varType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType DUP_VAR_DECLARATION  HIDDEN_PROPERTY_MISMATCH  INTERFACE_METHOD_NOT_IMPLEMENTED  INVALID_CAST  MISSING_EXTENDS_TAG_WARNING  TYPE_MISMATCH_WARNING  [TYPE]  DiagnosticGroup ALL_DIAGNOSTICS  [TYPE]  List mismatches  [TYPE]  String FOUND_REQUIRED  description  msg  prop  propName  propertyName  qualifiedName  sourceName  variableName  [TYPE]  JSTypeNative typeId  [TYPE]  long serialVersionUID 
