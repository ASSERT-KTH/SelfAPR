[REPLACE]^private static   char  TYPEDEF_NAME = "goog.typedef";^39^^^^^^^[REPLACE] private static final String TYPEDEF_NAME = "goog.typedef";^ [CLASS] ClosureCodingConvention  
[REPLACE]^static final DiagnosticType OBJECTLIT_EXPECTED ;^41^42^43^^^41^43^[REPLACE] static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^ [CLASS] ClosureCodingConvention  
[REPLACE]^private final Set<String> propertyTestFunctions  = null ;^282^283^284^285^^282^285^[REPLACE] private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^ [CLASS] ClosureCodingConvention  
[REPLACE]^if  ( type  &&  SubclassType.INHERITS )  {^52^^^^^50^58^[REPLACE] if  ( type == SubclassType.INHERITS )  {^[METHOD] applySubclassRelationship [TYPE] void [PARAMETER] FunctionType parentCtor FunctionType childCtor SubclassType type [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType childCtor  parentCtor 
[ADD]^^52^53^54^55^56^50^58^[ADD] if  ( type == SubclassType.INHERITS )  { childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ; childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[METHOD] applySubclassRelationship [TYPE] void [PARAMETER] FunctionType parentCtor FunctionType childCtor SubclassType type [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType childCtor  parentCtor 
[REPLACE]^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^54^^^^^50^58^[REPLACE] parentCtor.getPrototype (  ) , false ) ;^[METHOD] applySubclassRelationship [TYPE] void [PARAMETER] FunctionType parentCtor FunctionType childCtor SubclassType type [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType childCtor  parentCtor 
[REMOVE]^methodName = callName.getLastChild (  ) .getString (  ) ;^54^^^^^50^58^[REMOVE] ^[METHOD] applySubclassRelationship [TYPE] void [PARAMETER] FunctionType parentCtor FunctionType childCtor SubclassType type [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType childCtor  parentCtor 
[REPLACE]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", parentCtor, false ) ;^55^56^^^^50^58^[REPLACE] childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[METHOD] applySubclassRelationship [TYPE] void [PARAMETER] FunctionType parentCtor FunctionType childCtor SubclassType type [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType childCtor  parentCtor 
[REPLACE]^Node callName = callName .getLastChild (  )  ;^68^^^^^67^107^[REPLACE] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^68^^^^^67^107^[ADD] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^SubclassType type = typeofClassDefiningName ( superclass ) ;^69^^^^^67^107^[REPLACE] SubclassType type = typeofClassDefiningName ( callName ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( type == this )  {^70^^^^^67^107^[REPLACE] if  ( type != null )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  (  callName.getType (  )  == Token.GETPROP )  {^81^82^^^^67^107^[REPLACE] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^81^82^^84^^67^107^[ADD] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  { subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^} else if  ( call       ||  3 % 3 )  {^85^^^^^67^107^[REPLACE] } else if  ( callNode.getChildCount (  )  == 3 )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^}   subclass = callName.getNext (  ) ;^85^86^87^88^^67^107^[ADD] else if  ( callNode.getChildCount (  )  == 3 )  {  subclass = callName.getNext (  ) ; }^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getFirstChild (  ) ; ;^87^^^^^67^107^[REPLACE] subclass = callName.getNext (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^87^^^^^67^107^[ADD] subclass = callName.getNext (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getNext (  ) ; ;^84^^^^^81^88^[REPLACE] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^84^^^^^81^88^[ADD] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^}  else {^85^^^^^67^107^[REPLACE] } else if  ( callNode.getChildCount (  )  == 3 )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( subclass == null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^67^107^[REPLACE] if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^94^95^96^^^67^107^[ADD] if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( callName ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^subclass = callName.getNext (  ) ; ;^84^^^^^67^107^[REPLACE] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^67^107^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node subclass = false;^71^^^^^67^107^[REPLACE] Node subclass = null;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node superclass = callName.getLastChild (  ) ;^72^^^^^67^107^[REPLACE] Node superclass = callNode.getLastChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^if  ( callNode.getChildCount (  )  == 2 ) {^81^82^^^^67^107^[REPLACE] if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^}  if  ( callNode.getChildCount (  )   !=  2 )  {^85^^^^^67^107^[REPLACE] } else if  ( callNode.getChildCount (  )  == 3 )  {^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[ADD]^^84^^^^^67^107^[ADD] subclass = callName.getFirstChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return new SubclassRelationship ( type, stripPrototype ( callName ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^67^107^[REPLACE] return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node subclass = this;^71^^^^^67^107^[REPLACE] Node subclass = null;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^Node superclass = callName .getFirstChild (  )  ;^72^^^^^67^107^[REPLACE] Node superclass = callNode.getLastChild (  ) ;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^return false;^106^^^^^67^107^[REPLACE] return null;^[METHOD] getClassesDefinedByCall [TYPE] SubclassRelationship [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  [TYPE]  boolean false  true  [TYPE]  SubclassType type  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  subclass  superclass 
[REPLACE]^String methodName = true;^116^^^^^114^135^[REPLACE] String methodName = null;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^116^^^^^114^135^[ADD] String methodName = null;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( callName.getType (  )   !=  Token.GETPROP )  {^117^^^^^114^135^[REPLACE] if  ( callName.getType (  )  == Token.GETPROP )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  if  ( callName.getType (  )   &&  Token.NAME )  {^119^^^^^114^135^[REPLACE] } else if  ( callName.getType (  )  == Token.NAME )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -1 )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  <=  1 / 0 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^123^^^^^114^135^[ADD] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  &  4 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^String name = callName .getNext (  )  ;^120^^^^^114^135^[REPLACE] String name = callName.getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^int dollarIndex = methodName.lastIndexOf ( '$' ) ;^121^^^^^114^135^[REPLACE] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -0 )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  &&  1 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  ^  3 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^String name = callName.getType (  ) ;^120^^^^^114^135^[REPLACE] String name = callName.getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^120^121^^^^114^135^[ADD] String name = callName.getString (  ) ; int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^className = callee.getNext (  ) .getString (  ) ; ;^118^^^^^114^135^[REPLACE] methodName = callName.getLastChild (  ) .getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  else {^119^^^^^114^135^[REPLACE] } else if  ( callName.getType (  )  == Token.NAME )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  ||  1L ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  &  1 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^int dollarIndex = methodName.substring ( '$' ) ;^121^^^^^114^135^[REPLACE] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^121^^^^^114^135^[ADD] int dollarIndex = name.lastIndexOf ( '$' ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( dollarIndex  ==  -3 )  {^122^^^^^114^135^[REPLACE] if  ( dollarIndex != -1 )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  >=  1 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^^118^^^^^114^135^[ADD] methodName = callName.getLastChild (  ) .getString (  ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^methodName = name.substring ( dollarIndex  >  1 ) ;^123^^^^^114^135^[REPLACE] methodName = name.substring ( dollarIndex + 1 ) ;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( methodName ==name )  {^127^^^^^114^135^[REPLACE] if  ( methodName != null )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( name.substring ( "inherits" )  )  {^128^^^^^114^135^[REPLACE] if  ( methodName.equals ( "inherits" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^} else if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return new SubclassRelationship ( type,^131^^^^^114^135^[REPLACE] return SubclassType.MIXIN;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return new SubclassRelationship ( type,^129^^^^^114^135^[REPLACE] return SubclassType.INHERITS;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  else {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^if  ( name.equals ( "inherits" )  )  {^128^^^^^114^135^[REPLACE] if  ( methodName.equals ( "inherits" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^return SubclassType.INHERITS;return SubclassType.MIXIN;^128^129^130^131^132^114^135^[ADD] if  ( methodName.equals ( "inherits" )  )  { return SubclassType.INHERITS; } else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^}  if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^[REPLACE] } else if  ( methodName.equals ( "mixin" )  )  {^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[ADD]^}^130^131^132^^^114^135^[ADD] else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return this;^134^^^^^114^135^[REPLACE] return null;^[METHOD] typeofClassDefiningName [TYPE] SubclassType [PARAMETER] Node callName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int dollarIndex  [TYPE]  Node callName 
[REPLACE]^return "superClass_".substring ( propertyName ) ;^139^^^^^138^140^[REPLACE] return "superClass_".equals ( propertyName ) ;^[METHOD] isSuperClassReference [TYPE] boolean [PARAMETER] String propertyName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
[REPLACE]^if  ( qualifiedName.getType (  )  == Token.GETPROP ) {^150^151^^^^149^156^[REPLACE] if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] stripPrototype [TYPE] Node [PARAMETER] Node qualifiedName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node qualifiedName 
[REPLACE]^return qualifiedName.getLastChild (  ) ;^152^^^^^149^156^[REPLACE] return qualifiedName.getFirstChild (  ) ;^[METHOD] stripPrototype [TYPE] Node [PARAMETER] Node qualifiedName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node qualifiedName 
[REPLACE]^return new SubclassRelationship ( type,^155^^^^^149^156^[REPLACE] return qualifiedName;^[METHOD] stripPrototype [TYPE] Node [PARAMETER] Node qualifiedName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node qualifiedName 
[REPLACE]^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^165^^^^^164^166^[REPLACE] return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[METHOD] extractClassNameIfProvide [TYPE] String [PARAMETER] Node node Node parent [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node node  parent 
[REPLACE]^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^175^^^^^174^176^[REPLACE] return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[METHOD] extractClassNameIfRequire [TYPE] String [PARAMETER] Node node Node parent [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  methodName  name  propertyName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node node  parent 
[REPLACE]^String className = true;^180^^^^^178^191^[REPLACE] String className = null;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  ( type == SubclassType.INHERITS )  {^181^^^^^178^191^[REPLACE] if  ( NodeUtil.isExprCall ( parent )  )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  (  callee.getType (  )  != Token.GETPROP )  {^183^^^^^178^191^[REPLACE] if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  ( type == SubclassType.INHERITS )  {^185^^^^^178^191^[REPLACE] if  (  ( functionName ) .equals ( qualifiedName )  )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^methodName = callName.getLastChild (  ) .getString (  ) ; ;^186^^^^^178^191^[REPLACE] className = callee.getNext (  ) .getString (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^String qualifiedName = parent.getQualifiedName (  ) ;^184^^^^^178^191^[REPLACE] String qualifiedName = callee.getQualifiedName (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  (  ( qualifiedName ) .equals ( qualifiedName )  )  {^185^^^^^178^191^[REPLACE] if  (  ( functionName ) .equals ( qualifiedName )  )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[ADD]^^185^186^187^^^178^191^[ADD] if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^Node callee = parent.getFirstChild (  ) ;^182^^^^^178^191^[REPLACE] Node callee = node.getFirstChild (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^String qualifiedName = parent.isQualifiedName (  ) ;^184^^^^^178^191^[REPLACE] String qualifiedName = callee.getQualifiedName (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[ADD]^^184^185^186^187^^178^191^[ADD] String qualifiedName = callee.getQualifiedName (  ) ; if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  ( callee != this ) {^183^^^^^178^191^[REPLACE] if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[ADD]^^183^184^185^186^187^178^191^[ADD] if  ( callee != null && callee.getType (  )  == Token.GETPROP )  { String qualifiedName = callee.getQualifiedName (  ) ; if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^if  (  ( functionName ) .equals ( propertyName )  )  {^185^^^^^178^191^[REPLACE] if  (  ( functionName ) .equals ( qualifiedName )  )  {^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[ADD]^^186^^^^^178^191^[ADD] className = callee.getNext (  ) .getString (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^String qualifiedName = parent .isQualifiedName (  )  ;^184^^^^^178^191^[REPLACE] String qualifiedName = callee.getQualifiedName (  ) ;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[ADD]^className = callee.getNext (  ) .getString (  ) ;^185^186^187^^^178^191^[ADD] if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^return propertyName;^190^^^^^178^191^[REPLACE] return className;^[METHOD] extractClassNameIfGoog [TYPE] String [PARAMETER] Node node Node parent String functionName [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callee  node  parent 
[REPLACE]^return new SubclassRelationship ( type,^199^^^^^198^200^[REPLACE] return "goog.exportProperty";^[METHOD] getExportPropertyFunction [TYPE] String [PARAMETER] [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
[REPLACE]^return SubclassType.INHERITS;^208^^^^^207^209^[REPLACE] return "goog.exportSymbol";^[METHOD] getExportSymbolFunction [TYPE] String [PARAMETER] [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
[REPLACE]^Node callName = name.getFirstChild (  ) ;^213^^^^^212^229^[REPLACE] Node callName = n.getFirstChild (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^213^^^^^212^229^[ADD] Node callName = n.getFirstChild (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  (  n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^[REPLACE] if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( name.getType (  )   ||  Token.ARRAYLIT )  {^217^^^^^212^229^[REPLACE] if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^List<String> typeNames = Lists.newArrayList (  ) ;for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^217^218^219^220^^212^229^[ADD] if  ( typeArray.getType (  )  == Token.ARRAYLIT )  { List<String> typeNames = Lists.newArrayList (  ) ; for  ( Node name = typeArray.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( name.getType (  )   !=  Token.STRING )  {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( typeArray.getString (  )  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^222^^^^^212^229^[ADD] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( NodetypeArray = typeArray.getFirstChild (  ) ; name == null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( name.getType (  )   ||  Token.STRING )  {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^name =  typeArray.getNext (  )  )  {^220^^^^^212^229^[REPLACE] name = name.getNext (  )  )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return this;^225^^^^^212^229^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^String name = callName.getString (  ) ;^218^^^^^212^229^[REPLACE] List<String> typeNames = Lists.newArrayList (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^218^219^^^^212^229^[ADD] List<String> typeNames = Lists.newArrayList (  ) ; for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( typeArray .getNext (  )   ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = typeArray.getFirstChild (  ) ; name == null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( typeArray.getType (  )   !=  Token.STRING )  {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^typeNames.add ( name.getString (  )  ) ;^221^222^223^^^212^229^[ADD] if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REMOVE]^methodName = callName.getLastChild (  ) .getString (  ) ;^222^^^^^212^229^[REMOVE] ^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return null;^225^^^^^212^229^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node typeArray = name.getNext (  ) .getNext (  ) ;^216^^^^^212^229^[REPLACE] Node typeArray = callName.getNext (  ) .getNext (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^219^220^221^222^223^212^229^[ADD] for  ( Node name = typeArray.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  { if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( typeArray.getType (  )   !=  Token.ARRAYLIT )  {^217^^^^^212^229^[REPLACE] if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^if  ( name.getType (  )   &&  Token.STRING )  {^221^^^^^212^229^[REPLACE] if  ( name.getType (  )  == Token.STRING )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( name.getType (  )  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^methodName = callName.getLastChild (  ) .getString (  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^name =  null.getNext (  )  )  {^220^^^^^212^229^[REPLACE] name = name.getNext (  )  )  {^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^220^221^222^^^212^229^[ADD] name = name.getNext (  )  )  { if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return 1;^225^^^^^212^229^[REPLACE] return typeNames;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^218^219^^^^212^229^[ADD] List<String> typeNames = Lists.newArrayList (  ) ; for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( name .getNext (  )   ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^typeNames.add ( typeArray.getType (  )  ) ;^222^^^^^212^229^[REPLACE] typeNames.add ( name.getString (  )  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node typeArray = callName.equals (  ) .getNext (  ) ;^216^^^^^212^229^[REPLACE] Node typeArray = callName.getNext (  ) .getNext (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[ADD]^^216^^^^^212^229^[ADD] Node typeArray = callName.getNext (  ) .getNext (  ) ;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^for  ( Node name = typeArray.getLastChild (  ) ; name != null;^219^^^^^212^229^[REPLACE] for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^return this;^228^^^^^212^229^[REPLACE] return null;^[METHOD] identifyTypeDeclarationCall [TYPE] List [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  List typeNames  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  n  name  typeArray 
[REPLACE]^Node firstChild = n.getLastChild (  ) ;^233^^^^^232^247^[REPLACE] Node firstChild = n.getFirstChild (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^int type = n.getNext (  ) ;^234^^^^^232^247^[REPLACE] int type = n.getType (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( type  ||  Token.ASSIGN )  {^235^^^^^232^247^[REPLACE] if  ( type == Token.ASSIGN )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^}  if  (  firstChild.hasChildren (  )  )  {^239^^^^^232^247^[REPLACE] } else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[ADD]^}   return firstChild.getString (  ) ;^239^240^241^242^243^232^247^[ADD] else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  { if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^[REPLACE] if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return firstChild .getNext (  )  ;^242^^^^^232^247^[REPLACE] return firstChild.getString (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return firstChild.getType (  ) ;^242^^^^^232^247^[REPLACE] return firstChild.getString (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .equals (  )  )  )  {^240^241^^^^232^247^[REPLACE] if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .isQualifiedName (  )  )  )  {^236^^^^^232^247^[REPLACE] if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return firstChild.isQualifiedName (  ) ;^237^^^^^232^247^[REPLACE] return firstChild.getQualifiedName (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^[REPLACE] if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^}  if  ( type == Token.VAR ) {^239^^^^^232^247^[REPLACE] } else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^if  ( TYPEDEF_NAME.equals ( firstChild.getLastChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^[REPLACE] if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[ADD]^^240^241^242^243^^232^247^[ADD] if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return firstChild .isQualifiedName (  )  ;^237^^^^^232^247^[REPLACE] return firstChild.getQualifiedName (  ) ;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return false;^246^^^^^232^247^[REPLACE] return null;^[METHOD] identifyTypeDefAssign [TYPE] String [PARAMETER] Node n [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  int type  [TYPE]  Node firstChild  n 
[REPLACE]^return SubclassType.INHERITS;^251^^^^^250^252^[REPLACE] return "goog.abstractMethod";^[METHOD] getAbstractMethodName [TYPE] String [PARAMETER] [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
[REPLACE]^Node callName = classNode.getFirstChild (  ) ;^256^^^^^255^268^[REPLACE] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  ) {^257^258^^^^255^268^[REPLACE] if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[ADD]^^257^258^259^260^^255^268^[ADD] if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^return this;^259^^^^^255^268^[REPLACE] return null;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^return false;^259^^^^^255^268^[REPLACE] return null;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^Node classNode = classNode.getNext (  ) ;^262^^^^^255^268^[REPLACE] Node classNode = callName.getNext (  ) ;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[ADD]^^262^^^^^255^268^[ADD] Node classNode = callName.getNext (  ) ;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^if  ( !class      )  {^263^^^^^255^268^[REPLACE] if  ( !classNode.isQualifiedName (  )  )  {^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^return true;^264^^^^^255^268^[REPLACE] return null;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^return this;^264^^^^^255^268^[REPLACE] return null;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^return callName.getNext (  ) .equals (  ) ;^267^^^^^255^268^[REPLACE] return callName.getNext (  ) .getQualifiedName (  ) ;^[METHOD] getSingletonGetterClassName [TYPE] String [PARAMETER] Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  classNode 
[REPLACE]^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^273^^^^^271^275^[REPLACE] functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[METHOD] applySingletonGetter [TYPE] void [PARAMETER] FunctionType functionType FunctionType getterType ObjectType objectType [CLASS] ClosureCodingConvention   [TYPE]  ObjectType objectType  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType functionType  getterType 
[ADD]^^273^^^^^271^275^[ADD] functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[METHOD] applySingletonGetter [TYPE] void [PARAMETER] FunctionType functionType FunctionType getterType ObjectType objectType [CLASS] ClosureCodingConvention   [TYPE]  ObjectType objectType  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType functionType  getterType 
[REPLACE]^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^274^^^^^271^275^[REPLACE] functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[METHOD] applySingletonGetter [TYPE] void [PARAMETER] FunctionType functionType FunctionType getterType ObjectType objectType [CLASS] ClosureCodingConvention   [TYPE]  ObjectType objectType  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType functionType  getterType 
[ADD]^^274^^^^^271^275^[ADD] functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[METHOD] applySingletonGetter [TYPE] void [PARAMETER] FunctionType functionType FunctionType getterType ObjectType objectType [CLASS] ClosureCodingConvention   [TYPE]  ObjectType objectType  [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  FunctionType functionType  getterType 
[REPLACE]^return SubclassType.INHERITS;^279^^^^^278^280^[REPLACE] return "goog.global";^[METHOD] getGlobalObject [TYPE] String [PARAMETER] [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
[REPLACE]^Preconditions.checkArgument ( call.getType (  )   &&  Token.CALL ) ;^289^^^^^288^292^[REPLACE] Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[METHOD] isPropertyTestFunction [TYPE] boolean [PARAMETER] Node call [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node call 
[REPLACE]^Preconditions.checkArgument ( call .getString (  )   == Token.CALL ) ;^289^^^^^288^292^[REPLACE] Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[METHOD] isPropertyTestFunction [TYPE] boolean [PARAMETER] Node call [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node call 
[ADD]^^289^^^^^288^292^[ADD] Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[METHOD] isPropertyTestFunction [TYPE] boolean [PARAMETER] Node call [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node call 
[REPLACE]^return propertyTestFunctions.contains ( call.getFirstChild (  )  .isQualifiedName (  )   ) ;^290^291^^^^288^292^[REPLACE] return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] isPropertyTestFunction [TYPE] boolean [PARAMETER] Node call [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node call 
[REPLACE]^Preconditions.checkArgument ( callNode.getType (  )   !=  Token.CALL ) ;^297^^^^^295^318^[REPLACE] Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Preconditions.checkArgument ( typeNode.getType (  )  == Token.CALL ) ;^297^^^^^295^318^[REPLACE] Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node callName = typeNode.getFirstChild (  ) ;^298^^^^^295^318^[REPLACE] Node callName = callNode.getFirstChild (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  ) {^299^300^^^^295^318^[REPLACE] if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return true;^301^^^^^295^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return this;^301^^^^^295^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node typeNode = typeNode.getType (  ) ;^304^^^^^295^318^[REPLACE] Node typeNode = callName.getNext (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[ADD]^^304^^^^^295^318^[ADD] Node typeNode = callName.getNext (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( !type      )  {^305^^^^^295^318^[REPLACE] if  ( !typeNode.isQualifiedName (  )  )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[ADD]^return null;^305^306^307^^^295^318^[ADD] if  ( !typeNode.isQualifiedName (  )  )  { return null; }^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return false;^306^^^^^295^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^Node objectNode = objectNode.getNext (  ) ;^309^^^^^295^318^[REPLACE] Node objectNode = typeNode.getNext (  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^if  ( objectNode.getType (  )   ==  Token.OBJECTLIT )  {^310^^^^^295^318^[REPLACE] if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[ADD]^^310^311^312^313^314^295^318^[ADD] if  ( objectNode.getType (  )  != Token.OBJECTLIT )  { t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ; return null; }^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return true;^313^^^^^295^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return false;^313^^^^^295^318^[REPLACE] return null;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return new ObjectLiteralCast ( objectNode.isQualifiedName (  ) , typeNode.getNext (  )  ) ;^316^317^^^^295^318^[REPLACE] return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[METHOD] getObjectLiteralCast [TYPE] ObjectLiteralCast [PARAMETER] NodeTraversal t Node callNode [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node callName  callNode  objectNode  typeNode 
[REPLACE]^return true;^325^^^^^324^326^[REPLACE] return false;^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node parameter [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node parameter 
[REPLACE]^return true;^333^^^^^332^334^[REPLACE] return false;^[METHOD] isVarArgsParameter [TYPE] boolean [PARAMETER] Node parameter [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED  [TYPE]  Node parameter 
[REPLACE]^return true;^341^^^^^340^342^[REPLACE] return false;^[METHOD] isPrivate [TYPE] boolean [PARAMETER] String name [CLASS] ClosureCodingConvention   [TYPE]  Set propertyTestFunctions  [TYPE]  String TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType OBJECTLIT_EXPECTED 
