[REPLACE]^private final  long  numThreads;^34^^^^^^^[REPLACE] private final int numThreads;^ [CLASS] RemoveConstantExpressionsParallel 1 1  
[REPLACE]^AstParallelizer splitter = AstParallelizer .createNewFileLevelAstParallelizer ( subtree ) ;^48^49^^^^46^70^[REPLACE] AstParallelizer splitter = AstParallelizer .createNewFileLevelAstParallelizer ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
[REPLACE]^return  new Task> (  )  {     Override     public Task get (  )  {         return new Task (  )  {             Override             public Result processSubtree ( Node subtree )  {                 RemoveConstantRValuesCallback cb = new RemoveConstantRValuesCallback (  ) ;                 traverse ( null, subtree, cb ) ;                 return cb.getResult (  ) ;             }         };     } }   {^55^^^^^46^70^[REPLACE] return new Task (  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
[REPLACE]^return cb.getResult  (    )  ;  ;^61^^^^^46^70^[REPLACE] return cb.getResult (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
[REPLACE]^AstParallelizer splitter = createNewFileLevelAstParallelizer ( root )  ;^52^^^^^46^70^[REPLACE] Supplier<Task> supplier = new Supplier<Task> (  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
[ADD]^^58^59^^^^46^70^[ADD] RemoveConstantRValuesCallback cb = new RemoveConstantRValuesCallback (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
[REPLACE]^( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  )  .RemoveConstantExpressionsParallel ( compiler , numThreads )  ;^68^69^^^^46^70^[REPLACE] ( new ParallelCompilerPass ( compiler, splitter, supplier, numThreads )  ) .process ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressionsParallel 1 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  subtree  [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  Supplier supplier  [TYPE]  int numThreads 
