[REPLACE]^private  AbstractCompiler compiler;^71^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  
[REPLACE]^private final  char  varName;^189^^^^^^^[REPLACE] private final String varName;^ [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  
[REPLACE]^private  long  numUseWithinUseCfgNode;^201^^^^^^^[REPLACE] private int numUseWithinUseCfgNode;^ [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4  
[REPLACE]^this.compiler =  null;^81^^^^^80^82^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^81^^^^^80^82^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^204^^^^^203^209^[ADD] Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^this.varName =  null;^205^^^^^203^209^[REPLACE] this.varName = varName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^this.useCfgNode = useCfgNode; ;^206^^^^^203^209^[REPLACE] this.defCfgNode = defCfgNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^this.use =  useCfgNode;^207^^^^^203^209^[REPLACE] this.use = use;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^this.defCfgNode = defCfgNode; ;^208^^^^^203^209^[REPLACE] this.useCfgNode = useCfgNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( t .getScope (  )   )  {^87^^^^^85^114^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^87^88^89^^^85^114^[ADD] if  ( t.inGlobalScope (  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^88^^^^^85^114^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^92^^^^^85^114^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^NodeUtil.isFunction ( t.getScopeRoot (  )   ) ;^94^^^^^85^114^[REPLACE] Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Preconditions.checkState ( NodeUtil.isFunction ( t .getScope (  )   )  ) ;^94^^^^^85^114^[REPLACE] Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Preconditions.checkState ( NodeUtil.isFunction ( t.getScope (  )  )  ) ;^94^^^^^85^114^[REPLACE] Preconditions.checkState ( NodeUtil.isFunction ( t.getScopeRoot (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^cfa.process ( true, t.getScopeRoot (  ) .getLastChild (  )  ) ;^95^^^^^85^114^[REPLACE] cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^cfa.process ( null, t.getScopeRoot (  )  .getType (  )   ) ;^95^^^^^85^114^[REPLACE] cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REMOVE]^if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false;^95^^^^^85^114^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^cfa.process ( null, t .getScope (  )  .getLastChild (  )  ) ;^95^^^^^85^114^[REPLACE] cfa.process ( null, t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^cfg =  null.getCfg (  ) ;^96^^^^^85^114^[REPLACE] cfg = cfa.getCfg (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^96^97^^^^85^114^[ADD] cfg = cfa.getCfg (  ) ; reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ; ;^97^^^^^85^114^[REPLACE] reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^reachingUses.analyze (  ) ;^98^^^^^85^114^[REPLACE] reachingDef.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^98^^^^^85^114^[ADD] reachingDef.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^candidates  =  candidates ;^99^^^^^85^114^[REPLACE] candidates = Lists.newLinkedList (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  )  .getType (  )   ) ;^103^104^^^^85^114^[REPLACE] new NodeTraversal ( compiler, new GatherCandiates (  )  ) .traverse ( t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^t.getScopeRoot (  ) .isExported (  )  ) ;^104^^^^^85^114^[REPLACE] t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^t.getScope (  ) .getLastChild (  )  ) ;^104^^^^^85^114^[REPLACE] t.getScopeRoot (  ) .getLastChild (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^reachingDef = new MustBeReachingVariableDef ( cfg, t.getScope (  ) , compiler ) ; ;^107^^^^^85^114^[REPLACE] reachingUses = new MaybeReachingVariableUse ( cfg, t.getScope (  ) , compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^reachingDef.analyze (  ) ;^108^^^^^85^114^[REPLACE] reachingUses.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REMOVE]^reachingDef.analyze (  ) ;^108^^^^^85^114^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( c .Candidate ( varName , useCfgNode , defCfgNode , useCfgNode )   )  {^110^^^^^85^114^[REPLACE] if  ( c.canInline (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^110^111^112^^^85^114^[ADD] if  ( c.canInline (  )  )  { c.inlineVariable (  ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^c.canInline (  ) ;^111^^^^^85^114^[REPLACE] c.inlineVariable (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^for  ( Candidate c : candidates )  { if  ( c.canInline (  )  )  {^109^^^^^85^114^[REPLACE] for  ( Candidate c : candidates )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^109^110^111^112^^85^114^[ADD] for  ( Candidate c : candidates )  { if  ( c.canInline (  )  )  { c.inlineVariable (  ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  Candidate c  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^( new NodeTraversal ( compiler, this )  )  .traverse (  )  ;^121^^^^^120^122^[REPLACE] ( new NodeTraversal ( compiler, this )  ) .traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node def  defCfgNode  externs  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( useCfgNode ) ;^143^^^^^142^180^[REPLACE] DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( graphNode != this  )  {^144^^^^^142^180^[REPLACE] if  ( graphNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^return false;^146^^^^^142^180^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^FlowState<MustDef> state = this.getAnnotation (  ) ;^148^^^^^142^180^[REPLACE] FlowState<MustDef> state = graphNode.getAnnotation (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^final MustDef defs = this.getIn (  ) ;^149^^^^^142^180^[REPLACE] final MustDef defs = state.getIn (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^^149^^^^^142^180^[ADD] final MustDef defs = state.getIn (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^final Node cfgNode = useCfgNode;^150^^^^^142^180^[REPLACE] final Node cfgNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( NodeUtil.isAssign ( def )  )  {^156^^^^^142^180^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  (  parent .getLastChild (  )   == n ) && NodeUtil.isVar ( parent )  && parent.getType (  )  == Token.INC && parent.getType (  )  == Token.DEC && parent.getType (  )  == Token.LP && parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^142^180^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^^159^160^161^162^163^142^180^[ADD] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^return false;^163^^^^^159^164^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( compiler.reportCodeChange (  ) .isExported ( varName )  )  {^167^^^^^142^180^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^return false;^168^^^^^142^180^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( defNode == null )  {^172^^^^^142^180^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^172^173^174^^^142^180^[ADD] if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^candidates.add ( new Candidate ( name, defNode, n, useCfgNode )  ) ;^173^^^^^142^180^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^^173^^^^^142^180^[ADD] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^return false;^163^^^^^142^180^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^String name = n .getParent (  )  ;^166^^^^^142^180^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^^166^^^^^142^180^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^142^180^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[ADD]^^171^^^^^142^180^[ADD] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  ) {^159^160^161^162^^142^180^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( compiler .reportCodeChange (  )  .isExported ( varName )  )  {^167^^^^^142^180^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( defNode == true )  {^172^^^^^142^180^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^candidates.add ( new Candidate ( name, useCfgNode, n, cfgNode )  ) ;^173^^^^^142^180^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^String useCfgNodeame = n.getParent (  ) ;^166^^^^^142^180^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^179^^^^^142^180^[REPLACE] NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REMOVE]^Node defParent = def.getParent (  ) ;^179^^^^^142^180^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  FlowState state  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  MustDef defs  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode graphNode  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  List candidates 
[REPLACE]^if  ( NodeUtil.isAssign ( def )  )  {^156^^^^^155^176^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^156^157^^159^160^155^176^[ADD] if  ( NodeUtil.isName ( n )  )  {  if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC ||^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  && parent.getType (  )  == Token.INC && parent.getType (  )  == Token.DEC && parent.getType (  )  == Token.LP && parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^163^^^^^155^176^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( varName )  )  {^167^^^^^155^176^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^return;^167^168^169^^^155^176^[ADD] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^168^^^^^155^176^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( defNode == true )  {^172^^^^^155^176^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^172^173^174^^^155^176^[ADD] if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^candidates.add ( new Candidate ( varName, defNode, n, cfgNode )  ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^String useCfgNodeame = n.getParent (  ) ;^166^^^^^155^176^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node defNode = reachingDef.getDef ( varName, cfgNode ) ;^171^^^^^155^176^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( useCfgNode )  ) {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .equals ( name )  )  {^167^^^^^155^176^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  (use == null )  {^172^^^^^155^176^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^candidates.add ( useCfgNodeew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isAssign ( defCfgNode )  )  {^214^^^^^211^288^[REPLACE] if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^215^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^getDefinition ( defCfgNode, true ) ;^218^^^^^211^288^[REPLACE] getDefinition ( defCfgNode, null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^getNumUseInUseCfgNode ( useCfgNode, true ) ;^219^^^^^211^288^[REPLACE] getNumUseInUseCfgNode ( useCfgNode, null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( def != true )  {^222^^^^^211^288^[REPLACE] if  ( def == null )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^return false;^222^223^224^^^211^288^[ADD] if  ( def == null )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^223^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isAssign ( def )  && NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^211^288^[REPLACE] if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^229^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isVar ( def.getLastChild (  )  )  )  {^235^^^^^211^288^[REPLACE] if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^return false;^235^236^237^^^211^288^[ADD] if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^236^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( numUseWithinUseCfgNode  ==  1 )  {^244^^^^^211^288^[REPLACE] if  ( numUseWithinUseCfgNode != 1 )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^return false;^244^245^246^^^211^288^[ADD] if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^245^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( def.getLastChild (  ) , new Predicate<Node> (  )  {^255^256^^^^211^288^[REPLACE] if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^278^^^^^255^279^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^266^^^^^211^288^[REPLACE] return true;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^268^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return !NodeUtil .isAssign ( cfgNode )  ;^275^^^^^211^288^[REPLACE] return !NodeUtil.isFunction ( input ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^278^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^281^^^^^211^288^[REPLACE] Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^281^^^^^211^288^[ADD] Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( uses.size (  )  + 3 != 0  )  {^283^^^^^211^288^[REPLACE] if  ( uses.size (  )  != 1 )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     return ; }^283^^^^^211^288^[REMOVE] ^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^284^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^287^^^^^211^288^[REPLACE] return true;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  Collection uses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^266^^^^^258^269^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return true;^268^^^^^258^269^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return !NodeUtil .isAssign ( defNode )  ;^275^^^^^273^276^[REPLACE] return !NodeUtil.isFunction ( input ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  externs  input  n  parent  root  use  useCfgNode  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node defParent = def.getString (  ) ;^294^^^^^293^314^[REPLACE] Node defParent = def.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node useParent = use.getString (  ) ;^295^^^^^293^314^[REPLACE] Node useParent = use.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^295^^^^^293^314^[ADD] Node useParent = use.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^while  ( defParent.getParent (  ) .getType (  )   !=  Token.LABEL )  {^301^^^^^293^314^[REPLACE] while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^defParent =  parent.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isName ( n )  )  {^296^^^^^293^314^[REPLACE] if  ( NodeUtil.isAssign ( def )  )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^}  else {^306^^^^^293^314^[REPLACE] } else if  ( NodeUtil.isVar ( defParent )  )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^[REPLACE] Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node rhs = def.getFirstChild (  ) ;^307^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node rhs = def .getType (  )  ;^307^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^while  ( root.getString (  ) .getType (  )   &&  Token.LABEL )  {^301^^^^^293^314^[REPLACE] while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^defParent =  useCfgNode.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^302^^^^^293^314^[ADD] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^defParent =  useParent.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node rhs = def.getFirstChild (  ) ;^297^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Preconditions .checkState (  )  ;^311^^^^^293^314^[REPLACE] Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node rhs = def .getType (  )  ;^297^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^compiler.getCodingConvention (  ) ;^313^^^^^293^314^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  (  n.hasChildren (  )  )  {^329^^^^^321^344^[REPLACE] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^def =  useParent;^330^^^^^321^344^[REPLACE] def = n;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^[REPLACE] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^336^337^338^^^321^344^[ADD] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^def =  useParent;^337^^^^^321^344^[REPLACE] def = n;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^332^^^^^321^344^[REPLACE] return;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^339^^^^^321^344^[REPLACE] return;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^335^^^^^321^344^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^NodeTraversal.traverse ( compiler, useParent, gatherCb ) ;^343^^^^^321^344^[REPLACE] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  (  n.hasChildren (  )  )  {^329^^^^^326^341^[REPLACE] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^def = n;^329^330^331^^^326^341^[ADD] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^def =  null;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^[REPLACE] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^def =  useParent;^337^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^def =  useParent;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^332^^^^^326^341^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^return false;^339^^^^^326^341^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^Node lhs = useParent.getFirstChild (  ) ;^335^^^^^326^341^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^335^^^^^326^341^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^[REPLACE] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^AbstractCfgNodeTraversalCallback gatherCb = useParentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^[REPLACE] AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^NodeTraversal.traverse ( compiler, useParent, gatherCb ) ;^363^^^^^350^364^[REPLACE] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^^363^^^^^350^364^[ADD] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^if  ( NodeUtil.isName ( useCfgNode )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^[REPLACE] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[ADD]^numUseWithinUseCfgNode++;^357^358^359^^^356^360^[ADD] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FlowSensitiveInlineVariables GatherCandiates 1 Candidate 1 2 3 4   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  ControlFlowGraph cfg  [TYPE]  Node cfgNode  def  defCfgNode  defNode  defParent  externs  input  lhs  n  parant  parent  rhs  root  use  useCfgNode  useParent  [TYPE]  MaybeReachingVariableUse reachingUses  [TYPE]  List candidates  [TYPE]  MustBeReachingVariableDef reachingDef  [TYPE]  String name  varName  [TYPE]  int numUseWithinUseCfgNode 
[REPLACE]^DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( parent ) ;^143^^^^^142^180^[REPLACE] DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  ( graphNode != null )  {^144^^^^^142^180^[REPLACE] if  ( graphNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[ADD]^^144^145^146^147^^142^180^[ADD] if  ( graphNode == null )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^FlowState<MustDef> state = null.getAnnotation (  ) ;^148^^^^^142^180^[REPLACE] FlowState<MustDef> state = graphNode.getAnnotation (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^final MustDef defs = this.getIn (  ) ;^149^^^^^142^180^[REPLACE] final MustDef defs = state.getIn (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^final Node cfgNode = parent;^150^^^^^142^180^[REPLACE] final Node cfgNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[ADD]^^150^^^^^142^180^[ADD] final Node cfgNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^156^^^^^142^180^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  ) {^159^160^161^162^^142^180^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC ||^167^^^^^142^180^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  (n == this )  {^172^^^^^142^180^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^142^180^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^String parentame = n.getString (  ) ;^166^^^^^142^180^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^142^180^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  ( n == null )  {^172^^^^^142^180^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^candidates.add ( new Candidate ( name, cfgNode, n, cfgNode )  ) ;^173^^^^^142^180^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REMOVE]^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^173^^^^^142^180^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^171^^^^^142^180^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^NodeTraversal.traverse ( compiler, n, gatherCb ) ;^179^^^^^142^180^[REPLACE] NodeTraversal.traverse ( compiler, cfgNode, gatherCb ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  DiGraphNode graphNode  [TYPE]  FlowState state  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  Node cfgNode  defNode  n  parent  [TYPE]  String name  [TYPE]  MustDef defs 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^156^^^^^155^176^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^156^157^^159^160^155^176^[ADD] if  ( NodeUtil.isName ( n )  )  {  if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC ||^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  && parent.getType (  )  == Token.INC && parent.getType (  )  == Token.DEC && parent.getType (  )  == Token.LP && parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^159^160^161^162^163^155^176^[ADD] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC ||^167^^^^^155^176^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (n == null )  {^172^^^^^155^176^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^172^173^174^^^155^176^[ADD] if  ( defNode != null )  { candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^candidates.add ( new Candidate ( name, defNode, n, n )  ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^String parentame = n.getString (  ) ;^166^^^^^155^176^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^155^176^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  && parent.getType (  )  == Token.INC && parent.getType (  )  == Token.DEC && parent.getType (  )  == Token.LP && parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  ( defNode == false )  {^172^^^^^155^176^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^candidates.add ( new Candidate ( name, n, n, cfgNode )  ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^173^^^^^155^176^[ADD] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^String name = n .getFirstChild (  )  ;^166^^^^^155^176^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^166^^^^^155^176^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^171^^^^^155^176^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^171^^^^^155^176^[ADD] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCandiates 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^156^^^^^155^176^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) && NodeUtil.isVar ( parent )  && parent.getType (  )  == Token.INC && parent.getType (  )  == Token.DEC && parent.getType (  )  == Token.LP && parent.getType (  )  == Token.CATCH )  {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^159^160^161^162^163^155^176^[ADD] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC ||^167^^^^^155^176^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^return;^167^168^169^^^155^176^[ADD] if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  ( defNode == null )  {^172^^^^^155^176^[REPLACE] if  ( defNode != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^Node defNode = reachingDef.getDef ( name, cfgNode ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^String name = n .getFirstChild (  )  ;^166^^^^^155^176^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^Node defNode = reachingDef.getDef ( name, n ) ;^171^^^^^155^176^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isAssignmentOp ( parent )  ) {^159^160^161^162^^155^176^[REPLACE] if  (  ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n ) || NodeUtil.isVar ( parent )  || parent.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC || parent.getType (  )  == Token.LP || parent.getType (  )  == Token.CATCH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^candidates.add ( parentew Candidate ( name, defNode, n, cfgNode )  ) ;^173^^^^^155^176^[REPLACE] candidates.add ( new Candidate ( name, defNode, n, cfgNode )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^String parentame = n.getString (  ) ;^166^^^^^155^176^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  ) ;^171^^^^^155^176^[REPLACE] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[ADD]^^171^^^^^155^176^[ADD] Node defNode = reachingDef.getDef ( name, cfgNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^private final  boolean  varName;^189^^^^^^^[REPLACE] private final String varName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^private  Node defCfgNode;^193^^^^^^^[REPLACE] private final Node defCfgNode;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^private  Node use;^196^^^^^^^[REPLACE] private final Node use;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^private  Node useCfgNode;^197^^^^^^^[REPLACE] private final Node useCfgNode;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^private  long  numUseWithinUseCfgNode;^201^^^^^^^[REPLACE] private int numUseWithinUseCfgNode;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node defNode  n  parent  [TYPE]  String name 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( useCfgNode )  ) ;^204^^^^^203^209^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( use )  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[REPLACE]^this.varName =  null;^205^^^^^203^209^[REPLACE] this.varName = varName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[REPLACE]^this.useCfgNode = useCfgNode; ;^206^^^^^203^209^[REPLACE] this.defCfgNode = defCfgNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[ADD]^^206^207^^^^203^209^[ADD] this.defCfgNode = defCfgNode; this.use = use;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[REPLACE]^this.use =  useCfgNode;^207^^^^^203^209^[REPLACE] this.use = use;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[REPLACE]^this.defCfgNode = defCfgNode; ;^208^^^^^203^209^[REPLACE] this.useCfgNode = useCfgNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[ADD]^^208^^^^^203^209^[ADD] this.useCfgNode = useCfgNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] String varName Node defCfgNode Node use Node useCfgNode [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  use  useCfgNode 
[REPLACE]^if  ( NodeUtil.isAssign ( defCfgNode )  )  {^214^^^^^211^288^[REPLACE] if  ( NodeUtil.isFunction ( defCfgNode )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REMOVE]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^214^^^^^211^288^[REMOVE] ^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^215^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^getDefinition ( defCfgNode, true ) ;^218^^^^^211^288^[REPLACE] getDefinition ( defCfgNode, null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REMOVE]^def.removeChild ( rhs ) ;^218^^^^^211^288^[REMOVE] ^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^getNumUseInUseCfgNode ( useCfgNode, false ) ;^219^^^^^211^288^[REPLACE] getNumUseInUseCfgNode ( useCfgNode, null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( def != null )  {^222^^^^^211^288^[REPLACE] if  ( def == null )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[ADD]^return false;^222^223^224^^^211^288^[ADD] if  ( def == null )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^223^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( NodeUtil.isAssign ( def )  && NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^228^^^^^211^288^[REPLACE] if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[ADD]^return false;^228^229^230^^^211^288^[ADD] if  ( NodeUtil.isAssign ( def )  && !NodeUtil.isExprAssign ( def.getParent (  )  )  )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^229^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( NodeUtil.isVar ( def.getLastChild (  )  )  )  {^235^^^^^211^288^[REPLACE] if  ( NodeUtil.mayHaveSideEffects ( def.getLastChild (  )  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^236^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( numUseWithinUseCfgNode  ==  0 )  {^244^^^^^211^288^[REPLACE] if  ( numUseWithinUseCfgNode != 1 )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[ADD]^return false;^244^245^246^^^211^288^[ADD] if  ( numUseWithinUseCfgNode != 1 )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^245^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( NodeUtil.has ( def .getFirstChild (  )  , new Predicate<Node> (  )  {^255^256^^^^211^288^[REPLACE] if  ( NodeUtil.has ( def.getLastChild (  ) , new Predicate<Node> (  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^278^^^^^255^279^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return false;^266^^^^^211^288^[REPLACE] return true;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^268^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return !NodeUtil.isAssign ( input ) ;^275^^^^^211^288^[REPLACE] return !NodeUtil.isFunction ( input ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^278^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^281^^^^^211^288^[REPLACE] Collection<Node> uses = reachingUses.getUses ( varName, defCfgNode ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^if  ( true.length (  )  != 1 )  {^283^^^^^211^288^[REPLACE] if  ( uses.size (  )  != 1 )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^284^^^^^211^288^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return false;^287^^^^^211^288^[REPLACE] return true;^[METHOD] canInline [TYPE] boolean [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  Collection uses  [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return false;^266^^^^^258^269^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return true;^268^^^^^258^269^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^return !NodeUtil.isAssign ( input ) ;^275^^^^^273^276^[REPLACE] return !NodeUtil.isFunction ( input ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  input  use  useCfgNode 
[REPLACE]^Node defParent = def .getString (  )  ;^294^^^^^293^314^[REPLACE] Node defParent = def.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Node useParent = use.getString (  ) ;^295^^^^^293^314^[REPLACE] Node useParent = use.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^while  ( defParent .getString (  )  .getType (  )   !=  Token.LABEL )  {^301^^^^^293^314^[REPLACE] while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^defParent =  useParent.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^if  ( NodeUtil.isFunction ( def )  )  {^296^^^^^293^314^[REPLACE] if  ( NodeUtil.isAssign ( def )  )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^}  else {^306^^^^^293^314^[REPLACE] } else if  ( NodeUtil.isVar ( defParent )  )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Preconditions.checkState ( true, "No other definitions can be inlined." ) ;^311^^^^^293^314^[REPLACE] Preconditions.checkState ( false, "No other definitions can be inlined." ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Node rhs = def.getFirstChild (  ) ;^307^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^^307^308^^^^293^314^[ADD] Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^while  ( use.getParent (  ) .getType (  )   !=  Token.LABEL )  {^301^^^^^293^314^[REPLACE] while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^^301^302^^^^293^314^[ADD] while  ( defParent.getParent (  ) .getType (  )  == Token.LABEL )  { defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^defParent =  null.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^defParent =  useCfgNode.getParent (  ) ;^302^^^^^293^314^[REPLACE] defParent = defParent.getParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Node rhs = def .getFirstChild (  )  ;^297^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^^297^298^^^^293^314^[ADD] Node rhs = def.getLastChild (  ) ; rhs.detachFromParent (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^}  if  ( NodeUtil.isVar ( useCfgNode )  )  {^306^^^^^293^314^[REPLACE] } else if  ( NodeUtil.isVar ( defParent )  )  {^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^}   Node rhs = def.getLastChild (  ) ;def.removeChild ( rhs ) ;useParent.replaceChild ( use, rhs ) ;^306^307^308^309^^293^314^[ADD] else if  ( NodeUtil.isVar ( defParent )  )  { Node rhs = def.getLastChild (  ) ; def.removeChild ( rhs ) ; useParent.replaceChild ( use, rhs ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Node rhs = def .getFirstChild (  )  ;^307^^^^^293^314^[REPLACE] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^^307^^^^^293^314^[ADD] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[ADD]^^297^^^^^293^314^[ADD] Node rhs = def.getLastChild (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^Node useParent = use.getParent (  ) ;^313^^^^^293^314^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineVariable [TYPE] void [PARAMETER] [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  rhs  use  useCfgNode  useParent 
[REPLACE]^if  (  n.hasChildren (  )  )  {^329^^^^^321^344^[REPLACE] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[ADD]^def = n;^329^330^331^^^321^344^[ADD] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  { def = n; }^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^def =  useParent;^330^^^^^321^344^[REPLACE] def = n;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[ADD]^^330^^^^^321^344^[ADD] def = n;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^if  (  lhs.getString (  ) .equals ( varName )  )  {^336^^^^^321^344^[REPLACE] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^def =  useParent;^337^^^^^321^344^[REPLACE] def = n;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^return false;^332^^^^^321^344^[REPLACE] return;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^return false;^339^^^^^321^344^[REPLACE] return;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[ADD]^^322^323^324^^^321^344^[ADD] AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^Node lhs = useParent .getLastChild (  )  ;^335^^^^^321^344^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^} else if  ( NodeUtil.isVar ( defParent )  )  { Node rhs = def.getLastChild (  ) ;^343^^^^^321^344^[REPLACE] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getDefinition [TYPE] void [PARAMETER] Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^if  ( n .getParent (  )  .equals ( varName )  ) {^329^^^^^326^341^[REPLACE] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^def =  null;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  || lhs.getString (  ) .equals ( varName )  )  {^336^^^^^326^341^[REPLACE] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[ADD]^def = n;^336^337^338^^^326^341^[ADD] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  { def = n; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^def =  useParent;^337^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[ADD]^^337^^^^^326^341^[ADD] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^def =  useParent;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^return false;^332^^^^^326^341^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^return false;^339^^^^^326^341^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^Node lhs = useParent.getLastChild (  ) ;^335^^^^^326^341^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^350^364^[REPLACE] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[REMOVE]^if  (  ( isName ( lhs )  )  &&  ( lhs.getString (  ) .equals ( varName )  )  )  {     def = n; }^357^^^^^350^364^[REMOVE] ^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^AbstractCfgNodeTraversalCallback gatherCb = useParentew AbstractCfgNodeTraversalCallback (  )  {^352^353^^^^350^364^[REPLACE] AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback (  )  {^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^NodeTraversal.traverse ( compiler, useParent, gatherCb ) ;^363^^^^^350^364^[REPLACE] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[ADD]^^363^^^^^350^364^[ADD] NodeTraversal.traverse ( compiler, n, gatherCb ) ;^[METHOD] getNumUseInUseCfgNode [TYPE] void [PARAMETER] Node n Node parant [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  AbstractCfgNodeTraversalCallback gatherCb  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^if  (  n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^[REPLACE] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[ADD]^numUseWithinUseCfgNode++;^357^358^359^^^356^360^[ADD] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Candidate 1 2 3 4   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int numUseWithinUseCfgNode  [TYPE]  Node def  defCfgNode  defParent  input  lhs  n  parant  parent  rhs  use  useCfgNode  useParent 
[REPLACE]^return false;^266^^^^^258^269^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Node input 
[REPLACE]^return true;^268^^^^^258^269^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Node input 
[REPLACE]^return !  input   ;^275^^^^^273^276^[REPLACE] return !NodeUtil.isFunction ( input ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Node input [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Node input 
[REPLACE]^if  ( n.getString (  ) .equals ( varName )  ) {^329^^^^^326^341^[REPLACE] if  ( n.getString (  ) .equals ( varName )  && n.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^def =  parent;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  ) {^336^^^^^326^341^[REPLACE] if  ( NodeUtil.isName ( lhs )  && lhs.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REMOVE]^if  (  ( n.getString (  ) .equals ( varName )  )  &&  ( n.hasChildren (  )  )  )  {     def = n; }^336^^^^^326^341^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^def =  parent;^337^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^def =  null;^330^^^^^326^341^[REPLACE] def = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^Node lhs = n .getString (  )  ;^335^^^^^326^341^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node lhs  n  parent 
[REPLACE]^if  ( NodeUtil.isName ( n )  || n.getString (  ) .equals ( varName )  )  {^357^^^^^356^360^[REPLACE] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^357^358^359^^^356^360^[ADD] if  ( NodeUtil.isName ( n )  && n.getString (  ) .equals ( varName )  )  { numUseWithinUseCfgNode++; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
