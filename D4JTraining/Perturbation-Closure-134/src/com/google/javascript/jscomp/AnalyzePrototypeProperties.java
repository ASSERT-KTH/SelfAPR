[REPLACE]^private final SymbolType PROPERTY  = null ;^57^^^^^^^[REPLACE] private final SymbolType PROPERTY = SymbolType.PROPERTY;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final SymbolType VAR ;^58^^^^^^^[REPLACE] private final SymbolType VAR = SymbolType.VAR;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  AbstractCompiler compiler;^60^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  JSModule firstModule;^64^^^^^^^[REPLACE] private final JSModule firstModule;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private static final Set<String> IMPLICITLY_USED_PROPERTIES ;^67^68^^^^67^68^[REPLACE] private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph  = null ;^86^87^^^^86^87^[REPLACE] private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph = new LinkedDirectedGraph<NameInfo, JSModule> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final NameInfo globalNode ;^90^^^^^^^[REPLACE] private final NameInfo globalNode = new NameInfo ( null ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  NameInfo externNode = new NameInfo ( true ) ;^93^^^^^^^[REPLACE] private final NameInfo externNode = new NameInfo ( null ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final Map<String, NameInfo> propertyNameInfo ;^97^^^^^^^[REPLACE] private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final Map<String, NameInfo> varNameInfo ;^101^^^^^^^[REPLACE] private final Map<String, NameInfo> varNameInfo = Maps.newHashMap (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^^^[REPLACE] private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  JSModule module;^430^^^^^^^[REPLACE] private final JSModule module;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node node;^480^^^^^^^[REPLACE] private final Node node;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  JSModule module;^481^^^^^^^[REPLACE] private final JSModule module;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node value;^526^^^^^^^[REPLACE] private final Node value;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node map;^527^^^^^^^[REPLACE] private final Node map;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node assign;^528^^^^^^^[REPLACE] private final Node assign;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private boolean referenced  = null ;^574^^^^^^^[REPLACE] private boolean referenced = false;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^575^^^^^^^[REPLACE] private final Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private JSModule deepestCommonModuleRef ;^576^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^this.compiler =  null;^116^^^^^115^142^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^this.canModifyExterns = canModifyExterns;^117^118^^^^115^142^[ADD] this.moduleGraph = moduleGraph; this.canModifyExterns = canModifyExterns;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^118^119^^121^122^115^142^[ADD] this.canModifyExterns = canModifyExterns; this.anchorUnusedVars = anchorUnusedVars; if  ( moduleGraph != null )  { firstModule = moduleGraph.getRootModule (  ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^119^^^^^115^142^[ADD] this.anchorUnusedVars = anchorUnusedVars;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( moduleGraph == null )  {^121^^^^^115^142^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^firstModule = moduleGraph.getRootModule (  ) ;firstModule = null;^121^122^123^124^125^115^142^[ADD] if  ( moduleGraph != null )  { firstModule = moduleGraph.getRootModule (  ) ; } else { firstModule = null; }^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule = false;^124^^^^^121^125^[REPLACE] firstModule = null;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule =  null.getRootModule (  ) ;^122^^^^^115^142^[REPLACE] firstModule = moduleGraph.getRootModule (  ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule = this;^124^^^^^115^142^[REPLACE] firstModule = null;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^externNode.markReference ( null )  ;^127^^^^^115^142^[REPLACE] globalNode.markReference ( null ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^globalNode.markReference ( null )  ;^128^^^^^115^142^[REPLACE] externNode.markReference ( null ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph .connect ( nameInfo , this , nameInfo )  ;^129^^^^^115^142^[REPLACE] symbolGraph.createNode ( globalNode ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^129^130^^^^115^142^[ADD] symbolGraph.createNode ( globalNode ) ; symbolGraph.createNode ( externNode ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.createNode ( nameInfo )  ;^130^^^^^115^142^[REPLACE] symbolGraph.createNode ( externNode ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if   (  moduleGraph != null  )   {  ;^134^^^^^115^142^[REPLACE] if  ( moduleGraph == null )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^for  ( JSModule module : moduleGraph .getRootModule (  )   )  {^137^^^^^134^140^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^137^^^^^134^140^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( externNode, this, globalNode ) ;^135^^^^^115^142^[REPLACE] symbolGraph.connect ( externNode, null, nameInfo ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^132^133^134^135^^115^142^[ADD] for  ( String property : IMPLICITLY_USED_PROPERTIES )  { NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ; if  ( moduleGraph == null )  { symbolGraph.connect ( externNode, null, nameInfo ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( moduleGraph != this  )  {^134^^^^^115^142^[REPLACE] if  ( moduleGraph == null )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^symbolGraph.connect ( externNode, null, nameInfo ) ;^134^135^136^137^138^115^142^[ADD] if  ( moduleGraph == null )  { symbolGraph.connect ( externNode, null, nameInfo ) ; } else { for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^137^138^139^^^134^140^[ADD] for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( externNode, this, nameInfo ) ;^135^^^^^115^142^[REPLACE] symbolGraph.connect ( externNode, null, nameInfo ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^for  ( JSModule module : moduleGraph .getRootModule (  )   )  {^137^^^^^136^140^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^NameInfo info = getNameInfoForName ( name, type )  ;^133^^^^^136^140^[REPLACE] NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^137^^^^^136^140^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^132^^^^^136^140^[REPLACE] for  ( String property : IMPLICITLY_USED_PROPERTIES )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( n.getType (  )   !=  Token.GETPROP )  {^204^^^^^203^253^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^} else if  ( n.removeChild (  )  == Token.OBJECTLIT ||^213^214^215^216^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.NAME )  {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^}   Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != this && var.isGlobal (  )  && var.isGlobal (  )  != this && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY )  ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t.getModule (  ) , VAR )  ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propNameNodeame = n.getString (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^234^^^^^203^253^[ADD] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^238^239^240^241^242^235^246^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^239^240^241^242^^235^246^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^244^^^^^238^245^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^241^^^^^239^242^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  ) .equals ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^225^226^227^228^^213^247^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY )  ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^getNameInfoForName ( property, PROPERTY )  ;^227^^^^^225^228^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  nameNode.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^227^^^^^225^228^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^( key.getType (  )  )  ;^227^^^^^225^228^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^239^240^241^242^^203^253^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^231^^^^^203^253^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != true && var.isGlobal (  )  && var.getInitialValue (  )  != true && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^235^236^237^238^239^203^253^[ADD] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  { if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^238^239^240^241^242^203^253^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^dest.markReference ( startModule )  ;^241^^^^^239^242^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^224^225^226^^^203^253^[ADD] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^223^224^225^226^227^203^253^[ADD] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  if  ( compiler.getCodingConvention (  ) .isExported ( property )  )  {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t.getScope (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY )  ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^209^^^^^203^253^[ADD] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^processPrototypeParent ( t, value ) ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^}   addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^208^209^210^211^212^203^253^[ADD] else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^211^^^^^208^212^[ADD] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^processPrototypeParent ( t, parent ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^206^207^208^209^^203^253^[ADD] if  ( propName.equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ; } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  else {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t.getModule (  ) , VAR )  ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^} else if   (  n.getType  (    )   == Token.OBJECTLIT &&  ;^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^( key.getType (  )  )  ;^244^^^^^238^245^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propNameNodeame = n .getLastChild (  )  ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  ) .getVar ( property ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^235^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = key.getString (  )  ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  node.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^225^226^227^228^^203^253^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  else {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != null ) {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t .inGlobalScope (  )  .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != this && var.isGlobal (  )  && var.getInitialValue (  )  != this && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  value.getNext (  ) .getNext (  )  )  {^224^^^^^203^253^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  ) {^249^250^^^^203^253^[REPLACE] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^249^250^251^252^^203^253^[ADD] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolStack .push ( null )  ;^251^^^^^249^252^[REPLACE] symbolStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^278^^^^^277^296^[ADD] Node n = assign.getFirstChild (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  != Token.GETPROP )  {^279^280^^^^277^296^[REPLACE] if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^279^280^^282^283^277^296^[ADD] if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  { boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^285^^^^^279^293^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^279^293^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^288^289^290^291^^279^293^[ADD] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^290^^^^^279^293^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^279^293^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^279^293^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^285^^^^^277^296^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^290^^^^^288^291^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^290^^^^^277^296^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^286^^^^^277^296^[ADD] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^boolean isChainedProperty = propNameNode.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return value;  ;^295^^^^^277^296^[REPLACE] return false;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node firstChild = parent .getLastChild (  )  ;^304^^^^^303^325^[REPLACE] Node firstChild = nameNode.getFirstChild (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild == null &&^306^307^308^309^^303^325^[REPLACE] if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  ) {^317^318^^^^306^323^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^319^^^^^317^320^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^319^^^^^317^320^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^322^^^^^306^323^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = value.getString (  ) ;^311^^^^^306^323^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  && anchorUnusedVars )  {^317^318^^^^303^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^319^^^^^317^320^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^322^^^^^303^325^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = root.getString (  ) ;^311^^^^^303^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^324^^^^^303^325^[REPLACE] return false;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING || NodeUtil.isExprAssign ( grandParent )  || NodeUtil.isLhs ( propNameNode, parent )  )  {^340^341^342^^^332^368^[REPLACE] if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^340^341^342^343^344^332^368^[ADD] if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  { String name = dest.getString (  ) ; Property prop = new AssignmentProperty ( grandParent,^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = key.getString (  )  ;^343^^^^^340^347^[REPLACE] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new AssignmentProperty ( grandParent, grandParent.getString (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( value.getType (  )   !=  Token.OBJECTLIT )  {^353^^^^^332^368^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( key.removeChild (  )   ) {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = propNameNode.getString (  ) ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^360^361^^^^332^368^[ADD] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^357^358^359^^^332^368^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( Node key = map.getLastChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = nameNode.getString (  )  ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^336^^^^^332^368^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^337^^^^^332^368^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node grandParent = value.getParent (  ) ;^338^^^^^332^368^[REPLACE] Node grandParent = parent.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^343^^^^^332^368^[ADD] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^344^345^^^^332^368^[ADD] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^352^^^^^332^368^[REPLACE] Node map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( Node key = value.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^boolean hasChanged = true;^601^^^^^600^624^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( referenced )  {^602^^^^^600^624^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^603^604^^^^600^624^[ADD] referenced = true; hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^hasChanged = false;^604^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^referenced = false;^603^^^^^600^624^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if   (  moduleGraph == null  )   {  ;^607^^^^^600^624^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( deepestCommonModuleRef != null )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^deepestCommonModuleRef =  startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^613^614^615^^^610^616^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^611^^^^^600^624^[ADD] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (startModule  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^hasChanged = true;^618^619^620^^^600^624^[ADD] if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^hasChanged = false;^619^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^deepestCommonModuleRef =  startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^613^614^615^^^600^624^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^619^^^^^600^624^[ADD] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^608^^^^^600^624^[ADD] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (startModule != null )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^deepestCommonModuleRef =  null;^611^^^^^600^624^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^JSModule startModule = start.getDeepestCommonModuleRef (  )  ;^608^^^^^600^624^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^623^^^^^600^624^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^^^[REPLACE] private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^[METHOD] getDeclarations [TYPE] Deque [PARAMETER] [CLASS] ProcessProperties   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^204^^^^^203^253^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  if  ( n.getType (  )  == Token.OBJECTLIT ||^213^214^215^216^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}^213^214^^^217^203^253^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT &&  ! ( parent.getType (  )  == Token.ASSIGN &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  else {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   String name = n.getString (  ) ;Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != propNameNodeull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY )  ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^244^^^^^238^245^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^239^240^241^242^^203^253^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY )  ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^241^^^^^239^242^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propNameNodeame = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^234^^^^^203^253^[ADD] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != false && var.isGlobal (  )  && var.getInitialValue (  )  != false && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^238^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^238^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^231^^^^^203^253^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t .inGlobalScope (  )  .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^225^^^^^213^247^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^propNameNode =  parent.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode.getString (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^225^226^227^228^^203^253^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^( propNameNode.isQuotedString (  )  )  ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^227^^^^^225^228^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.NAME )  {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != null && var.isGlobal (  )  && var.isGlobal (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY )  ;^241^^^^^239^242^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getScope (  ) .equals ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^propNameNode =  parent.getNext (  ) .getNext (  )  )  {^224^^^^^203^253^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^223^224^225^226^227^203^253^[ADD] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String name = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( name.equals ( "prototype" )  )  {^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  else {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, module, type )  ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^( key.getType (  )  )  ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^208^209^210^211^212^203^253^[ADD] else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getScope (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getVar (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^} else if  ( compiler.getCodingConvention (  ) .getVar ( propName )  )  {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^208^209^210^211^212^203^253^[ADD] else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY )  ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^211^^^^^208^212^[ADD] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^209^^^^^203^253^[ADD] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^processPrototypeParent ( t, propNameNode ) ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^235^236^237^238^239^203^253^[ADD] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  { if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^( key.getType (  )  )  ;^241^^^^^239^242^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propNameNodeame = n.getString (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != null ) {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^235^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getModule (  ) .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^225^226^227^228^^213^247^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^224^225^226^^^213^247^[ADD] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode .getString (  )  ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^} else if   (  n.getType  (    )   == Token.OBJECTLIT &&  ;^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^239^240^241^242^^235^246^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^224^225^226^^^203^253^[ADD] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode.getString (  ) ; propNameNode != null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  && isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^203^253^[REPLACE] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^symbolStack .push ( this )  ;^251^^^^^249^252^[REPLACE] symbolStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Node n = n.getFirstChild (  ) ;^278^^^^^277^296^[REPLACE] Node n = assign.getFirstChild (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  (  NodeUtil.isLhs ( n, assign )  && n.getType (  )  != Token.GETPROP )  {^279^280^^^^277^296^[REPLACE] if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^285^^^^^279^293^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( assign.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^279^293^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REMOVE]^if  ( isChainedProperty )  {     Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;     if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {         return true;     } }^288^^^^^279^293^[REMOVE] ^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return false;^290^^^^^279^293^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^279^293^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node map = n.getFirstChild (  ) .getNext (  )  ;^286^^^^^279^293^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if   (  isPrototypePropertyAssign  (  n  )    )   {  ;^285^^^^^277^296^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  (  child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[ADD]^^288^289^290^291^^277^296^[ADD] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return false;^290^^^^^288^291^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return false;^290^^^^^277^296^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node child = assign.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( assign.getType (  )  == Token.STRING || child .getLastChild (  )  .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REMOVE]^if  ( isChainedProperty )  {     Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;     if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {         return true;     } }^288^^^^^277^296^[REMOVE] ^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node map = n.getFirstChild (  ) .getNext (  )  ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return true;^295^^^^^277^296^[REPLACE] return false;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node firstChild = parent.getFirstChild (  ) ;^304^^^^^303^325^[REPLACE] Node firstChild = nameNode.getFirstChild (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild == null &&^306^307^308^309^^303^325^[REPLACE] if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  && anchorUnusedVars )  {^317^318^^^^306^323^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^317^318^319^320^^306^323^[ADD] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY )  ;^319^^^^^317^320^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^319^^^^^317^320^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^319^^^^^317^320^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^return false;^322^^^^^306^323^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^311^^^^^306^323^[ADD] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  (  anchorUnusedVars )  {^317^318^^^^303^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^return false;^322^^^^^303^325^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^String name = nameNode .getLastChild (  )  ;^311^^^^^303^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^return false;  ;^324^^^^^303^325^[REPLACE] return false;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING ) {^340^341^342^^^332^368^[REPLACE] if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^343^^^^^340^347^[ADD] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new AssignmentProperty ( grandParent, grandParent.getString (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( map.getType (  )   ||  Token.OBJECTLIT )  {^353^^^^^332^368^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^353^354^^356^^332^368^[ADD] if  ( map.getType (  )  == Token.OBJECTLIT )  {  for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REMOVE]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^358^^^^^332^368^[REMOVE] ^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = parent.getString (  ) ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^360^361^^^^332^368^[ADD] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^key !=  null; parent^357^^^^^332^368^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = n.getString (  )  ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getNext (  ) , parent, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^336^^^^^332^368^[ADD] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node parent = parent.getParent (  ) ;^337^^^^^332^368^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node parent = n.getParent (  )  ;^338^^^^^332^368^[REPLACE] Node grandParent = parent.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^343^^^^^332^368^[ADD] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new AssignmentProperty ( grandParent, grandParent.getString (  ) , t.getModule (  )  ) ;^344^345^^^^332^368^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node n = assign.getFirstChild (  )  ;^352^^^^^332^368^[REPLACE] Node map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^for  ( Node key = parent.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^private  Node nameNode;^429^^^^^^^[REPLACE] private final Node nameNode;^[METHOD] <init> [TYPE] AnalyzePrototypeProperties$SymbolType() [PARAMETER] [CLASS] GlobalFunction   [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  boolean false  true 
[REPLACE]^private  JSModule module;^430^^^^^^^[REPLACE] private final JSModule module;^[METHOD] <init> [TYPE] AnalyzePrototypeProperties$SymbolType() [PARAMETER] [CLASS] GlobalFunction   [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  boolean false  true 
[REPLACE]^private  Node node;^480^^^^^^^[REPLACE] private final Node node;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^private  JSModule module;^481^^^^^^^[REPLACE] private final JSModule module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^private  JSModule module;^529^^^^^^^[REPLACE] private final JSModule module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^private boolean referenced  = null ;^574^^^^^^^[REPLACE] private boolean referenced = false;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^private final Deque<Symbol> declarations ;^575^^^^^^^[REPLACE] private final Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^private JSModule deepestCommonModuleRef  = null ;^576^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^boolean hasChanged = true;^601^^^^^600^624^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( referenced )  {^602^^^^^600^624^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^referenced = false;^603^^^^^600^624^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^hasChanged = false;^604^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^603^^^^^600^624^[ADD] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( moduleGraph == null )  {^607^^^^^600^624^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  (originalDeepestCommon != null )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^613^614^615^^^610^616^[ADD] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommon;^611^^^^^600^624^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  (module  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^619^^^^^600^624^[ADD] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^613^614^615^^^600^624^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^boolean hasChanged = false  ;^608^^^^^600^624^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( deepestCommonModuleRef != true )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^613^614^615^^^610^616^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( originalDeepestCommon  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^618^619^620^^^600^624^[ADD] if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^hasChanged = false;^619^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^613^614^615^^^600^624^[ADD] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^return hasChanged;  ;^623^^^^^600^624^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
