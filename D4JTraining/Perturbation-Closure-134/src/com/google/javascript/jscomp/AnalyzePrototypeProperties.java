[REPLACE]^private final SymbolType PROPERTY ;^57^^^^^^^[REPLACE] private final SymbolType PROPERTY = SymbolType.PROPERTY;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final SymbolType VAR  = null ;^58^^^^^^^[REPLACE] private final SymbolType VAR = SymbolType.VAR;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  AbstractCompiler compiler;^60^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  JSModule firstModule;^64^^^^^^^[REPLACE] private final JSModule firstModule;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private static final Set<String> IMPLICITLY_USED_PROPERTIES ;^67^68^^^^67^68^[REPLACE] private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph  = null ;^86^87^^^^86^87^[REPLACE] private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph = new LinkedDirectedGraph<NameInfo, JSModule> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final NameInfo globalNode  = null ;^90^^^^^^^[REPLACE] private final NameInfo globalNode = new NameInfo ( null ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final NameInfo externNode ;^93^^^^^^^[REPLACE] private final NameInfo externNode = new NameInfo ( null ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final Map<String, NameInfo> propertyNameInfo  = null ;^97^^^^^^^[REPLACE] private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Map<String, NameInfo> varNameInfo = Maps.newHashMap (  ) ;^101^^^^^^^[REPLACE] private final Map<String, NameInfo> varNameInfo = Maps.newHashMap (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^^^[REPLACE] private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node node;^480^^^^^^^[REPLACE] private final Node node;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  JSModule module;^481^^^^^^^[REPLACE] private final JSModule module;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node key;^525^^^^^^^[REPLACE] private final Node key;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private  Node assign;^528^^^^^^^[REPLACE] private final Node assign;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^byte  name;^572^^^^^^^[REPLACE] final String name;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private boolean referenced  = null ;^574^^^^^^^[REPLACE] private boolean referenced = false;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private final Deque<Symbol> declarations  = null ;^575^^^^^^^[REPLACE] private final Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^private JSModule deepestCommonModuleRef ;^576^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^ [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  
[REPLACE]^this.compiler =  null;^116^^^^^115^142^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.moduleGraph =  null;^117^^^^^115^142^[REPLACE] this.moduleGraph = moduleGraph;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^117^118^^^^115^142^[ADD] this.moduleGraph = moduleGraph; this.canModifyExterns = canModifyExterns;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.canModifyExterns =  true;^118^^^^^115^142^[REPLACE] this.canModifyExterns = canModifyExterns;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.anchorUnusedVars =  true;^119^^^^^115^142^[REPLACE] this.anchorUnusedVars = anchorUnusedVars;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( moduleGraph == null )  {^121^^^^^115^142^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule = false;^124^^^^^121^125^[REPLACE] firstModule = null;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule =  null.getRootModule (  ) ;^122^^^^^115^142^[REPLACE] firstModule = moduleGraph.getRootModule (  ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^firstModule = false;^124^^^^^115^142^[REPLACE] firstModule = null;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^globalNode.markReference ( true ) ;^127^^^^^115^142^[REPLACE] globalNode.markReference ( null ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^externNode.markReference ( false ) ;^128^^^^^115^142^[REPLACE] externNode.markReference ( null ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Sets.newHashSet ( externNode, globalNode )  ) ;^129^^^^^115^142^[REPLACE] symbolGraph.createNode ( globalNode ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph .connect ( nameInfo , this , globalNode )  ;^130^^^^^115^142^[REPLACE] symbolGraph.createNode ( externNode ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( moduleGraph != false )  {^134^^^^^115^142^[REPLACE] if  ( moduleGraph == null )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ;^137^^^^^134^140^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( externNode, this, nameInfo ) ;^135^^^^^115^142^[REPLACE] symbolGraph.connect ( externNode, null, nameInfo ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^for  ( String property : IMPLICITLY_USED_PROPERTIES )  { NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^132^^^^^115^142^[REPLACE] for  ( String property : IMPLICITLY_USED_PROPERTIES )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^NameInfo nameInfo = getNameInfoForName ( name, PROPERTY ) ;^133^^^^^115^142^[REPLACE] NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ;^137^^^^^115^142^[REPLACE] for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^137^138^139^^^115^142^[ADD] for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[METHOD] <init> [TYPE] JSModuleGraph,boolean,boolean) [PARAMETER] AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  key  map  nameNode  node  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.VAR  &  NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( value )  ) ;^434^435^^^^432^438^[REPLACE] parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^NodeUtil.isFunctionDeclaration ( value )  ) ;^435^^^^^432^438^[REPLACE] NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.nameNode =  value;^436^^^^^432^438^[REPLACE] this.nameNode = nameNode;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.node = node; ;^437^^^^^432^438^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^437^^^^^432^438^[ADD] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.name = name; ;^488^^^^^487^490^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node node Node parent JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.node = node; ;^489^^^^^487^490^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node node Node parent JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.key =  parent;^533^^^^^531^538^[REPLACE] this.key = key;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^533^^^^^531^538^[ADD] this.key = key;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.value =  null;^534^^^^^531^538^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.map =  value;^535^^^^^531^538^[REPLACE] this.map = map;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.assign =  nameNode;^536^^^^^531^538^[REPLACE] this.assign = assign;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^536^537^^^^531^538^[ADD] this.assign = assign; this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.node = node; ;^537^^^^^531^538^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^this.node = node; ;^584^^^^^583^585^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  gramps  key  map  nameNode  node  parent  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^if  ( canModifyExterns )  {^145^^^^^144^156^[REPLACE] if  ( !canModifyExterns )  {^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^NodeTraversal.traverse ( compiler, root, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^[REPLACE] NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[ADD]^^146^147^^^^144^156^[ADD] NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^150^^^^^144^156^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^FixedPointGraphTraversal<NameInfo, JSModule> t = FixedPointGraphTraversal.computeFixedPoint ( new PropagateReferences (  )  ) ;^152^153^^^^144^156^[REPLACE] FixedPointGraphTraversal<NameInfo, JSModule> t = FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^t.computeFixedPoinnull ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^154^155^^^^144^156^[REPLACE] t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^155^^^^^144^156^[REPLACE] Sets.newHashSet ( externNode, globalNode )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo  [TYPE]  FixedPointGraphTraversal t 
[REPLACE]^List<NameInfo> result =   propertyNameInfo.values (  )  ;^162^^^^^161^165^[REPLACE] List<NameInfo> result = Lists.newArrayList ( propertyNameInfo.values (  )  ) ;^[METHOD] getAllNameInfo [TYPE] Collection [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  List result  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^162^^^^^161^165^[ADD] List<NameInfo> result = Lists.newArrayList ( propertyNameInfo.values (  )  ) ;^[METHOD] getAllNameInfo [TYPE] Collection [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  List result  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^163^^^^^161^165^[REPLACE] result.addAll ( varNameInfo.values (  )  ) ;^[METHOD] getAllNameInfo [TYPE] Collection [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  List result  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[ADD]^^163^164^^^^161^165^[ADD] result.addAll ( varNameInfo.values (  )  ) ; return result;^[METHOD] getAllNameInfo [TYPE] Collection [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  List result  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^return null;^164^^^^^161^165^[REPLACE] return result;^[METHOD] getAllNameInfo [TYPE] Collection [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  List result  [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  Map propertyNameInfo  varNameInfo 
[REPLACE]^Map<String, NameInfo> map  =  varNameInfo;^175^176^^^^174^185^[REPLACE] Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[METHOD] getNameInfoForName [TYPE] AnalyzePrototypeProperties$NameInfo [PARAMETER] String name SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( null.containsKey ( name )  )  {^177^^^^^174^185^[REPLACE] if  ( map.containsKey ( name )  )  {^[METHOD] getNameInfoForName [TYPE] AnalyzePrototypeProperties$NameInfo [PARAMETER] String name SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return globalNode;^183^^^^^174^185^[REPLACE] return nameInfo;^[METHOD] getNameInfoForName [TYPE] AnalyzePrototypeProperties$NameInfo [PARAMETER] String name SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NameInfo propertyInfo = new NameInfo ( name ) ;^180^^^^^174^185^[REPLACE] NameInfo nameInfo = new NameInfo ( name ) ;^[METHOD] getNameInfoForName [TYPE] AnalyzePrototypeProperties$NameInfo [PARAMETER] String name SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map.containsKey ( property ) ;^178^^^^^174^185^[REPLACE] return map.get ( name ) ;^[METHOD] getNameInfoForName [TYPE] AnalyzePrototypeProperties$NameInfo [PARAMETER] String name SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING &&^191^^^^^190^201^[REPLACE] if  ( isPrototypePropertyAssign ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^191^192^193^194^195^190^201^[ADD] if  ( isPrototypePropertyAssign ( n )  )  { symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ; } else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  { String name = parent.getType (  )  == Token.NAME ?^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  else {^194^^^^^190^201^[REPLACE] } else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = parent.removeChild (  )   !=  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = parent.getType (  )   ||  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^195^196^197^^^190^201^[ADD] String name = parent.getType (  )  == Token.NAME ? p n^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolStack.push ( getNameInfoForName ( parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^[REPLACE] symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolStack.push ( getNameInfoForName ( parent.getFirstChild (  ) .getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^192^193^^^^190^201^[REPLACE] symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^[REPLACE] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^n.getLastChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^[REPLACE] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^193^^^^^190^201^[ADD] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String nodeame = parent.getType (  )   &&  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^200^^^^^190^201^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( n.getType (  )   ||  Token.GETPROP )  {^204^^^^^203^253^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^204^205^206^207^^203^253^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ; if  ( propName.equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  if  ( n.getType (  )  == Token.OBJECTLIT ||^213^214^215^216^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  else {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^}   Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^235^236^237^238^239^203^253^[ADD] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  { if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^239^240^241^242^^235^246^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^239^242^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = n .getLastChild (  )  ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^231^^^^^203^253^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != null ) {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^241^^^^^235^246^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propNameNodeame = n.getString (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  ) .equals ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node parent = n.getFirstChild (  ) ; propNameNode == this ;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^223^224^225^226^227^213^247^[ADD] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (  propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  node.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node propNameNode = propNameNode.getLastChild (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^225^226^227^228^^203^253^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( node.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^227^^^^^225^228^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^238^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^244^^^^^235^246^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^244^^^^^238^245^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^241^^^^^239^242^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getScope (  ) .getVar ( property ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^234^^^^^203^253^[ADD] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^235^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^244^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^238^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node value = propNameNode.getFirstChild (  ) ; propNameNode == null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( node.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^227^^^^^223^229^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  node.getNext (  ) .getNext (  )  )  {^224^^^^^203^253^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( property.equals ( "prototype" )  )  {^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  else {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t.getScope (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^211^^^^^208^212^[ADD] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^processPrototypeParent ( t, propNameNode ) ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^207^^^^^203^253^[ADD] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^208^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getScope (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^209^^^^^203^253^[ADD] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^}  if  ( compiler.getCodingConvention (  ) .isExported ( property )  )  {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( property, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^} else if  ( n.removeChild (  )  == Token.OBJECTLIT ||^213^214^215^216^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^238^239^240^241^242^235^246^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^238^239^240^241^242^203^253^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^244^^^^^238^245^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getModule (  ) .getVar ( property ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( var != propNameNodeull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t .getScope (  )  , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( property, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^239^240^241^242^^203^253^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propNameNodeame = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Var var = t.getModule (  ) .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node root = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( root.getType (  )  == Token.STRING ) {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( root.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  value.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.NAME )  {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^}   String name = n.getString (  ) ;Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String propNameNodeame = n .getLastChild (  )  ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addSymbolUse ( value .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^propNameNode =  value.getNext (  ) .getNext (  )  )  {^224^^^^^203^253^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^205^^^^^203^253^[ADD] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  ) {^249^250^^^^203^253^[REPLACE] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^249^250^251^252^^203^253^[ADD] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolStack.peek (  ) ;^251^^^^^249^252^[REPLACE] symbolStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^256^^^^^255^264^[REPLACE] if  ( symbolStack.empty (  )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^addGlobalUseOfSymbol ( name, module, type ) ;NameInfo info = getNameInfoForName ( name, type ) ;^256^257^258^259^^255^264^[ADD] if  ( symbolStack.empty (  )  )  { addGlobalUseOfSymbol ( name, module, type ) ; } else { NameInfo info = getNameInfoForName ( name, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !symbolStack .push ( null )  .equals ( info )  )  {^260^^^^^255^264^[REPLACE] if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^260^261^262^^^255^264^[ADD] if  ( !symbolStack.peek (  ) .equals ( info )  )  { symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( symbolStack.peek (  ) , firstModule, info ) ;^261^^^^^255^264^[REPLACE] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( symbolStack.pop (  ) , module, info ) ;^261^^^^^255^264^[REPLACE] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NameInfo info = getNameInfoForName ( name, PROPERTY ) ;^259^^^^^255^264^[REPLACE] NameInfo info = getNameInfoForName ( name, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^259^^^^^255^264^[ADD] NameInfo info = getNameInfoForName ( name, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, module, PROPERTY ) ;^257^^^^^255^264^[REPLACE] addGlobalUseOfSymbol ( name, module, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( !symbolStack.pop (  ) .equals ( nameInfo )  )  {^260^^^^^255^264^[REPLACE] if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( symbolStack.peek (  ) , module, nameInfo ) ;^261^^^^^255^264^[REPLACE] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NameInfo info = getNameInfoForName ( property, type ) ;^259^^^^^255^264^[REPLACE] NameInfo info = getNameInfoForName ( name, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.removeChild (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^[REPLACE] return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[METHOD] isGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node n = assign .getLastChild (  )  ;^278^^^^^277^296^[REPLACE] Node n = assign.getFirstChild (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  != Token.GETPROP )  {^279^280^^^^277^296^[REPLACE] if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( true )  {^285^^^^^277^296^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^285^286^^288^^277^296^[ADD] if  ( isChainedProperty )  { Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ; if  ( child.getType (  )  == Token.STRING &&^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (  child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^290^^^^^277^296^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^286^^^^^277^296^[ADD] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^288^289^290^291^^277^296^[ADD] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^boolean isChainedProperty = propNameNode.getFirstChild (  ) .getType (  )   ||  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  ) .getVar (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^285^^^^^277^296^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( child.removeChild (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node child = propNameNode.getLastChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^295^^^^^277^296^[REPLACE] return false;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node firstChild = value.getLastChild (  ) ;^304^^^^^302^325^[REPLACE] Node firstChild = nameNode.getFirstChild (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  root == this &&^306^307^308^309^^302^325^[REPLACE] if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  ) {^317^318^^^^302^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^317^318^319^320^^302^325^[ADD] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^319^^^^^302^325^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^322^^^^^302^325^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = root.getString (  ) ;^311^^^^^302^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( property )  && anchorUnusedVars )  {^317^318^^^^302^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^319^^^^^302^325^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^319^^^^^302^325^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^String name = parent.getParent (  ) ;^311^^^^^302^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^324^^^^^302^325^[REPLACE] return false;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING || NodeUtil.isExprAssign ( grandParent )  || NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^332^368^[REPLACE] if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = root.getParent (  ) ;^343^^^^^340^347^[REPLACE] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getScope (  )  ) ;^344^345^^^^340^347^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( map.getType (  )   !=  Token.OBJECTLIT )  {^353^^^^^332^368^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = propNameNode.getString (  ) ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , value, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( NodepropNameNode = map.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^358^^^^^356^364^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = key.getParent (  ) ;^359^^^^^356^364^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^359^^^^^356^364^[ADD] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key .getType (  )  , value, n, t.getModule (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^key !=  null; propNameNode^357^^^^^332^368^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( Node key = value.getLastChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^359^^^^^332^368^[ADD] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^360^361^^^^332^368^[ADD] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( Node propNameNode = map.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = propNameNode.getString (  ) ;^359^^^^^356^364^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( propNameNode, key.getNext (  ) , map, n, t.getScope (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = propNameNodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node dest = propNameNode.getFirstChild (  ) .getNext (  ) ;^336^^^^^332^368^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node parent = propNameNode.getParent (  ) ;^337^^^^^332^368^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^337^^^^^332^368^[ADD] Node parent = n.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node grandParent = value.getString (  ) ;^338^^^^^332^368^[REPLACE] Node grandParent = parent.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^String name = root.getParent (  ) ;^343^^^^^332^368^[REPLACE] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new AssignmentProperty ( root, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^332^368^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[ADD]^^344^345^^^^332^368^[ADD] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Node map = propNameNode.getFirstChild (  ) .getNext (  ) ;^352^^^^^332^368^[REPLACE] Node map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^for  ( Node key = value.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo  [TYPE]  Property prop 
[REPLACE]^symbolGraph.connect ( globalNode, firstModule, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^[REPLACE] symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[METHOD] addGlobalUseOfSymbol [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, PROPERTY )  ) ;^372^^^^^370^373^[REPLACE] symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[METHOD] addGlobalUseOfSymbol [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( n.getType (  )   &&  Token.GETPROP )  {^378^^^^^377^382^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^[REPLACE] symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^getNameInfoForName ( propNameNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^[REPLACE] getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  NodeTraversal t  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo externNode  globalNode  info  nameInfo  [TYPE]  JSModule deepestCommonModuleRef  firstModule  module  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^388^^^^^387^398^[REPLACE] if  ( start.isReferenced (  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( module == null && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return dest.NameInfo ( edge ) ;^394^^^^^387^398^[REPLACE] return dest.markReference ( edge ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return dest.NameInfo ( startModule ) ;^392^^^^^387^398^[REPLACE] return dest.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^JSModule globalNodeModule = start.getDeclarations (  ) ;^389^^^^^387^398^[REPLACE] JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (  moduleGraph.dependsOn ( startModule, module )  )  {^390^391^^^^387^398^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return dest.NameInfo ( module ) ;^392^^^^^387^398^[REPLACE] return dest.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return dest .isReferenced (  )  ;^394^^^^^387^398^[REPLACE] return dest.markReference ( edge ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^389^^^^^387^398^[ADD] JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^397^^^^^387^398^[REPLACE] return false;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node parent = nameNode.getString (  ) ;^442^^^^^441^449^[REPLACE] Node parent = nameNode.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^442^^^^^441^449^[ADD] Node parent = nameNode.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  (  parent.getChildCount (  )  == 2 )  {^443^^^^^441^449^[REPLACE] if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Preconditions.checkState ( value.getType (  )   ||  Token.VAR ) ;^446^^^^^441^449^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR ) ;^446^^^^^441^449^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^447^^^^^441^449^[REPLACE] parent.removeChild ( nameNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^447^^^^^441^449^[ADD] parent.removeChild ( nameNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NodeUtil.removeChild ( propNameNode.getParent (  ) , parent ) ;^444^^^^^441^449^[REPLACE] NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^444^^^^^441^449^[ADD] NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NodeUtil.removeChild ( root .getString (  )  , parent ) ;^444^^^^^441^449^[REPLACE] NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^453^^^^^452^454^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NodeUtil.isExprAssign ( node.getParent (  ) , node ) ;^494^^^^^493^495^[REPLACE] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^494^^^^^493^495^[ADD] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^NodeUtil.removeChild ( node .getString (  )  , node ) ;^494^^^^^493^495^[REPLACE] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return getValueParent (  ) .getVar (  ) .getFirstChild (  ) ;^499^^^^^498^500^[REPLACE] return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] getPrototype [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return dest.markReference ( edge ) ;^504^^^^^503^505^[REPLACE] return getValueParent (  ) .getLastChild (  ) ;^[METHOD] getValue [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return node.getLastChild (  ) ;^509^^^^^508^510^[REPLACE] return node.getFirstChild (  ) ;^[METHOD] getValueParent [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^514^^^^^513^515^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^map .isFunctionDeclaration ( child )  ;^542^^^^^541^544^[REPLACE] map.removeChild ( key ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^Node map = n.getFirstChild (  ) .getNext (  ) ;^543^^^^^541^544^[REPLACE] map.removeChild ( value ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return assign.getLastChild (  ) ;^548^^^^^547^549^[REPLACE] return assign.getFirstChild (  ) ;^[METHOD] getPrototype [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return false;^553^^^^^552^554^[REPLACE] return value;^[METHOD] getValue [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return hasChanged;^558^^^^^557^559^[REPLACE] return map;^[METHOD] getValueParent [TYPE] Node [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^563^^^^^562^564^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^587^^^^^^^[REPLACE] @Override public String toString (  )  { return name; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^591^^^^^590^592^[REPLACE] return referenced;^[METHOD] isReferenced [TYPE] boolean [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^boolean hasChanged = true;^601^^^^^600^624^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^602^^^^^600^624^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^referenced = false;^603^^^^^600^624^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^603^604^^^^600^624^[ADD] referenced = true; hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^hasChanged = false;^604^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( moduleGraph == null )  {^607^^^^^600^624^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( deepestCommonModuleRef != null )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^deepestCommonModuleRef =  startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^613^614^615^^^600^624^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^613^614^615^^^600^624^[ADD] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^deepestCommonModuleRef =  startModule;^611^^^^^600^624^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^611^^^^^600^624^[ADD] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( startModule  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^hasChanged = false;^619^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[ADD]^^619^^^^^600^624^[ADD] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^608^^^^^600^624^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( deepestCommonModuleRef !=originalDeepestCommon )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( originalDeepestCommon  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return true;^623^^^^^600^624^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return hasChanged;^631^^^^^630^632^[REPLACE] return deepestCommonModuleRef;^[METHOD] getDeepestCommonModuleRef [TYPE] JSModule [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^return map;^639^^^^^638^640^[REPLACE] return declarations;^[METHOD] getDeclarations [TYPE] Deque [PARAMETER] [CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^^^[REPLACE] private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^[METHOD] getDeclarations [TYPE] Deque [PARAMETER] [CLASS] ProcessProperties   [TYPE]  Set IMPLICITLY_USED_PROPERTIES  [TYPE]  Node assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  [TYPE]  LinkedDirectedGraph symbolGraph  [TYPE]  String name  propName  property  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Stack symbolStack  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean anchorUnusedVars  canModifyExterns  false  hasChanged  isChainedProperty  referenced  true  [TYPE]  NameInfo dest  externNode  globalNode  info  nameInfo  start  [TYPE]  JSModule deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  [TYPE]  SymbolType PROPERTY  VAR  type  [TYPE]  Map map  propertyNameInfo  varNameInfo 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING &&^191^^^^^190^201^[REPLACE] if  ( isPrototypePropertyAssign ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^}  else {^194^^^^^190^201^[REPLACE] } else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^String name = parent.getType (  )   &&  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^symbolStack.push ( getNameInfoForName ( parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^[REPLACE] symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[ADD]^^192^193^^^^190^201^[ADD] symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^n.getString (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^[REPLACE] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[ADD]^^193^^^^^190^201^[ADD] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^[REPLACE] n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^String name = parent .getString (  )    !=  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^String name = parent.getType (  )   ||  Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^[REPLACE] String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^return false;^200^^^^^190^201^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   !=  Token.GETPROP )  {^204^^^^^203^253^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;processPrototypeParent ( t, parent ) ;^204^205^206^207^^203^253^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ; if  ( propName.equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  else {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != null ) {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^238^239^240^241^242^235^246^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^239^240^241^242^^235^246^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^244^^^^^238^245^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^241^^^^^239^242^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^239^242^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propNameNodeame = n.getString (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^231^^^^^203^253^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getModule (  ) .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^235^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^235^246^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^244^^^^^235^246^[ADD] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^238^239^240^241^242^203^253^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getScope (  ) .getVar ( propName ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^227^^^^^225^228^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node parent = n .getString (  )  ; propNameNode == null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( parent.getType (  )  == Token.STRING ) {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^225^226^227^228^^223^229^[ADD] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t.getScope (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^227^^^^^223^229^[ADD] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^propNameNode =  parent.getNext (  ) .getNext (  )  )  {^224^^^^^213^247^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = n.getString (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^223^224^225^226^227^213^247^[ADD] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   String name = n.getString (  ) ;Var var = t.getScope (  ) .getVar ( name ) ;^230^231^^^234^203^253^[ADD] else if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^238^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , VAR ) ;^241^^^^^239^242^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String name = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t .inGlobalScope (  )  .getVar ( name ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != true ) {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , VAR ) ;^241^^^^^235^246^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^244^^^^^238^245^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getString (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node parent = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^223^224^225^226^227^203^253^[ADD] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^propNameNode =  null.getNext (  ) .getNext (  )  )  {^224^^^^^203^253^[REPLACE] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode .getString (  )  ; propNameNode != null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^234^^^^^203^253^[ADD] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( name.equals ( "prototype" )  )  {^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^206^207^208^209^^203^253^[ADD] if  ( propName.equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ; } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^} else if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^}   addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^208^209^210^211^212^203^253^[ADD] else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getScope (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^209^^^^^203^253^[ADD] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^processPrototypeParent ( t, propNameNode ) ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^208^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getScope (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getModule (  ) , PROPERTY ) ;^209^^^^^203^253^[REPLACE] addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^205^^^^^203^253^[ADD] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^206^^^^^203^253^[REPLACE] if  ( propName.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^}  else {^208^^^^^203^253^[REPLACE] } else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Node grandParent = parent.getParent (  ) ;^207^^^^^203^253^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^[REPLACE] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^211^^^^^208^212^[ADD] addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.NAME )  {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != false && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^235^236^237^238^239^203^253^[ADD] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  { if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^241^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^241^^^^^235^246^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( name, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( var != true && var.isGlobal (  )  && var.getInitialValue (  )  != true && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t.getScope (  )  )  {^238^^^^^203^253^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent .getString (  )   )  )  {^239^240^^^^203^253^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^239^240^241^242^^203^253^[ADD] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING && propNameNode.isQuotedString (  )  )  {^225^226^^^^213^247^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propName      )  {^225^226^^^^223^229^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode.getString (  ) ; propNameNode != null;^223^^^^^213^247^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^203^253^[REPLACE] if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( parent.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.NAME )  {^230^^^^^203^253^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^244^^^^^235^246^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getString (  )  )  )  {^239^240^^^^235^246^[REPLACE] if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propName, t.getScope (  ) , VAR ) ;^244^^^^^238^245^[REPLACE] addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^203^253^[REPLACE] if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( t .getScope (  )   )  {^238^^^^^235^246^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REMOVE]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^203^253^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Nodeparent = n.getFirstChild (  ) ; propNameNode == true;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^addSymbolUse ( propNameNode.getParent (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^[REPLACE] addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^224^225^226^^^203^253^[ADD] propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propName = propNameNode .getString (  )  .getNext (  ) .getString (  ) ;^205^^^^^203^253^[REPLACE] String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^203^253^[REPLACE] for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^String propNameNodeame = n.getParent (  ) ;^231^^^^^203^253^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^Var var = t .inGlobalScope (  )  .getVar ( propName ) ;^234^^^^^203^253^[REPLACE] Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  (  isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^203^253^[REPLACE] if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^symbolStack.peek (  ) ;^251^^^^^249^252^[REPLACE] symbolStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[ADD]^^251^^^^^249^252^[ADD] symbolStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  String name  propName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent  propNameNode 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^256^^^^^255^264^[REPLACE] if  ( symbolStack.empty (  )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^if  ( symbolStack.peek (  ) .equals ( info )  )  {^260^^^^^255^264^[REPLACE] if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^symbolGraph.connect ( symbolStack .push ( true )  , module, info ) ;^261^^^^^255^264^[REPLACE] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^symbolGraph.connect ( symbolStack.pop (  ) , module, info ) ;^261^^^^^255^264^[REPLACE] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^String name = nameNode.getString (  ) ;^259^^^^^255^264^[REPLACE] NameInfo info = getNameInfoForName ( name, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^257^^^^^255^264^[REPLACE] addGlobalUseOfSymbol ( name, module, type ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^if  ( !symbolStack .push ( this )  .equals ( info )  )  {^260^^^^^255^264^[REPLACE] if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[ADD]^^261^^^^^255^264^[ADD] symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[METHOD] addSymbolUse [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  NameInfo info  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^return t.inGlobalScope (  )  ;^272^273^274^^^270^275^[REPLACE] return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[METHOD] isGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node n  parent 
[REPLACE]^Node n = n.getFirstChild (  ) ;^278^^^^^277^296^[REPLACE] Node n = assign.getFirstChild (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( n != null ) {^279^280^^^^277^296^[REPLACE] if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( isPrototypePropertyAssign ( n )  )  {^285^^^^^277^296^[REPLACE] if  ( isChainedProperty )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[ADD]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^285^286^^288^^277^296^[ADD] if  ( isChainedProperty )  { Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ; if  ( child.getType (  )  == Token.STRING &&^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( child.getType (  )  == Token.STRING ) {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[ADD]^^288^289^290^291^^277^296^[ADD] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return false;^290^^^^^277^296^[REPLACE] return true;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node child = assign.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )   !=  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getVar (  ) ;^286^^^^^277^296^[REPLACE] Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^if  ( assign.getType (  )  == Token.STRING ) {^288^289^^^^277^296^[REPLACE] if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^boolean isChainedProperty = assign.getFirstChild (  ) .getType (  )   &&  Token.GETPROP;^282^283^^^^277^296^[REPLACE] boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^return true;^295^^^^^277^296^[REPLACE] return false;^[METHOD] isPrototypePropertyAssign [TYPE] boolean [PARAMETER] Node assign [CLASS] ProcessProperties   [TYPE]  Stack symbolStack  [TYPE]  Node assign  child  n  [TYPE]  boolean false  isChainedProperty  true 
[REPLACE]^Node firstChild = nameNode .getString (  )  ;^304^^^^^302^325^[REPLACE] Node firstChild = nameNode.getFirstChild (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^304^^^^^302^325^[ADD] Node firstChild = nameNode.getFirstChild (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild == null &&^306^307^308^309^^302^325^[REPLACE] if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^306^307^^309^^302^325^[ADD] if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  || firstChild != null &&^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  && anchorUnusedVars )  {^317^318^^^^302^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^319^^^^^302^325^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REMOVE]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^319^^^^^302^325^[REMOVE] ^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[ADD]^^319^^^^^302^325^[ADD] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^return false;^322^^^^^302^325^[REPLACE] return true;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^String name = parent.getString (  ) ;^311^^^^^302^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  ) {^317^318^^^^302^325^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^addGlobalUseOfSymbol ( name, t.getScope (  ) , VAR ) ;^319^^^^^302^325^[REPLACE] addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^String name = nameNode.getParent (  ) ;^311^^^^^302^325^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^return true;^324^^^^^302^325^[REPLACE] return false;^[METHOD] processGlobalFunctionDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node nameNode Node parent Node gramps [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Stack symbolStack  [TYPE]  Node firstChild  gramps  nameNode  parent 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING || NodeUtil.isExprAssign ( grandParent )  || NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^332^368^[REPLACE] if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = dest.getParent (  ) ;^343^^^^^340^347^[REPLACE] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new AssignmentProperty ( n, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^344^345^^^^340^347^[ADD] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( map.getType (  )   ||  Token.OBJECTLIT )  {^353^^^^^332^368^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = parent.getString (  ) ;^359^^^^^332^368^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^359^^^^^332^368^[ADD] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( parent, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^for  ( Node parent = map.getFirstChild (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^358^^^^^356^364^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = parent.getParent (  ) ;^359^^^^^356^364^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^359^^^^^356^364^[ADD] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = parent.getString (  ) ;^359^^^^^356^364^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^key !=  null; null^357^^^^^332^368^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^357^358^359^^^332^368^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^for  ( Node key = map.getString (  ) ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = parentew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^358^^^^^332^368^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^358^359^360^361^362^332^368^[ADD] if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( key, key.getParent (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^358^^^^^356^364^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = key .getLastChild (  )  ;^359^^^^^356^364^[REPLACE] String name = key.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^key !=  null; parent^357^^^^^332^368^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^336^^^^^332^368^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node parent = parent.getString (  ) ;^337^^^^^332^368^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node grandParent = n.getParent (  ) ;^338^^^^^332^368^[REPLACE] Node grandParent = parent.getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^String name = parent.getParent (  ) ;^343^^^^^332^368^[REPLACE] String name = dest.getString (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = new AssignmentProperty ( n, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^332^368^[REPLACE] Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Node map = parent.getFirstChild (  ) .getNext (  ) ;^352^^^^^332^368^[REPLACE] Node map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^352^^^^^332^368^[ADD] Node map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^for  ( Node key = map .getString (  )  ;^356^^^^^332^368^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[ADD]^^356^357^358^359^360^332^368^[ADD] for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty (^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^Property prop = parentew LiteralProperty ( key, key.getNext (  ) , map, n, t.getScope (  )  ) ;^360^361^^^^332^368^[REPLACE] Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] ProcessProperties   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Property prop  [TYPE]  Stack symbolStack  [TYPE]  Node dest  grandParent  key  map  n  parent 
[REPLACE]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^372^^^^^370^373^[REPLACE] symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[METHOD] addGlobalUseOfSymbol [TYPE] void [PARAMETER] String name JSModule module SymbolType type [CLASS] ProcessProperties   [TYPE]  JSModule module  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  SymbolType type  [TYPE]  Stack symbolStack 
[REPLACE]^if  ( n.getType (  )   !=  Token.GETPROP )  {^378^^^^^377^382^[REPLACE] if  ( n.getType (  )  == Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^378^379^380^381^^377^382^[ADD] if  ( n.getType (  )  == Token.GETPROP )  { symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( parent.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^[REPLACE] symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^getNameInfoForName ( parent.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^[REPLACE] getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^380^^^^^377^382^[ADD] getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^getNameInfoForName ( parent .getType (  )  .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^[REPLACE] getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^388^^^^^387^398^[REPLACE] if  ( start.isReferenced (  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^if  (  moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return dest.markReference ( startModule ) ;^394^^^^^387^398^[REPLACE] return dest.markReference ( edge ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return dest .isReferenced (  )  ;^392^^^^^387^398^[REPLACE] return dest.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return dest .isReferenced (  )  ;^394^^^^^387^398^[REPLACE] return dest.markReference ( edge ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^JSModule destModule = start.getDeepestCommonModuleRef (  ) ;^389^^^^^387^398^[REPLACE] JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[ADD]^^389^^^^^387^398^[ADD] JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^if  ( startModule == null ) {^390^391^^^^387^398^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return start.markReference ( edge ) ;^394^^^^^387^398^[REPLACE] return dest.markReference ( edge ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return start.markReference ( startModule ) ;^392^^^^^387^398^[REPLACE] return dest.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return dest.markReference ( edge ) ;^392^^^^^387^398^[REPLACE] return dest.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^return true;^397^^^^^387^398^[REPLACE] return false;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] NameInfo start JSModule edge NameInfo dest [CLASS] PropagateReferences   [TYPE]  NameInfo dest  start  [TYPE]  boolean false  true  [TYPE]  JSModule edge  startModule 
[REPLACE]^private  Node nameNode;^429^^^^^^^[REPLACE] private final Node nameNode;^[METHOD] <init> [TYPE] AnalyzePrototypeProperties$SymbolType() [PARAMETER] [CLASS] GlobalFunction   [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  boolean false  true 
[REPLACE]^private  JSModule module;^430^^^^^^^[REPLACE] private final JSModule module;^[METHOD] <init> [TYPE] AnalyzePrototypeProperties$SymbolType() [PARAMETER] [CLASS] GlobalFunction   [TYPE]  SymbolType PROPERTY  VAR  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.VAR  &  NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[ADD]^^433^434^435^^^432^438^[ADD] Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^434^435^^^^432^438^[REPLACE] parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^435^^^^^432^438^[REPLACE] NodeUtil.isFunctionDeclaration ( parent )  ) ;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^this.nameNode =  parent;^436^^^^^432^438^[REPLACE] this.nameNode = nameNode;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^this.module =  null;^437^^^^^432^438^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node nameNode Node parent Node gramps JSModule module [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^Node parent = nameNode.getType (  ) ;^442^^^^^441^449^[REPLACE] Node parent = nameNode.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^if  (  parent.getChildCount (  )  == 4 )  {^443^^^^^441^449^[REPLACE] if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( parent .getParent (  )    !=  Token.VAR ) ;^446^^^^^441^449^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR ) ;^446^^^^^441^449^[REPLACE] Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^447^^^^^441^449^[REPLACE] parent.removeChild ( nameNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.removeChild ( nameNode.getParent (  ) , parent ) ;^444^^^^^441^449^[REPLACE] NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] GlobalFunction   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node node;^480^^^^^^^[REPLACE] private final Node node;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node gramps  nameNode  parent  [TYPE]  boolean false  true 
[REPLACE]^this.module = module; ;^488^^^^^487^490^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node node Node parent JSModule module [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.node = node; ;^489^^^^^487^490^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node node Node parent JSModule module [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^node.getParent (  )  ;^494^^^^^493^495^[REPLACE] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^NodeUtil.removeChild ( node .getLastChild (  )  , node ) ;^494^^^^^493^495^[REPLACE] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[ADD]^^494^^^^^493^495^[ADD] NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^return getValueParent (  )  .getLastChild (  )^499^^^^^498^500^[REPLACE] return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] getPrototype [TYPE] Node [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^504^^^^^503^505^[REPLACE] return getValueParent (  ) .getLastChild (  ) ;^[METHOD] getValue [TYPE] Node [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^return node.getLastChild (  ) ;^509^^^^^508^510^[REPLACE] return node.getFirstChild (  ) ;^[METHOD] getValueParent [TYPE] Node [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^return node.getFirstChild (  ) ;^514^^^^^513^515^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] AssignmentProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node value;^526^^^^^^^[REPLACE] private final Node value;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^private  Node assign;^528^^^^^^^[REPLACE] private final Node assign;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^this.key =  null;^533^^^^^531^538^[REPLACE] this.key = key;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^this.value =  map;^534^^^^^531^538^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^this.map =  value;^535^^^^^531^538^[REPLACE] this.map = map;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^this.assign =  null;^536^^^^^531^538^[REPLACE] this.assign = assign;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^this.module =  null;^537^^^^^531^538^[REPLACE] this.module = module;^[METHOD] <init> [TYPE] JSModule) [PARAMETER] Node key Node value Node map Node assign JSModule module [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^map .getFirstChild (  )  ;^542^^^^^541^544^[REPLACE] map.removeChild ( key ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^map .getFirstChild (  )  ;^543^^^^^541^544^[REPLACE] map.removeChild ( value ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^return assign .removeChild ( assign )  ;^548^^^^^547^549^[REPLACE] return assign.getFirstChild (  ) ;^[METHOD] getPrototype [TYPE] Node [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^return map;^553^^^^^552^554^[REPLACE] return value;^[METHOD] getValue [TYPE] Node [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^return value;^558^^^^^557^559^[REPLACE] return map;^[METHOD] getValueParent [TYPE] Node [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^return map;^563^^^^^562^564^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] LiteralProperty   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^final  short  name;^572^^^^^^^[REPLACE] final String name;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^private boolean referenced ;^574^^^^^^^[REPLACE] private boolean referenced = false;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^private final Deque<Symbol> declarations ;^575^^^^^^^[REPLACE] private final Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^private JSModule deepestCommonModuleRef  = null ;^576^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule module  [TYPE]  Node assign  key  map  value  [TYPE]  boolean false  true 
[REPLACE]^this.name =  null;^584^^^^^583^585^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  boolean false  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^return hasChanged;^591^^^^^590^592^[REPLACE] return referenced;^[METHOD] isReferenced [TYPE] boolean [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  boolean false  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^boolean hasChanged = true;^601^^^^^600^624^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^601^^^^^600^624^[ADD] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( referenced )  {^602^^^^^600^624^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^referenced = false;^603^^^^^600^624^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^603^^^^^600^624^[ADD] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^hasChanged = false;^604^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^604^^^^^600^624^[ADD] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( moduleGraph == null )  {^607^^^^^600^624^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( deepestCommonModuleRef != null )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^613^614^615^^^600^624^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommon;^611^^^^^600^624^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  (module  ==  deepestCommonModuleRef )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^hasChanged = true;^618^619^620^^^600^624^[ADD] if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^hasChanged = false;^619^^^^^600^624^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^611^^^^^600^624^[ADD] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^deepestCommonModuleRef =  nullGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, null ) ;^613^614^615^^^600^624^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^boolean hasChanged = false;^608^^^^^600^624^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  (originalDeepestCommon != true )  {^610^^^^^600^624^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[ADD]^^613^614^615^^^600^624^[ADD] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^if  ( module  ==  originalDeepestCommon )  {^618^^^^^600^624^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^return true;^623^^^^^600^624^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^return hasChanged;^631^^^^^630^632^[REPLACE] return deepestCommonModuleRef;^[METHOD] getDeepestCommonModuleRef [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
[REPLACE]^return hasChanged;^639^^^^^638^640^[REPLACE] return declarations;^[METHOD] getDeclarations [TYPE] Deque [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  String name  [TYPE]  Deque declarations 
