[REPLACE]^private static final Logger logger ;^34^35^^^^34^35^[REPLACE] private static final Logger logger = Logger.getLogger ( RemoveUnusedNames.class.getName (  )  ) ;^ [CLASS] RemoveUnusedNames  
[REPLACE]^private  AbstractCompiler compiler;^37^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RemoveUnusedNames  
[REPLACE]^this.compiler =  null;^46^^^^^44^47^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean canModifyExterns [CLASS] RemoveUnusedNames   [TYPE]  Logger logger  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canModifyExterns  false  true 
[ADD]^^50^51^^^^49^54^[ADD] AnalyzeNameReferences analyzer = new AnalyzeNameReferences ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedNames   [TYPE]  AnalyzeNameReferences analyzer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root 
[REPLACE]^analyzer.process ( root, root ) ;^52^^^^^49^54^[REPLACE] analyzer.process ( externRoot, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedNames   [TYPE]  AnalyzeNameReferences analyzer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root 
[REPLACE]^Name name = node.getValue (  ) ;^53^^^^^49^54^[REPLACE] removeUnusedProperties ( analyzer.getGraph (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externRoot Node root [CLASS] RemoveUnusedNames   [TYPE]  AnalyzeNameReferences analyzer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node externRoot  root 
[REPLACE]^if  ( nameInfo != null || !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^[REPLACE] if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = node.getValue (  ) ;^65^^^^^60^70^[REPLACE] name.remove (  ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^name.remove (  ) ;^66^^^^^60^70^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^logger.fine ( true + name ) ;^67^^^^^60^70^[REPLACE] logger.fine ( "Removed unused name" + name ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^67^^^^^60^70^[ADD] logger.fine ( "Removed unused name" + name ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  { Name name = node.getValue (  ) ;^61^^^^^60^70^[REPLACE] for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  {^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = null .getAnnotation (  )  ;^62^^^^^60^70^[REPLACE] Name name = node.getValue (  ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^62^^^^^60^70^[ADD] Name name = node.getValue (  ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^NameInfo nameInfo = true .getValue (  )  ;^63^^^^^60^70^[REPLACE] NameInfo nameInfo = node.getAnnotation (  ) ;^[METHOD] removeUnusedProperties [TYPE] void [PARAMETER] NameReferenceGraph graph [CLASS] RemoveUnusedNames   [TYPE]  AbstractCompiler compiler  [TYPE]  NameInfo nameInfo  [TYPE]  boolean false  true  [TYPE]  GraphNode node  [TYPE]  Logger logger  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
