[REPLACE]^static final List<String> OPTIMAL_ORDER ;^40^41^42^43^^40^48^[REPLACE] static final List<String> OPTIMAL_ORDER = ImmutableList.of ( "removeUnreachableCode", "removeUnusedVars", "foldConstants",^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^static  int MAX_LOOPS = 100;^50^^^^^^^[REPLACE] static final int MAX_LOOPS = 100;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^static final String OPTIMIZE_LOOP_ERROR  = null ;^51^52^^^^51^52^[REPLACE] static final String OPTIMIZE_LOOP_ERROR = "Fixed point loop exceeded the maximum number of iterations.";^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  final Logger logger = Logger.getLogger ( PhaseOptimizer.class.getName (  )  ) ;^54^55^^^^54^55^[REPLACE] private static final Logger logger = Logger.getLogger ( PhaseOptimizer.class.getName (  )  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private List<CompilerPass> passes ;^57^^^^^^^[REPLACE] private List<CompilerPass> passes = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  CodeChangeHandler.RecentChange recentChange = new CodeChangeHandler.RecentChange (  ) ;^61^62^^^^61^62^[REPLACE] private final CodeChangeHandler.RecentChange recentChange = new CodeChangeHandler.RecentChange (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private boolean loopMutex ;^63^^^^^^^[REPLACE] private boolean loopMutex = false;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private Tracer currentTracer ;^64^^^^^^^[REPLACE] private Tracer currentTracer = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private String currentPassName  = null ;^65^^^^^^^[REPLACE] private String currentPassName = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private PassFactory sanityCheck  = null ;^66^^^^^^^[REPLACE] private PassFactory sanityCheck = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private static boolean randomizeLoops  = null ;^70^^^^^^^[REPLACE] private static boolean randomizeLoops = false;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private static List<List<String>> loopsRun  = null ;^71^^^^^^^[REPLACE] private static List<List<String>> loopsRun = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  PassFactory factory;^260^^^^^^^[REPLACE] private final PassFactory factory;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private final List<NamedPass> myPasses ;^289^^^^^^^[REPLACE] private final List<NamedPass> myPasses = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private final Set<String> myNames ;^290^^^^^^^[REPLACE] private final Set<String> myNames = Sets.newHashSet (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^Loop loop = new LoopInternal (  )  ;^115^^^^^114^135^[REPLACE] Loop currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^boolean isCurrentLoopPopulated = true;^116^^^^^114^135^[REPLACE] boolean isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( sanityCheck.isOneTimePass (  )  )  {^118^^^^^114^135^[REPLACE] if  ( factory.isOneTimePass (  )  )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = false  ;^128^^^^^118^129^[REPLACE] isCurrentLoopPopulated = true;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( true )  {^119^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentLoop  = null ;^122^^^^^114^135^[REPLACE] currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = true;^123^^^^^114^135^[REPLACE] isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentLoop ;^122^^^^^114^135^[REPLACE] currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^123^^^^^114^135^[ADD] isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^119^120^^122^123^114^135^[ADD] if  ( isCurrentLoopPopulated )  { passes.add ( currentLoop ) ; currentLoop = new LoopInternal (  ) ; isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^122^^^^^114^135^[ADD] currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^for  ( PassFactory factory : null )  {^117^^^^^114^135^[REPLACE] for  ( PassFactory factory : factories )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^118^^^^^114^135^[REPLACE] if  ( factory.isOneTimePass (  )  )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^119^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = true  ;^123^^^^^114^135^[REPLACE] isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( randomizeLoops )  {^119^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = false  ;^128^^^^^114^135^[REPLACE] isCurrentLoopPopulated = true;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = false;^128^^^^^114^135^[REPLACE] isCurrentLoopPopulated = true;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^NamedPass> optimalPasses = newArrayList (  )  ;^117^^^^^114^135^[REPLACE] for  ( PassFactory factory : factories )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( randomizeLoops )  {^132^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^passes.add ( loop )  ;^133^^^^^114^135^[REPLACE] passes.add ( currentLoop ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^checkState (  (  (  ( currentTracer )  == null )  &&  (  ( currentPassName )  == null )  )  )  ;^314^^^^^313^348^[REPLACE] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^314^315^316^317^^313^348^[ADD] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ; loopMutex = true; if  ( randomizeLoops )  { randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^315^^^^^313^348^[ADD] loopMutex = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^316^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^randomizePasses (  )  ;^319^^^^^316^320^[REPLACE] optimizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^optimizePasses (  )  ;^317^^^^^313^348^[REPLACE] randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( count++  <=  MAX_LOOPS )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, false ) ;^328^^^^^313^348^[REPLACE] compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^335^^^^^313^348^[REPLACE] if  ( hasHaltingErrors (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^342^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^info ( name )  ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^checkState (  (  (  ( currentTracer )  == null )  &&  (  ( currentPassName )  == null )  )  )  ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^int count = 0;^322^323^^325^326^326^340^[ADD] try {  int count = 0; out: do {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^346^^^^^326^340^[ADD] loopMutex = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^int count = 0 >>> 3;^325^^^^^326^340^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^NamedPass pass  ;^333^^^^^326^340^[REPLACE] for  ( CompilerPass pass : myPasses )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^369^^^^^362^381^[ADD] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^if   (  sanityCheck != null  )   {  ;^372^^^^^362^381^[REPLACE] if  ( pass.name.equals ( passName )  )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^optimalPasses.add ( pass ) ;break;^372^373^374^375^^362^381^[ADD] if  ( pass.name.equals ( passName )  )  { optimalPasses.add ( pass ) ; break; }^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^optimalPasses .addAll ( this )  ;^373^^^^^362^381^[REPLACE] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^for  ( String passToCheck : OPTIMAL_ORDER )  {^370^^^^^362^381^[REPLACE] for  ( String passName : OPTIMAL_ORDER )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^optimalPasses.remove ( pass ) ;^373^^^^^362^381^[REPLACE] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^^371^372^373^374^375^370^377^[ADD] for  ( NamedPass pass : myPasses )  { if  ( pass.name.equals ( passName )  )  { optimalPasses.add ( pass ) ; break; }^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^CompilerPass pass  ;^371^^^^^370^377^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^^370^371^372^373^374^370^377^[ADD] for  ( String passName : OPTIMAL_ORDER )  { for  ( NamedPass pass : myPasses )  { if  ( pass.name.equals ( passName )  )  { optimalPasses.add ( pass ) ; break;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.removeAll ( null ) ;^379^^^^^362^381^[REPLACE] myPasses.removeAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.addAll ( mixedupPasses )  ;^380^^^^^362^381^[REPLACE] myPasses.addAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^private  AbstractCompiler myCompiler;^259^^^^^^^[REPLACE] private final AbstractCompiler myCompiler;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PassFactoryDelegate   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^private final List<NamedPass> myPasses  = null ;^289^^^^^^^[REPLACE] private final List<NamedPass> myPasses = Lists.newArrayList (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^private  Set<String> myNames = Sets.newHashSet (  ) ;^290^^^^^^^[REPLACE] private final Set<String> myNames = Sets.newHashSet (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^checkArgument (  ( ! ( myNames.contains ( name )  )  ) ,  (  ( "Already a pass with name '" + name )  + "' in this loop" )  )  ;^314^^^^^313^348^[REPLACE] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^315^^^^^313^348^[ADD] loopMutex = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^316^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^randomizePasses (  ) ;optimizePasses (  ) ;^316^317^318^319^320^313^348^[ADD] if  ( randomizeLoops )  { randomizePasses (  ) ; } else { optimizePasses (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^randomizePasses (  )  ;^319^^^^^316^320^[REPLACE] optimizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^optimizePasses (  )  ;^317^^^^^313^348^[REPLACE] randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  (count++  <  MAX_LOOPS )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REMOVE]^if  ( randomizeLoops )  {     add ( getPassOrder (  )  ) ; }^327^^^^^313^348^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, true ) ;^328^^^^^313^348^[REPLACE] compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^335^^^^^313^348^[REPLACE] if  ( hasHaltingErrors (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if   (  equals  (  passName  )    )   {  ;^342^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^checkArgument (  ( ! ( myNames.contains ( name )  )  ) ,  (  ( "Already a pass with name '" + name )  + "' in this loop" )  )  ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REMOVE]^newArrayList (  )  ;^343^^^^^313^348^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^int count = 0;^322^323^^325^326^326^340^[ADD] try {  int count = 0; out: do {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^346^^^^^326^340^[ADD] loopMutex = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^325^^^^^326^340^[ADD] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^NamedPass pass  ;^333^^^^^326^340^[REPLACE] for  ( CompilerPass pass : myPasses )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^NamedPass> mixedupPasses = newArrayList (  )  ;^369^^^^^362^381^[REPLACE] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^if   (  randomizeLoops  )   {  ;^372^^^^^362^381^[REPLACE] if  ( pass.name.equals ( passName )  )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^372^373^374^375^^362^381^[ADD] if  ( pass.name.equals ( passName )  )  { optimalPasses.add ( pass ) ; break; }^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^optimalPasses.remove ( pass ) ;^373^^^^^362^381^[REPLACE] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^373^^^^^362^381^[ADD] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^370^371^372^373^374^362^381^[ADD] for  ( String passName : OPTIMAL_ORDER )  { for  ( NamedPass pass : myPasses )  { if  ( pass.name.equals ( passName )  )  { optimalPasses.add ( pass ) ; break;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^CompilerPass pass  ;^371^^^^^370^377^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^int count = 0  ;^370^^^^^370^377^[REPLACE] for  ( String passName : OPTIMAL_ORDER )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^myPasses.removeAll ( false ) ;^379^^^^^362^381^[REPLACE] myPasses.removeAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^myPasses.addAll ( 1 ) ;^380^^^^^362^381^[REPLACE] myPasses.addAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^380^^^^^362^381^[ADD] myPasses.addAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
