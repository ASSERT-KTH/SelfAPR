[REPLACE]^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK && n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^[REPLACE] if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^^40^41^42^43^44^39^56^[ADD] if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  { if  ( n.getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n )  ) ; } else if  ( n.getType (  )  == Token.EXPR_RESULT^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^42^^^^^40^53^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^}  else {^44^45^^^^40^53^[REPLACE] } else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^}  else {^48^49^50^^^40^53^[REPLACE] } else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^}   add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^48^49^50^51^52^40^53^[ADD] else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ; }^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^^46^47^^^^40^53^[ADD] Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ; add ( getTypeAnnotation ( rhs )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^if  ( n.getType (  )   ||  Token.FUNCTION )  {^42^^^^^39^56^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^add ( getFunctionAnnotation ( n )  ) ;Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^42^43^44^45^46^39^56^[ADD] if  ( n.getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n )  ) ; } else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  { Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^}  if  ( n.getType (  )  == Token.EXPR_RESULT ) {^44^45^^^^39^56^[REPLACE] } else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^}  else {^48^49^50^^^39^56^[REPLACE] } else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ;^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^^51^^^^^48^52^[ADD] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getFunctionAnnotation ( n .getString (  )^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^( n.getFirstChild (  ) .getFirstChild (  )  )  ;^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getFunctionAnnotation ( n.getString (  ) .getFirstChild (  )  )  ) ;^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^^46^47^^^^44^52^[ADD] Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ; add ( getTypeAnnotation ( rhs )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^}  if  ( n.getType (  )  != Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^[REPLACE] } else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^}   add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^48^49^50^51^52^39^56^[ADD] else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ; }^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getFunctionAnnotation ( n.equals (  ) .getFirstChild (  )  )  ) ;^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[ADD]^add ( getTypeAnnotation ( rhs )  ) ;^46^47^^^^39^56^[ADD] Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ; add ( getTypeAnnotation ( rhs )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getTypeAnnotation ( rhs )  )  ;^43^^^^^39^56^[REPLACE] add ( getFunctionAnnotation ( n )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getFunctionAnnotation ( n )  )  ;^43^^^^^39^56^[REPLACE] add ( getFunctionAnnotation ( n )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^} else if  ( n.getType (  )  == Token.EXPR_RESULT || n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^[REPLACE] } else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  )  ;^51^^^^^48^52^[REPLACE] add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^Node rhs = n .getString (  )^46^^^^^44^52^[REPLACE] Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^Node rhs = n .getString (  )^46^^^^^39^56^[REPLACE] Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^super .TypedCodeGenerator ( false , 1 )  ;^55^^^^^39^56^[REPLACE] super.add ( n, context ) ;^[METHOD] add [TYPE] void [PARAMETER] Node n Context context [CLASS] TypedCodeGenerator   [TYPE]  Context context  [TYPE]  boolean false  true  [TYPE]  Node n  rhs 
[REPLACE]^if  ( paramNode.getJSType (  )  .isVoidType (  )   )  {^77^^^^^74^130^[REPLACE] if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^return "";  ;^78^^^^^74^130^[REPLACE] return "";^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^FunctionType funType =  ( FunctionType )  node.getType (  ) ;^80^^^^^74^130^[REPLACE] FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^^89^90^^^^74^130^[ADD] Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^if  ( paramNode != null )  {^95^^^^^74^130^[REPLACE] if  ( paramNode == null )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^if  ( paramNode !=node )  {^95^^^^^74^130^[REPLACE] if  ( paramNode == null )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^break;^95^96^97^^^74^130^[ADD] if  ( paramNode == null )  { break; }^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^^101^^^^^74^130^[ADD] paramNode = paramNode.getNext (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^Node paramNode = funType.getSource (  ) .getFirstChild (  ) .getNext (  ) .getFirstChild (  )  ;^93^^^^^74^130^[REPLACE] for  ( Node n : funType.getParameters (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^JSType retType = funType.getSource (  ) ;^105^^^^^74^130^[REPLACE] JSType retType = funType.getReturnType (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^if  ( retType == null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^74^130^[REPLACE] if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.append ( " * @return {"  retType  "}\n" ) ;^107^^^^^74^130^[REPLACE] sb.append ( " * @return {" + retType + "}\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^if  ( funType.isConstructor (  )  && funType.isInterface (  )  )  {^111^^^^^74^130^[REPLACE] if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^if  ( superInstance.toString (  ) .equals ( "Object" )  )  {^114^^^^^74^130^[REPLACE] if  ( !superInstance.toString (  ) .equals ( "Object" )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.toString ( " * @extends {"   interfaze  "}\n" ) ;^115^^^^^74^130^[REPLACE] sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^} else if   (  funType.isInterface  (    )    )   {  ;^122^^^^^74^130^[REPLACE] if  ( funType.isConstructor (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REMOVE]^if  ( funType.isInterface (  )  )  {     sb.append ( " * @interface\n" ) ; }^122^^^^^74^130^[REMOVE] ^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^}  if  ( funType.isInterface (  )  )  {^124^^^^^74^130^[REPLACE] } else if  ( funType.isInterface (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^}^124^125^126^^^74^130^[ADD] else if  ( funType.isInterface (  )  )  { sb.append ( " * @interface\n" ) ; }^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.append ( " * @constructor\n" )  ;^125^^^^^74^130^[REPLACE] sb.append ( " * @interface\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^^125^^^^^74^130^[ADD] sb.append ( " * @interface\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.append ( " * @interface\n" )  ;^123^^^^^74^130^[REPLACE] sb.append ( " * @constructor\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^^118^119^120^^^111^127^[ADD] for  ( ObjectType interfaze : funType.getImplementedInterfaces (  )  )  { sb.append ( " * @implements {"  + interfaze + "}\n" ) ; }^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb .append ( true )  ;^119^^^^^111^127^[REPLACE] sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REMOVE]^funType.getImplementedInterfaces (  )  ;^119^^^^^111^127^[REMOVE] ^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^ObjectType superInstance = funType.isConstructor (  ) .getInstanceType (  ) ;^112^113^^^^111^127^[REPLACE] ObjectType superInstance = funType.getSuperClassConstructor (  ) .getInstanceType (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^JSType type = node.getJSType (  )  ;^118^^^^^111^127^[REPLACE] for  ( ObjectType interfaze : funType.getImplementedInterfaces (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REMOVE]^if  ( funType.isInterface (  )  )  {     sb.append ( " * @interface\n" ) ; }^114^^^^^74^130^[REMOVE] ^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.append ( " * @extends {"   superInstance  "}\n" ) ;^115^^^^^74^130^[REPLACE] sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REMOVE]^sb.append (  (  ( " * @implements {" + interfaze )  + "}\n" )  )  ;^115^^^^^74^130^[REMOVE] ^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REMOVE]^if  ( funType.isConstructor (  )  )  {     sb.append ( " * @constructor\n" ) ; }else     if  ( funType.isInterface (  )  )  {         sb.append ( " * @interface\n" ) ;     }^124^^^^^74^130^[REMOVE] ^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^}  else {^124^^^^^74^130^[REPLACE] } else if  ( funType.isInterface (  )  )  {^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb.append (  (  ( " * @return {" + retType )  + "}\n" )  )  ;^119^^^^^111^127^[REPLACE] sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^sb .StringBuilder ( this )  ;^128^^^^^74^130^[REPLACE] sb.append ( " */\n" ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[ADD]^^128^129^^^^74^130^[ADD] sb.append ( " */\n" ) ; return sb.toString (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
[REPLACE]^return sb.toString  (    )  ;  ;^129^^^^^74^130^[REPLACE] return sb.toString (  ) ;^[METHOD] getFunctionAnnotation [TYPE] String [PARAMETER] Node node [CLASS] TypedCodeGenerator   [TYPE]  ObjectType interfaze  superInstance  [TYPE]  JSType retType  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  Node n  node  paramNode  [TYPE]  FunctionType funType 
