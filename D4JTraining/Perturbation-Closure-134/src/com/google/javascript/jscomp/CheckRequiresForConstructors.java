[REPLACE]^private  AbstractCompiler compiler;^40^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^private  CodingConvention codingConvention;^41^^^^^^^[REPLACE] private final CodingConvention codingConvention;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^45^46^47^^^45^47^[REPLACE] static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^private  List<String> constructors = Lists.newArrayList (  ) ;^73^^^^^^^[REPLACE] private final List<String> constructors = Lists.newArrayList (  ) ;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^private final List<String> requires  = null ;^74^^^^^^^[REPLACE] private final List<String> requires = Lists.newArrayList (  ) ;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^private final List<Node> newNodes  = null ;^75^^^^^^^[REPLACE] private final List<Node> newNodes = Lists.newArrayList (  ) ;^ [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  
[REPLACE]^this.compiler =  null;^51^^^^^49^54^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List constructors  newNodes  requires  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention 
[REPLACE]^this.codingConvention =  null.getCodingConvention (  ) ;^52^^^^^49^54^[REPLACE] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List constructors  newNodes  requires  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention 
[REPLACE]^this.level =  null;^53^^^^^49^54^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  List constructors  newNodes  requires  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^62^^^^^61^64^[REPLACE] Callback callback = new CheckRequiresForConstructorsCallback (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node externs  root  [TYPE]  List constructors  newNodes  requires 
[REPLACE]^this.newNodes.clear (  ) ;^63^^^^^61^64^[REPLACE] new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node externs  root  [TYPE]  List constructors  newNodes  requires 
[REPLACE]^return parent ;^79^80^^^^78^81^[REPLACE] return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  List constructors  newNodes  requires 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^85^^^^^84^128^[REPLACE] JSDocInfo info;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == this && info.isConstructor (  )  )  {^89^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String qualifiedName = n.getFirstChild (  ) .getVar (  ) ;^90^^^^^84^128^[REPLACE] String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^90^91^92^^^84^128^[ADD] String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^95^^^^^84^128^[REPLACE] if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^95^117^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^114^^^^^95^117^[ADD] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^112^^^^^95^117^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = n.getFirstChild (  )  .getParent (  )  ;^114^^^^^95^117^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^114^115^^^^95^117^[ADD] String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( parent.getType (  )   !=  Token.NAME )  {^96^^^^^84^128^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^String functionName = parent.getString (  ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;constructors.add ( functionName ) ;^96^97^98^99^100^84^128^[ADD] if  ( parent.getType (  )  == Token.NAME )  { String functionName = parent.getString (  ) ; info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == this && info.isConstructor (  )  )  {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  info.isConstructor (  )  )  {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^constructors.add ( functionName ) ;^106^107^108^^^99^109^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.contains ( qualifiedName ) ;^107^^^^^99^109^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^105^^^^^99^109^[REPLACE] info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^Node gramps = parent .getProp (  )  ;^102^^^^^99^109^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.contains ( functionName ) ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  info.isConstructor (  )  )  {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^constructors.add ( functionName ) ;^106^107^108^^^84^128^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.add ( qualifiedName ) ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^98^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^105^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = parent.getParent (  ) ;^97^^^^^84^128^[REPLACE] String functionName = parent.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^Node gramps = n.getParent (  ) ;^102^^^^^84^128^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^99^100^101^102^103^84^128^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; } else { Node gramps = parent.getParent (  ) ; Preconditions.checkState (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == true && info.isConstructor (  )  )  {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^106^107^108^^^99^109^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors .contains ( null )  ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REMOVE]^requires.add ( required ) ;^107^^^^^84^128^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = n.getString (  ) ;^97^^^^^84^128^[REPLACE] String functionName = parent.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^Node gramps = parent .getProp (  )  ;^102^^^^^84^128^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == false && info.isConstructor (  )  )  {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^102^^^^^99^109^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.add ( qualifiedName ) ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == this ) {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors.contains ( functionName ) ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = parent .getParent (  )  ;^97^^^^^84^128^[REPLACE] String functionName = parent.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^Node gramps = parent.getProp (  ) ;^102^^^^^84^128^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null ) {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors .contains ( true )  ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^100^^^^^84^128^[ADD] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^constructors .contains ( null )  ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^107^^^^^84^128^[ADD] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = parent.getString (  ) .getString (  ) ;^114^^^^^84^128^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[ADD]^^114^^^^^84^128^[ADD] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^88^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^112^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^84^128^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node gramps  n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = parent.getString (  ) ;^131^^^^^130^147^[REPLACE] Set<String> classNames = Sets.newHashSet (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^if  (  ( constructors != false ) {^134^135^136^^^130^147^[REPLACE] if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[ADD]^^134^135^136^137^138^130^147^[ADD] if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  { compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^[REPLACE] JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[ADD]^^138^^^^^130^147^[ADD] JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^classNames.contains ( className ) ;^139^^^^^130^147^[REPLACE] classNames.add ( className ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REMOVE]^this.newNodes.clear (  ) ;^139^^^^^130^147^[REMOVE] ^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^Node nameNode = qNameNode;^132^^^^^130^147^[REPLACE] for  ( Node node : newNodes )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^String className = node.getFirstChild (  ) .getVar (  ) ;^133^^^^^130^147^[REPLACE] String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^this.newNodes .contains ( false )  ;^144^^^^^130^147^[REPLACE] this.newNodes.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^this.newNodes.clear (  ) ;^145^^^^^130^147^[REPLACE] this.requires.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[ADD]^^145^146^^^^130^147^[ADD] this.requires.clear (  ) ; this.constructors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^this.constructors .contains ( null )  ;^146^^^^^130^147^[REPLACE] this.constructors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[ADD]^^146^^^^^130^147^[ADD] this.constructors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set classNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node node  [TYPE]  List constructors  newNodes  requires  [TYPE]  String className 
[REPLACE]^String qName = qNameNode.getQualifiedName (  ) ;^150^^^^^149^154^[REPLACE] String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String required 
[REPLACE]^if  ( required == null )  {^151^^^^^149^154^[REPLACE] if  ( required != null )  {^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String required 
[REPLACE]^requires .contains ( null )  ;^152^^^^^149^154^[REPLACE] requires.add ( required ) ;^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  List constructors  newNodes  requires  [TYPE]  String required 
[REPLACE]^Node qNameNode = qNameNode.getFirstChild (  ) ;^157^^^^^156^181^[REPLACE] Node qNameNode = n.getFirstChild (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^[REPLACE] String qName = qNameNode.getQualifiedName (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^if  ( qName != null || qName.isEmpty (  )  )  {^161^^^^^156^181^[REPLACE] if  ( qName == null || qName.isEmpty (  )  )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^Node nameNode = nameNode;^166^^^^^156^181^[REPLACE] Node nameNode = qNameNode;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[ADD]^^166^^^^^156^181^[ADD] Node nameNode = qNameNode;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^for  ( ; qNameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^[REPLACE] for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^for  ( ; nameNode.hasChildren (  ) ; nameNode =  qNameNode.getFirstChild (  )  )  {}^167^^^^^156^181^[REPLACE] for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^if  ( nameNode.getType (  )   ==  Token.NAME )  {^171^^^^^156^181^[REPLACE] if  ( nameNode.getType (  )  != Token.NAME )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^172^^^^^156^181^[REPLACE] return;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^String name = qNameNode.getString (  ) ;^175^^^^^156^181^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[ADD]^^175^^^^^156^181^[ADD] String name = nameNode.getString (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^Scope.Var var = t.getInput (  ) .getVar ( name ) ;^176^^^^^156^181^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^if  ( var != null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^[REPLACE] if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^178^^^^^156^181^[REPLACE] return;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^newNodes.add ( qNameNode ) ;^180^^^^^156^181^[REPLACE] newNodes.add ( n ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[ADD]^^180^^^^^156^181^[ADD] newNodes.add ( n ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^private final List<String> constructors ;^73^^^^^^^[REPLACE] private final List<String> constructors = Lists.newArrayList (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^private final List<String> requires ;^74^^^^^^^[REPLACE] private final List<String> requires = Lists.newArrayList (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^private final List<Node> newNodes ;^75^^^^^^^[REPLACE] private final List<Node> newNodes = Lists.newArrayList (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  DiagnosticType MISSING_REQUIRE_WARNING  [TYPE]  Var var  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  nameNode  qNameNode  [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName 
[REPLACE]^return parent == null || parent .getString (  )   != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^[REPLACE] return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^85^^^^^84^128^[REPLACE] JSDocInfo info;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^85^^^^^84^128^[ADD] JSDocInfo info;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^89^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String qualifiedName = parent.getFirstChild (  ) .getVar (  ) ;^90^^^^^84^128^[REPLACE] String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^95^^^^^84^128^[REPLACE] if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null ) {^113^^^^^95^117^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^112^^^^^95^117^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^95^117^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^114^^^^^95^117^[ADD] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( parent.getType (  )   &&  Token.NAME )  {^96^^^^^84^128^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  (  info.isConstructor (  )  )  {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors .contains ( null )  ;^107^^^^^99^109^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^105^^^^^99^109^[REPLACE] info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.contains ( qualifiedName ) ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == true && info.isConstructor (  )  )  {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^106^107^108^^^84^128^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors .contains ( this )  ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^98^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ; ;^105^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = n.getString (  ) ;^97^^^^^84^128^[REPLACE] String functionName = parent.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^97^98^^^^84^128^[ADD] String functionName = parent.getString (  ) ; info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^Node gramps = n.getProp (  ) ;^102^^^^^84^128^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^constructors.add ( functionName ) ;^106^107^108^^^99^109^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.contains ( functionName ) ;^107^^^^^99^109^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^102^^^^^99^109^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.add ( qualifiedName ) ;^100^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  (  info.isConstructor (  )  )  {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.contains ( functionName ) ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^String functionName = parent.getString (  ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;constructors.add ( functionName ) ;^96^97^98^99^100^84^128^[ADD] if  ( parent.getType (  )  == Token.NAME )  { String functionName = parent.getString (  ) ; info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  (  info.isConstructor (  )  )  {^99^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^107^^^^^99^109^[ADD] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REMOVE]^requires.add ( required ) ;^100^^^^^84^128^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^constructors.add ( qualifiedName ) ;^107^^^^^84^128^[REPLACE] constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^102^^^^^84^128^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^constructors.add ( functionName ) ;Node gramps = parent.getParent (  ) ;^99^100^101^102^103^84^128^[ADD] if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; } else { Node gramps = parent.getParent (  ) ; Preconditions.checkState (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null ) {^106^^^^^99^109^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^105^^^^^99^109^[ADD] info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  ( info == null ) {^106^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^if  (  info.isConstructor (  )  )  {^113^^^^^84^128^[REPLACE] if  ( info != null && info.isConstructor (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^String functionName = n.getFirstChild (  ) .getString (  ) ;constructors.add ( functionName ) ;^113^114^115^116^^84^128^[ADD] if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^84^128^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^114^115^^^^84^128^[ADD] String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^88^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^88^^^^^84^128^[ADD] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ; ;^112^^^^^84^128^[REPLACE] info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String qualifiedName = parent.getString (  ) .getQualifiedName (  ) ;^90^^^^^84^128^[REPLACE] String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[ADD]^^102^^^^^84^128^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = parent.getString (  ) .getString (  ) ;^114^^^^^84^128^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String functionName  qualifiedName  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent 
[REPLACE]^String functionName = parent.getString (  ) ;^131^^^^^130^147^[REPLACE] Set<String> classNames = Sets.newHashSet (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[ADD]^^131^^^^^130^147^[ADD] Set<String> classNames = Sets.newHashSet (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^if  (  ( constructors != true || !constructors.contains ( className )  ) &&  ( requires == true || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^[REPLACE] if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^[REPLACE] JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^classNames.contains ( className ) ;^139^^^^^130^147^[REPLACE] classNames.add ( className ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^Node nameNode = qNameNode;^132^^^^^130^147^[REPLACE] for  ( Node node : newNodes )  {^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^String className = node.getFirstChild (  )  .getString (  )  ;^133^^^^^130^147^[REPLACE] String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[ADD]^^133^134^135^136^137^130^147^[ADD] String className = node.getFirstChild (  ) .getQualifiedName (  ) ; if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  { compiler.report (^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^this.newNodes .contains ( 0 )  ;^144^^^^^130^147^[REPLACE] this.newNodes.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^this.requires .contains ( 1 )  ;^145^^^^^130^147^[REPLACE] this.requires.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^this.constructors .contains ( null )  ;^146^^^^^130^147^[REPLACE] this.constructors.clear (  ) ;^[METHOD] visitScriptNode [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  Set classNames  [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node 
[REPLACE]^String qName = qNameNode.getQualifiedName (  ) ;^150^^^^^149^154^[REPLACE] String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String required  [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[REPLACE]^if  ( required == null )  {^151^^^^^149^154^[REPLACE] if  ( required != null )  {^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String required  [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[REPLACE]^requires .contains ( false )  ;^152^^^^^149^154^[REPLACE] requires.add ( required ) ;^[METHOD] visitCallNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String required  [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[REPLACE]^Node qNameNode = qNameNode.getFirstChild (  ) ;^157^^^^^156^181^[REPLACE] Node qNameNode = n.getFirstChild (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^[REPLACE] String qName = qNameNode.getQualifiedName (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^if  ( qName != null ) {^161^^^^^156^181^[REPLACE] if  ( qName == null || qName.isEmpty (  )  )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[ADD]^return;^161^162^163^^^156^181^[ADD] if  ( qName == null || qName.isEmpty (  )  )  { return; }^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^162^^^^^156^181^[REPLACE] return;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^Node nameNode = nameNode;^166^^^^^156^181^[REPLACE] Node nameNode = qNameNode;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^for  ( ; nameNode.getParent (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^[REPLACE] for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^for  ( ; nameNode.hasChildren (  ) ; nameNode =  qNameNode.getFirstChild (  )  )  {}^167^^^^^156^181^[REPLACE] for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^if  ( name       ==  Token.NAME )  {^171^^^^^156^181^[REPLACE] if  ( nameNode.getType (  )  != Token.NAME )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^172^^^^^156^181^[REPLACE] return;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^String name = qNameNode.getParent (  ) ;^175^^^^^156^181^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^Scope.Var var = t.getInput (  ) .getVar ( name ) ;^176^^^^^156^181^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^if  (  var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^[REPLACE] if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
[REPLACE]^newNodes.contains ( qNameNode ) ;^180^^^^^156^181^[REPLACE] newNodes.add ( n ) ;^[METHOD] visitNewNode [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CheckRequiresForConstructorsCallback   [TYPE]  List constructors  newNodes  requires  [TYPE]  String name  qName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  nameNode  qNameNode 
