[REPLACE]^private  NameGenerator names;^33^^^^^^^[REPLACE] private final NameGenerator names;^ [CLASS] VariableNameGenerator  
[REPLACE]^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  { usedNames.add ( i.next (  ) .getName (  )  ) ;^35^^^^^34^40^[REPLACE] Set<String> usedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^^35^^^^^34^40^[ADD] Set<String> usedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^for  ( Iterator<Var> false = scope.getVars (  ) ; i.next (  ) ; )  {^36^^^^^34^40^[REPLACE] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^usedNames.add ( i.hasNext (  ) .getName (  )  ) ;^37^^^^^34^40^[REPLACE] usedNames.add ( i.next (  ) .getName (  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^usedNames.add ( null.next (  ) .getName (  )  ) ;^37^^^^^34^40^[REPLACE] usedNames.add ( i.next (  ) .getName (  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^usedNames.add ( null.hasNext (  ) .getName (  )  ) ;^37^^^^^34^40^[REPLACE] usedNames.add ( i.next (  ) .getName (  )  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  { usedNames.add ( i.next (  ) .getName (  )  ) ;^36^^^^^34^40^[REPLACE] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^names = new NameGenerator ( usedNames, "", this ) ;^39^^^^^34^40^[REPLACE] names = new NameGenerator ( usedNames, "", null ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] Scope scope [CLASS] VariableNameGenerator   [TYPE]  Iterator i  [TYPE]  NameGenerator names  [TYPE]  Set usedNames  [TYPE]  boolean false  true  [TYPE]  Scope scope 
