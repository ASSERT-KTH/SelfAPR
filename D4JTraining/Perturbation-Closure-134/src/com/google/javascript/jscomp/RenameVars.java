[REPLACE]^private  AbstractCompiler compiler;^37^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final ArrayList<Node> globalNameNodes  = null ;^40^^^^^^^[REPLACE] private final ArrayList<Node> globalNameNodes = new ArrayList<Node> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final ArrayList<Node> localNameNodes ;^43^^^^^^^[REPLACE] private final ArrayList<Node> localNameNodes = new ArrayList<Node> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final ArrayList<String> localTempNames  = null ;^46^^^^^^^[REPLACE] private final ArrayList<String> localTempNames = new ArrayList<String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final Set<String> externNames  = null ;^49^^^^^^^[REPLACE] private final Set<String> externNames = new HashSet<String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final Map<String, String> renameMap  = null ;^55^^^^^^^[REPLACE] private final Map<String, String> renameMap = new HashMap<String, String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private int assignmentCount  = null ;^64^^^^^^^[REPLACE] private int assignmentCount = 0;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^final  long  orderOfOccurrence;^72^^^^^^^[REPLACE] final int orderOfOccurrence;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final SortedMap<String, Assignment> assignments =  new Assignment> (  )  ;^96^97^^^^96^97^[REPLACE] private final SortedMap<String, Assignment> assignments = new TreeMap<String, Assignment> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  char[] reservedCharacters;^113^^^^^^^[REPLACE] private final char[] reservedCharacters;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  final String LOCAL_VAR_PREFIX = "L ";^116^^^^^^^[REPLACE] private static final String LOCAL_VAR_PREFIX = "L ";^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private static  Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment> (  )  {^243^244^^^^243^253^[REPLACE] private static final Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment> (  )  {^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private static  Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR = new Comparator<Assignment> (  )  {^259^260^^^^259^264^[REPLACE] private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR = new Comparator<Assignment> (  )  {^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[ADD]^^126^^^^^125^138^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.prefix = prefix != null ? "" : prefix;^127^^^^^125^138^[REPLACE] this.prefix = prefix == null ? "" : prefix;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.localRenamingOnly =  true;^128^^^^^125^138^[REPLACE] this.localRenamingOnly = localRenamingOnly;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.preserveAnonymousFunctionNames =  localRenamingOnly;^129^^^^^125^138^[REPLACE] this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.generatePseudoNames =  true;^130^^^^^125^138^[REPLACE] this.generatePseudoNames = generatePseudoNames;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.prevUsedRenameMap =  null;^131^^^^^125^138^[REPLACE] this.prevUsedRenameMap = prevUsedRenameMap;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedCharacters =  null;^132^^^^^125^138^[REPLACE] this.reservedCharacters = reservedCharacters;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( reservedNames != null )  {^133^^^^^125^138^[REPLACE] if  ( reservedNames == null )  {^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^134^^^^^125^138^[ADD] this.reservedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedNames = newHashSet (  )  ;^136^^^^^125^138^[REPLACE] this.reservedNames = Sets.newHashSet ( reservedNames ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( n.getType (  )   ==  Token.NAME )  {^172^^^^^171^225^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^173^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String oldName = n.getString (  )  ;^176^^^^^171^225^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( name.length (  )  %  0.5  == 0 )  {^179^^^^^171^225^[REPLACE] if  ( name.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^180^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^Scope.Var var = t.getScope (  ) .getVar ( tempName ) ;^184^^^^^171^225^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^185^^^^^171^225^[ADD] boolean local =  ( var != null )  && var.isLocal (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( local && localRenamingOnly )  {^188^^^^^171^225^[REPLACE] if  ( !local && localRenamingOnly )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^190^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( preserveAnonymousFunctionNames ) {^194^195^196^^^171^225^[REPLACE] if  ( preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^198^^^^^194^199^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^198^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !okToRenameVar ( name, preserveAnonymousFunctionNames )  )  {^202^^^^^171^225^[REPLACE] if  ( !okToRenameVar ( name, local )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^203^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if   (  !local  )   {  ;^206^^^^^171^225^[REPLACE] if  ( isExternsPass_ )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if   (  local  )   {  ;^208^^^^^171^225^[REPLACE] if  ( !local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^externNames.add ( tempName ) ;^209^^^^^171^225^[REPLACE] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;  ;^211^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^208^209^210^^^171^225^[ADD] if  ( !local )  { externNames.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( preserveAnonymousFunctionNames )  {^214^^^^^171^225^[REPLACE] if  ( local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^214^215^216^217^218^171^225^[ADD] if  ( local )  {  String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ; incCount ( tempName, null ) ; localNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^} else if  ( var == parentull )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^incCount ( name, 0.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^localNameNodes.add ( n )  ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^223^^^^^171^225^[ADD] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName = LOCAL_VAR_PREFIX  null.getLocalVarIndex (  ) ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^} else if  ( var == null )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^incCount ( tempName, var.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^globalNameNodes.add ( parent ) ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignmentLog  = null ;^270^^^^^269^322^[REPLACE] assignmentLog = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NodeTraversal.traverse ( compiler, externs, new ProcessVars ( false )  ) ;^273^^^^^269^322^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessVars ( true )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root, new ProcessVars ( true )  ) ;^274^^^^^269^322^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessVars ( false )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^274^^^^^269^322^[ADD] NodeTraversal.traverse ( compiler, root, new ProcessVars ( false )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^reservedNames.contains ( externNames ) ;^277^^^^^269^322^[REPLACE] reservedNames.addAll ( externNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^280^281^^^^269^322^[ADD] SortedSet<Assignment> varsByFrequency = new TreeSet<Assignment> ( FREQUENCY_COMPARATOR ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^varsByFrequency.contains ( assignments.values (  )  ) ;^282^^^^^269^322^[REPLACE] varsByFrequency.addAll ( assignments.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^getPseudoName ( n.getString (  )  )  ;^282^^^^^269^322^[REPLACE] varsByFrequency.addAll ( assignments.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^282^^^^^269^322^[ADD] varsByFrequency.addAll ( assignments.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( prevUsedRenameMap == null )  {^285^^^^^269^322^[REPLACE] if  ( prevUsedRenameMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^reusePreviouslyUsedVariableMap (  ) ;^285^286^287^^^269^322^[ADD] if  ( prevUsedRenameMap != null )  { reusePreviouslyUsedVariableMap (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^getPseudoName ( n.getString (  )  )  ;^286^^^^^269^322^[REPLACE] reusePreviouslyUsedVariableMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignNames ( null ) ;^290^^^^^269^322^[REPLACE] assignNames ( varsByFrequency ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^292^^^^^269^322^[ADD] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  (tempName == null )  {^298^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^n.setString ( newName ) ;changed = true;^298^299^300^301^^269^322^[ADD] if  ( newName != null )  { n.setString ( newName ) ; changed = true; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^changed = false;^300^^^^^269^322^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^295^296^^298^299^269^322^[ADD] for  ( Node n : globalNameNodes )  { String newName = getNewGlobalName ( n ) ; if  ( newName != null )  { n.setString ( newName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if   (  a.newName != null  )   {  ;^298^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^300^^^^^269^322^[ADD] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String newName = getNewLocalName ( n, count )  ;^296^^^^^269^322^[REPLACE] String newName = getNewGlobalName ( n ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =  ( LOCAL_VAR_PREFIX )  +  ( var.getLocalVarIndex (  )  )  ;^295^^^^^269^322^[REPLACE] for  ( Node n : globalNameNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^305^^^^^269^322^[ADD] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( tempName == null )  {^308^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^changed = false;^310^^^^^269^322^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( Node externs : localNameNodes )  {^306^^^^^269^322^[REPLACE] for  ( Node n : localNameNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( newName == null )  {^308^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String externsewName = getNewLocalName ( n, count ) ;^307^^^^^269^322^[REPLACE] String newName = getNewLocalName ( n, count ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =  ( LOCAL_VAR_PREFIX )  +  ( var.getLocalVarIndex (  )  )  ;^306^^^^^269^322^[REPLACE] for  ( Node n : localNameNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String newName = getNewGlobalName ( n )  ;^307^^^^^269^322^[REPLACE] String newName = getNewLocalName ( n, count ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( preserveAnonymousFunctionNames )  {^315^^^^^269^322^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^compiler.getCodingConvention (  ) ;^316^^^^^269^322^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^compiler.addToDebugLog ( "JS var assignments:\n"  assignmentLog ) ;^320^^^^^269^322^[REPLACE] compiler.addToDebugLog ( "JS var assignments:\n" + assignmentLog ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignmentLog = true;^321^^^^^269^322^[REPLACE] assignmentLog = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NameGenerator localNameGenerator = prefix.isEmpty (  )  ? localNameGenerator : new NameGenerator ( reservedNames, "", reservedCharacters ) ;^385^386^387^^^380^452^[REPLACE] NameGenerator localNameGenerator = prefix.isEmpty (  )  ? globalNameGenerator : new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^390^^^^^380^452^[ADD] List<Assignment> pendingAssignments = new ArrayList<Assignment> (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =  ( LOCAL_VAR_PREFIX )  +  ( var.getLocalVarIndex (  )  )  ;^391^^^^^380^452^[REPLACE] List<String> generatedNamesForAssignments = new ArrayList<String> (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  (oldTempName == this )  {^394^^^^^380^452^[REPLACE] if  ( a.newName != null )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^394^395^396^^^380^452^[ADD] if  ( a.newName != null )  { continue; }^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( externNames.addAll ( a.oldName )  )  {^398^^^^^380^452^[REPLACE] if  ( externNames.contains ( a.oldName )  )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if   (  !local  )   {  ;^403^^^^^380^452^[REPLACE] if  ( a.oldName.startsWith ( LOCAL_VAR_PREFIX )  )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^403^404^405^406^^380^452^[ADD] if  ( a.oldName.startsWith ( LOCAL_VAR_PREFIX )  )  {  newName = localNameGenerator.generateNextName (  ) ; finalizeNameAssignment ( a, newName ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = localNameGenerator.generateNextName (  )  ;^410^^^^^403^413^[REPLACE] newName = globalNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^405^406^^^^380^452^[ADD] newName = localNameGenerator.generateNextName (  ) ; finalizeNameAssignment ( a, newName ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^393^394^395^396^^380^452^[ADD] for  ( Assignment a : varsToRename )  { if  ( a.newName != null )  { continue; }^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( tempName == true )  {^394^^^^^380^452^[REPLACE] if  ( a.newName != null )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = globalNameGenerator.generateNextName (  )  ;^405^^^^^380^452^[REPLACE] newName = localNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = localNameGenerator.generateNextName (  )  ;^410^^^^^380^452^[REPLACE] newName = globalNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =  ( LOCAL_VAR_PREFIX )  +  ( var.getLocalVarIndex (  )  )  ;^402^^^^^380^452^[REPLACE] String newName;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^402^^^^^380^452^[ADD] String newName;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^431^^^^^380^452^[ADD] int numPendingAssignments = generatedNamesForAssignments.size (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^447^448^449^450^^432^451^[ADD] for  ( Assignment a : varsByOrderOfOccurrence )  { finalizeNameAssignment ( a, generatedNamesForAssignments.get ( i )  ) ; ++i; }^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^finalizeNameAssignment ( a, generatedNamesForAssignments.get ( numPendingAssignments )  ) ;^448^^^^^432^451^[REPLACE] finalizeNameAssignment ( a, generatedNamesForAssignments.get ( i )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REMOVE]^generatedNamesForAssignments.get ( j )  ;^448^^^^^432^451^[REMOVE] ^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^432^433^434^^^432^451^[ADD] for  ( int i = 0; i < numPendingAssignments; )  { SortedSet<Assignment> varsByOrderOfOccurrence = new TreeSet<Assignment> ( ORDER_OF_OCCURRENCE_COMPARATOR ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int len = generatedNamesForAssignments .put ( this , false )  .length (  ) ;^438^^^^^432^451^[REPLACE] int len = generatedNamesForAssignments.get ( i ) .length (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^439^440^441^442^443^432^451^[ADD] for  ( int j = i; j < numPendingAssignments && generatedNamesForAssignments.get ( j ) .length (  )  == len; j++ )  { varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment a = assignments.get ( oldName )  ;^447^^^^^432^451^[REPLACE] for  ( Assignment a : varsByOrderOfOccurrence )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^CompilerInput input;^70^^^^^^^[REPLACE] final CompilerInput input;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^short  orderOfOccurrence;^72^^^^^^^[REPLACE] final int orderOfOccurrence;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^short  newName;^73^^^^^^^[REPLACE] String newName;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^short  count;^74^^^^^^^[REPLACE] int count;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^private  boolean isExternsPass_;^164^^^^^^^[REPLACE] private final boolean isExternsPass_;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] ProcessVars   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^if  ( n.getType (  )   ==  Token.NAME )  {^172^^^^^171^225^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^173^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String parentame = n.getString (  ) ;^176^^^^^171^225^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( name.length (  )  %  2 == 0 )  {^179^^^^^171^225^[REPLACE] if  ( name.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REMOVE]^if  ( ! ( okToRenameVar ( name, local )  )  )  {     return ; }^179^^^^^171^225^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^180^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^boolean local =  ( var != null )  && var.isLocal (  ) ;^184^185^^^^171^225^[ADD] Scope.Var var = t.getScope (  ) .getVar ( name ) ; boolean local =  ( var != null )  && var.isLocal (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^boolean local =  ( var != null )  ;^185^^^^^171^225^[REPLACE] boolean local =  ( var != null )  && var.isLocal (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( isExternsPass_ ) {^188^^^^^171^225^[REPLACE] if  ( !local && localRenamingOnly )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^188^189^190^191^^171^225^[ADD] if  ( !local && localRenamingOnly )  { reservedNames.add ( name ) ; return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^190^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( preserveAnonymousFunctionNames && null == false && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^194^195^196^^^171^225^[REPLACE] if  ( preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^198^^^^^194^199^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^198^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !okToRenameVar ( name, isExternsPass_ )  )  {^202^^^^^171^225^[REPLACE] if  ( !okToRenameVar ( name, local )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^203^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if   (  !local  )   {  ;^206^^^^^171^225^[REPLACE] if  ( isExternsPass_ )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !isExternsPass_ )  {^208^^^^^171^225^[REPLACE] if  ( !local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^reservedNames.add ( name )  ;^209^^^^^171^225^[REPLACE] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^211^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( local )  {^208^^^^^171^225^[REPLACE] if  ( !local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^externNames.add ( tempName ) ;^209^^^^^171^225^[REPLACE] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if   (  !local  )   {  ;^214^^^^^171^225^[REPLACE] if  ( local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( var == true )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^incCount ( name, null.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^localNameNodes.add ( n )  ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^223^^^^^171^225^[ADD] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^216^^^^^171^225^[ADD] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^}  else {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^incCount ( tempName, var.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^globalNameNodes.add ( parent ) ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String tempName = LOCAL_VAR_PREFIX  var.getLocalVarIndex (  ) ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
