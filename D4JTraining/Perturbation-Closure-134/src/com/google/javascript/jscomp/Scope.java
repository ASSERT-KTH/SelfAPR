[REPLACE]^private final Map<String, Var> vars ;^54^^^^^^^[REPLACE] private final Map<String, Var> vars = new LinkedHashMap<String, Var> (  ) ;^ [CLASS] Scope Var  
[REPLACE]^private JSDocInfo info ;^80^^^^^^^[REPLACE] private JSDocInfo info = null;^ [CLASS] Scope Var  
[REPLACE]^short  index;^99^^^^^^^[REPLACE] int index;^ [CLASS] Scope Var  
[REPLACE]^Preconditions.checkArgument ( name != null && name.length (  )  + 3 > 0 ) ;^366^^^^^365^388^[REPLACE] Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^getParentNode (  )  ;^366^^^^^365^388^[REPLACE] Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( vars.remove ( name )  != false ) ;^369^^^^^365^388^[REPLACE] Preconditions.checkState ( vars.get ( name )  == null ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( vars .put ( null , null )   == null ) ;^369^^^^^365^388^[REPLACE] Preconditions.checkState ( vars.get ( name )  == null ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Var otherVar =  (  ( Var )   ( other )  )  ;^371^^^^^365^388^[REPLACE] Var var = new Var ( inferred ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^372^373^^^^365^388^[ADD] var.name = name; var.nameNode = nameNode;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.nameNode =  nameNode;^373^^^^^365^388^[REPLACE] var.nameNode = nameNode;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^374^375^^^^365^388^[ADD] var.type = type; var.scope = this;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.scope =  this;^375^^^^^365^388^[REPLACE] var.scope = this;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^376^377^^^^365^388^[ADD] var.index = vars.size (  ) ; var.input = input;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.input =  input;^377^^^^^365^388^[REPLACE] var.input = input;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^JSDocInfo info = NodeUtil.isConstantName ( rootNode ) ;^381^^^^^365^388^[REPLACE] JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.isDefine = info != true  ||  info.isDefine (  ) ;^383^^^^^365^388^[REPLACE] var.isDefine = info != null && info.isDefine (  ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.info =  info;^384^^^^^365^388^[REPLACE] var.info = info;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^getParentNode (  )  ;^386^^^^^365^388^[REPLACE] vars.put ( name, var ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return var;  ;^387^^^^^365^388^[REPLACE] return var;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^private JSDocInfo info  = null ;^80^^^^^^^[REPLACE] private JSDocInfo info = null;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^short  index;^99^^^^^^^[REPLACE] int index;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
