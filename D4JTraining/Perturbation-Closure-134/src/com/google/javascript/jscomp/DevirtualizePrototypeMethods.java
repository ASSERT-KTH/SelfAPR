[REPLACE]^private  AbstractCompiler compiler;^68^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] DevirtualizePrototypeMethods  
[REPLACE]^Node parent = node.getJSType (  ) ;^97^^^^^96^122^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if   (  type != null  )   {  ;^98^^^^^96^122^[REPLACE] if  ( parent == null )  {^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[ADD]^return false;^98^99^100^^^96^122^[ADD] if  ( parent == null )  { return false; }^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^99^^^^^96^122^[REPLACE] return false;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^Node gramp = node .getLastChild (  )  ;^102^^^^^96^122^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( parent != null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isFunction ( gramp )  )  {^103^104^105^^^96^122^[REPLACE] if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  {^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[ADD]^^103^104^105^106^107^96^122^[ADD] if  (  ( gramp == null )  || ( parent.getFirstChild (  )  != node )  || !NodeUtil.isExprAssign ( gramp )  )  { return false; }^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^106^^^^^103^107^[REPLACE] return false;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^106^^^^^96^122^[REPLACE] return false;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^Node functionNode = parent.getFirstChild (  ) ;^109^^^^^96^122^[REPLACE] Node functionNode = parent.getLastChild (  ) ;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if  (  ( functionNode != null )  ) {^110^^^^^96^122^[REPLACE] if  (  ( functionNode == null )  || !NodeUtil.isFunction ( functionNode )  )  {^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^111^^^^^96^122^[REPLACE] return false;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( !NodeUtil.isGetProp ( parent )  )  {^114^^^^^96^122^[REPLACE] if  ( !NodeUtil.isGetProp ( node )  )  {^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return false;  ;^115^^^^^96^122^[REPLACE] return false;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^Node parent = node.getParent (  )  ;^118^^^^^96^122^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^return   parent.getLastChild (  )  .getNext (  )  .equals ( "prototype" ) ;^119^120^^^^96^122^[REPLACE] return NodeUtil.isGetProp ( nameNode )  && nameNode.getLastChild (  ) .getString (  ) .equals ( "prototype" ) ;^[METHOD] isPrototypeMethodDefinition [TYPE] boolean [PARAMETER] Node node [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  Node functionNode  gramp  nameNode  node  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( defSite.inExterns ) {^145^146^147^^^143^178^[REPLACE] if  ( defSite.inExterns || !defSite.inGlobalScope || !isEligibleDefinition ( defFinder, defSite )  )  {^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^return;  ;^148^^^^^145^149^[REPLACE] return;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^return;  ;^148^^^^^143^178^[REPLACE] return;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^151^^^^^143^178^[REPLACE] Node node = defSite.node;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^if  ( !isPrototypeMethodDefinition ( ancestor )  )  {^155^^^^^143^178^[REPLACE] if  ( !isPrototypeMethodDefinition ( node )  )  {^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[ADD]^return;^155^156^157^^^143^178^[ADD] if  ( !isPrototypeMethodDefinition ( node )  )  { return; }^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^return;  ;^156^^^^^143^178^[REPLACE] return;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^if  ( NodeUtil.isVarArgsFunction ( node )  )  {^162^^^^^143^178^[REPLACE] if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^return;  ;^163^^^^^143^178^[REPLACE] return;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^ancestor =  node.getParent (  )  )  {^161^^^^^143^178^[REPLACE] ancestor = ancestor.getParent (  )  )  {^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[ADD]^^159^160^161^162^163^143^178^[ADD] for  ( Node ancestor = node.getParent (  ) ; ancestor != null; ancestor = ancestor.getParent (  )  )  { if  ( NodeUtil.isControlStructure ( ancestor )  )  { return;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^String newMethodName = getRewrittenMethodName ( ancestor.getLastChild (  ) .getString (  )  ) ;^174^175^^^^143^178^[REPLACE] String newMethodName = getRewrittenMethodName ( node.getLastChild (  ) .getString (  )  ) ;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^rewriteDefinition ( ancestor, newMethodName ) ;^176^^^^^143^178^[REPLACE] rewriteDefinition ( node, newMethodName ) ;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^node.getFirstChild (  )  ;^177^^^^^143^178^[REPLACE] rewriteCallSites ( defFinder, defSite.definition, newMethodName ) ;^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REMOVE]^replaceReferencesToThis ( child, name )  ;^177^^^^^143^178^[REMOVE] ^[METHOD] rewriteDefinitionIfEligible [TYPE] void [PARAMETER] DefinitionSite defSite SimpleDefinitionFinder defFinder [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  String newMethodName  [TYPE]  boolean false  true  [TYPE]  DefinitionSite defSite  [TYPE]  Node ancestor  node 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^196^^^^^194^258^[REPLACE] Definition definition = definitionSite.definition;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^JSModule callModule = site.module  ;^197^^^^^194^258^[REPLACE] JSModule definitionModule = definitionSite.module;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^202^^^^^194^258^[ADD] Node rValue = definition.getRValue (  ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  (  !NodeUtil.isFunction ( rValue )  || NodeUtil .isFunction ( nameNode )   )  {^203^204^205^^^194^258^[REPLACE] if  ( rValue == null || !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^203^204^205^206^207^194^258^[ADD] if  ( rValue == null || !NodeUtil.isFunction ( rValue )  || NodeUtil.isVarArgsFunction ( rValue )  )  { return false; }^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^206^^^^^203^207^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;  ;^206^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^Node parent = node.getParent (  )  ;^210^^^^^194^258^[REPLACE] Node lValue = definition.getLValue (  ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  (  ( lValue != true )  ) {^211^212^^^^194^258^[REPLACE] if  (  ( lValue == null )  || !NodeUtil.isGetProp ( lValue )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;  ;^213^^^^^211^214^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^213^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^CodingConvention codingConvention = compiler .getModuleGraph (  )  ;^215^^^^^194^258^[REPLACE] CodingConvention codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( codingConvention.isExported ( lValue.getFirstChild (  ) .getString (  )  )  )  {^216^^^^^194^258^[REPLACE] if  ( codingConvention.isExported ( lValue.getLastChild (  ) .getString (  )  )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^return false;^216^217^218^^^194^258^[ADD] if  ( codingConvention.isExported ( lValue.getLastChild (  ) .getString (  )  )  )  { return false; }^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^217^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;  ;^217^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^Collection<UseSite> useSites = defFinder.getDefinitionsReferencedAt ( definition ) ;^220^^^^^194^258^[REPLACE] Collection<UseSite> useSites = defFinder.getUseSites ( definition ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( null.isEmpty (  )  )  {^223^^^^^194^258^[REPLACE] if  ( useSites.isEmpty (  )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^223^224^225^^^194^258^[ADD] if  ( useSites.isEmpty (  )  )  { return false; }^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^224^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^JSModuleGraph moduleGraph = compiler.getTypeRegistry (  ) ;^227^^^^^194^258^[REPLACE] JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( isCall ( site )  )  {^232^^^^^194^258^[REPLACE] if  ( !isCall ( site )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;  ;^233^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( singleSiteDefinitions.size (  )  - 2 > 0  )  {^240^^^^^194^258^[REPLACE] if  ( singleSiteDefinitions.size (  )  > 1 )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^241^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  (  !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^250^251^252^^^194^258^[REPLACE] if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^253^^^^^250^254^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^for  ( UseSite site : null )  {^229^^^^^194^258^[REPLACE] for  ( UseSite site : useSites )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( singleSiteDefinitions .isEmpty (  )   + 4 > 1 )  {^240^^^^^194^258^[REPLACE] if  ( singleSiteDefinitions.size (  )  > 1 )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  (  ( definitionModule != callModule )  && (  ( callModule != null )  ) {^250^251^252^^^194^258^[REPLACE] if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^250^251^252^253^254^194^258^[ADD] if  (  ( definitionModule != callModule )  && (  ( callModule == null )  || !moduleGraph.dependsOn ( callModule, definitionModule )  )  )  { return false; }^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^233^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^253^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^237^^^^^194^258^[REPLACE] Node nameNode = site.node;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^Collection<Definition> singleSiteDefinitions = defFinder .getDefinitionSites (  )  ;^238^239^^^^194^258^[REPLACE] Collection<Definition> singleSiteDefinitions = defFinder.getDefinitionsReferencedAt ( nameNode ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^249^^^^^194^258^[ADD] JSModule callModule = site.module;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;  ;^253^^^^^194^258^[REPLACE] return false;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^DefinitionSite defSite  ;^229^^^^^194^258^[REPLACE] for  ( UseSite site : useSites )  {^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^238^239^^^^194^258^[ADD] Collection<Definition> singleSiteDefinitions = defFinder.getDefinitionsReferencedAt ( nameNode ) ;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^JSModule definitionModule = definitionSite.module  ;^249^^^^^194^258^[REPLACE] JSModule callModule = site.module;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return false;^257^^^^^194^258^[REPLACE] return true;^[METHOD] isEligibleDefinition [TYPE] boolean [PARAMETER] SimpleDefinitionFinder defFinder DefinitionSite definitionSite [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node lValue  nameNode  rValue  [TYPE]  CodingConvention codingConvention  [TYPE]  Definition definition  [TYPE]  JSModule callModule  definitionModule  [TYPE]  Collection singleSiteDefinitions  useSites  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  UseSite site  [TYPE]  DefinitionSite definitionSite  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^Node parent = parent.getParent (  ) ;^297^^^^^296^320^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^Node functionNode = node.getLastChild (  ) ;^298^^^^^296^320^[REPLACE] Node functionNode = parent.getLastChild (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^299^^^^^296^320^[REPLACE] Node expr = parent.getParent (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[ADD]^^300^^^^^296^320^[ADD] Node block = expr.getParent (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^Node newNameNode = Node.newString ( Token.NAME, self ) ;^302^^^^^296^320^[REPLACE] Node newNameNode = Node.newString ( Token.NAME, newMethodName ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^parent.replaceChild ( functionNode ) ;^303^^^^^296^320^[REPLACE] parent.removeChild ( functionNode ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^newNameNode.addChildToFront ( parent ) ;^304^^^^^296^320^[REPLACE] newNameNode.addChildToFront ( functionNode ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^block.replaceChild ( expr, new Node ( Token.VAR, parent )  ) ;^305^^^^^296^320^[REPLACE] block.replaceChild ( expr, new Node ( Token.VAR, newNameNode )  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[ADD]^^308^^^^^296^320^[ADD] String self = newMethodName + "$self";^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[ADD]^^309^310^^^^296^320^[ADD] Node argList = functionNode.getFirstChild (  ) .getNext (  ) ; argList.addChildToFront ( Node.newString ( Token.NAME, self )  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^node.replaceChild ( child, newString ( Token.NAME, name )  )  ;^310^^^^^296^320^[REPLACE] argList.addChildToFront ( Node.newString ( Token.NAME, self )  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^Node body = parent.getLastChild (  ) ;^313^^^^^296^320^[REPLACE] Node body = functionNode.getLastChild (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^replaceReferencesToThis ( child, name )  ;^314^^^^^296^320^[REPLACE] replaceReferencesToThis ( body, self ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^fixFunctionType ( parent ) ;^317^^^^^296^320^[REPLACE] fixFunctionType ( functionNode ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^compiler.getModuleGraph (  ) ;^319^^^^^296^320^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] rewriteDefinition [TYPE] void [PARAMETER] Node node String newMethodName [CLASS] DevirtualizePrototypeMethods   [TYPE]  AbstractCompiler compiler  [TYPE]  String newMethodName  self  [TYPE]  boolean false  true  [TYPE]  Node argList  block  body  expr  functionNode  newNameNode  node  parent 
[REPLACE]^FunctionType type =  ( FunctionType )  functionNode.getParent (  ) ;^329^^^^^328^348^[REPLACE] FunctionType type =  ( FunctionType )  functionNode.getJSType (  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^if  ( type == null )  {^330^^^^^328^348^[REPLACE] if  ( type != null )  {^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^parameterTypes.add ( type.getTypeOfThis (  )  )  ;^337^^^^^330^347^[REPLACE] parameterTypes.add ( param.getJSType (  )  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[ADD]^^337^^^^^330^347^[ADD] parameterTypes.add ( param.getJSType (  )  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^parameterTypes.add ( param.getParent (  )  ) ;^337^^^^^330^347^[REPLACE] parameterTypes.add ( param.getJSType (  )  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^JSTypeRegistry typeRegistry = compiler .getModuleGraph (  )  ;^331^^^^^330^347^[REPLACE] JSTypeRegistry typeRegistry = compiler.getTypeRegistry (  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[ADD]^^333^334^^^^330^347^[ADD] List<JSType> parameterTypes = Lists.newArrayList (  ) ; parameterTypes.add ( type.getTypeOfThis (  )  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^Node node = site.node  ;^336^^^^^330^347^[REPLACE] for  ( Node param : type.getParameters (  )  )  {^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^ObjectType thisType = typeRegistry .createFunctionType ( thisType , returnType , this )  ;^340^341^^^^330^347^[REPLACE] ObjectType thisType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^JSType returnType = type.getTypeOfThis (  ) ;^342^^^^^330^347^[REPLACE] JSType returnType = type.getReturnType (  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^JSType newType = typeRegistry .getNativeObjectType (  )  ;^344^345^^^^330^347^[REPLACE] JSType newType = typeRegistry.createFunctionType ( thisType, returnType, parameterTypes ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^JSTypeRegistry typeRegistry = compiler.getModuleGraph (  ) ;^331^^^^^330^347^[REPLACE] JSTypeRegistry typeRegistry = compiler.getTypeRegistry (  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^333^^^^^330^347^[REPLACE] List<JSType> parameterTypes = Lists.newArrayList (  ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
[REPLACE]^ObjectType thisType = typeRegistry .createFunctionType ( thisType , newType , false )  ;^340^341^^^^330^347^[REPLACE] ObjectType thisType = typeRegistry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] fixFunctionType [TYPE] void [PARAMETER] Node functionNode [CLASS] DevirtualizePrototypeMethods   [TYPE]  ObjectType thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType newType  returnType  [TYPE]  boolean false  true  [TYPE]  Node functionNode  param  [TYPE]  FunctionType type  [TYPE]  List parameterTypes 
