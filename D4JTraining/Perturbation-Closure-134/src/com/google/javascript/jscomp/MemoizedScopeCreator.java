[REPLACE]^private final Map<Node, Scope> scopes ;^39^^^^^^^[REPLACE] private final Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^ [CLASS] MemoizedScopeCreator  
[REPLACE]^this.delegate =  null;^46^^^^^45^47^[REPLACE] this.delegate = delegate;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] ScopeCreator delegate [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  Map scopes  [TYPE]  boolean false  true 
[REPLACE]^if  ( scope != null )  {^52^^^^^50^59^[REPLACE] if  ( scope == null )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
[ADD]^^52^53^54^55^56^50^59^[ADD] if  ( scope == null )  { scope = delegate.createScope ( n, parent ) ; scopes.put ( n, scope ) ; } else { Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
[REPLACE]^Preconditions.checkState ( parent  !=  scope.getParent (  )  ) ;^56^^^^^50^59^[REPLACE] Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
[REPLACE]^Scope scope = scopes.get ( n ) ;^56^^^^^50^59^[REPLACE] Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
[REPLACE]^scope =  delegate.createScope ( null, parenullt ) ;^53^^^^^50^59^[REPLACE] scope = delegate.createScope ( n, parent ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
[ADD]^^53^^^^^50^59^[ADD] scope = delegate.createScope ( n, parent ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node n Scope parent [CLASS] MemoizedScopeCreator   [TYPE]  ScopeCreator delegate  [TYPE]  boolean false  true  [TYPE]  Scope parent  scope  [TYPE]  Map scopes  [TYPE]  Node n 
