[REPLACE]^private  AbstractCompiler compiler;^88^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  
[REPLACE]^private  final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of ( Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN ) ;^183^184^^^^183^184^[REPLACE] private static final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of ( Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN ) ;^ [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  
[REPLACE]^private  AbstractCompiler compiler;^185^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  
[REPLACE]^Preconditions.checkArgument ( hook .getNext (  )    !=  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook^132^133^134^^^131^154^[REPLACE] Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^131^154^[REPLACE] hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^( name ( original.getType (  )  )  )  ;^134^^^^^131^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( hook.getNext (  )  )  ) ;^134^^^^^131^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^135^136^^^^131^154^[ADD] Node condition = hook.getFirstChild (  ) ; Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^131^154^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^137^138^139^140^141^131^154^[ADD] Node elseBranch = thenBranch.getNext (  ) ; if  ( thenHasSideEffects && elseHasSideEffects )  { Node simplified = hook.cloneNode (  ) ; simplified.addChildToBack ( condition.cloneTree (  )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^if  ( thenHasSideEffects || elseHasSideEffects )  {^138^^^^^131^154^[REPLACE] if  ( thenHasSideEffects && elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^138^139^140^141^142^131^154^[ADD] if  ( thenHasSideEffects && elseHasSideEffects )  { Node simplified = hook.cloneNode (  ) ; simplified.addChildToBack ( condition.cloneTree (  )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^} else if  (  elseHasSideEffects )  {^144^^^^^131^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^}   int type = thenHasSideEffects ? Token.AND : Token.OR;Node body = thenHasSideEffects ? thenBranch : elseBranch;type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^144^145^146^147^148^131^154^[ADD] else if  ( thenHasSideEffects || elseHasSideEffects )  { int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^151^152^^^^144^153^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node functionName = node.getFirstChild (  )  ;^145^^^^^131^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node body = true ? thenBranch : elseBranch;^146^^^^^131^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^131^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^int type = true ? Token.AND : Token.OR;^145^^^^^131^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node body = thenHasSideEffects ? thenBranch : thenBranch;^146^^^^^131^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^151^152^^^^131^154^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node thenBranch = condition.getNext (  )  ;^139^^^^^131^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^}  else {^144^^^^^131^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^return ;^151^152^^^^144^153^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^146^147^148^149^^131^154^[ADD] Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = new Node ( type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^131^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^131^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^throw new IllegalArgumentException (  ( "expected at least one side effect subexpression in short " + "circuit branch." )  )  ;^151^152^^^^131^154^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^157^^^^^156^180^[ADD] List<Node> parts = Lists.newArrayList (  ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^Node ret = true;^164^^^^^156^180^[REPLACE] Node ret = null;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret == null )  {^166^^^^^156^180^[REPLACE] if  ( ret != null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  null;^169^^^^^166^170^[REPLACE] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^[REPLACE] ret = new Node ( Token.COMMA, ret, part ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^165^166^167^168^169^156^180^[ADD] for  ( Node part : parts )  { if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret == true )  {^166^^^^^156^180^[REPLACE] if  ( ret != null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  new Node ( Token.COMMA, null, part ) ;^167^^^^^156^180^[REPLACE] ret = new Node ( Token.COMMA, ret, part ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^169^^^^^156^180^[ADD] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret != this  )  {^173^^^^^156^180^[REPLACE] if  ( ret == null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" )  ;^174^175^176^^^156^180^[REPLACE] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^174^175^176^^^156^180^[ADD] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^return part;^179^^^^^156^180^[REPLACE] return ret;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  && NodeUtil.isControlStructure ( node )  )  {^224^225^^^^223^260^[REPLACE] if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return ;^226^227^^^^224^228^[REPLACE] throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Token.name ( node.getNext (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^[REPLACE] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^227^^^^^224^228^[ADD] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Token.name ( parent.getNext (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^[REPLACE] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return ;^226^227^^^^223^260^[REPLACE] throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   !=  Token.FUNCTION )  {^231^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.FUNCTION )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^return false;^231^232^233^^^223^260^[ADD] if  ( node.getType (  )  == Token.FUNCTION )  { return false; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^232^^^^^223^260^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   !=  Token.HOOK )  {^236^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.HOOK )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^236^237^238^^^223^260^[ADD] if  ( node.getType (  )  == Token.HOOK )  { return processHook ( node ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processHook ( parent ) ;^237^^^^^223^260^[REPLACE] return processHook ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  (  ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR )  )  {^241^^^^^223^260^[REPLACE] if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^return processShortCircuitExpression ( node ) ;^241^242^243^^^223^260^[ADD] if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  { return processShortCircuitExpression ( node ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processShortCircuitExpression  (  node  )  ;  ;^242^^^^^223^260^[REPLACE] return processShortCircuitExpression ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if   (  !NodeUtil.constructorCallHasSideEffects  (  node  )    )   {  ;^245^^^^^223^260^[REPLACE] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^return true;^245^246^247^^^223^260^[ADD] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  { return true; } else {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   !=  Token.CALL )  {^251^^^^^245^259^[REPLACE] if  ( node.getType (  )  == Token.CALL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if   (  node.getType  (    )   == Token.HOOK  )   {  ;^253^^^^^245^259^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^}   accumulator.keepSubTree ( node ) ;return false;^253^254^255^256^257^245^259^[ADD] else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processFunctionCall ( parent ) ;^252^^^^^245^259^[REPLACE] return processFunctionCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processConstructorCall ( parent ) ;^254^^^^^245^259^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^245^259^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return false;^246^^^^^223^260^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if   (  node.getType  (    )   == Token.HOOK  )   {  ;^251^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.CALL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^251^252^253^254^^223^260^[ADD] if  ( node.getType (  )  == Token.CALL )  { return processFunctionCall ( node ) ; } else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^}  if  ( node.getType (  )   !=  Token.NEW )  {^253^^^^^223^260^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return false;  ;^257^^^^^253^258^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processConstructorCall  (  node  )  ;  ;^254^^^^^223^260^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^223^260^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processFunctionCall ( parent ) ;^252^^^^^223^260^[REPLACE] return processFunctionCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^}  if  (   Token.NEW )  {^253^^^^^223^260^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^253^258^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processConstructorCall ( parent ) ;^254^^^^^223^260^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;  ;^246^^^^^223^260^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return false;  ;^257^^^^^223^260^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   ||  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^290^291^292^^^289^306^[ADD] Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( elseBranch.getType (  )  )  ) ;^291^292^^^^289^306^[REPLACE] node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^291^292^^^^289^306^[ADD] node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^( name ( hook.getType (  )  )  )  ;^292^^^^^289^306^[REPLACE] "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^hook.getType (  )  ;^292^^^^^289^306^[REPLACE] "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Node functionName = node.getFirstChild (  )  ;^294^^^^^289^306^[REPLACE] Node condition = node.getFirstChild (  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^Node elseBranch = ifBranch.getNext (  ) ;boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^295^296^297^298^^289^306^[ADD] Node ifBranch = condition.getNext (  ) ; Node elseBranch = ifBranch.getNext (  ) ; boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ; boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Node elseBranch = thenBranch.getNext (  )  ;^296^^^^^289^306^[REPLACE] Node elseBranch = ifBranch.getNext (  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;node, thenHasSideEffects, elseHasSideEffects ) ;^297^298^299^300^301^289^306^[ADD] boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ; boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ; if  ( thenHasSideEffects || elseHasSideEffects )  { accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^boolean thenHasSideEffects = mayHaveSideEffects ( ifBranch )  ;^298^^^^^289^306^[REPLACE] boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^if  ( thenHasSideEffects && elseHasSideEffects )  {^299^^^^^289^306^[REPLACE] if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return false;^304^^^^^299^305^[REPLACE] return true;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return false;  ;^302^^^^^289^306^[REPLACE] return false;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return true;^302^^^^^289^306^[REPLACE] return false;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return true;  ;^304^^^^^289^306^[REPLACE] return true;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   &&  Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^315^316^^^^313^334^[REPLACE] node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[ADD]^^315^316^^^^313^334^[ADD] node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^"Expected: CALL, Got: " + Token.name ( functionName.getNext (  )  )  ) ;^316^^^^^313^334^[REPLACE] "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^Node left = original.getFirstChild (  )  ;^320^^^^^313^334^[REPLACE] Node functionName = node.getFirstChild (  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( NodeUtil.isName ( functionName )  && NodeUtil.isName ( functionName )  )  {^321^^^^^313^334^[REPLACE] if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[ADD]^^321^322^323^324^325^313^334^[ADD] if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  { if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^322^323^^^^313^334^[REPLACE] if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[ADD]^^322^323^324^325^^313^334^[ADD] if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return true;  ;^324^^^^^322^325^[REPLACE] return true;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return false;^324^^^^^313^334^[REPLACE] return true;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( functionName )  )  {^322^323^^^^313^334^[REPLACE] if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REMOVE]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^322^^^^^313^334^[REMOVE] ^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( !NodeUtil.functionCallHasSideEffects ( functionName )  )  {^328^^^^^313^334^[REPLACE] if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return false;^329^^^^^313^334^[REPLACE] return true;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^accumulator.keepSubTree ( functionName ) ;^332^^^^^313^334^[REPLACE] accumulator.keepSubTree ( node ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return false;  ;^333^^^^^313^334^[REPLACE] return false;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^Preconditions.checkArgument ( hook.addChildToBack (  )   ||  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^131^154^[REPLACE] Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^131^154^[REPLACE] hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^( name ( original.getType (  )  )  )  ;^134^^^^^131^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getNext (  )  )  ) ;^134^^^^^131^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node left = original.getFirstChild (  )  ;^135^^^^^131^154^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node thenBranch = condition .getType (  )  ;^136^^^^^131^154^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node thenBranch = condition.getNext (  )  ;^137^^^^^131^154^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^if  (  elseHasSideEffects )  {^138^^^^^131^154^[REPLACE] if  ( thenHasSideEffects && elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^}  if  ( thenHasSideEffects && HasSideEffects )  {^144^^^^^131^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^151^152^^^^144^153^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^int type = true ? Token.AND : Token.OR;^145^^^^^131^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  )  ;^146^^^^^131^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^147^148^149^150^151^131^154^[ADD] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ; } else { throw new IllegalArgumentException (^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  )  ;^145^^^^^131^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node body = thenHasSideEffects ? hook : elseBranch;^146^^^^^131^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^131^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^throw new IllegalArgumentException (  ( "expected at least one side effect subexpression in short " + "circuit branch." )  )  ;^151^152^^^^131^154^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^139^140^141^142^143^131^154^[ADD] Node simplified = hook.cloneNode (  ) ; simplified.addChildToBack ( condition.cloneTree (  )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ; replacements.add ( simplified ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^}  else {^144^^^^^131^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^}   int type = thenHasSideEffects ? Token.AND : Token.OR;Node body = thenHasSideEffects ? thenBranch : elseBranch;type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^144^145^146^147^148^131^154^[ADD] else if  ( thenHasSideEffects || elseHasSideEffects )  { int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^throw new IllegalArgumentException (  ( "expected at least one side effect subexpression in short " + "circuit branch." )  )  ;^151^152^^^^144^153^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^146^147^148^149^^131^154^[ADD] Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneNode (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^131^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node thenBranch = condition.getNext (  )  ;^139^^^^^131^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node body = true ? thenBranch : elseBranch;^146^^^^^131^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^151^152^^^^131^154^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  )  ;^157^^^^^156^180^[REPLACE] List<Node> parts = Lists.newArrayList (  ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^158^159^160^^^156^180^[ADD] NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback (^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^164^^^^^156^180^[ADD] Node ret = null;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret == null )  {^166^^^^^156^180^[REPLACE] if  ( ret != null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  null;^169^^^^^166^170^[REPLACE] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^[REPLACE] ret = new Node ( Token.COMMA, ret, part ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^169^^^^^166^170^[ADD] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  null;^169^^^^^156^180^[REPLACE] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^165^166^167^168^169^156^180^[ADD] for  ( Node part : parts )  { if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^if  (part != null )  {^173^^^^^156^180^[REPLACE] if  ( ret == null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" )  ;^174^175^176^^^156^180^[REPLACE] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^174^175^176^^^156^180^[ADD] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^return part;^179^^^^^156^180^[REPLACE] return ret;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
