[REPLACE]^private  AbstractCompiler compiler;^71^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final Deque<LabelNamespace> namespaceStack ;^89^^^^^^^[REPLACE] final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final NameGenerator nameGenerator ;^92^93^^^^92^93^[REPLACE] final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^ArrayList<String> names = new ArrayList<String> (  ) ;^97^^^^^^^[REPLACE] final ArrayList<String> names = new ArrayList<String> (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^boolean referenced  = null ;^246^^^^^^^[REPLACE] boolean referenced = false;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final Map<String, LabelInfo> renameMap  = null ;^256^^^^^^^[REPLACE] final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^if  ( node.getType (  )   &&  Token.LABEL )  {^119^^^^^118^140^[REPLACE] if  ( node.getType (  )  == Token.LABEL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^119^120^121^122^123^118^140^[ADD] if  ( node.getType (  )  == Token.LABEL )  {  LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  - 4 < currentDepth )  {^131^^^^^118^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^nameGenerator.generateNextName (  )  ;^132^^^^^118^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^names.add ( nameGenerator.generateNextName (  )  )  ;^132^^^^^118^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^132^^^^^118^140^[ADD] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^118^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^int currentDepth = current.renameMap.length (  )  + 1;^122^^^^^118^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^118^140^[REPLACE] String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^126^127^^^^118^140^[ADD] LabelInfo li = new LabelInfo ( currentDepth ) ; Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( id ) ;^135^^^^^118^140^[REPLACE] String newName = getNameForId ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  - 3 < currentDepth )  {^131^^^^^118^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^names.add ( nameGenerator.generateNextName (  )  ) ;^131^132^133^^^118^140^[ADD] if  ( names.size (  )  < currentDepth )  { names.add ( nameGenerator.generateNextName (  )  ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^LabelNamespace current = namespaceStack .push ( null )  ;^121^^^^^118^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^122^123^^^^118^140^[ADD] int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^126^^^^^118^140^[ADD] LabelInfo li = new LabelInfo ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^return true;  ;^139^^^^^118^140^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^Node newChild = node.getLastChild (  )  ;^166^^^^^165^183^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( nameNode == false )  {^167^^^^^165^183^[REPLACE] if  ( nameNode != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( li == this )  {^172^^^^^165^183^[REPLACE] if  ( li != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.setString ( name ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( newName )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^li.referenced = false;^175^^^^^165^183^[REPLACE] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( currentDepth )  ;^173^^^^^165^183^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( !name.equals ( name )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^176^177^178^179^180^165^183^[ADD] if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.getString (  )  ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REMOVE]^namespaceStack.peek (  )  ;^178^^^^^165^183^[REMOVE] ^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^175^^^^^165^183^[ADD] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = node.getType (  ) ;^169^^^^^165^183^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^178^179^^^^165^183^[ADD] nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( newName ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^169^^^^^165^183^[ADD] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node nameNode = parent .getLastChild (  )  ;^191^^^^^190^216^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^[REPLACE] Preconditions.checkState ( nameNode != null ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = node.getFirstChild (  ) .getString (  )  ;^193^^^^^190^216^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if   (  names.size  (    )   < currentDepth  )   {  ;^196^^^^^190^216^[REPLACE] if  ( li.referenced )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( newChild.getType (  )   !=  Token.BLOCK )  {^208^^^^^196^212^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^NodeUtil.tryMergeBlock ( node ) ;^209^^^^^196^212^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REMOVE]^checkState (  ( ! ( containsKey ( name )  )  )  )  ;^209^^^^^196^212^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node newChild = parent.getFirstChild (  ) ;^205^^^^^196^212^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( name ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^compiler.reportCodeChange (  ) ;^200^201^^^^190^216^[ADD] nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( name )  ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( currentDepth )  ;^197^^^^^190^216^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^198^199^200^201^202^190^216^[ADD] if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( newName ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^200^^^^^190^216^[ADD] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.peek (  )  ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( node.getType (  )   ||  Token.BLOCK )  {^208^^^^^190^216^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^NodeUtil.tryMergeBlock ( node ) ;^209^^^^^190^216^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node nameNode = node.getFirstChild (  )  ;^205^^^^^190^216^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.peek (  ) get ( name )  ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^215^^^^^190^216^[ADD] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.pop (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^final Deque<LabelNamespace> namespaceStack ;^89^^^^^^^[REPLACE] final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^final NameGenerator nameGenerator ;^92^93^^^^92^93^[REPLACE] final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^ArrayList<String> names = new ArrayList<String> (  ) ;^97^^^^^^^[REPLACE] final ArrayList<String> names = new ArrayList<String> (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( node.getType (  )   !=  Token.LABEL )  {^119^^^^^118^140^[REPLACE] if  ( node.getType (  )  == Token.LABEL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^^119^120^121^122^123^118^140^[ADD] if  ( node.getType (  )  == Token.LABEL )  {  LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^if  ( names.size (  )  /  0.5  < currentDepth )  {^131^^^^^118^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^nameGenerator.generateNextName (  )  ;^132^^^^^118^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^^132^^^^^118^140^[ADD] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^names.add ( nameGenerator.generateNextName (  )  )  ;^132^^^^^118^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^LabelNamespace current = namespaceStack .push ( this )  ;^121^^^^^118^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^int currentDepth = current.renameMap.get (  )  %  2 + 1;^122^^^^^118^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String name = nameNode.getString (  )  ;^123^^^^^118^140^[REPLACE] String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^Node newChild = node.getLastChild (  )  ;^126^^^^^118^140^[REPLACE] LabelInfo li = new LabelInfo ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^135^136^^^^118^140^[ADD] String newName = getNameForId ( currentDepth ) ; compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^if  ( names.add (  )  /  0.5  < currentDepth )  {^131^^^^^118^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^names.get ( nameGenerator.generateNextName (  )  ) ;^132^^^^^118^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^118^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^int currentDepth = current.renameMap.get (  )  + 4 + 1;^122^^^^^118^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String newName = getNameForId ( li.id )  ;^135^^^^^118^140^[REPLACE] String newName = getNameForId ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^return false;^139^^^^^118^140^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^Node nameNode = nameNode.getLastChild (  ) ;^166^^^^^165^183^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( nameNode ==node )  {^167^^^^^165^183^[REPLACE] if  ( nameNode != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^167^168^169^170^171^165^183^[ADD] if  ( nameNode != null )  {  String name = nameNode.getString (  ) ; Preconditions.checkState ( name.length (  )  != 0 ) ; LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( li == null )  {^172^^^^^165^183^[REPLACE] if  ( li != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.removeChild ( newName ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.peek (  )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^li.referenced = false;^175^^^^^165^183^[REPLACE] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String newName = getNameForId ( currentDepth )  ;^173^^^^^165^183^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( !name.equals ( name )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^175^^^^^165^183^[ADD] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String name = node.getFirstChild (  ) .getString (  )  ;^169^^^^^165^183^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.getString (  )  ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^179^^^^^165^183^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode .getString (  )  ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^169^^^^^165^183^[ADD] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^171^^^^^165^183^[ADD] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node nameNode = parent .getLastChild (  )  ;^191^^^^^190^216^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^checkState (  (  ( name.length (  )  )  != 0 )  )  ;^192^^^^^190^216^[REPLACE] Preconditions.checkState ( nameNode != null ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String name = parent.getString (  ) ;^193^^^^^190^216^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if   (  names.size  (    )   < currentDepth  )   {  ;^196^^^^^190^216^[REPLACE] if  ( li.referenced )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^String newName = getNameForId ( li.id ) ;nameNode.setString ( newName ) ;^196^197^198^^200^190^216^[ADD] if  ( li.referenced )  { String newName = getNameForId ( li.id ) ; if  ( !name.equals ( newName )  )  { nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( newChild.getType (  )   &&  Token.BLOCK )  {^208^^^^^196^212^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^208^209^210^^^196^212^[ADD] if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^NodeUtil.tryMergeBlock ( node ) ;^209^^^^^196^212^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^198^199^200^201^202^190^216^[ADD] if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.removeChild ( name ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^200^^^^^190^216^[ADD] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.peek (  )  ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String newName = getNameForId ( currentDepth )  ;^197^^^^^190^216^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if   (  names.size  (    )   < currentDepth  )   {  ;^198^^^^^190^216^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.removeChild ( newName ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REMOVE]^nameGenerator.generateNextName (  )  ;^201^^^^^190^216^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( node.getType (  )   &&  Token.BLOCK )  {^208^^^^^190^216^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^NodeUtil.tryMergeBlock ( newChild ) ;^208^209^210^^^190^216^[ADD] if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.peek (  )  ;^209^^^^^190^216^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^197^^^^^190^216^[ADD] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node newChild = node.getFirstChild (  ) ;^205^^^^^190^216^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.peek (  ) .renameMap.get ( newName ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REMOVE]^namespaceStack.peek (  )  ;^215^^^^^190^216^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack .push ( 1 )  .renameMap.remove ( name ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^boolean referenced  = null ;^246^^^^^^^[REPLACE] boolean referenced = false;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] LabelInfo   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^final  long  id;^247^^^^^^^[REPLACE] final int id;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] LabelInfo   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^final Map<String, LabelInfo> renameMap ;^256^^^^^^^[REPLACE] final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^[METHOD] <init> [TYPE] RenameLabels$LabelInfo(int) [PARAMETER] int id [CLASS] LabelNamespace   [TYPE]  int id  [TYPE]  boolean false  referenced  true 
