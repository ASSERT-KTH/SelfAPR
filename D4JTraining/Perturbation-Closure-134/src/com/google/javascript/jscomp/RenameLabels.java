[REPLACE]^private  AbstractCompiler compiler;^71^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final Deque<LabelNamespace> namespaceStack  = null ;^89^^^^^^^[REPLACE] final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^92^93^^^^92^93^[REPLACE] final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final ArrayList<String> names  = null ;^97^^^^^^^[REPLACE] final ArrayList<String> names = new ArrayList<String> (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^boolean referenced  = null ;^246^^^^^^^[REPLACE] boolean referenced = false;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^final  long  id;^247^^^^^^^[REPLACE] final int id;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^256^^^^^^^[REPLACE] final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^ [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  
[REPLACE]^this.compiler =  null;^74^^^^^73^75^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int id 
[REPLACE]^namespaceStack.pop (  ) ;^84^^^^^82^85^[REPLACE] namespaceStack.push ( new LabelNamespace (  )  ) ;^[METHOD] <init> [TYPE] RenameLabels$ProcessLabels() [PARAMETER] [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int id 
[REPLACE]^this.id =  null;^250^^^^^249^251^[REPLACE] this.id = id;^[METHOD] <init> [TYPE] RenameLabels$LabelInfo(int) [PARAMETER] int id [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int id 
[REPLACE]^namespaceStack .pop (  )  ;^103^^^^^101^104^[REPLACE] namespaceStack.push ( new LabelNamespace (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal nodeTraversal [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int id 
[REPLACE]^namespaceStack.peek (  ) ;^108^^^^^107^109^[REPLACE] namespaceStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal nodeTraversal [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int id 
[REPLACE]^if  ( node.getType (  )   &&  Token.LABEL )  {^119^^^^^117^140^[REPLACE] if  ( node.getType (  )  == Token.LABEL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^119^120^121^122^123^117^140^[ADD] if  ( node.getType (  )  == Token.LABEL )  {  LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  %  2 < id )  {^131^^^^^117^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^names.add ( nameGenerator .NameGenerator ( null , name , this )   ) ;^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( !name.equals ( newName )  )  {^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^117^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^121^122^^^^117^140^[ADD] LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^int currentDepth = current.renameMap.size (  )  %  2 + 1;^122^^^^^117^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^[REPLACE] String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^LabelInfo li = new LabelInfo ( id ) ;^126^^^^^117^140^[REPLACE] LabelInfo li = new LabelInfo ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^126^127^^^^117^140^[ADD] LabelInfo li = new LabelInfo ( currentDepth ) ; Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( id ) ;^135^^^^^117^140^[REPLACE] String newName = getNameForId ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  + 5 < currentDepth )  {^131^^^^^117^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^names.add ( nameGenerator .NameGenerator ( null , name , null )   ) ;^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^132^^^^^117^140^[ADD] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^names.add ( nameGenerator .NameGenerator ( 0 , name , true )   ) ;^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^int currentDepth = current.renameMap.length (  )  + 1;^122^^^^^117^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[ADD]^^122^^^^^117^140^[ADD] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^return false;^139^^^^^117^140^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth  id 
[REPLACE]^switch  ( node.getString (  )  )  {^149^^^^^148^159^[REPLACE] switch  ( node.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = nameNode.getString (  ) ;^151^^^^^148^159^[REPLACE] visitLabel ( node, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^[REPLACE] visitBreakOrContinue ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node nameNode = node.getLastChild (  ) ;^166^^^^^165^183^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^166^^^^^165^183^[ADD] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( nameNode == null )  {^167^^^^^165^183^[REPLACE] if  ( nameNode != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( li == null )  {^172^^^^^165^183^[REPLACE] if  ( li != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^172^173^^175^^165^183^[ADD] if  ( li != null )  { String newName = getNameForId ( li.id ) ; li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( name ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^178^179^^^^165^183^[ADD] nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( newName )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^li.referenced = false;^175^^^^^165^183^[REPLACE] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( currentDepth ) ;^173^^^^^165^183^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( newName ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = node.getType (  ) ;^169^^^^^165^183^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^169^^^^^165^183^[ADD] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REMOVE]^if  ( ! ( name.equals ( newName )  )  )  {     nameNode.setString ( newName ) ;     compiler.reportCodeChange (  ) ; }^172^^^^^165^183^[REMOVE] ^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  < currentDepth )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode .getString (  )  ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.pop (  ) ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^175^^^^^165^183^[ADD] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^176^177^178^179^180^165^183^[ADD] if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REMOVE]^namespaceStack.pop (  ) ;^178^^^^^165^183^[REMOVE] ^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = node.getString (  ) ;^169^^^^^165^183^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node nameNode = parent.getFirstChild (  ) ;^191^^^^^190^216^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^[REPLACE] Preconditions.checkState ( nameNode != null ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String name = nameNode.getType (  ) ;^193^^^^^190^216^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^194^^^^^190^216^[ADD] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( names.size (  )  < currentDepth )  {^196^^^^^190^216^[REPLACE] if  ( li.referenced )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^196^197^198^^200^190^216^[ADD] if  ( li.referenced )  { String newName = getNameForId ( li.id ) ; if  ( !name.equals ( newName )  )  { nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( newChild.getType (  )   ||  Token.BLOCK )  {^208^^^^^196^212^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^newChild   ;^209^^^^^196^212^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^nameNode.removeChild ( newName ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^compiler .addToDebugLog ( name )  ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^201^^^^^190^216^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^String newName = getNameForId ( currentDepth ) ;^197^^^^^190^216^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^if  ( newChild.getType (  )   ||  Token.BLOCK )  {^208^^^^^190^216^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^node   ;^209^^^^^190^216^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^197^^^^^190^216^[ADD] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Node newChild = node .getFirstChild (  )  ;^205^^^^^190^216^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^205^206^^^^190^216^[ADD] Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.pop (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[ADD]^^215^^^^^190^216^[ADD] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  LabelInfo li  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^return names.size ( id - 1 ) ;^224^^^^^223^225^[REPLACE] return names.get ( id - 1 ) ;^[METHOD] getNameForId [TYPE] String [PARAMETER] int id [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^return namespaceStack.peek (  ) .renameMap .ArrayList (  )  ;^232^^^^^231^233^[REPLACE] return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^names.add ( nameGenerator.generateNextName (  )  ) ;^241^^^^^239^242^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^89^^^^^^^[REPLACE] final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", this ) ;^92^93^^^^92^93^[REPLACE] final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^final ArrayList<String> names ;^97^^^^^^^[REPLACE] final ArrayList<String> names = new ArrayList<String> (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ProcessLabels   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  Deque namespaceStack  [TYPE]  Map renameMap  [TYPE]  int currentDepth  id 
[REPLACE]^namespaceStack.pop (  ) ;^84^^^^^82^85^[REPLACE] namespaceStack.push ( new LabelNamespace (  )  ) ;^[METHOD] <init> [TYPE] RenameLabels$ProcessLabels() [PARAMETER] [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.pop (  ) ;^103^^^^^101^104^[REPLACE] namespaceStack.push ( new LabelNamespace (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal nodeTraversal [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal 
[REPLACE]^namespaceStack.peek (  ) ;^108^^^^^107^109^[REPLACE] namespaceStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal nodeTraversal [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal 
[ADD]^^108^^^^^107^109^[ADD] namespaceStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal nodeTraversal [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal 
[REPLACE]^if  ( node.getType (  )   ||  Token.LABEL )  {^119^^^^^117^140^[REPLACE] if  ( node.getType (  )  == Token.LABEL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^if  ( names.add (  )  - 2 < currentDepth )  {^131^^^^^117^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^names.get ( nameGenerator.generateNextName (  )  ) ;^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^if  ( !name.equals ( newName )  )  {^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^^132^^^^^117^140^[ADD] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^117^140^[REPLACE] LabelNamespace current = namespaceStack.peek (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^int currentDepth = current.renameMap.size (  )  - 5 + 0 ;^122^^^^^117^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^[REPLACE] String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String newName = getNameForId ( currentDepth ) ;^126^^^^^117^140^[REPLACE] LabelInfo li = new LabelInfo ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String name = node.getFirstChild (  ) .getString (  ) ;^135^^^^^117^140^[REPLACE] String newName = getNameForId ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^^135^^^^^117^140^[ADD] String newName = getNameForId ( currentDepth ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^if  ( names.size (  )  %  0.5  < currentDepth )  {^131^^^^^117^140^[REPLACE] if  ( names.size (  )  < currentDepth )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^names .ArrayList (  )  ;^132^^^^^117^140^[REPLACE] names.add ( nameGenerator.generateNextName (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^^121^122^^^^117^140^[ADD] LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^int currentDepth = current.renameMap .containsKey ( null )   *  2 + 1;^122^^^^^117^140^[REPLACE] int currentDepth = current.renameMap.size (  )  + 1;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[ADD]^String name = node.getFirstChild (  ) .getString (  ) ;^122^123^^^^117^140^[ADD] int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^String name = parent.getLastChild (  ) .getString (  ) ;^123^^^^^117^140^[REPLACE] String name = node.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^return false;^139^^^^^117^140^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack  [TYPE]  LabelNamespace current  [TYPE]  int currentDepth 
[REPLACE]^switch  ( parent.getType (  )  )  {^149^^^^^148^159^[REPLACE] switch  ( node.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent 
[REPLACE]^String name = nameNode.getString (  ) ;^151^^^^^148^159^[REPLACE] visitLabel ( node, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent 
[REPLACE]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^[REPLACE] visitBreakOrContinue ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent 
[REPLACE]^Node nameNode = nameNode.getLastChild (  ) ;^166^^^^^165^183^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^166^^^^^165^183^[ADD] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( nameNode ==node )  {^167^^^^^165^183^[REPLACE] if  ( nameNode != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( li == null )  {^172^^^^^165^183^[REPLACE] if  ( li != null )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^172^173^^175^^165^183^[ADD] if  ( li != null )  { String newName = getNameForId ( li.id ) ; li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^176^177^178^179^180^165^183^[ADD] if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.removeChild ( newName ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.pop (  ) ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^179^^^^^165^183^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^li.referenced = false;^175^^^^^165^183^[REPLACE] li.referenced = true;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String newName = getNameForId ( currentDepth ) ;^173^^^^^165^183^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.setString ( name ) ;^178^^^^^165^183^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String name = node.getString (  ) ;^169^^^^^165^183^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REMOVE]^if  ( ! ( name.equals ( newName )  )  )  {     nameNode.setString ( newName ) ;     compiler.reportCodeChange (  ) ; }^172^^^^^165^183^[REMOVE] ^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^compiler .addToDebugLog ( newName )  ;^179^^^^^165^183^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^171^^^^^165^183^[ADD] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitBreakOrContinue [TYPE] void [PARAMETER] Node node [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  node  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node nameNode = node.getLastChild (  ) ;^191^^^^^190^216^[REPLACE] Node nameNode = node.getFirstChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Preconditions.checkState ( nameNode ==parent ) ;^192^^^^^190^216^[REPLACE] Preconditions.checkState ( nameNode != null ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REMOVE]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^192^^^^^190^216^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String name = parent.getString (  ) ;^193^^^^^190^216^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^[REPLACE] LabelInfo li = getLabelInfo ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( names.size (  )  < currentDepth )  {^196^^^^^190^216^[REPLACE] if  ( li.referenced )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( newChild.getType (  )   !=  Token.BLOCK )  {^208^^^^^196^212^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^NodeUtil.tryMergeBlock ( node ) ;^209^^^^^196^212^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node newChild = node.getFirstChild (  ) ;^205^^^^^196^212^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^[REPLACE] if  ( !name.equals ( newName )  )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^nameNode.removeChild ( newName ) ;^200^^^^^190^216^[REPLACE] nameNode.setString ( newName ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REMOVE]^namespaceStack.pop (  ) ;^200^^^^^190^216^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.pop (  ) ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^String newName = getNameForId ( currentDepth ) ;^197^^^^^190^216^[REPLACE] String newName = getNameForId ( li.id ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^compiler .addToDebugLog ( newName )  ;^201^^^^^190^216^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^if  ( newChild.setString (  )   &&  Token.BLOCK )  {^208^^^^^190^216^[REPLACE] if  ( newChild.getType (  )  == Token.BLOCK )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^NodeUtil.tryMergeBlock ( newChild ) ;^208^209^210^^^190^216^[ADD] if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^NodeUtil.tryMergeBlock ( node ) ;^209^^^^^190^216^[REPLACE] NodeUtil.tryMergeBlock ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^Node newChild = parent.getLastChild (  ) ;^205^^^^^190^216^[REPLACE] Node newChild = node.getLastChild (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^node.removeChild ( newChild ) ;^205^206^^^^190^216^[ADD] Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack .push ( false )  .renameMap.remove ( newName ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^namespaceStack.pop (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^[REPLACE] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[ADD]^^215^^^^^190^216^[ADD] namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Node node Node parent [CLASS] ProcessLabels   [TYPE]  LabelInfo li  [TYPE]  boolean false  true  [TYPE]  Node nameNode  newChild  node  parent  [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  newName  [TYPE]  Deque namespaceStack 
[REPLACE]^return names.size ( id - 1 ) ;^224^^^^^223^225^[REPLACE] return names.get ( id - 1 ) ;^[METHOD] getNameForId [TYPE] String [PARAMETER] int id [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack  [TYPE]  int id 
[REPLACE]^return namespaceStack .push ( null )  .renameMap.get ( name ) ;^232^^^^^231^233^[REPLACE] return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] ProcessLabels   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^boolean referenced ;^246^^^^^^^[REPLACE] boolean referenced = false;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] LabelInfo   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^final  long  id;^247^^^^^^^[REPLACE] final int id;^[METHOD] getLabelInfo [TYPE] RenameLabels$LabelInfo [PARAMETER] String name [CLASS] LabelInfo   [TYPE]  ArrayList names  [TYPE]  NameGenerator nameGenerator  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Deque namespaceStack 
[REPLACE]^this.id =  null;^250^^^^^249^251^[REPLACE] this.id = id;^[METHOD] <init> [TYPE] RenameLabels$LabelInfo(int) [PARAMETER] int id [CLASS] LabelInfo   [TYPE]  int id  [TYPE]  boolean false  referenced  true 
[REPLACE]^Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^256^^^^^^^[REPLACE] final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^[METHOD] <init> [TYPE] RenameLabels$LabelInfo(int) [PARAMETER] int id [CLASS] LabelNamespace   [TYPE]  int id  [TYPE]  boolean false  referenced  true 
