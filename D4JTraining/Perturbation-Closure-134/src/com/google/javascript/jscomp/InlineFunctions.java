[REPLACE]^private final Map<String, FunctionState> fns ;^64^^^^^^^[REPLACE] private final Map<String, FunctionState> fns = Maps.newHashMap (  ) ;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private final Map<Node, String> anonFns  = null ;^65^^^^^^^[REPLACE] private final Map<Node, String> anonFns = Maps.newHashMap (  ) ;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  AbstractCompiler compiler;^67^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  FunctionInjector injector;^69^^^^^^^[REPLACE] private final FunctionInjector injector;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  boolean inlineAnonymousFunctionExpressions;^72^^^^^^^[REPLACE] private final boolean inlineAnonymousFunctionExpressions;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private  boolean inlineLocalFunctions;^74^^^^^^^[REPLACE] private final boolean inlineLocalFunctions;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private int callsSeen ;^150^^^^^^^[REPLACE] private int callsSeen = 0;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Function fn  = null ;^758^^^^^^^[REPLACE] private Function fn = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Node safeFnNode  = null ;^759^^^^^^^[REPLACE] private Node safeFnNode = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean inline ;^760^^^^^^^[REPLACE] private boolean inline = true;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean remove  = null ;^761^^^^^^^[REPLACE] private boolean remove = true;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean inlineDirectly  = null ;^762^^^^^^^[REPLACE] private boolean inlineDirectly = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private boolean referencesThis ;^763^^^^^^^[REPLACE] private boolean referencesThis = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Map<Node, Reference> references  = null ;^764^^^^^^^[REPLACE] private Map<Node, Reference> references = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private JSModule module  = null ;^765^^^^^^^[REPLACE] private JSModule module = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private Set<String> namesToAlias ;^766^^^^^^^[REPLACE] private Set<String> namesToAlias = null;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^private   long  fakeName;^949^^^^^^^[REPLACE] private final String fakeName;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^boolean inlined = true;^973^^^^^^^[REPLACE] boolean inlined = false;^ [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  
[REPLACE]^checkState (  (  ( this.fn )  == null )  )  ;^83^^^^^82^95^[REPLACE] Preconditions.checkArgument ( compiler != null ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^^83^^^^^82^95^[ADD] Preconditions.checkArgument ( compiler != null ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^Preconditions.checkArgument ( safeNameIdSupplier == null ) ;^84^^^^^82^95^[REPLACE] Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^this.compiler = compiler;^84^85^^^^82^95^[ADD] Preconditions.checkArgument ( safeNameIdSupplier != null ) ; this.compiler = compiler;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[ADD]^^85^^^^^82^95^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineLocalFunctions = inlineLocalFunctions  ;^87^^^^^82^95^[REPLACE] this.inlineGlobalFunctions = inlineGlobalFunctions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineGlobalFunctions = inlineGlobalFunctions  ;^88^^^^^82^95^[REPLACE] this.inlineLocalFunctions = inlineLocalFunctions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.inlineAnonymousFunctionExpressions =  true;^89^90^^^^82^95^[REPLACE] this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.blockFunctionInliningEnabled =  remove;^91^^^^^82^95^[REPLACE] this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^this.injector =  new FunctionInjector ( null, safeNameIdSupplier, enableExpressionDecomposition ) ;^93^94^^^^82^95^[REPLACE] this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[METHOD] <init> [TYPE] Supplier,boolean,boolean,boolean,boolean,boolean) [PARAMETER] AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node fn  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String fakeName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen 
[REPLACE]^Preconditions.checkState ( compiler.reportCodeChange (  )  ) ;^110^^^^^109^144^[REPLACE] Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidateFunctions (  )  ) ;^112^^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^113^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return;  ;^114^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^116^117^^^^109^144^[ADD] NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^referencesThis ( block )  ;^118^^^^^109^144^[REPLACE] trimCanidatesNotMeetingMinimumRequirements (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^119^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^return;^119^120^121^^^109^144^[ADD] if  ( fns.isEmpty (  )  )  { return; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return;  ;^120^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String> changed = newHashSet (  )  ;^131^^^^^109^144^[REPLACE] Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^injector.setKnownConstants ( null ) ;^132^^^^^109^144^[REPLACE] injector.setKnownConstants ( fnNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^referencesThis ( block )  ;^134^^^^^109^144^[REPLACE] trimCanidatesUsingOnCost (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^child.getString (  )  ;^134^^^^^109^144^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fns.keySet (  )  )  {^135^^^^^109^144^[REPLACE] if  ( fns.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return;  ;^136^^^^^109^144^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^referencesThis ( block )  ;^138^^^^^109^144^[REPLACE] resolveInlineConflicts (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^138^^^^^109^144^[ADD] resolveInlineConflicts (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^decomposeExpressions ( null ) ;^139^^^^^109^144^[REPLACE] decomposeExpressions ( fnNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^NodeTraversal.traverse ( compiler, safeFnNode, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^109^144^[REPLACE] NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^referencesThis ( block )  ;^143^^^^^109^144^[REPLACE] removeInlinedFunctions (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node callNode  externs  fn  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !NodeUtil.isStatementBlock ( n )  )  {^174^^^^^173^207^[REPLACE] if  ( !NodeUtil.isStatement ( n )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return;  ;^176^^^^^173^207^[REPLACE] return;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^185^^^^^173^207^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( nameNode.getType (  )  == Token.NAME || nameNode.hasChildren (  ) || nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t.getCompiler (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node safeFnNodeameNode = n.getFirstChild (  ) ;^187^^^^^173^207^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^188^189^190^191^^173^207^[ADD] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( safeFnNodeew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^190^^^^^188^191^[ADD] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^t.getCompiler (  )  ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( name.isEmpty (  )  )  {^202^^^^^173^207^[REPLACE] if  ( !name.isEmpty (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^maybeAddFunction ( fn, t.getModule (  )  ) ;^202^203^204^^^173^207^[ADD] if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( fn, t .getCompiler (  )   ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^maybeAddFunction ( fn, t.getCompiler (  )  ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^203^^^^^173^207^[ADD] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^187^^^^^173^207^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^200^^^^^173^207^[ADD] Function fn = new NamedFunction ( n ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = child.getString (  )  ;^201^^^^^173^207^[REPLACE] String name = fn.getName (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   ||  Token.FUNCTION )  {^221^^^^^215^238^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( safeFnNode.getType (  )   ||  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  root;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnIdentifingNode = nameNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^} else if   (  fnIdentifingNode.getType  (    )   == Token.FUNCTION  )   {  ;^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^226^227^^^^215^238^[ADD] fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  null;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnIdentifingNode = child.getFirstChild (  )  ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  null.getFirstChild (  ) ;^222^^^^^215^238^[REPLACE] fnNode = n.getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^}  else {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^223^^^^^215^238^[REMOVE] ^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^224^225^226^227^^215^238^[ADD] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   ) {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fnNode =  safeFnNode;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  ref != null  )   {  ;^231^^^^^215^238^[REPLACE] if  ( fnNode != null )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Function fn = new NamedFunction ( n )  ;^232^^^^^215^238^[REPLACE] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = n.getFirstChild (  )  ;^220^^^^^215^238^[REPLACE] Node fnNode = null;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^232^233^^^^215^238^[ADD] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^String name = child.getString (  )  ;^246^^^^^245^299^[REPLACE] String name = fn.getName (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = getOrCreateFunctionState ( fnName ) ;^247^^^^^245^299^[REPLACE] FunctionState fs = getOrCreateFunctionState ( name ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^253^^^^^245^299^[REPLACE] if  ( fs.hasExistingFunctionDefinition (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^253^254^255^^^245^299^[ADD] if  ( fs.hasExistingFunctionDefinition (  )  )  { fs.setInline ( false ) ; } else {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (requiresDecomposition (  )  )  {^257^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector.setKnownConstants ( fn.getFunctionNode (  )  )  )  {^260^261^^^^253^298^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.canInlineDirectly (  )  ;^262^^^^^260^263^[REPLACE] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( isCandidateFunction ( fn )  )  {^268^^^^^253^298^[REPLACE] if  ( !isCandidateFunction ( fn )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^270^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^270^^^^^253^298^[ADD] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  fs.canRemove  (    )    )   {  ;^274^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !namesToAlias.add (  )  )  {^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^281^^^^^253^298^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setNamesToAlias ( this ) ;^282^^^^^253^298^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.removeChild ( block )  )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setReferencesThis ( false ) ;^287^^^^^253^298^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn.getName (  ) ;^277^^^^^253^298^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( safeFnNode ) ;^278^279^^^^253^298^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^285^^^^^253^298^[ADD] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !namesToAlias .get ( true )   )  {^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( true ) ;^281^^^^^253^298^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( namesToAlias ) ;^282^^^^^253^298^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.referencesThis ( safeFnNode )  )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setReferencesThis ( true ) ;^286^287^288^^^253^298^[ADD] if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canInline (  )  && fs.canInlineDirectly (  )  )  {^292^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( blockFunctionInliningEnabled )  {^293^^^^^253^298^[REPLACE] if  ( !blockFunctionInliningEnabled )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^294^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^293^294^295^^^253^298^[ADD] if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( false )  ;^294^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^294^^^^^253^298^[ADD] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = n.getFirstChild (  )  ;^277^^^^^253^298^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.removeChild ( safeFnNode ) ;^285^^^^^253^298^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector .inliningLowersCost ( fs )   )  {^260^261^^^^253^298^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^262^^^^^260^263^[ADD] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^268^269^270^271^^253^298^[ADD] if  ( !isCandidateFunction ( fn )  )  {  fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( false )  ;^270^^^^^253^298^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  !name.isEmpty  (    )    )   {  ;^280^^^^^253^298^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( null ) ;^282^^^^^253^298^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.getFunctionBody ( safeFnNode ) ;^285^^^^^253^298^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( true )  ;^281^^^^^253^298^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil .removeChild ( nameNode )   )  {^286^^^^^253^298^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setRemove ( false ) ;^287^^^^^253^298^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( inlineLocalFunctions (  )  && fs.canInlineDirectly (  )  )  {^292^^^^^253^298^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^292^293^294^295^^253^298^[ADD] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  { if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setInline ( false ) ;^293^294^295^^^253^298^[ADD] if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^fn.getParent (  )  ;^294^^^^^253^298^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^278^279^^^^253^298^[ADD] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.removeChild ( fnNode ) ;^285^^^^^253^298^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( false )  ;^254^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  fs.canRemove  (    )    )   {  ;^257^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( injector .inliningLowersCost ( fs )   )  {^260^261^^^^245^299^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^260^261^262^263^^245^299^[ADD] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  { fs.inlineDirectly ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .canInlineDirectly (  )  ;^262^^^^^260^263^[REPLACE] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( isCandidateFunction ( fn )  )  {^268^^^^^245^299^[REPLACE] if  ( !isCandidateFunction ( fn )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^270^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  fs.canRemove  (    )    )   {  ;^274^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^274^275^^277^278^245^299^[ADD] if  ( fs.canInline (  )  )  { fs.setModule ( module ) ; Node fnNode = fn.getFunctionNode (  ) ; Set<String> namesToAlias =^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  !name.isEmpty  (    )    )   {  ;^280^^^^^245^299^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( true ) ;^281^^^^^245^299^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( namesToAlias ) ;^282^^^^^245^299^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^286^^^^^245^299^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^286^287^288^^^245^299^[ADD] if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setReferencesThis ( false ) ;^287^^^^^245^299^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn .getName (  )  ;^277^^^^^245^299^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( root ) ;^278^279^^^^245^299^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.removeChild ( safeFnNode ) ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !namesToAlias.add (  )  )  {^280^^^^^245^299^[REPLACE] if  ( !namesToAlias.isEmpty (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^281^^^^^245^299^[REPLACE] fs.inlineDirectly ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs .getNamesToAlias (  )  ;^282^^^^^245^299^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil .removeChild ( var )   )  {^286^^^^^245^299^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^287^^^^^245^299^[ADD] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  (  fs.inlineDirectly (  )  )  {^292^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( blockFunctionInliningEnabled )  {^293^^^^^245^299^[REPLACE] if  ( !blockFunctionInliningEnabled )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setRemove ( true ) ;^294^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.setInline ( false ) ;^293^294^295^^^245^299^[ADD] if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^294^^^^^245^299^[ADD] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = n.getFirstChild (  )  ;^277^^^^^245^299^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^278^279^^^^245^299^[ADD] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^285^^^^^245^299^[ADD] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^260^261^^^^245^299^[REPLACE] if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.inlineDirectly ( false ) ;^262^^^^^260^263^[REPLACE] fs.inlineDirectly ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^268^^^^^245^299^[REPLACE] if  ( !isCandidateFunction ( fn )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^268^269^270^271^^245^299^[ADD] if  ( !isCandidateFunction ( fn )  )  {  fs.setInline ( false ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fs.inlineDirectly ( false ) ;fs.setNamesToAlias ( namesToAlias ) ;^280^281^282^283^^245^299^[ADD] if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( NodeUtil.removeChild ( block )  )  {^286^^^^^245^299^[REPLACE] if  ( NodeUtil.referencesThis ( block )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REMOVE]^referencesThis ( block )  ;^287^^^^^245^299^[REMOVE] ^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node fnNode = fn.getName (  ) ;^277^^^^^245^299^[REPLACE] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( safeFnNode ) ;^278^279^^^^245^299^[REPLACE] Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil.getFunctionBody ( safeFnNode ) ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( null ) ;^282^^^^^245^299^[REPLACE] fs.setNamesToAlias ( namesToAlias ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.getReferences (  )  ;^287^^^^^245^299^[REPLACE] fs.setReferencesThis ( true ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fs.canInline (  )  ) {^292^^^^^245^299^[REPLACE] if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( true ) ;^294^^^^^245^299^[REPLACE] fs.setInline ( false ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^277^^^^^245^299^[ADD] Node fnNode = fn.getFunctionNode (  ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node block = NodeUtil .isFunctionObjectCall ( fnNode )  ;^285^^^^^245^299^[REPLACE] Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[METHOD] maybeAddFunction [TYPE] void [PARAMETER] Function fn JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( child.getAncestor (  )   ||  Token.NAME )  {^355^^^^^347^378^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if   (  fnIdentifingNode.getType  (    )   == Token.FUNCTION  )   {  ;^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   name = anonFunctionMap.get ( child ) ;Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^357^358^359^360^361^347^378^[ADD] else if  ( child.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( child ) ; } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^365^366^^^^347^378^[ADD] name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( parent ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^363^364^365^366^^347^378^[ADD] name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   ) {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name = anonFunctionMap.get ( child )  ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^361^362^363^364^365^347^378^[ADD] Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode .getString (  )    !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if   (  fnIdentifingNode.getType  (    )   == Token.FUNCTION  )   {  ;^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( root ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  safeFnNode.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  n.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( safeFnNode ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( null ) ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( parent.getType (  )   ) {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( nameNode ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( n ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( safeFnNode.getType (  )   !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^name = fnIdentifingNode.getString (  ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  anonFunctionMap.get ( safeFnNode ) ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  nameNode.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnIdentifingNode = child .getString (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  safeFnNode.getString (  ) ;^356^^^^^347^378^[REPLACE] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  else {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode.getAncestor (  )   &&  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node child = n.getFirstChild (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if   (  fnIdentifingNode.getType  (    )   == Token.FUNCTION  )   {  ;^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^362^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^name =  null.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   name = anonFunctionMap.get ( fnIdentifingNode ) ;^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fnIdentifingNode .put ( this , false )   {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( safeFnNode.getType (  )   ) {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^} else if  ( fnIdentifingNode.getAncestor (  )   &&  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (fnName == null )  {^369^^^^^347^378^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs == null )  {^372^^^^^347^378^[REPLACE] if  ( fs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referencesThis ( block )  ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^373^^^^^347^378^[ADD] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^370^^^^^347^378^[ADD] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^callback.visitCallSite ( t, n, parent, fs ) ;^372^373^374^^^347^378^[ADD] if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^callback .visitCallSite ( t , child , fnNode , fs )  ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^351^352^^^^347^378^[ADD] Node child = n.getFirstChild (  ) ; String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^String name = this;^352^^^^^347^378^[REPLACE] String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !fs.setInline (  )  )  {^410^^^^^409^433^[REPLACE] if  ( !fs.canInline (  )  )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^411^^^^^409^433^[REPLACE] return;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^414^^^^^409^433^[ADD] boolean referenceAdded = false;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^415^416^^^^409^433^[ADD] InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^409^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^409^433^[REPLACE] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^mode  =  mode ;^423^^^^^419^426^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^419^426^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^mode ;^423^^^^^409^433^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^409^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( referenceAdded )  {^428^^^^^409^433^[REPLACE] if  ( !referenceAdded )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fs.setRemove ( true ) ;^431^^^^^409^433^[REPLACE] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^431^^^^^409^433^[ADD] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  InliningMode mode  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( n.getType (  )   &&  Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( safeFnNode.getType (  )  == Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( var.getType (  )  == Token.VAR ) {^458^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^458^459^^461^462^455^508^[ADD] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^461^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^464^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^466^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( NodeUtil.isGet ( parent ) ) {^477^478^479^480^^455^508^[REPLACE] if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^485^^^^^477^487^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node gramps = safeFnNode.getAncestor ( 4 ) ;^481^^^^^477^487^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if   (  parent.getType  (    )   == Token.CALL && parent.getFirstChild  (    )   == n  )   {  ;^482^483^^^^455^508^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^485^^^^^482^486^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^485^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^481^^^^^455^508^[ADD] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^490^^^^^455^508^[ADD] String name = n.getString (  ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = fns.get ( fnName ) ;^491^^^^^455^508^[REPLACE] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs != null )  {^492^^^^^455^508^[REPLACE] if  ( fs == null )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^return;  ;^493^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getAncestor (  )  == safeFnNode )  {^497^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fs.setRemove ( true ) ;^506^^^^^497^507^[REPLACE] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fsCalled.setInline ( false )  ;^501^^^^^455^508^[REPLACE] fs.setInline ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkArgument ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^522^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^523^^^^^522^537^[ADD] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Preconditions.checkState ( fs.FunctionState (  )  ) ;^523^^^^^522^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if   (  fs.canRemove  (    )    )   {  ;^524^^^^^522^537^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( ref == true )  {^530^^^^^522^537^[REPLACE] if  ( ref != null )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^inlineFunction ( t, callNode, fs, ref.mode ) ;ref.inlined = true;^530^531^^^534^522^537^[ADD] if  ( ref != null )  { inlineFunction ( t, callNode, fs, ref.mode ) ; ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^ref.inlined = false;^534^^^^^522^537^[REPLACE] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Reference ref = fs.setSafeFnNode ( root ) ;^525^^^^^522^537^[REPLACE] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node, Reference>> i  ;^572^^^^^571^588^[REPLACE] Iterator<Entry<String, FunctionState>> i;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( fs .getReferences (  )   )  {^575^^^^^571^588^[REPLACE] if  ( fs.hasReferences (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if   (  fs.canRemove  (    )    )   {  ;^582^^^^^571^588^[REPLACE] } else if  ( !fs.canRemove (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^fn.remove (  )  ;^585^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( lowersCost )  {^578^^^^^571^588^[REPLACE] if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i.next (  ) ;^580^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^580^^^^^571^588^[ADD] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^Node child = n.getFirstChild (  )  ;^577^^^^^571^588^[REPLACE] boolean lowersCost = mimimizeCost ( fs ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !requiresDecomposition )  {^578^^^^^571^588^[REPLACE] if  ( !lowersCost )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^578^579^580^581^^571^588^[ADD] if  ( !lowersCost )  {  i.remove (  ) ; }^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^}  if  ( !fs.canRemove (  )  )  {^582^^^^^571^588^[REPLACE] } else if  ( !fs.canRemove (  )  )  {^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^}   i.remove (  ) ;^582^583^^585^586^571^588^[ADD] else if  ( !fs.canRemove (  )  )  {  i.remove (  ) ; }^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^i .next (  )  ;^585^^^^^571^588^[REPLACE] i.remove (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[ADD]^^573^574^575^^577^571^588^[ADD] for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  { FunctionState fs = i.next (  ) .getValue (  ) ; if  ( fs.hasReferences (  )  )  { boolean lowersCost = mimimizeCost ( fs ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^FunctionState fs = functionMap.get ( name )  ;^574^^^^^571^588^[REPLACE] FunctionState fs = i.next (  ) .getValue (  ) ;^[METHOD] trimCanidatesUsingOnCost [TYPE] void [PARAMETER] [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Set fnNames  namesToAlias  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  [TYPE]  String fakeName  fnName  name  [TYPE]  int callsSeen  index  [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  CallVisitorCallback callback  [TYPE]  Iterator i  [TYPE]  JSModule module  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector 
[REPLACE]^if  ( !fs .getReferences (  )   )  {^652^^^^^650^676^[REPLACE] if  ( !fs.hasReferences (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^return;  ;^653^^^^^650^676^[REPLACE] return;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Node child = n.getFirstChild (  )  ;^656^^^^^650^676^[REPLACE] Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^Set<String> names = findCalledFunctions ( safeFnNode ) ;^657^^^^^650^676^[REPLACE] Set<String> names = findCalledFunctions ( fnNode ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if   (  !name.isEmpty  (    )    )   {  ;^658^^^^^650^676^[REPLACE] if  ( !names.isEmpty (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fsCalled == null && fsCalled.canRemove (  )  )  {^662^^^^^650^676^[REPLACE] if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fsCalled.setRemove ( false ) ;^662^663^^^^650^676^[ADD] if  ( fsCalled != null && fsCalled.canRemove (  )  )  { fsCalled.setRemove ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !mimimizeCost ( fs )  )  {^666^^^^^650^676^[REPLACE] if  ( !mimimizeCost ( fsCalled )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^666^667^668^669^^650^676^[ADD] if  ( !mimimizeCost ( fsCalled )  )  {  fsCalled.setInline ( false ) ; }^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( true ) ;^668^^^^^650^676^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^668^^^^^650^676^[ADD] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^660^661^662^663^^658^675^[ADD] for  ( String name : names )  { FunctionState fsCalled = fns.get ( name ) ; if  ( fsCalled != null && fsCalled.canRemove (  )  )  { fsCalled.setRemove ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fsCalled == null && fsCalled.canRemove (  )  )  {^662^^^^^658^675^[REPLACE] if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !mimimizeCost ( fs )  )  {^666^^^^^658^675^[REPLACE] if  ( !mimimizeCost ( fsCalled )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^666^667^668^669^^658^675^[ADD] if  ( !mimimizeCost ( fsCalled )  )  {  fsCalled.setInline ( false ) ; }^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled.setInline ( true ) ;^668^^^^^658^675^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^668^^^^^658^675^[ADD] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( mimimizeCost ( fsCalled )  )  {^666^^^^^658^675^[REPLACE] if  ( !mimimizeCost ( fsCalled )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fsCalled .canInline (  )  ;^668^^^^^658^675^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fsCalled = fns.get ( fnName ) ;^661^^^^^658^675^[REPLACE] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^FunctionState fs = functionMap.get ( name )  ;^661^^^^^658^675^[REPLACE] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( false )  ;^668^^^^^650^676^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^for  ( String name : true )  {^660^^^^^658^675^[REPLACE] for  ( String name : names )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( fsCalled == null ) {^662^^^^^658^675^[REPLACE] if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^fsCalled.setRemove ( false ) ;^662^663^^^^658^675^[ADD] if  ( fsCalled != null && fsCalled.canRemove (  )  )  { fsCalled.setRemove ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^fs.setInline ( false )  ;^668^^^^^658^675^[REPLACE] fsCalled.setInline ( false ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[ADD]^^661^^^^^658^675^[ADD] FunctionState fsCalled = fns.get ( name ) ;^[METHOD] resolveInlineConflictsForFunction [TYPE] void [PARAMETER] FunctionState fs [CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  [TYPE]  FunctionState fs  fsCalled  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^private int callsSeen ;^150^^^^^^^[REPLACE] private int callsSeen = 0;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  false  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  true  [TYPE]  Set changed  fnNames  names  namesToAlias  [TYPE]  CallVisitorCallback callback  [TYPE]  Node block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  [TYPE]  JSModule module  [TYPE]  String fakeName  fnName  name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap  references  [TYPE]  FunctionInjector injector  [TYPE]  int callsSeen  index 
[REPLACE]^if  ( !NodeUtil .isStatementBlock ( n )   )  {^174^^^^^173^207^[REPLACE] if  ( !NodeUtil.isStatement ( n )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^174^175^176^177^^173^207^[ADD] if  ( !NodeUtil.isStatement ( n )  )  {  return; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^return;  ;^176^^^^^173^207^[REPLACE] return;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( parent.hasOneChild (  )  )  {^185^^^^^173^207^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( nameNode.getType (  )  == Token.NAME || nameNode.hasChildren (  ) || nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^207^[REPLACE] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t.inGlobalScope (  )  ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^190^^^^^188^191^[ADD] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node fnNode = null  ;^187^^^^^173^207^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^188^189^190^191^^173^207^[ADD] if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REMOVE]^maybeAddFunction ( fn, t.getModule (  )  )  ;^190^^^^^188^191^[REMOVE] ^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( new FunctionVar ( n ) , t .inGlobalScope (  )   ) ;^190^^^^^188^191^[REPLACE] maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if   (  !NodeUtil.isStatement  (  n  )    )   {  ;^202^^^^^173^207^[REPLACE] if  ( !name.isEmpty (  )  )  {^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^202^203^204^^^173^207^[ADD] if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( fn, t.inGlobalScope (  )  ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^maybeAddFunction ( fn, t .inGlobalScope (  )   ) ;^203^^^^^173^207^[REPLACE] maybeAddFunction ( fn, t.getModule (  )  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Function fn = parentew NamedFunction ( n ) ;^200^^^^^173^207^[REPLACE] Function fn = new NamedFunction ( n ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[ADD]^^201^^^^^173^207^[ADD] String name = fn.getName (  ) ;^[METHOD] findNamedFunctions [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   !=  Token.FUNCTION )  {^221^^^^^215^238^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^}  else {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^}   fnNode = fnIdentifingNode;^223^224^225^226^227^215^238^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   ||  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^226^227^^^^215^238^[ADD] fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^fnNode =  n;^226^^^^^215^238^[REPLACE] fnNode = fnIdentifingNode;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^^224^225^226^227^^215^238^[ADD] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^fnNode = fnIdentifingNode;^225^226^227^^^215^238^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnIdentifingNode = fnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^fnNode =  fnIdentifingNode.getFirstChild (  ) ;^222^^^^^215^238^[REPLACE] fnNode = n.getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^223^^^^^215^238^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[ADD]^}   Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;fnNode = fnIdentifingNode;^223^224^225^226^227^215^238^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  (   Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^225^^^^^215^238^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( fnNode == null )  {^231^^^^^215^238^[REPLACE] if  ( fnNode != null )  {^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Function fn = new NamedFunction ( n )  ;^232^^^^^215^238^[REPLACE] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnNode = false;^220^^^^^215^238^[REPLACE] Node fnNode = null;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Node fnIdentifingNode = n.hasOneChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^[REPLACE] Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^Function fn = new AnonymousFunction ( n, callsSeen++ ) ;^232^^^^^215^238^[REPLACE] Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] FindCandidateFunctions   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^private CallVisitorCallback callback;^335^^^^^^^[REPLACE] protected CallVisitorCallback callback;^[METHOD] findAnonymousFunctionExpressions [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] CallVisitor   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int callsSeen  [TYPE]  Node fnIdentifingNode  fnNode  n 
[REPLACE]^if  ( child.getType (  )   !=  Token.NAME )  {^355^^^^^347^378^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( child .getString (  )    &&  Token.FUNCTION )  {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( parent.getType (  )   !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  else {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  anonFunctionMap.get ( null ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  anonFunctionMap.get ( parent ) ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  parent.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if   (  child.getType  (    )   == Token.FUNCTION  )   {  ;^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   name = anonFunctionMap.get ( fnIdentifingNode ) ;^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node child = n.getFirstChild (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   !=  Token.NAME )  {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}^364^365^366^^^347^378^[ADD] else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^365^366^^^^347^378^[ADD] name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = fnIdentifingNode.getFirstChild (  ) ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  anonFunctionMap.get ( fnIdentifingNode ) ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  else {^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^}   Node fnIdentifingNode = child.getFirstChild (  ) ;name = fnIdentifingNode.getString (  ) ;^359^360^361^362^363^347^378^[ADD] else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if   (  fnIdentifingNode.getType  (    )   == Token.FUNCTION  )   {  ;^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^name = fnIdentifingNode.getString (  ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^362^363^364^365^366^347^378^[ADD] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^363^364^365^366^^347^378^[ADD] name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^361^362^363^364^365^347^378^[ADD] Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name = anonFunctionMap.get ( child )  ;^365^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( fnIdentifingNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  anonFunctionMap.get ( null ) ;^358^^^^^347^378^[REPLACE] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  null.getString (  ) ;^356^^^^^347^378^[REPLACE] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( child.getType (  )   ) {^357^^^^^347^378^[REPLACE] } else if  ( child.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^}  if  ( fnIdentifingNode.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REMOVE]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {     name = fnIdentifingNode.getString (  ) ; }else     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         name = anonFunctionMap.get ( fnIdentifingNode ) ;     }^364^^^^^347^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node fnIdentifingNode = fnIdentifingNode .getString (  )  ;^361^^^^^347^378^[REPLACE] Node fnIdentifingNode = child.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^359^^^^^347^378^[REPLACE] } else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( fnIdentifingNode.getType (  )   ) {^362^^^^^347^378^[REPLACE] if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( parent.getType (  )   !=  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^} else if  ( parent.getType (  )   ||  Token.FUNCTION )  {^364^^^^^347^378^[REPLACE] } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( name == this  )  {^369^^^^^347^378^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^FunctionState fs = functionMap.get ( name ) ;callback.visitCallSite ( t, n, parent, fs ) ;^369^370^^372^373^347^378^[ADD] if  ( name != null )  { FunctionState fs = functionMap.get ( name ) ; if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if   (  name != null  )   {  ;^372^^^^^347^378^[REPLACE] if  ( fs != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^372^373^374^^^347^378^[ADD] if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^callback.visitCallSite ( t, parent, parent, fs ) ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^Node child = n.getFirstChild (  )  ;^370^^^^^347^378^[REPLACE] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^callback.visitCallSite ( t, n, fnIdentifingNode, fs ) ;^373^^^^^347^378^[REPLACE] callback.visitCallSite ( t, n, parent, fs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^356^^^^^347^378^[ADD] name = child.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^358^^^^^347^378^[ADD] name = anonFunctionMap.get ( child ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^name =  null.getString (  ) ;^363^^^^^347^378^[REPLACE] name = fnIdentifingNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^351^^^^^347^378^[ADD] Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^String name = false;^352^^^^^347^378^[REPLACE] String name = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[ADD]^^370^^^^^347^378^[ADD] FunctionState fs = functionMap.get ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CallVisitor   [TYPE]  boolean false  true  [TYPE]  CallVisitorCallback callback  [TYPE]  NodeTraversal t  [TYPE]  Node child  fnIdentifingNode  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name  [TYPE]  Map anonFns  anonFunctionMap  fns  functionMap 
[REPLACE]^if  ( !fs .setInline ( true )   )  {^410^^^^^409^433^[REPLACE] if  ( !fs.canInline (  )  )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^return;  ;^411^^^^^409^433^[REPLACE] return;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^boolean referenceAdded = true;^414^^^^^409^433^[REPLACE] boolean referenceAdded = false;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^InliningMode mode = fs.canInline (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^409^433^[REPLACE] InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^409^433^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^if  ( referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^409^433^[REPLACE] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^419^420^^^423^409^433^[ADD] if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  { mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^423^^^^^419^426^[ADD] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^419^426^[REPLACE] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^mode  =  mode ;^423^^^^^409^433^[REPLACE] mode = InliningMode.BLOCK;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^424^425^^^^409^433^[ADD] referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^if  ( !true )  {^428^^^^^409^433^[REPLACE] if  ( !referenceAdded )  {^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^fs.setRemove ( true ) ;^431^^^^^409^433^[REPLACE] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[ADD]^^431^^^^^409^433^[ADD] fs.setRemove ( false ) ;^[METHOD] maybeAddReference [TYPE] void [PARAMETER] NodeTraversal t FunctionState fs Node callNode JSModule module [CLASS] FindCandidatesReferences   [TYPE]  boolean false  referenceAdded  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  FunctionState fs  [TYPE]  Node callNode  [TYPE]  JSModule module 
[REPLACE]^Preconditions.checkState ( n.getType (  )   ||  Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.NAME ) ;^456^^^^^455^508^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^456^^^^^455^508^[ADD] Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.VAR ) {^458^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^458^459^^461^462^455^508^[ADD] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^461^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^464^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^466^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isGet ( n ) ) {^477^478^479^480^^455^508^[REPLACE] if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^485^^^^^477^487^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Node gramps = n.getAncestor ( 2L ) ;^481^^^^^477^487^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^455^508^[REPLACE] if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^485^^^^^482^486^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^485^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Node gramps = parent.getAncestor ( 0 ) ;^481^^^^^455^508^[REPLACE] Node gramps = n.getAncestor ( 2 ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^String parentame = n.getType (  ) ;^490^^^^^455^508^[REPLACE] String name = n.getString (  ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  )  ;^491^^^^^455^508^[REPLACE] FunctionState fs = fns.get ( name ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( fs != null )  {^492^^^^^455^508^[REPLACE] if  ( fs == null )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^492^493^494^^^455^508^[ADD] if  ( fs == null )  { return; }^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^return;  ;^493^^^^^455^508^[REPLACE] return;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN ) {^497^^^^^455^508^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^fs.setRemove ( true ) ;^506^^^^^497^507^[REPLACE] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[ADD]^^506^^^^^497^507^[ADD] fs.setRemove ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^fs.setInline ( true ) ;^501^^^^^455^508^[REPLACE] fs.setInline ( false ) ;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindCandidatesReferences   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^private  FunctionInjector injector;^515^^^^^^^[REPLACE] private final FunctionInjector injector;^[METHOD] checkNameUsage [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  n  parent  [TYPE]  FunctionState fs  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( fs.getSafeFnNode (  )  ) ;^523^^^^^522^537^[REPLACE] Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REMOVE]^fs.hasExistingFunctionDefinition (  )  ;^523^^^^^522^537^[REMOVE] ^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^if   (  ref != null  )   {  ;^524^^^^^522^537^[REPLACE] if  ( fs.canInline (  )  )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^if  ( ref == this )  {^530^^^^^522^537^[REPLACE] if  ( ref != null )  {^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[ADD]^^534^^^^^522^537^[ADD] ref.inlined = true;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^Reference ref = fs.getReference ( parent ) ;^525^^^^^522^537^[REPLACE] Reference ref = fs.getReference ( callNode ) ;^[METHOD] visitCallSite [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent FunctionState fs [CLASS] Inline   [TYPE]  boolean false  true  [TYPE]  FunctionInjector injector  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node callNode  parent  [TYPE]  FunctionState fs 
[REPLACE]^private Function fn  = null ;^758^^^^^^^[REPLACE] private Function fn = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Node safeFnNode  = null ;^759^^^^^^^[REPLACE] private Node safeFnNode = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean inline  = null ;^760^^^^^^^[REPLACE] private boolean inline = true;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean remove ;^761^^^^^^^[REPLACE] private boolean remove = true;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean inlineDirectly ;^762^^^^^^^[REPLACE] private boolean inlineDirectly = false;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private boolean referencesThis ;^763^^^^^^^[REPLACE] private boolean referencesThis = false;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Map<Node, Reference> references  = null ;^764^^^^^^^[REPLACE] private Map<Node, Reference> references = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private JSModule module ;^765^^^^^^^[REPLACE] private JSModule module = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private Set<String> namesToAlias ;^766^^^^^^^[REPLACE] private Set<String> namesToAlias = null;^[METHOD] inlineFunction [TYPE] void [PARAMETER] NodeTraversal t Node callNode FunctionState fs InliningMode mode [CLASS] FunctionState   [TYPE]  Function fn  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  InliningMode mode  [TYPE]  Node callNode  fnNode  newCode  [TYPE]  FunctionState fs  [TYPE]  String fnName  [TYPE]  FunctionInjector injector 
[REPLACE]^private  Node var;^927^^^^^^^[REPLACE] private final Node var;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] FunctionVar   [TYPE]  Node fn  [TYPE]  boolean false  true 
[REPLACE]^boolean requiresDecomposition;^972^^^^^^^[REPLACE] final boolean requiresDecomposition;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] Reference   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
[REPLACE]^boolean inlined ;^973^^^^^^^[REPLACE] boolean inlined = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] Reference   [TYPE]  Node fn  [TYPE]  String fakeName  [TYPE]  boolean false  true 
