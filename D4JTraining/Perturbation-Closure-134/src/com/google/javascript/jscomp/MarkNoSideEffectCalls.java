[REPLACE]^static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  = null ;^42^43^44^45^^42^45^[REPLACE] static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION = DiagnosticType.error ( "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", "@nosideeffects may only appear in externs files." ) ;^ [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty  
[REPLACE]^Node rhs = def.getLValue (  ) ;^79^^^^^78^99^[REPLACE] Node rhs = def.getRValue (  ) ;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( rhs != null )  {^80^^^^^78^99^[REPLACE] if  ( rhs == null )  {^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^81^^^^^78^99^[REPLACE] return true;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^95^^^^^78^99^[REPLACE] return true;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return true;^97^^^^^78^99^[REPLACE] return false;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  (  hasNoSideEffectsAnnotation ( node )  )  {^122^^^^^121^162^[REPLACE] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^122^123^124^^^121^162^[ADD] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  { traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^traversal .traverse ( compiler , nameNode , true )  ;^123^^^^^121^162^[REPLACE] traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^126^^^^^121^162^[REPLACE] if  ( NodeUtil.isGetProp ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  if  ( NodeUtil.isFunction ( node )  )  {^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^Node gramp = parent.getParent (  ) ;^141^142^143^144^^121^162^[ADD] if  ( NodeUtil.isName ( parent )  )  { Node gramp = parent.getParent (  ) ; if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^} else if   (  NodeUtil.isFunction  (  node  )    )   {  ;^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^}   hasAnnotation = true;^150^151^152^153^^121^162^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  { if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( hasNoSideEffectsAnnotation ( node )  )  {^151^^^^^121^162^[REPLACE] if  ( hasNoSideEffectsAnnotation ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^152^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^146^^^^^143^147^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^146^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = node.getType (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^146^^^^^143^147^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  else {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^150^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^152^^^^^121^162^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.add ( node )  ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^159^^^^^121^162^[ADD] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^135^^^^^121^162^[ADD] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^nameNodes.add ( node.getFirstChild (  )  ) ;^136^137^^^^121^162^[ADD] List<Node> nameNodes = Lists.newArrayList (  ) ; nameNodes.add ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = true;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^142^^^^^121^162^[ADD] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^141^142^143^144^^121^162^[ADD] if  ( NodeUtil.isName ( parent )  )  { Node gramp = parent.getParent (  ) ; if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^143^144^145^146^147^121^162^[ADD] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = node.getParent (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( true )  {^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.addAll ( null ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^boolean hasAnnotation = hasNoSideEffectsAnnotation ( parent ) ;^135^^^^^121^162^[REPLACE] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^JSDocInfo docInfo = node.getJSDocInfo (  )  ;^136^^^^^121^162^[REPLACE] List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = this;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node lValue = def.getLValue (  )  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  || hasNoSideEffectsAnnotation ( node )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^127^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.add ( parent ) ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^129^^^^^127^130^[ADD] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  ) {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^127^128^129^130^^121^162^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  { noSideEffectFunctionNames.add ( node ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.addAll ( nameNodes )  ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  parent  )    )   {  ;^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  if  ( NodeUtil.isFunction ( parent )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.add ( nameNodes ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  if  ( NodeUtil.isAssign ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^hasAnnotation = true;^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^143^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^151^^^^^121^162^[REPLACE] if  ( hasNoSideEffectsAnnotation ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^noSideEffectFunctionNames.addAll ( nameNodes ) ;^158^159^160^^^121^162^[ADD] if  ( hasAnnotation )  { noSideEffectFunctionNames.addAll ( nameNodes ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^139^^^^^121^162^[ADD] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isName ( parent )  ) {^178^^^^^177^198^[REPLACE] if  ( !NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^178^^^^^177^198^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return;  ;^179^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( parent.getFirstChild (  )  ) ;^182^183^^^^177^198^[REPLACE] Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( definitions != null )  {^184^^^^^177^198^[REPLACE] if  ( definitions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return;  ;^185^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( noSideEffectFunctionNames.add ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return;  ;^193^^^^^191^194^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^188^189^190^191^^177^198^[ADD] for  ( Definition def : definitions )  { Node lValue = def.getLValue (  ) ; Preconditions.checkNotNull ( lValue ) ; if  ( !noSideEffectFunctionNames.contains ( lValue )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  (  definitionTypeContainsFunctionType ( def )  )  {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return;  ;^193^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^189^^^^^177^198^[ADD] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = null  ;^189^^^^^177^198^[REPLACE] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^node.getJSDocInfo (  ) ;^197^^^^^177^198^[REPLACE] node.setIsNoSideEffectsCall (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^private  boolean inExterns;^114^^^^^^^[REPLACE] private final boolean inExterns;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( inExterns && hasNoSideEffectsAnnotation ( parent )  )  {^122^^^^^121^162^[REPLACE] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^traversal.report ( parent, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^123^^^^^121^162^[REPLACE] traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^123^^^^^121^162^[ADD] traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^126^^^^^121^162^[REPLACE] if  ( NodeUtil.isGetProp ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  ( isName ( parent )  )  {     Node gramp = parent.getParent (  ) ;     if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {         hasAnnotation = true;     }     nameNodes.add ( parent ) ; }else     if  ( isAssign ( parent )  )  {         if  ( hasNoSideEffectsAnnotation ( parent )  )  {             hasAnnotation = true;         }         nameNodes.add ( parent.getFirstChild (  )  ) ;     }^126^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  parent  )    )   {  ;^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  ( isName ( parent )  )  {     Node gramp = parent.getParent (  ) ;     if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {         hasAnnotation = true;     }     nameNodes.add ( parent ) ; }else     if  ( isAssign ( parent )  )  {         if  ( hasNoSideEffectsAnnotation ( parent )  )  {             hasAnnotation = true;         }         nameNodes.add ( parent.getFirstChild (  )  ) ;     }^131^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil .isVar ( node )   )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  else {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^}   hasAnnotation = true;^150^151^152^153^^121^162^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  { if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( hasNoSideEffectsAnnotation ( node )  )  {^151^^^^^121^162^[REPLACE] if  ( hasNoSideEffectsAnnotation ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^152^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^hasAnnotation = true;^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^146^^^^^143^147^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^146^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = null  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^146^^^^^143^147^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {     hasAnnotation = true; }^151^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( true )  {^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames .add ( nameNode )  ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^boolean hasAnnotation = hasNoSideEffectsAnnotation ( parent ) ;^135^^^^^121^162^[REPLACE] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = null  ;^136^^^^^121^162^[REPLACE] List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^139^^^^^121^162^[ADD] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  parent  )   && hasNoSideEffectsAnnotation  (  node  )    )   {  ;^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^Node gramp = parent.getParent (  ) ;^141^142^143^144^^121^162^[ADD] if  ( NodeUtil.isName ( parent )  )  { Node gramp = parent.getParent (  ) ; if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^152^^^^^121^162^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = node.getParent (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isAssign ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^noSideEffectFunctionNames.addAll ( nameNodes ) ;^158^159^160^^^121^162^[ADD] if  ( hasAnnotation )  { noSideEffectFunctionNames.addAll ( nameNodes ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.add ( node )  ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = false;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  || hasNoSideEffectsAnnotation ( nameNode )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^127^128^129^130^^121^162^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  { noSideEffectFunctionNames.add ( node ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.addAll ( nameNodes )  ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( nameNode )  ) {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames .addAll ( false )  ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^node.getFirstChild (  )  ;^129^^^^^127^130^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^}   boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^131^132^^^135^121^162^[ADD] else if  ( NodeUtil.isFunction ( node )  )  {  boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isName ( node )  )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^} else if  ( NodeUtil .isFunction ( nameNode )   )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^143^144^145^146^147^121^162^[ADD] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  (  gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^} else if   (  NodeUtil.isFunction  (  node  )    )   {  ;^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^159^^^^^121^162^[ADD] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = parent.getParent (  )  ;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  ( hasNoSideEffectsAnnotation ( parent )  )  {     hasAnnotation = true; }^143^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = node .getFirstChild (  )  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isAssign ( parent )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^nameNodes.add ( node.getFirstChild (  )  ) ;^136^137^^^^121^162^[ADD] List<Node> nameNodes = Lists.newArrayList (  ) ; nameNodes.add ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^142^^^^^121^162^[ADD] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isCall ( node )  && !NodeUtil.isCall ( node )  )  {^178^^^^^177^198^[REPLACE] if  ( !NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[ADD]^return;^178^179^180^^^177^198^[ADD] if  ( !NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^return;  ;^179^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[ADD]^^182^183^^^^177^198^[ADD] Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^if  ( definitions != true )  {^184^^^^^177^198^[REPLACE] if  ( definitions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^return;  ;^185^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^if  ( noSideEffectFunctionNames.contains ( lValue )  ) {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^return;  ;^193^^^^^191^194^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[ADD]^^188^189^190^191^^177^198^[ADD] for  ( Definition def : definitions )  { Node lValue = def.getLValue (  ) ; Preconditions.checkNotNull ( lValue ) ; if  ( !noSideEffectFunctionNames.contains ( lValue )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^if  ( noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[ADD]^^191^192^193^194^^177^198^[ADD] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^return;  ;^193^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[ADD]^^189^^^^^177^198^[ADD] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  )  ;^189^^^^^177^198^[REPLACE] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^node.getFirstChild (  ) ;^197^^^^^177^198^[REPLACE] node.setIsNoSideEffectsCall (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
