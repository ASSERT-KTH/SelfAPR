[REPLACE]^private  Scope jsScope;^47^^^^^^^[REPLACE] private final Scope jsScope;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^private  AbstractCompiler compiler;^48^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^private  Set<Var> escaped;^49^^^^^^^[REPLACE] private final Set<Var> escaped;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^Node node;^67^^^^^^^[REPLACE] final Node node;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^final Set<Var> depends  = null ;^68^^^^^^^[REPLACE] final Set<Var> depends = Sets.newHashSet (  ) ;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^Definition otherDef =  (  ( Definition )   ( other )  )  ;^146^^^^^145^185^[REPLACE] MustDef result = new MustDef (  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^MustDef> state = n.getAnnotation (  )  ;^147^^^^^145^185^[REPLACE] Map<Var, Definition> resultMap = result.reachingDef;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  (bDef != true )  {^154^^^^^145^185^[REPLACE] if  ( aDef == null )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^154^155^^^158^145^185^[ADD] if  ( aDef == null )  {  resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, aDef )  ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( b.reachingDef.get ( var )  )  {^164^^^^^145^185^[REPLACE] if  ( b.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap .put ( var )  ;^173^^^^^164^174^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( aDef.Definition ( bDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, this ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^170^^^^^167^171^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, null )  ;^168^^^^^145^185^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Definition bDef = b.reachingDef.put ( var ) ;^165^^^^^145^185^[REPLACE] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( aDef .Definition ( node )   )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^resultMap.put ( var, aDef ) ;resultMap.put ( var, null ) ;^167^168^169^170^171^145^185^[ADD] if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, true ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REMOVE]^jsScope.getVar ( name )  ;^168^^^^^145^185^[REMOVE] ^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, false ) ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^158^^^^^145^185^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if   (  containsKey  (  var  )    )   {  ;^164^^^^^145^185^[REPLACE] if  ( b.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^168^^^^^145^185^[ADD] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( bDef.equals ( bDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Definition aDef = a.reachingDef.put ( var ) ;^152^^^^^145^185^[REPLACE] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Node name = n.getFirstChild (  )  ;^162^^^^^145^185^[REPLACE] Node aNode = aDef.node;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^165^^^^^145^185^[ADD] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^150^151^152^^^145^185^[ADD] for  ( Var var : a.reachingDef.keySet (  )  )  {  Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Definition aDef = a.reachingDef .put ( var , bDef )  ;^152^^^^^145^185^[REPLACE] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if   (  containsKey  (  var  )    )   {  ;^180^^^^^145^185^[REPLACE] if  ( !a.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^180^181^182^^^145^185^[ADD] if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^keySet (  )  ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^181^^^^^145^185^[ADD] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^179^180^181^182^^145^185^[ADD] for  ( Var var : b.reachingDef.keySet (  )  )  { if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^return result;  ;^184^^^^^145^185^[REPLACE] return result;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^236^^^^^221^297^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isVar ( rhs )  )  {^243^^^^^236^249^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if   (  NodeUtil.isName  (  target  )    )   {  ;^246^^^^^236^249^[REPLACE] if  ( NodeUtil.isName ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^246^247^248^^^236^249^[ADD] if  ( NodeUtil.isName ( lhs )  )  { addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^244^^^^^236^249^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node lhs = node .getLastChild (  )  ;^241^^^^^236^249^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^242^^^^^236^249^[ADD] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( NodeUtil .isForIn ( cfgNode )  , cfgNode, output, conditional ) ;^237^238^^^^221^297^[REPLACE] computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^NodeUtil.getConditionExpression ( node ) , cfgNode, output, conditional ) ;^238^^^^^221^297^[REPLACE] NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isName ( rhs )  )  {^243^^^^^221^297^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^244^^^^^221^297^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if   (  NodeUtil.isName  (  target  )    )   {  ;^246^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( lhs.getString (  ) , node, rhs, output ) ;^247^^^^^221^297^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^221^297^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^247^^^^^221^297^[ADD] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if   (  !  (  other instanceof Definition  )    )   {  ;^266^^^^^221^297^[REPLACE] if  ( c.hasChildren (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;c.getFirstChild (  ) , output ) ;^266^267^268^269^270^221^297^[ADD] if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( c, cfgNode, output, conditional )  ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^267^^^^^221^297^[ADD] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( cfgNode.getLastChild (  ) , cfgNode, output, conditional ) ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( c.getString (  ) , conditional ? false : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^n.getFirstChild (  )  ;^269^^^^^221^297^[REPLACE] c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  (  NodeUtil.isName ( n.getFirstChild (  )  )  )  {^275^^^^^221^297^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REMOVE]^if  ( ! ( isForIn ( n )  )  )  {     computeMustDef ( getConditionExpression ( n ) , cfgNode, output, conditional ) ; }else {     Node lhs = n.getFirstChild (  ) ;     Node rhs = lhs.getNext (  ) ;     if  ( isVar ( lhs )  )  {         lhs = lhs.getLastChild (  ) ;     }     if  ( isName ( lhs )  )  {         addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;     } }^275^^^^^221^297^[REMOVE] ^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( n.getType (  )  == Token.DEC && n.getType (  )  == Token.INC )  {^283^^^^^275^295^[REPLACE] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^283^284^285^286^287^275^295^[ADD] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  { Node target = n.getFirstChild (  ) ; if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if   (  NodeUtil.isVar  (  lhs  )    )   {  ;^285^^^^^275^295^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^288^^^^^275^295^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node name = n.getFirstChild (  )  ;^284^^^^^275^295^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REMOVE]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^285^^^^^275^295^[REMOVE] ^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; cfgNode !^292^^^^^275^295^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = node.getFirstChild (  ) ;^284^^^^^275^295^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node name = n.getFirstChild (  )  ;^292^^^^^275^295^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node nodeame = n.getFirstChild (  ) ;^276^^^^^221^297^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( n .getString (  )   == Token.DEC && n^283^^^^^221^297^[REPLACE] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isVar ( target )  )  {^285^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^285^286^287^288^289^221^297^[ADD] if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^288^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = node.getFirstChild (  ) ;^284^^^^^221^297^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if   (  NodeUtil.isVar  (  lhs  )    )   {  ;^285^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^lhs =  null.getLastChild (  ) ;^244^^^^^221^297^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; cfgNode !^265^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; cfgNode !^292^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^226^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^233^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^250^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^256^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^262^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return;  ;^272^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node lhs = node.getFirstChild (  ) ;^241^^^^^221^297^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^242^^^^^221^297^[ADD] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^265^266^267^268^269^221^297^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^276^277^^^^221^297^[ADD] Node name = n.getFirstChild (  ) ; computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node name = n.getFirstChild (  )  ;^292^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^308^^^^^307^337^[ADD] Var var = jsScope.getVar ( name ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( var != null || var.scope != jsScope )  {^312^^^^^307^337^[REPLACE] if  ( var == null || var.scope != jsScope )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^return;  ;^313^^^^^307^337^[REPLACE] return;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if   (  def == null  )   {  ;^318^^^^^307^337^[REPLACE] if  ( otherDef == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^318^319^320^^^307^337^[ADD] if  ( otherDef == null )  { continue; }^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( otherDef.depends.contains ( other )  )  {^321^^^^^307^337^[REPLACE] if  ( otherDef.depends.contains ( var )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^def.reachingDef.put ( other, false ) ;^322^^^^^307^337^[REPLACE] def.reachingDef.put ( other, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( otherDef != null )  {^318^^^^^307^337^[REPLACE] if  ( otherDef == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( otherDef.depends .add (  )   )  {^321^^^^^307^337^[REPLACE] if  ( otherDef.depends.contains ( var )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^get ( other )  ;^322^^^^^307^337^[REPLACE] def.reachingDef.put ( other, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^317^^^^^307^337^[ADD] Definition otherDef = def.reachingDef.get ( other ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Var var = vars.next (  )  ;^316^^^^^307^337^[REPLACE] for  ( Var other : def.reachingDef.keySet (  )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition varDef = def.reachingDef.put ( other ) ;^317^^^^^307^337^[REPLACE] Definition otherDef = def.reachingDef.get ( other ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( escaped.contains ( var )  )  {^326^^^^^307^337^[REPLACE] if  ( !escaped.contains ( var )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^326^327^328^329^330^307^337^[ADD] if  ( !escaped.contains ( var )  )  { if  ( node == null )  { def.reachingDef.put ( var, null ) ; } else { Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if   (  rValue != null  )   {  ;^327^^^^^307^337^[REPLACE] if  ( node == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if   (  aDef == null  )   {  ;^331^^^^^327^335^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^330^^^^^327^335^[ADD] Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^def.reachingDef.put ( var, false ) ;^328^^^^^307^337^[REPLACE] def.reachingDef.put ( var, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^328^^^^^307^337^[ADD] def.reachingDef.put ( var, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( rValue == null )  {^331^^^^^307^337^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^computeDependence ( definition, target ) ;^332^^^^^307^337^[REPLACE] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition definition = new Definition ( target ) ;^330^^^^^307^337^[REPLACE] Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( node != this  )  {^327^^^^^307^337^[REPLACE] if  ( node == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^def.reachingDef.put ( var, null ) ;Definition definition = new Definition ( node ) ;^327^328^329^330^^307^337^[ADD] if  ( node == null )  { def.reachingDef.put ( var, null ) ; } else { Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( target == null )  {^331^^^^^327^335^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^331^332^333^^^327^335^[ADD] if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition definition = new Definition ( target ) ;^330^^^^^327^335^[REPLACE] Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^put ( other, null )  ;^328^^^^^307^337^[REPLACE] def.reachingDef.put ( var, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( rValue == this  )  {^331^^^^^307^337^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^get ( var )  ;^332^^^^^307^337^[REPLACE] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^final Set<Var> depends ;^68^^^^^^^[REPLACE] final Set<Var> depends = Sets.newHashSet (  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] Definition   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^Definition bDef = get ( var )  ;^146^^^^^145^185^[REPLACE] MustDef result = new MustDef (  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = get ( var )  ;^147^^^^^145^185^[REPLACE] Map<Var, Definition> resultMap = result.reachingDef;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( bDef != null )  {^154^^^^^145^185^[REPLACE] if  ( aDef == null )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, this ) ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if   (  containsKey  (  var  )    )   {  ;^164^^^^^145^185^[REPLACE] if  ( b.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, null )  ;^173^^^^^164^174^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( aDef.equals ( aDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, false ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, null )  ;^168^^^^^145^185^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^165^^^^^145^185^[ADD] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if   (  containsKey  (  var  )    )   {  ;^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap .put ( var )  ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^170^^^^^167^171^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^150^151^152^^^145^185^[ADD] for  ( Var var : a.reachingDef.keySet (  )  )  {  Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  (bDef != false )  {^154^^^^^145^185^[REPLACE] if  ( aDef == null )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^154^155^^^158^145^185^[ADD] if  ( aDef == null )  {  resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, aDef )  ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^158^^^^^145^185^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, bDef ) ;^173^^^^^164^174^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^173^^^^^164^174^[ADD] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, aDef )  ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^152^^^^^145^185^[ADD] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Node aNode = bDef.node;^162^^^^^145^185^[REPLACE] Node aNode = aDef.node;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = get ( var )  ;^150^^^^^145^185^[REPLACE] for  ( Var var : a.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition aDef = get ( var )  ;^165^^^^^145^185^[REPLACE] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if   (  containsKey  (  var  )    )   {  ;^180^^^^^145^185^[REPLACE] if  ( !a.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^180^181^182^^^145^185^[ADD] if  ( !a.reachingDef.containsKey ( var )  )  { resultMap.put ( var, b.reachingDef.get ( var )  ) ; }^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^get ( var )  ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( a.reachingDef.containsKey ( var )  )  {^180^^^^^145^185^[REPLACE] if  ( !a.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = get ( var )  ;^179^^^^^145^185^[REPLACE] for  ( Var var : b.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^return result;  ;^184^^^^^145^185^[REPLACE] return result;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
