[REPLACE]^private  AbstractCompiler compiler;^59^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private  char[] reservedCharacters;^61^^^^^^^[REPLACE] private final char[] reservedCharacters;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private  VariableMap prevUsedRenameMap;^64^^^^^^^[REPLACE] private final VariableMap prevUsedRenameMap;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^short  refCount;^75^^^^^^^[REPLACE] int refCount;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private static final Comparator<Property> FREQUENCY_COMPARATOR  = null ;^151^152^^^^151^161^[REPLACE] private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Set<Node> stringNodes  = null ;^165^^^^^^^[REPLACE] private final Set<Node> stringNodes = new HashSet<Node> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Map<String, Property> properties  = null ;^168^169^^^^168^169^[REPLACE] private final Map<String, Property> properties = new HashMap<String, Property> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Set<String> reservedNames  = null ;^172^173^174^^^172^174^[REPLACE] private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Set<Node> prototypeObjLits ;^177^^^^^^^[REPLACE] private final Set<Node> prototypeObjLits = new HashSet<Node> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^if  ( compiler.reportCodeChange (  ) .isExported ( oldName )  )  {^106^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;  ;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( compiler.reportCodeChange (  ) .isPrivate ( oldName )  )  {^111^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^111^112^113^114^^105^128^[ADD] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^113^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  this.prototypeCount > 0 && this.objLitCount == 0  )   {  ;^116^^^^^105^128^[REPLACE] if  ( aggressiveRenaming )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^117^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( Character.isUpperCase ( ch )  ) {^123^^^^^105^128^[REPLACE] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^123^124^125^^^105^128^[ADD] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;  ;^124^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^124^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( int i = 0 , n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node child = n.getFirstChild (  )  ;^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^char ch = oldName.compareTo ( objLitCount ) ;^121^^^^^105^128^[REPLACE] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^127^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^NodeTraversal.traverse ( compiler, n, new ProcessExternedProperties (  )  ) ;^204^205^^^^203^260^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^( isUpperCase ( ch )  )  ;^206^^^^^203^260^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a.canRename (  )  ) {^215^^^^^203^260^[REPLACE] if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^it.next (  ) ;^218^^^^^215^223^[REPLACE] it.remove (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^reservedNames.contains ( a.oldName ) ;^222^^^^^215^223^[REPLACE] reservedNames.add ( a.oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^222^^^^^215^223^[ADD] reservedNames.add ( a.oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^propsByFrequency.contains ( a ) ;^216^^^^^203^260^[REPLACE] propsByFrequency.add ( a ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Iterator<Map.Entry<String, Property>> it = properties .get ( this )  .iterator (  ) ; it.hasNext (  ) ;  )  {^212^213^^^^203^260^[REPLACE] for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a  ;^214^^^^^203^260^[REPLACE] Property a = it.next (  ) .getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( prevUsedRenameMap == this )  {^227^^^^^203^260^[REPLACE] if  ( prevUsedRenameMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^reusePrototypeNames ( null ) ;^228^^^^^203^260^[REPLACE] reusePrototypeNames ( propsByFrequency ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^228^^^^^203^260^[ADD] reusePrototypeNames ( propsByFrequency ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Node child = n.getFirstChild (  )  ;^234^^^^^203^260^[REPLACE] StringBuilder debug = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a.newName != null )  {^236^^^^^203^260^[REPLACE] if  ( a.newName == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^a.newName =  nnullmeGen.genernullteNextNnullme (  ) ;^237^^^^^203^260^[REPLACE] a.newName = nameGen.generateNextName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  (oldName != null )  {^236^^^^^203^260^[REPLACE] if  ( a.newName == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^a.newName = nameGen.generateNextName (  ) ;reservedNames.add ( a.newName ) ;^236^237^238^239^^203^260^[ADD] if  ( a.newName == null )  { a.newName = nameGen.generateNextName (  ) ; reservedNames.add ( a.newName ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^237^238^^^^203^260^[ADD] a.newName = nameGen.generateNextName (  ) ; reservedNames.add ( a.newName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = it.next (  ) .getValue (  )  ;^235^^^^^203^260^[REPLACE] for  ( Property a : propsByFrequency )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^compiler .reportCodeChange (  )  ;^244^^^^^203^260^[REPLACE] compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^244^^^^^203^260^[ADD] compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^247^^^^^203^260^[ADD] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a == null ) {^251^^^^^203^260^[REPLACE] if  ( a != null && a.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^changed = changed ;^253^^^^^203^260^[REPLACE] changed = changed || !a.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^n.setString ( a.newName ) ;changed = changed || !a.newName.equals ( oldName ) ;^251^252^253^254^^203^260^[ADD] if  ( a != null && a.newName != null )  { n.setString ( a.newName ) ; changed = changed || !a.newName.equals ( oldName ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^changed = changed && !a.newName.equals ( oldName ) ;^253^^^^^203^260^[REPLACE] changed = changed || !a.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^253^^^^^203^260^[ADD] changed = changed || !a.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^249^250^^^^203^260^[ADD] String oldName = n.getString (  ) ; Property a = properties.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^250^^^^^203^260^[ADD] Property a = properties.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Node map  ;^248^^^^^203^260^[REPLACE] for  ( Node n : stringNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = properties.get ( newName ) ;^250^^^^^203^260^[REPLACE] Property a = properties.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( true )  {^257^^^^^203^260^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^compiler.getCodingConvention (  ) ;^258^^^^^203^260^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( dest.getType (  )   &&  Token.STRING )  {^314^^^^^309^339^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^String s = dest.getString (  ) ;processPrototypeParent ( parent, t.getInput (  )  ) ;^314^315^316^317^^309^339^[ADD] if  ( dest.getType (  )  == Token.STRING )  { String s = dest.getString (  ) ; if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  this.prototypeCount > 0 && this.objLitCount == 0  )   {  ;^316^^^^^309^339^[REPLACE] if  ( s.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^( isUpperCase ( ch )  )  ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REMOVE]^( key.getType (  )  )  ;^319^^^^^316^320^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^( isUpperCase ( ch )  )  ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^315^^^^^309^339^[ADD] String s = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^317^^^^^309^339^[ADD] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( prototypeObjLits.contains ( n )  )  {^324^^^^^309^339^[REPLACE] if  ( !prototypeObjLits.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( child.getType (  )   ) {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^332^333^334^^^309^339^[ADD] if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^( isUpperCase ( ch )  )  ;^333^^^^^309^339^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node key = map.getFirstChild (  )  ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node child = n.getFirstChild (  )  ;^313^^^^^309^339^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node child = n.getLastChild (  ) ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  child.getType  (    )   == Token.STRING  )   {  ;^352^^^^^346^382^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( key, input )  ;^353^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( n.getType (  )   ) {^361^^^^^346^382^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^361^365^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^362^^^^^346^382^[ADD] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  key.getType  (    )   == Token.STRING  )   {  ;^366^^^^^346^382^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  child.getType  (    )   == Token.STRING  )   {  ;^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^376^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^374^375^376^^^346^382^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getLastChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  (   Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^376^^^^^346^382^[ADD] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getFirstChild (  ) .getNext (  ) ;^362^^^^^346^382^[REPLACE] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^346^382^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^key !=  null; dest^374^^^^^346^382^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = n.getFirstChild (  )  .isExported ( prevName )  ;^351^^^^^346^382^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node n  ;^360^^^^^346^382^[REPLACE] Node map;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node child = n.getFirstChild (  )  ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^short  newName;^72^^^^^^^[REPLACE] String newName;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] Property   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if   (  compiler.getCodingConvention  (    )  .isPrivate  (  oldName  )    )   {  ;^106^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;  ;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( compiler.getCodingConvention (  )  .isExported ( name )   )  {^111^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^111^112^113^114^^105^128^[ADD] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^113^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if   (  Character.isUpperCase  (  ch  )   || !Character.isLetter  (  ch  )    )   {  ;^116^^^^^105^128^[REPLACE] if  ( aggressiveRenaming )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^117^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( Character.isUpperCase ( ch )  ) {^123^^^^^105^128^[REPLACE] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^123^124^125^^^105^128^[ADD] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^124^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^for  ( int i = 0 , n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^char ch = oldName.charAt ( i )  ;^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^121^^^^^105^128^[ADD] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^127^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if   (  child.getType  (    )   == Token.STRING  )   {  ;^314^^^^^309^339^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^String s = dest.getString (  ) ;processPrototypeParent ( parent, t.getInput (  )  ) ;^314^315^316^317^^309^339^[ADD] if  ( dest.getType (  )  == Token.STRING )  { String s = dest.getString (  ) ; if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if   (  map.getType  (    )   == Token.OBJECTLIT  )   {  ;^316^^^^^309^339^[REPLACE] if  ( s.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^processPrototypeParent ( parent, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^316^317^318^319^320^309^339^[ADD] if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ; } else { markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^( key.getType (  )  )  ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^( key.getType (  )  )  ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^String s = dest .getLastChild (  )  ;^315^^^^^309^339^[REPLACE] String s = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( prototypeObjLits.contains ( n )  )  {^324^^^^^309^339^[REPLACE] if  ( !prototypeObjLits.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if   (  n.getType  (    )   == Token.ASSIGN  )   {  ;^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^332^333^334^^^309^339^[ADD] if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^( key.getType (  )  )  ;^333^^^^^309^339^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( child.getType (  )   !=  Token.STRING )  {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^313^^^^^309^339^[ADD] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^315^^^^^309^339^[ADD] String s = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^352^^^^^346^382^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^markPrototypePropertyCandidate ( key, input )  ;^353^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^353^^^^^346^382^[ADD] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( n.getType (  )   ) {^361^^^^^346^382^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^364^^^^^361^365^[ADD] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^map =  null.getFirstChild (  ) .getNext (  ) ;^362^^^^^346^382^[REPLACE] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  (   Token.OBJECTLIT )  {^366^^^^^346^382^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if   (  map.getType  (    )   == Token.OBJECTLIT  )   {  ;^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^markPrototypePropertyCandidate ( dest, input )  ;^376^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^key !=  null; dest^374^^^^^346^382^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node key = map .getLastChild (  )  ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( key .getString (  )    ||  Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^376^^^^^346^382^[ADD] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^346^382^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^key !=  null; null^374^^^^^346^382^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^351^^^^^346^382^[ADD] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^360^^^^^346^382^[ADD] Node map;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node key = map.getLastChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
