[REPLACE]^private  VariableMap prevUsedRenameMap;^64^^^^^^^[REPLACE] private final VariableMap prevUsedRenameMap;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^char  newName;^72^^^^^^^[REPLACE] String newName;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^short  prototypeCount;^73^^^^^^^[REPLACE] int prototypeCount;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^short  refCount;^75^^^^^^^[REPLACE] int refCount;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private static final Comparator<Property> FREQUENCY_COMPARATOR ;^151^152^^^^151^161^[REPLACE] private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Set<Node> stringNodes ;^165^^^^^^^[REPLACE] private final Set<Node> stringNodes = new HashSet<Node> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private final Map<String, Property> properties  = null ;^168^169^^^^168^169^[REPLACE] private final Map<String, Property> properties = new HashMap<String, Property> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private  Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^172^173^174^^^172^174^[REPLACE] private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^private  Set<Node> prototypeObjLits = new HashSet<Node> (  ) ;^177^^^^^^^[REPLACE] private final Set<Node> prototypeObjLits = new HashSet<Node> (  ) ;^ [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  
[REPLACE]^this.oldName =  oldName;^79^^^^^78^85^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.newName = true;^80^^^^^78^85^[REPLACE] this.newName = null;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^80^^^^^78^85^[ADD] this.newName = null;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.prototypeCount = 0 << 4;^81^^^^^78^85^[REPLACE] this.prototypeCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.objLitCount = 1;^82^^^^^78^85^[REPLACE] this.objLitCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.refCount = 0 << 1;^83^^^^^78^85^[REPLACE] this.refCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^83^^^^^78^85^[ADD] this.refCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.input = this;^84^^^^^78^85^[REPLACE] this.input = null;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.compiler =  null;^191^^^^^188^195^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] VariableMap) [PARAMETER] AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.aggressiveRenaming =  true;^192^^^^^188^195^[REPLACE] this.aggressiveRenaming = aggressiveRenaming;^[METHOD] <init> [TYPE] VariableMap) [PARAMETER] AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.reservedCharacters =  null;^193^^^^^188^195^[REPLACE] this.reservedCharacters = reservedCharacters;^[METHOD] <init> [TYPE] VariableMap) [PARAMETER] AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.prevUsedRenameMap =  null;^194^^^^^188^195^[REPLACE] this.prevUsedRenameMap = prevUsedRenameMap;^[METHOD] <init> [TYPE] VariableMap) [PARAMETER] AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return canRenameObjLitProperty (  ) ;^88^^^^^87^89^[REPLACE] return prototypeCount + objLitCount + refCount;^[METHOD] count [TYPE] int [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  (true || this.objLitCount == 3 )  {^92^^^^^91^103^[REPLACE] if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^return canRenamePrototypeProperty (  ) ;^92^93^94^^^91^103^[ADD] if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { return canRenamePrototypeProperty (  ) ; }^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return canRenameObjLitProperty (  ) ;^93^^^^^91^103^[REPLACE] return canRenamePrototypeProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  (true ) {^95^^^^^91^103^[REPLACE] if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return canRenamePrototypeProperty (  ) ;^96^^^^^91^103^[REPLACE] return canRenameObjLitProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return canRenamePrototypeProperty (  )  || canRenameObjLitProperty (  ) ;^102^^^^^91^103^[REPLACE] return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^106^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^111^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^113^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^116^^^^^105^128^[REPLACE] if  ( aggressiveRenaming )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^117^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( Character.isLetter ( ch )  || Character.isLetter ( ch )  )  {^123^^^^^105^128^[REPLACE] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^124^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( int i = 0, n = oldName.size (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^char ch = oldName.compareTo ( objLitCount ) ;^121^^^^^105^128^[REPLACE] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( int i = 0 , n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^120^121^^123^124^105^128^[ADD] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  { char ch = oldName.charAt ( i ) ; if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^char ch = oldName.charAt ( objLitCount ) ;^121^^^^^105^128^[REPLACE] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^127^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  char ch  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( compiler.reportCodeChange (  ) .isExported ( oldName )  )  {^131^^^^^130^144^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^133^^^^^130^144^[REPLACE] return false;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^136^^^^^130^144^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return false;^138^^^^^130^144^[REPLACE] return true;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return true;^143^^^^^130^144^[REPLACE] return false;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  int i  n  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^int n1 = a1.canRename (  ) ;^154^^^^^153^160^[REPLACE] int n1 = a1.count (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  Property a1  a2  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^int n2 = a1.canRename (  ) ;^155^^^^^153^160^[REPLACE] int n2 = a2.count (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  Property a1  a2  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  (refCount  ==  refCount )  {^156^^^^^153^160^[REPLACE] if  ( n1 != n2 )  {^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  Property a1  a2  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^returnrefCount - n1;^157^^^^^153^160^[REPLACE] return n2 - n1;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  Property a1  a2  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return a1.oldName.equals ( a2.oldName ) ;^159^^^^^153^160^[REPLACE] return a1.oldName.compareTo ( a2.oldName ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  false  true  [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  [TYPE]  Map properties  [TYPE]  Property a1  a2  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^NodeTraversal.traverse ( compiler, n, new ProcessExternedProperties (  )  ) ;^204^205^^^^203^260^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^return canRenamePrototypeProperty (  ) ;^206^^^^^203^260^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^206^^^^^203^260^[ADD] NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a.canRename (  )  && reservedNames.contains ( a.oldName )  )  {^215^^^^^203^260^[REPLACE] if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^it.next (  ) ;^218^^^^^215^223^[REPLACE] it.remove (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^reservedNames.contains ( a.oldName ) ;^222^^^^^215^223^[REPLACE] reservedNames.add ( a.oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^222^^^^^215^223^[ADD] reservedNames.add ( a.oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^propsByFrequency.contains ( a ) ;^216^^^^^203^260^[REPLACE] propsByFrequency.add ( a ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Iterator<Map.Entry<String, Property>> it = properties .get ( 0 )  .iterator (  ) ; it.hasNext (  ) ;  )  {^212^213^^^^203^260^[REPLACE] for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a.canRename (  )  && reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^[REPLACE] if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^it.next (  ) ;^218^^^^^212^224^[REPLACE] it.remove (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REMOVE]^int n1 = a1.count (  ) ;^218^^^^^212^224^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^reservedNames .iterator (  )  ;^222^^^^^212^224^[REPLACE] reservedNames.add ( a.oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^propsByFrequency.contains ( a ) ;^216^^^^^212^224^[REPLACE] propsByFrequency.add ( a ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^216^^^^^212^224^[ADD] propsByFrequency.add ( a ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = null.next (  ) .getValue (  ) ;^214^^^^^212^224^[REPLACE] Property a = it.next (  ) .getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Iterator<Map.Entry<String, Property>> it = properties.values (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^212^213^^^^203^260^[REPLACE] for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = this.hasNext (  ) .getValue (  ) ;^214^^^^^203^260^[REPLACE] Property a = it.next (  ) .getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( prevUsedRenameMap == null )  {^227^^^^^203^260^[REPLACE] if  ( prevUsedRenameMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^reusePrototypeNames ( propsByFrequency ) ;^227^228^229^^^203^260^[ADD] if  ( prevUsedRenameMap != null )  { reusePrototypeNames ( propsByFrequency ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^reusePrototypeNames ( this ) ;^228^^^^^203^260^[REPLACE] reusePrototypeNames ( propsByFrequency ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^232^233^^^^203^260^[ADD] NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^234^^^^^203^260^[REPLACE] StringBuilder debug = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^234^^^^^203^260^[ADD] StringBuilder debug = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a.newName != null )  {^236^^^^^203^260^[REPLACE] if  ( a.newName == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^a.newName =  nnullmeGen.genernullteNextNnullme (  ) ;^237^^^^^203^260^[REPLACE] a.newName = nameGen.generateNextName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^235^^^^^203^260^[REPLACE] for  ( Property a : propsByFrequency )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^235^236^237^238^239^203^260^[ADD] for  ( Property a : propsByFrequency )  { if  ( a.newName == null )  { a.newName = nameGen.generateNextName (  ) ; reservedNames.add ( a.newName ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = properties.get ( oldName ) ;^244^^^^^203^260^[REPLACE] compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^boolean changed = true;^247^^^^^203^260^[REPLACE] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^247^^^^^203^260^[ADD] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( a == externsull ) {^251^^^^^203^260^[REPLACE] if  ( a != null && a.newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^changed =true ;^253^^^^^203^260^[REPLACE] changed = changed || !a.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[ADD]^^253^^^^^203^260^[ADD] changed = changed || !a.newName.equals ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^248^^^^^203^260^[REPLACE] for  ( Node n : stringNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^String oldName = n.getType (  ) ;^249^^^^^203^260^[REPLACE] String oldName = n.getString (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^Property a = properties.get ( newName ) ;^250^^^^^203^260^[REPLACE] Property a = properties.get ( oldName ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  ( true )  {^257^^^^^203^260^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^compiler .addToDebugLog ( newName )  ;^258^^^^^203^260^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  Set prototypeObjLits  reservedNames  stringNodes  [TYPE]  StringBuilder debug  [TYPE]  Node externs  n  root  [TYPE]  NameGenerator nameGen  [TYPE]  String name  newName  oldName  [TYPE]  SortedSet propsByFrequency  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Iterator it  [TYPE]  Map properties  [TYPE]  Property a 
[REPLACE]^if  (oldName == true )  {^271^^^^^268^280^[REPLACE] if  ( prevName != null )  {^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^271^272^273^274^^268^280^[ADD] if  ( prevName != null )  { if  ( reservedNames.contains ( prevName )  )  { continue; }^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( reservedNames.contains ( oldName )  )  {^272^^^^^268^280^[REPLACE] if  ( reservedNames.contains ( prevName )  )  {^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^prop.newName =  prevName;^276^^^^^268^280^[REPLACE] prop.newName = prevName;^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^276^^^^^268^280^[ADD] prop.newName = prevName;^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^269^^^^^268^280^[REPLACE] for  ( Property prop : properties )  {^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^String prevName = prevUsedRenameMap .VariableMap ( null )  ;^270^^^^^268^280^[REPLACE] String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^270^^^^^268^280^[ADD] String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[METHOD] reusePrototypeNames [TYPE] void [PARAMETER] Property> properties [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( parent.getType (  )   &&  Token.STRING )  {^293^^^^^288^297^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^reservedNames .iterator (  )  ;^294^^^^^288^297^[REPLACE] reservedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^[REPLACE] reservedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent  [TYPE]  String name  newName  oldName  prevName  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( dest.getType (  )   ||  Token.STRING )  {^314^^^^^309^339^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^String s = dest.getString (  ) ;processPrototypeParent ( parent, t.getInput (  )  ) ;^314^315^316^317^^309^339^[ADD] if  ( dest.getType (  )  == Token.STRING )  { String s = dest.getString (  ) ; if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^316^^^^^309^339^[REPLACE] if  ( s.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^String s = parent.getString (  ) ;^315^^^^^309^339^[REPLACE] String s = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^319^^^^^316^320^[ADD] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( prototypeObjLits.contains ( n )  )  {^324^^^^^309^339^[REPLACE] if  ( !prototypeObjLits.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^324^325^^^328^309^339^[ADD] if  ( !prototypeObjLits.contains ( n )  )  {  for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^332^333^334^^^309^339^[ADD] if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^333^^^^^309^339^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^328^329^330^^^309^339^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( child.getType (  )   ||  Token.STRING )  {^332^^^^^328^335^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^333^^^^^328^335^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^333^^^^^328^335^[ADD] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^330^331^332^^^309^339^[ADD] child = child.getNext (  ) .getNext (  )  )  {  if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( child.getType (  )   ||  Token.STRING )  {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^332^333^334^^^328^335^[ADD] if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = n.getLastChild (  ) .getNext (  ) ;^313^^^^^309^339^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node child = parent.getLastChild (  ) ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( dest.getType (  )   &&  Token.STRING )  {^352^^^^^346^382^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( key, input ) ;^353^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( n.getType (  )   ||  Token.ASSIGN )  {^361^^^^^346^382^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^361^365^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getFirstChild (  ) .getNext (  ) ;^362^^^^^346^382^[REPLACE] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^362^^^^^346^382^[ADD] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( map.getType (  )   &&  Token.OBJECTLIT )  {^366^^^^^346^382^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^376^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node dest = map.getFirstChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^375^^^^^373^378^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^376^^^^^373^378^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^key !=  null; dest^374^^^^^346^382^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getLastChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( dest.setString (  )   !=  Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^375^376^377^^^346^382^[ADD] if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REMOVE]^prototypeObjLits.add ( map ) ;^376^^^^^346^382^[REMOVE] ^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^375^^^^^373^378^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^markPrototypePropertyCandidate ( key, input ) ;^375^376^377^^^373^378^[ADD] if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^346^382^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Node dest = n.getLastChild (  ) .getNext (  ) ;^351^^^^^346^382^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^360^^^^^346^382^[REPLACE] Node map;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^373^374^375^376^377^346^382^[ADD] for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node dest  key  map  n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^stringNodes.contains ( n ) ;^392^^^^^391^394^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getString (  ) , input ) .refCount++;^393^^^^^391^394^[REPLACE] getProperty ( n.getString (  ) , input ) .prototypeCount++;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getType (  ) , input ) .prototypeCount++;^393^^^^^391^394^[REPLACE] getProperty ( n.getString (  ) , input ) .prototypeCount++;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^stringNodes.contains ( n ) ;^404^^^^^403^406^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^404^^^^^403^406^[ADD] stringNodes.add ( n ) ;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getString (  ) , input ) .prototypeCount++;^405^^^^^403^406^[REPLACE] getProperty ( n.getString (  ) , input ) .objLitCount++;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getType (  ) , input ) .objLitCount++;^405^^^^^403^406^[REPLACE] getProperty ( n.getString (  ) , input ) .objLitCount++;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^stringNodes.contains ( n ) ;^416^^^^^415^418^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getString (  ) , input ) .prototypeCount++;^417^^^^^415^418^[REPLACE] getProperty ( n.getString (  ) , input ) .refCount++;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REMOVE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^417^^^^^415^418^[REMOVE] ^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^getProperty ( n.getType (  ) , input ) .refCount++;^417^^^^^415^418^[REPLACE] getProperty ( n.getString (  ) , input ) .refCount++;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  Node n  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^Property prop = properties.get ( prevName ) ;^425^^^^^424^435^[REPLACE] Property prop = properties.get ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^425^^^^^424^435^[ADD] Property prop = properties.get ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( prop != null )  {^426^^^^^424^435^[REPLACE] if  ( prop == null )  {^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[ADD]^^426^427^428^^^424^435^[ADD] if  ( prop == null )  { prop = new Property ( name ) ; properties.put ( name, prop ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^prop =  new Property ( prevName ) ;^427^^^^^424^435^[REPLACE] prop = new Property ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^prop.input =  input;^432^^^^^424^435^[REPLACE] prop.input = input;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return canRenameObjLitProperty (  ) ;^434^^^^^424^435^[REPLACE] return prop;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map properties  [TYPE]  Property prop  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^String s = dest.getString (  ) ;^444^^^^^443^451^[REPLACE] Map<String, String> map = new HashMap<String, String> (  ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^if  ( p.newName == null )  {^446^^^^^443^451^[REPLACE] if  ( p.newName != null )  {^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^map .get ( false )  ;^447^^^^^443^451^[REPLACE] map.put ( p.oldName, p.newName ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REMOVE]^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^447^^^^^443^451^[REMOVE] ^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^445^^^^^443^451^[REPLACE] for  ( Property p : properties.values (  )  )  {^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^return new VariableMap ( this ) ;^450^^^^^443^451^[REPLACE] return new VariableMap ( map ) ;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^long  objLitCount;^74^^^^^^^[REPLACE] int objLitCount;^[METHOD] getPropertyMap [TYPE] VariableMap [PARAMETER] [CLASS] Property   [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean aggressiveRenaming  changed  false  true  [TYPE]  Set properties  prototypeObjLits  reservedNames  stringNodes  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  String name  newName  oldName  prevName  s  [TYPE]  Map map  properties  [TYPE]  Property p  [TYPE]  int i  n  n1  n2  objLitCount  prototypeCount  refCount  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR 
[REPLACE]^this.oldName =  oldName;^79^^^^^78^85^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^this.newName = this;^80^^^^^78^85^[REPLACE] this.newName = null;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^this.prototypeCount = 0L;^81^^^^^78^85^[REPLACE] this.prototypeCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[ADD]^^81^^^^^78^85^[ADD] this.prototypeCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^this.objLitCount = 2;^82^^^^^78^85^[REPLACE] this.objLitCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^this.objLitCount = 0; ;^83^^^^^78^85^[REPLACE] this.refCount = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^this.input = this;^84^^^^^78^85^[REPLACE] this.input = null;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^return prototypeCount + objLitCount +prototypeCount;^88^^^^^87^89^[REPLACE] return prototypeCount + objLitCount + refCount;^[METHOD] count [TYPE] int [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( this.prototypeCount > 0 ) {^92^^^^^91^103^[REPLACE] if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^return canRenameObjLitProperty (  ) ;^93^^^^^91^103^[REPLACE] return canRenamePrototypeProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( this.objLitCount > 0 ) {^95^^^^^91^103^[REPLACE] if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^return canRenamePrototypeProperty (  ) ;^96^^^^^91^103^[REPLACE] return canRenameObjLitProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^return canRenamePrototypeProperty (  )  ;^102^^^^^91^103^[REPLACE] return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[METHOD] canRename [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^106^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^108^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( compiler.getCodingConvention (  )  .isExported ( oldName )   )  {^111^^^^^105^128^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^111^112^113^114^^105^128^[ADD] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^113^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^116^^^^^105^128^[REPLACE] if  ( aggressiveRenaming )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^116^117^118^^^105^128^[ADD] if  ( aggressiveRenaming )  { return true; }^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^117^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  (  Character.isUpperCase ( ch )  )  {^123^^^^^105^128^[REPLACE] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^124^^^^^105^128^[REPLACE] return true;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^for  ( int i = 0, refCount = oldName.size (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( Character.isUpperCase ( ch )  || Character.isLetter ( ch )  )  {^123^^^^^105^128^[REPLACE] if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^char ch = oldName.charAt ( objLitCount ) ;^121^^^^^105^128^[REPLACE] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[ADD]^^121^^^^^105^128^[ADD] char ch = oldName.charAt ( i ) ;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^for  ( int i = 0 , n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  { char ch = oldName.charAt ( i ) ;^120^^^^^105^128^[REPLACE] for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^127^^^^^105^128^[REPLACE] return false;^[METHOD] canRenamePrototypeProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  char ch  [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^131^^^^^130^144^[REPLACE] if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^133^^^^^130^144^[REPLACE] return false;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^136^^^^^130^144^[REPLACE] if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return false;^138^^^^^130^144^[REPLACE] return true;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^return true;^143^^^^^130^144^[REPLACE] return false;^[METHOD] canRenameObjLitProperty [TYPE] boolean [PARAMETER] [CLASS] Property   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int i  n  objLitCount  prototypeCount  refCount 
[REPLACE]^int n1 = a2.count (  ) ;^154^^^^^153^160^[REPLACE] int n1 = a1.count (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[ADD]^int n2 = a2.count (  ) ;^154^155^^^^153^160^[ADD] int n1 = a1.count (  ) ; int n2 = a2.count (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[REPLACE]^int n2 = a1.count (  ) ;^155^^^^^153^160^[REPLACE] int n2 = a2.count (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[REPLACE]^if  ( n1  ==  n2 )  {^156^^^^^153^160^[REPLACE] if  ( n1 != n2 )  {^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[ADD]^^156^157^158^^^153^160^[ADD] if  ( n1 != n2 )  { return n2 - n1; }^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[REPLACE]^return n2  ^  n1;^157^^^^^153^160^[REPLACE] return n2 - n1;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[REPLACE]^return false ;^157^^^^^153^160^[REPLACE] return n2 - n1;^[METHOD] compare [TYPE] int [PARAMETER] Property a1 Property a2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Property a1  a2  [TYPE]  int n1  n2 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^293^^^^^288^297^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternedProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent 
[REPLACE]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^[REPLACE] reservedNames.add ( dest.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternedProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternedProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent 
[ADD]^^292^^^^^288^297^[ADD] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessExternedProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  n  parent 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^314^^^^^309^339^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REMOVE]^if  (  ( map.getType (  )  )  ==  ( OBJECTLIT )  )  {     prototypeObjLits.add ( map ) ;     for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         if  (  ( key.getType (  )  )  ==  ( STRING )  )  {             markPrototypePropertyCandidate ( key, input ) ;         }     } }^314^^^^^309^339^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^316^^^^^309^339^[REPLACE] if  ( s.equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^processPrototypeParent ( parent, t.getInput (  )  ) ;^319^^^^^316^320^[REPLACE] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^317^^^^^309^339^[REPLACE] processPrototypeParent ( parent, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^String s = parent.getType (  ) ;^315^^^^^309^339^[REPLACE] String s = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^319^^^^^316^320^[ADD] markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( prototypeObjLits.contains ( n )  )  {^324^^^^^309^339^[REPLACE] if  ( !prototypeObjLits.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^324^325^^^328^309^339^[ADD] if  ( !prototypeObjLits.contains ( n )  )  {  for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( child.getType (  )   &&  Token.STRING )  {^332^^^^^309^339^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^333^^^^^309^339^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^333^^^^^309^339^[ADD] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^for  ( Node child = n.getFirstChild (  ) ; child != null;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( child.getType (  )   !=  Token.STRING )  {^332^^^^^328^335^[REPLACE] if  ( child.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^333^^^^^328^335^[REPLACE] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^child =  null.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^[REPLACE] child = child.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[ADD]^^333^^^^^328^335^[ADD] markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^313^^^^^309^339^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessProperties   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node child  dest  n  parent  [TYPE]  String s 
[REPLACE]^if  ( dest.getType (  )   ||  Token.STRING )  {^352^^^^^346^382^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^markPrototypePropertyCandidate ( dest, input ) ;^352^353^354^^^346^382^[ADD] if  ( dest.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( dest, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^markPrototypePropertyCandidate ( key, input ) ;^353^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^353^^^^^346^382^[ADD] markPrototypePropertyCandidate ( dest, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^361^^^^^346^382^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^361^365^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^map =  null.getFirstChild (  ) .getNext (  ) ;^362^^^^^346^382^[REPLACE] map = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( map.getType (  )   !=  Token.OBJECTLIT )  {^366^^^^^346^382^[REPLACE] if  ( map.getType (  )  == Token.OBJECTLIT )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^366^367^^369^^346^382^[ADD] if  ( map.getType (  )  == Token.OBJECTLIT )  {  prototypeObjLits.add ( map ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^376^^^^^346^382^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node dest = map.getFirstChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^375^^^^^373^378^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^markPrototypePropertyCandidate ( key, input ) ;^375^376^377^^^373^378^[ADD] if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^markPrototypePropertyCandidate ( dest, input ) ;^376^^^^^373^378^[REPLACE] markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^key !=  null; dest^374^^^^^346^382^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^374^375^376^^^346^382^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node key = map.getLastChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^375^^^^^346^382^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Nodedest = map.getFirstChild (  ) ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^375^^^^^373^378^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^map =  null.getLastChild (  ) ;^364^^^^^346^382^[REPLACE] map = n.getLastChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^Node dest = n.getLastChild (  ) .getNext (  ) ;^351^^^^^346^382^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node key = map.getFirstChild (  ) ;^360^^^^^346^382^[REPLACE] Node map;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^for  ( Node key = map .getLastChild (  )  ;^373^^^^^346^382^[REPLACE] for  ( Node key = map.getFirstChild (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[ADD]^^373^374^375^376^377^346^382^[ADD] for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node dest  key  map  n 
[REPLACE]^stringNodes .contains ( n )  ;^392^^^^^391^394^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[ADD]^^392^393^^^^391^394^[ADD] stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .prototypeCount++;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^getProperty ( n.getType (  ) , input ) .prototypeCount++;^393^^^^^391^394^[REPLACE] getProperty ( n.getString (  ) , input ) .prototypeCount++;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[ADD]^^393^^^^^391^394^[ADD] getProperty ( n.getString (  ) , input ) .prototypeCount++;^[METHOD] markPrototypePropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^stringNodes.contains ( n ) ;^404^^^^^403^406^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^getProperty ( n .getLastChild (  )  , input ) .objLitCount++;^405^^^^^403^406^[REPLACE] getProperty ( n.getString (  ) , input ) .objLitCount++;^[METHOD] markObjLitPropertyCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^stringNodes.contains ( n ) ;^416^^^^^415^418^[REPLACE] stringNodes.add ( n ) ;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[ADD]^^416^417^^^^415^418^[ADD] stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .refCount++;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^getProperty ( n.getType (  ) , input ) .refCount++;^417^^^^^415^418^[REPLACE] getProperty ( n.getString (  ) , input ) .refCount++;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^getProperty ( n .getLastChild (  )  , input ) .refCount++;^417^^^^^415^418^[REPLACE] getProperty ( n.getString (  ) , input ) .refCount++;^[METHOD] markPropertyAccessCandidate [TYPE] void [PARAMETER] Node n CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^Property prop = properties .put ( null , null )  ;^425^^^^^424^435^[REPLACE] Property prop = properties.get ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^425^^^^^424^435^[ADD] Property prop = properties.get ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^if  ( prop != null )  {^426^^^^^424^435^[REPLACE] if  ( prop == null )  {^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^^426^427^428^^^424^435^[ADD] if  ( prop == null )  { prop = new Property ( name ) ; properties.put ( name, prop ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^prop =  new Property ( null ) ;^427^^^^^424^435^[REPLACE] prop = new Property ( name ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[REPLACE]^prop.input =  input;^432^^^^^424^435^[REPLACE] prop.input = input;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
[ADD]^properties.put ( name, prop ) ;^427^428^^^^424^435^[ADD] prop = new Property ( name ) ; properties.put ( name, prop ) ;^[METHOD] getProperty [TYPE] RenamePrototypes$Property [PARAMETER] String name CompilerInput input [CLASS] ProcessProperties   [TYPE]  CompilerInput input  [TYPE]  boolean false  true  [TYPE]  String name  [TYPE]  Property prop 
