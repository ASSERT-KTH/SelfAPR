[REPLACE]^private  AbstractCompiler compiler;^64^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  boolean usePseudoNames;^66^^^^^^^[REPLACE] private final boolean usePseudoNames;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private static  Comparator<Var> coloringTieBreaker = new Comparator<Var> (  )  {^68^69^^^^68^73^[REPLACE] private static final Comparator<Var> coloringTieBreaker = new Comparator<Var> (  )  {^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  ArrayList<CombinedLiveRangeChecker> callbacks;^292^^^^^^^[REPLACE] private final ArrayList<CombinedLiveRangeChecker> callbacks;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^boolean defFound  = null ;^390^^^^^^^[REPLACE] boolean defFound = false;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^boolean crossed ;^391^^^^^^^[REPLACE] boolean crossed = false;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^96^^^^^91^116^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( scope.getVars (  )  )  {^97^^^^^91^116^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[ADD]^^97^98^99^^^91^116^[ADD] if  ( scope.isGlobal (  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^return;  ;^98^^^^^91^116^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^ControlFlowGraph<Node> cfg = t.getScope (  ) ;^100^^^^^91^116^[REPLACE] ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( this, scope, compiler ) ;^102^103^^^^91^116^[REPLACE] LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^liveness .getEscapedLocals (  )  ;^104^^^^^91^116^[REPLACE] liveness.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, null, liveness.analyze (  )  ) ;^106^107^108^^^91^116^[REPLACE] UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[ADD]^^110^111^112^^^91^116^[ADD] GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^colorings.pop (  )  ;^114^^^^^91^116^[REPLACE] coloring.color (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^colorings.push ( false ) ;^115^^^^^91^116^[REPLACE] colorings.push ( coloring ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( colorings.isEmpty (  )  || NodeUtil.isVar ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^127^189^[REPLACE] if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^128^129^^131^132^127^189^[ADD] if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^131^^^^^128^132^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^131^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^127^189^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( v2 ) ;^134^^^^^127^189^[REPLACE] GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( this != null )  {^135^^^^^127^189^[REPLACE] if  ( vNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REMOVE]^if  ( scope.isGlobal (  )  )  {     return ; }^135^^^^^127^189^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^137^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var coalescedVar = colorings.peek (  )  .getNode ( iVar )  ;^139^^^^^127^189^[REPLACE] Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( usePseudoNames )  {^141^^^^^127^189^[REPLACE] if  ( !usePseudoNames )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == this ) {^165^166^^^^141^188^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^allMergedNames.contains ( iVar.name ) ;^167^^^^^165^168^[REPLACE] allMergedNames.add ( iVar.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( allMergedNames.length (  )  == 0  )  {^172^^^^^141^188^[REPLACE] if  ( allMergedNames.size (  )  == 1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^173^^^^^141^188^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  ) {^185^^^^^141^188^[REPLACE] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^185^186^187^^^141^188^[ADD] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^186^^^^^141^188^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REMOVE]^var.getParent (  )  ;^186^^^^^141^188^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName =  Joiner.on ( "_" ) .join ( null ) ;^176^^^^^141^188^[REPLACE] pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName + =  pseudoName +;^179^^^^^141^188^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^String pseudoName = false;^158^^^^^141^188^[REPLACE] String pseudoName = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var v1 = i1.next (  )  ;^159^^^^^141^188^[REPLACE] Set<String> allMergedNames = Sets.newTreeSet (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = t.getScope (  ) .join (  ) ; i.hasNext (  ) ; )  {^160^^^^^141^188^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var nullVar = i.hasNext (  ) ;^161^^^^^141^188^[REPLACE] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( this.getValue (  ) .equals ( coalescedVar )  )  {^142^^^^^127^189^[REPLACE] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^142^143^144^145^^127^189^[ADD] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^144^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( NodeUtil .isName ( parent )   )  {^151^^^^^127^189^[REPLACE] if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^152^^^^^127^189^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( vNode.getValue (  ) .equals ( var )  )  {^142^^^^^127^189^[REPLACE] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if   (  NodeUtil.isForIn  (  parent  )    )   {  ;^151^^^^^127^189^[REPLACE] if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == null ) {^165^166^^^^127^189^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^allMergedNames .contains ( coalescedVar )  ;^167^^^^^165^168^[REPLACE] allMergedNames.add ( iVar.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( allMergedNames.size (  )  - 3 == 1 )  {^172^^^^^127^189^[REPLACE] if  ( allMergedNames.size (  )  == 1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^return;^172^173^174^^^127^189^[ADD] if  ( allMergedNames.size (  )  == 1 )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return;  ;^173^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( null.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^185^^^^^127^189^[REPLACE] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^186^^^^^127^189^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName =  Joiner.on ( "_" ) .join ( null ) ;^176^^^^^127^189^[REPLACE] pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName + =  pseudoName +;^179^^^^^127^189^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^String pseudoName = true;^158^^^^^127^189^[REPLACE] String pseudoName = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var v1 = i1.next (  )  ;^159^^^^^127^189^[REPLACE] Set<String> allMergedNames = Sets.newTreeSet (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = t.inGlobalScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^160^^^^^127^189^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^161^^^^^127^189^[ADD] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^195^^^^^192^265^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( !escaped.add ( v )  )  {^200^^^^^192^265^[REPLACE] if  ( !escaped.contains ( v )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( !NodeUtil.isFunction ( var.getParentNode (  )  )  )  {^208^^^^^192^265^[REPLACE] if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.hasNode ( v ) ;^209^^^^^192^265^[REPLACE] interferenceGraph.createNode ( v ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^209^^^^^192^265^[ADD] interferenceGraph.createNode ( v ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^( interferenceGraph.hasNode ( v2 )  )  ;^209^^^^^192^265^[REPLACE] interferenceGraph.createNode ( v ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i = scope.getVarCount (  ) ; i.hasNext (  ) ; )  {^198^^^^^192^265^[REPLACE] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v = null.next (  ) ;^199^^^^^192^265^[REPLACE] Var v = i.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( cfg.isImplicitReturn ( this )  )  {^218^^^^^192^265^[REPLACE] if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1 == v2 || interferenceGraph.createNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^192^265^[REPLACE] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^232^233^^^236^192^265^[ADD] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  { continue;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP || v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^192^265^[REPLACE] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^} else if  (  ( state.getIn (  ) .isLive ( var )  && state.getIn (  ) .isLive ( v2 )  )  && ( v2OutLive )  )  {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? true : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? false : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, this, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^249^250^^^^192^265^[ADD] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? true : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, false, v2 ) ;^244^^^^^242^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^}  else {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? false : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^251^252^^^^245^254^[ADD] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, true, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REMOVE]^interferenceGraph.createNode ( v )  ;^247^^^^^245^254^[REMOVE] ^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( DiGraphNode<Node, Branch> null : cfg.getDirectedGraphNodes (  )  )  {^216^^^^^192^265^[REPLACE] for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( cfg.isImplicitReturn ( false )  )  {^218^^^^^192^265^[REPLACE] if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^218^219^220^^^192^265^[ADD] if  ( cfg.isImplicitReturn ( cfgNode )  )  { continue; }^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1 == v2 || interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^192^265^[REPLACE] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1.getParentNode (  )  .getNode ( v )   == Token.LP || v2.getParentNode (  )^242^243^^^^192^265^[REPLACE] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  && ( v1OutLive && v2OutLive )  )  {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^}   interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^245^246^247^248^249^192^265^[ADD] else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  { interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; } else { LiveRangeChecker checker1 =^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? false : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, false, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? false : v2 ) ;^249^250^^^^192^265^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? this : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, true, v2 ) ;^244^^^^^242^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? this : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? false : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, this, var ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^range.shouldVisit ( interferenceGraph ) ;^261^^^^^216^263^[REPLACE] range.connectIfCrossed ( interferenceGraph ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^FlowState<LiveVariableLattice> state = null.getAnnotation (  ) ;^217^^^^^216^263^[REPLACE] FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^int varsInScope = scope.getVars (  ) ;^222^^^^^216^263^[REPLACE] int varsInScope = scope.getVarCount (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope  varsInScope ) ;^223^224^225^^^216^263^[REPLACE] ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^227^228^229^230^^216^263^[ADD] for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  { Var v1 = i1.next (  ) ; for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  { Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v1 = this.next (  ) ;^228^^^^^216^263^[REPLACE] Var v1 = i1.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i2 = scope .getVar (  )  ; i2.hasNext (  ) ; )  {^229^^^^^216^263^[REPLACE] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v2 = null.next (  ) ;^230^^^^^216^263^[REPLACE] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v1OutLive = true.getOut (  ) .isLive ( v1 ) ;^239^^^^^216^263^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v2OutLive = this.getOut (  ) .isLive ( v2 ) ;^240^^^^^216^263^[REPLACE] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? this : v2 ) ;^249^250^^^^216^263^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? this : v1 ) ;^251^252^^^^216^263^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^CombinedLiveRangeChecker callback  ;^260^^^^^216^263^[REPLACE] for  ( CombinedLiveRangeChecker range : rangesToCheck )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^range.connectIfCrossed ( 0 ) ;^261^^^^^216^263^[REPLACE] range.connectIfCrossed ( interferenceGraph ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v1 = i1.next (  )  ;^216^^^^^216^263^[REPLACE] for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^FlowState<LiveVariableLattice> state = true.getValue (  ) ;^217^^^^^216^263^[REPLACE] FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^222^^^^^216^263^[ADD] int varsInScope = scope.getVarCount (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^223^224^225^^^216^263^[ADD] ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i1 = scope.getVarCount (  ) ; i1.hasNext (  ) ; )  {^227^^^^^216^263^[REPLACE] for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v1 = false.next (  ) ;^228^^^^^216^263^[REPLACE] Var v1 = i1.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var> i = scope.getVars (  )  ;^229^^^^^216^263^[REPLACE] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^230^^^^^216^263^[ADD] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean varOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^216^263^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v2OutLive = null.getOut (  ) .isLive ( v2 ) ;^240^^^^^216^263^[REPLACE] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? this : v2 ) ;^249^250^^^^216^263^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? true : v1 ) ;^251^252^^^^216^263^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^260^261^262^^^216^263^[ADD] for  ( CombinedLiveRangeChecker range : rangesToCheck )  { range.connectIfCrossed ( interferenceGraph ) ; }^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^return interferenceGraph;  ;^264^^^^^192^265^[REPLACE] return interferenceGraph;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Node var = var.getParent (  ) ;^355^^^^^354^386^[REPLACE] Node var = name.getParent (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^356^^^^^354^386^[ADD] Node parent = var.getParent (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  NodeUtil.isVar  (  parent  )    )   {  ;^359^^^^^354^386^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^var.removeChild ( name ) ;parent.replaceChild ( var, name ) ;^359^360^361^362^^354^386^[ADD] if  ( NodeUtil.isForIn ( parent )  )  { var.removeChild ( name ) ; parent.replaceChild ( var, name ) ; } else if  ( var.getChildCount (  )  == 1 )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^} else if  ( var.getChildCount (  )   !=  1 )  {^362^^^^^354^386^[REPLACE] } else if  ( var.getChildCount (  )  == 1 )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( !name.setString (  )  )  {^381^^^^^362^385^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.setString ( name ) ;^382^^^^^362^385^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  !name.hasChildren  (    )    )   {  ;^364^^^^^354^386^[REPLACE] if  ( name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^Node value = name.removeFirstChild (  ) ;var.removeChild ( name ) ;Node assign = new Node ( Token.ASSIGN, name, value ) ;^364^365^366^367^^354^386^[ADD] if  ( name.hasChildren (  )  )  { Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ; Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.getType (  )   ==  Token.FOR )  {^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^371^^^^^354^386^[ADD] assign = NodeUtil.newExpr ( assign ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^assign =  NodeUtil.newExpr ( null ) ;^371^^^^^354^386^[REPLACE] assign = NodeUtil.newExpr ( assign ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = var.removeFirstChild (  ) ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^367^^^^^354^386^[ADD] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node parent = var.getParent (  )  ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node assign = new Node ( Token.ASSIGN, name, var ) ;^367^^^^^354^386^[REPLACE] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil.removeChild ( value, var ) ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.setString (  )   ==  Token.FOR )  {^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^assign = NodeUtil.newExpr ( assign ) ;^370^371^372^^^354^386^[ADD] if  ( parent.getType (  )  != Token.FOR )  { assign = NodeUtil.newExpr ( assign ) ; }^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  name.hasChildren  (    )    )   {  ;^381^^^^^354^386^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^if  ( scope.isGlobal (  )  )  {     return ; }^381^^^^^354^386^[REMOVE] ^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.setString ( name ) ;^382^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^var.removeChild ( name ) ;^365^366^^^^354^386^[ADD] Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.setString ( name ) ;^360^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^parent.replaceChild ( var, assign )  ;^361^^^^^354^386^[REPLACE] parent.replaceChild ( var, name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^( name.hasChildren (  )  )  ;^361^^^^^354^386^[REMOVE] ^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  if  ( var.getChildCount (  )   !=  1 )  {^362^^^^^354^386^[REPLACE] } else if  ( var.getChildCount (  )  == 1 )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^381^382^383^^^362^385^[ADD] if  ( !name.hasChildren (  )  )  { var.removeChild ( name ) ; }^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.removeChild ( value ) ;^382^^^^^362^385^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^364^365^366^367^^354^386^[ADD] if  ( name.hasChildren (  )  )  { Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ; Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  parent.getType  (    )   == Token.LP  )   {  ;^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = var.getFirstChild (  ) ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node assign = new Node ( Token.ASSIGN, var, value ) ;^367^^^^^354^386^[REPLACE] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil .removeChild ( assign )  ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( var.getType (  )   ==  Token.FOR )  {^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^if  (  ( parent.getType (  )  )  ==  ( LP )  )  {     return true; }else     if  ( isVar ( parent )  )  {         return n.hasChildren (  ) ;     }^370^^^^^354^386^[REMOVE] ^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var .removeChild ( name , value )  ;^382^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  (  var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^[REPLACE] if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return   NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.setString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^424^441^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node name = n.removeFirstChild (  ) ;^437^^^^^424^441^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  parent.getType  (    )   != Token.FOR  )   {  ;^426^^^^^424^441^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  if  ( NodeUtil.isName ( parent )  )  {^429^^^^^424^441^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^}   return n.hasChildren (  ) ;^429^430^^432^433^424^441^[ADD] else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return parent.hasChildren (  ) ;^432^^^^^424^441^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return false;^428^^^^^424^441^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  if  ( NodeUtil.isVar ( parent )  )  {^429^^^^^424^441^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return n.hasChildren  (    )  ;  ;^432^^^^^424^441^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return true;^434^^^^^424^441^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.getType (  )   &&  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^426^^^^^423^442^[REMOVE] ^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if   (  NodeUtil.isVar  (  parent  )    )   {  ;^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return n .getChildCount (  )  ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return parent.hasChildren (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return false;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^429^^^^^423^442^[REMOVE] ^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return parent.getChildCount (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return true;  ;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return true;^434^^^^^423^442^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return name != true ;;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = name.removeFirstChild (  )  ;^437^^^^^423^442^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^boolean defFound  = null ;^390^^^^^^^[REPLACE] boolean defFound = false;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^boolean crossed  = null ;^391^^^^^^^[REPLACE] boolean crossed = false;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^private  Var def;^392^^^^^^^[REPLACE] private final Var def;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^private  Var use;^393^^^^^^^[REPLACE] private final Var use;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent == true )  {^424^425^^^^423^442^[REPLACE] if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return name != null || NodeUtil.isName ( name )  || var.getName (  ) .equals ( name.getString (  )  )  || NodeUtil.isName ( n ) ;;^438^439^440^^^424^441^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^Node parentame = n.getFirstChild (  ) ;^437^^^^^424^441^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^if  ( parent.getType (  )   ) {^426^^^^^424^441^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^424^441^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return parent.hasChildren (  ) ;^432^^^^^424^441^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return false;^428^^^^^424^441^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^}  if  ( NodeUtil.isVar ( parent )  )  {^429^^^^^424^441^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return true;^434^^^^^424^441^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^if  ( parent.getType (  )   !=  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[ADD]^^426^427^428^429^^423^442^[ADD] if  ( parent.getType (  )  == Token.LP )  {  return true; } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^}  if  ( NodeUtil.isVar ( parent )  )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return n.hasChildren  (    )  ;  ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return parent.hasChildren (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return true;  ;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^}  else {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return parent.getParent (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return false;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return true;^434^^^^^423^442^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return name != null ;;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[ADD]^^437^^^^^423^442^[ADD] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
