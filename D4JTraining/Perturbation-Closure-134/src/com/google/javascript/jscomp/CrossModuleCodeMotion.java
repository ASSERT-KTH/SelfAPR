[REPLACE]^private static final Logger logger ;^42^43^^^^42^43^[REPLACE] private static final Logger logger = Logger.getLogger ( CrossModuleCodeMotion.class.getName (  )  ) ;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private  AbstractCompiler compiler;^45^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private  JSModuleGraph graph;^46^^^^^^^[REPLACE] private final JSModuleGraph graph;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private  Map<JSModule, Node> moduleVarParentMap = new HashMap<JSModule, Node> (  ) ;^52^53^^^^52^53^[REPLACE] private final Map<JSModule, Node> moduleVarParentMap = new HashMap<JSModule, Node> (  ) ;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private final Map<Scope.Var, NamedInfo> namedInfo ;^59^60^^^^59^60^[REPLACE] private final Map<Scope.Var, NamedInfo> namedInfo = new LinkedHashMap<Var, NamedInfo> (  ) ;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^boolean allowMove ;^145^^^^^^^[REPLACE] boolean allowMove = true;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private JSModule deepestModule  = null ;^148^^^^^^^[REPLACE] private JSModule deepestModule = null;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private JSModule declModule ;^151^^^^^^^[REPLACE] private JSModule declModule = null;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^private final Deque<Declaration> declarations ;^154^155^^^^154^155^[REPLACE] private final Deque<Declaration> declarations = new ArrayDeque<Declaration> (  ) ;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^Node node;^200^^^^^^^[REPLACE] final Node node;^ [CLASS] CrossModuleCodeMotion NamedInfo Declaration  
[REPLACE]^if  ( info.allowMove && deepestDependency == false )  {^101^^^^^90^141^[REPLACE] if  ( info.allowMove && deepestDependency != null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^Iterator<Declaration> it = info.declarationIterator (  ) ;JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;Declaration decl = it.next (  ) ;^101^102^103^104^105^90^141^[ADD] if  ( info.allowMove && deepestDependency != null )  { Iterator<Declaration> it = info.declarationIterator (  ) ; JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ; while  ( it.hasNext (  )  )  { Declaration decl = it.next (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( decl.module == null ) {^106^107^108^^^90^141^[REPLACE] if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( destParent != null )  {^112^^^^^106^137^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;moduleVarParentMap.put ( deepestDependency, destParent ) ;^112^113^114^115^^106^137^[ADD] if  ( destParent == null )  { destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ; }^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^113^114^^^^106^137^[ADD] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( declParent.getType (  )  == Token.VAR ) {^121^122^^^^106^137^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^declParent.getParent (  ) ;^130^^^^^121^134^[REPLACE] declParent.detachFromParent (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^destParent.addChildToFront ( var )  ;^133^^^^^121^134^[REPLACE] destParent.addChildToFront ( declParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^133^^^^^121^134^[ADD] destParent.addChildToFront ( declParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^126^^^^^121^134^[REPLACE] Node var = new Node ( Token.VAR, decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^destParent =  compiler.getNodeForCodeInsertion ( module ) ;^113^^^^^106^137^[REPLACE] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node destParent = moduleVarParentMap .put ( deepestDependency , root )  ;^111^^^^^106^137^[REPLACE] Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node declParent = decl.node.getString (  ) ;^120^^^^^106^137^[REPLACE] Node declParent = decl.node.getParent (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^destParent.addChildToFront ( var ) ;^126^127^^^^106^137^[ADD] Node var = new Node ( Token.VAR, decl.node ) ; destParent.addChildToFront ( var ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( destParent != this  )  {^112^^^^^90^141^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^destParent =  compiler.getNodeForCodeInsertion ( module ) ;^113^^^^^90^141^[REPLACE] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( declParent.getType (  )  == Token.VAR ) {^121^122^^^^90^141^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^121^122^123^^^90^141^[ADD] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  { declParent.removeChild ( decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REMOVE]^parent.getType (  )  ;^130^^^^^121^134^[REMOVE] ^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Iterator<Declaration> it = info.NamedInfo (  ) ;^102^^^^^90^141^[REPLACE] Iterator<Declaration> it = info.declarationIterator (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^JSModuleGraph moduleGraph = compiler.reportCodeChange (  ) ;^103^^^^^90^141^[REPLACE] JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^NamedInfo info = e.getValue (  )  ;^105^^^^^90^141^[REPLACE] Declaration decl = it.next (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node destParent = moduleVarParentMap.get ( module ) ;^111^^^^^90^141^[REPLACE] Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node declParent = decl.node.getString (  ) ;^120^^^^^90^141^[REPLACE] Node declParent = decl.node.getParent (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^126^^^^^90^141^[REPLACE] Node var = new Node ( Token.VAR, decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (  moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^90^141^[REPLACE] if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( destParent != this )  {^112^^^^^106^137^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^113^^^^^106^137^[ADD] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (  declParent.getChildCount (  )  > 1L )  {^121^122^^^^106^137^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^destParent.addChildToFront ( var ) ;^133^^^^^121^134^[REPLACE] destParent.addChildToFront ( declParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^moduleVarParentMap.put ( deepestDependency, destParent ) ;^113^114^^^^106^137^[ADD] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node destParent = moduleVarParentMap.get ( module ) ;^111^^^^^106^137^[REPLACE] Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^126^^^^^106^137^[REPLACE] Node var = new Node ( Token.VAR, decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( destParent != null )  {^112^^^^^90^141^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^112^113^114^115^^90^141^[ADD] if  ( destParent == null )  { destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ; }^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^destParent =  compiler.getNodeForCodeInsertion ( null ) ;^113^^^^^90^141^[REPLACE] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( declParent.getType (  )  == Token.VAR || declParent.getChildCount (  )  > 1 >>> 2 )  {^121^122^^^^90^141^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^91^92^^94^^90^141^[ADD] for  ( Map.Entry<Var, NamedInfo> e : namedInfo.entrySet (  )  )  { NamedInfo info = e.getValue (  ) ; JSModule deepestDependency = info.deepestModule;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( info.allowMove && deepestDependency == null )  {^101^^^^^90^141^[REPLACE] if  ( info.allowMove && deepestDependency != null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( decl.module == null && graph .getModuleCount (  )   )  {^106^107^108^^^90^141^[REPLACE] if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (var != null )  {^112^^^^^106^137^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (  declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^137^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^121^122^123^^^106^137^[ADD] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  { declParent.removeChild ( decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^111^^^^^106^137^[ADD] Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( var != null )  {^112^^^^^90^141^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;moduleVarParentMap.put ( deepestDependency, destParent ) ;^112^113^114^115^^90^141^[ADD] if  ( destParent == null )  { destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ; }^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( declParent.getType (  )  == Token.VAR || declParent.getChildCount (  )  > 1 )  {^121^122^^^^90^141^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^113^114^^^^90^141^[ADD] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^102^103^^^^90^141^[ADD] Iterator<Declaration> it = info.declarationIterator (  ) ; JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Declaration decl = it .hasNext (  )  ;^105^^^^^90^141^[REPLACE] Declaration decl = it.next (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^111^^^^^90^141^[REPLACE] Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^126^^^^^90^141^[ADD] Node var = new Node ( Token.VAR, decl.node ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( decl.module == false && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^90^141^[REPLACE] if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^106^107^108^^^90^141^[ADD] if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( destParent !=var )  {^112^^^^^106^137^[REPLACE] if  ( destParent == null )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( var.getType (  )  == Token.VAR ) {^121^122^^^^106^137^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^120^^^^^106^137^[ADD] Node declParent = decl.node.getParent (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^113^^^^^90^141^[ADD] destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( declParent.getType (  )  == Token.VAR || declParent.getChildCount (  )  > 1L )  {^121^122^^^^90^141^[REPLACE] if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^NamedInfo info = getNamedInfo ( v )  ;^92^^^^^90^141^[REPLACE] NamedInfo info = e.getValue (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^94^^^^^90^141^[REPLACE] JSModule deepestDependency = info.deepestModule;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^105^^^^^90^141^[ADD] Declaration decl = it.next (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^120^^^^^90^141^[ADD] Node declParent = decl.node.getParent (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^91^^^^^90^141^[REPLACE] for  ( Map.Entry<Var, NamedInfo> e : namedInfo.entrySet (  )  )  {^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Iterator<Declaration> it = info .addDeclaration ( decl )  ;^102^^^^^90^141^[REPLACE] Iterator<Declaration> it = info.declarationIterator (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Declaration decl = null.next (  ) ;^105^^^^^90^141^[REPLACE] Declaration decl = it.next (  ) ;^[METHOD] moveCode [TYPE] void [PARAMETER] [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry e  [TYPE]  boolean allowMove  false  true  [TYPE]  Node declParent  destParent  externs  gramps  node  parent  root  var  [TYPE]  NamedInfo info  [TYPE]  Iterator it  [TYPE]  JSModule declModule  deepestDependency  deepestModule  module  [TYPE]  Declaration decl  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^boolean recursive = true;^247^^^^^243^259^[REPLACE] boolean recursive = false;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node rootNode = t.getModule (  ) .getRootNode (  ) ;^248^^^^^243^259^[REPLACE] Node rootNode = t.getScope (  ) .getRootNode (  ) ;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( rootNode.getType (  )   !=  Token.FUNCTION )  {^249^^^^^243^259^[REPLACE] if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  relationship != null && name.getString  (    )  .equals  (  relationship.subclassName  )    )   {  ;^251^^^^^243^259^[REPLACE] if  ( scopeFuncName.equals ( name )  )  {^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^recursive = false;^252^^^^^243^259^[REPLACE] recursive = true;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^252^^^^^243^259^[ADD] recursive = true;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^String scopeFuncName = rootNode.getFirstChild (  ) .getVar (  ) ;^250^^^^^243^259^[REPLACE] String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^String scopeFuncName = root.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^[REPLACE] String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( recursive )  {^256^^^^^243^259^[REPLACE] if  ( !recursive )  {^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^256^257^258^^^243^259^[ADD] if  ( !recursive )  { info.addUsedModule ( t.getModule (  )  ) ; }^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^info.addUsedModule ( t.getScope (  )  ) ;^257^^^^^243^259^[REPLACE] info.addUsedModule ( t.getModule (  )  ) ;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REMOVE]^compiler.getModuleGraph (  )  ;^257^^^^^243^259^[REMOVE] ^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^info.addUsedModule ( t .getScope (  )   ) ;^257^^^^^243^259^[REPLACE] info.addUsedModule ( t.getModule (  )  ) ;^[METHOD] processReference [TYPE] void [PARAMETER] NodeTraversal t NamedInfo info String name [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  scopeFuncName  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^} else if   (  n.getType  (    )   == Token.CALL  )   {  ;^265^^^^^264^294^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^return;^265^266^267^^^264^294^[ADD] if  ( n.getType (  )  != Token.NAME )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return;  ;^266^^^^^264^294^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^String rootNodeame = n.getString (  ) ;^270^^^^^264^294^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (  compiler .getNodeForCodeInsertion ( declModule )  .isExported ( name )  )  {^271^^^^^264^294^[REPLACE] if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return;  ;^272^^^^^264^294^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Var v = t.getModule (  ) .getVar ( name ) ;^278^^^^^264^294^[REPLACE] Var v = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( v != null || !v.isGlobal (  )  )  {^279^^^^^264^294^[REPLACE] if  ( v == null || !v.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return;  ;^280^^^^^264^294^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^NamedInfo info = e.getValue (  )  ;^283^^^^^264^294^[REPLACE] NamedInfo info = getNamedInfo ( v ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  !allowMove  )   {  ;^284^^^^^264^294^[REPLACE] if  ( info.allowMove )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( maybeProcessDeclaration ( t, rootNode, parent, info )  )  {^285^^^^^264^294^[REPLACE] if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^285^286^287^288^^264^294^[ADD] if  ( maybeProcessDeclaration ( t, n, parent, info )  )  { if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^compiler.reportCodeChange (  )  ;^291^^^^^285^292^[REPLACE] processReference ( t, info, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( hasConditionalAncestor ( rootNode )  )  {^286^^^^^264^294^[REPLACE] if  ( hasConditionalAncestor ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^info.allowMove = true;^287^^^^^264^294^[REPLACE] info.allowMove = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^287^^^^^264^294^[ADD] info.allowMove = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  relationship != null && name.getString  (    )  .equals  (  relationship.subclassName  )    )   {  ;^285^^^^^264^294^[REPLACE] if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^291^^^^^285^292^[ADD] processReference ( t, info, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  relationship != null && name.getString  (    )  .equals  (  relationship.subclassName  )    )   {  ;^286^^^^^264^294^[REPLACE] if  ( hasConditionalAncestor ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^286^287^288^^^264^294^[ADD] if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( hasConditionalAncestor ( parent )  )  {^286^^^^^264^294^[REPLACE] if  ( hasConditionalAncestor ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  String name  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node gramps = name.getString (  ) ;^313^^^^^312^371^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( canMoveValue ( name .getLastChild (  )   )  )  {^316^^^^^312^371^[REPLACE] if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^317^318^^^^312^371^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  relationship != null && name.getString  (    )  .equals  (  relationship.subclassName  )    )   {  ;^323^^^^^312^371^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^323^324^325^326^^312^371^[ADD] if  ( NodeUtil.isFunctionDeclaration ( parent )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getScope (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^324^325^^^^312^371^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  (   Token.GETPROP )  {^336^^^^^312^371^[REPLACE] if  ( current.getType (  )  == Token.GETPROP )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^} else if  ( current.getType (  )  == Token.ASSIGN || current.getFirstChild (  )  == child )  {^338^339^^^^312^371^[REPLACE] } else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^348^^^^^338^349^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^[REPLACE] if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node nParent = current.getParent (  ) ;^340^^^^^338^349^[REPLACE] Node currentParent = current.getParent (  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( currentParent )  ) {^341^342^^^^312^371^[REPLACE] if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^312^371^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^348^^^^^312^371^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node declParent = getParent (  )  ;^340^^^^^312^371^[REPLACE] Node currentParent = current.getParent (  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^}  else {^338^339^^^^312^371^[REPLACE] } else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( currentParent )  ) {^341^342^^^^338^349^[REPLACE] if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getScope (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^340^^^^^338^349^[ADD] Node currentParent = current.getParent (  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^312^371^[REPLACE] if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^341^342^343^344^345^312^371^[ADD] if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  relationship != null && name.getString  (    )  .equals  (  relationship.subclassName  )    )   {  ;^356^^^^^312^371^[REPLACE] if  ( NodeUtil.isExprCall ( gramps )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( relationship == true && name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^312^371^[REPLACE] if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^312^371^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .isExported ( var ) ;^357^358^^^^312^371^[REPLACE] SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( relationship == null && name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^312^371^[REPLACE] if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^359^360^361^362^363^312^371^[ADD] if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  , parent, gramps, gramps^361^362^363^^^359^364^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^335^336^^338^^^^[ADD] for  ( Node current : name.getAncestors (  )  )  { if  ( current.getType (  )  == Token.GETPROP )  { } else if  ( current.getType (  )  == Token.ASSIGN &&^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^child =  var;^351^^^^^^^[REPLACE] child = current;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, var )  ) ;^317^318^^^^^^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^320^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^324^325^^^^^^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^327^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^^^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^348^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^353^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^^^[REPLACE] return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^366^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^369^^^^^^^[REPLACE] return false;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = n.getFirstChild (  )  ;^331^^^^^^^[REPLACE] Node child = name;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node ancestor  ;^335^^^^^^^[REPLACE] for  ( Node current : name.getAncestors (  )  )  {^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^340^^^^^^^[ADD] Node currentParent = current.getParent (  ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( var ) ;^357^358^^^^^^[REPLACE] SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] maybeProcessDeclaration [TYPE] boolean [PARAMETER] NodeTraversal t Node name Node parent NamedInfo info [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  NamedInfo info  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  SubclassRelationship relationship  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( parent != null || NodeUtil.isLiteralValue ( n )  || n .getParent (  )   == Token.FUNCTION )  {^383^384^^^^376^406^[REPLACE] if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if   (  n.getType  (    )   != Token.NAME  )   {  ;^386^^^^^376^406^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^}  else {^393^394^^^^376^406^[REPLACE] } else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^}   for  ( Node child = n.getFirstChild (  ) ; child != null;^393^394^395^396^^376^406^[ADD] else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  { for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( !canMoveValue ( rootNode )  )  {^397^^^^^393^403^[REPLACE] if  ( !canMoveValue ( child )  )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^397^398^399^^^393^403^[ADD] if  ( !canMoveValue ( child )  )  { return false; }^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^child =  rootNode.getNext (  )  )  {^396^^^^^393^403^[REPLACE] child = child.getNext (  )  )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^398^^^^^393^403^[REPLACE] return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false;^402^^^^^393^403^[REPLACE] return true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^395^396^397^398^399^393^403^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false; }^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^if  ( !canMoveValue ( rootNode )  )  {^397^^^^^376^406^[REPLACE] if  ( !canMoveValue ( child )  )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^398^^^^^376^406^[REPLACE] return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^child =  rootNode.getNext (  )  )  {^396^^^^^376^406^[REPLACE] child = child.getNext (  )  )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false;^402^^^^^376^406^[REPLACE] return true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = name  ;^395^^^^^376^406^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true ;^388^389^390^391^^376^406^[REPLACE] return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^387^^^^^376^406^[ADD] Node functionName = n.getFirstChild (  ) ;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^}  if  ( n.getType (  )  == Token.ARRAYLIT && n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^[REPLACE] } else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false;  ;^398^^^^^393^403^[REPLACE] return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;  ;^402^^^^^393^403^[REPLACE] return true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^for  ( Node child = rootNode.getFirstChild (  ) ; child != null;^395^^^^^393^403^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false ;^388^389^390^391^^376^406^[REPLACE] return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^395^396^397^398^399^376^406^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false; }^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false;^385^^^^^383^403^[REPLACE] return true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^}  else {^386^^^^^376^406^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^396^397^398^^^376^406^[ADD] child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^for  ( Node child = rootNode.getFirstChild (  ) ; child != null;^395^^^^^376^406^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return functionName.getType (  )  ;^388^389^390^391^^376^406^[REPLACE] return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node functionName = parent.getLastChild (  ) ;^387^^^^^376^406^[REPLACE] Node functionName = n.getFirstChild (  ) ;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^}  if  (  n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^[REPLACE] } else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^396^397^398^^^393^403^[ADD] child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node child = name  ;^395^^^^^393^403^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[ADD]^^397^398^399^^^376^406^[ADD] if  ( !canMoveValue ( child )  )  { return false; }^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;  ;^385^^^^^376^406^[REPLACE] return true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return   ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^[REPLACE] return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return false;  ;^398^^^^^376^406^[REPLACE] return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node functionName = rootNode.getFirstChild (  ) ;^387^^^^^376^406^[REPLACE] Node functionName = n.getFirstChild (  ) ;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^return true;^405^^^^^376^406^[REPLACE] return false;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] CrossModuleCodeMotion NamedInfo Declaration   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^boolean allowMove  = null ;^145^^^^^^^[REPLACE] boolean allowMove = true;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] NamedInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^private JSModule deepestModule  = null ;^148^^^^^^^[REPLACE] private JSModule deepestModule = null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] NamedInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^private JSModule declModule ;^151^^^^^^^[REPLACE] private JSModule declModule = null;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] NamedInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^private final Deque<Declaration> declarations  = null ;^154^155^^^^154^155^[REPLACE] private final Deque<Declaration> declarations = new ArrayDeque<Declaration> (  ) ;^[METHOD] canMoveValue [TYPE] boolean [PARAMETER] Node n [CLASS] NamedInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean allowMove  false  recursive  true  [TYPE]  Node ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  [TYPE]  JSModule declModule  deepestDependency  deepestModule  m  module  [TYPE]  Logger logger  [TYPE]  Map moduleVarParentMap  namedInfo  [TYPE]  Deque declarations  [TYPE]  JSModuleGraph graph  moduleGraph 
[REPLACE]^Node node;^200^^^^^^^[REPLACE] final Node node;^[METHOD] declarationIterator [TYPE] Iterator [PARAMETER] [CLASS] Declaration   [TYPE]  JSModule declModule  deepestModule  m  [TYPE]  boolean allowMove  false  true  [TYPE]  Deque declarations 
