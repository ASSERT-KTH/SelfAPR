[REPLACE]^protected final Map<N, LinkedUndirectedGraphNode<N, E>> nodes  = null ;^38^39^^^^38^39^[REPLACE] protected final Map<N, LinkedUndirectedGraphNode<N, E>> nodes = Maps.newHashMap (  ) ;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^private List<UndiGraphEdge<N, E>> neighborList  = null ;^259^260^^^^259^260^[REPLACE] private List<UndiGraphEdge<N, E>> neighborList = Lists.newArrayList (  ) ;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^private static  long  totalNodes = 0;^264^^^^^^^[REPLACE] private static int totalNodes = 0;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^private final Iterator<UndiGraphEdge<N, E>> edgeIterator ;^313^314^^^^313^314^[REPLACE] private final Iterator<UndiGraphEdge<N, E>> edgeIterator = neighborList.iterator (  ) ;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^protected  E value;^346^^^^^^^[REPLACE] protected final E value;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^private Annotation annotation;^347^^^^^^^[REPLACE] protected Annotation annotation;^ [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge  
[REPLACE]^UndiGraphNode<N, E> node = getUndirectedGraphNode ( value ) ;^47^^^^^46^66^[REPLACE] UndiGraphNode<N, E> node = getUndirectedGraphNode ( srcValue ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( node != null )  {^48^^^^^46^66^[REPLACE] if  ( node == null )  {^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^49^50^^^^46^66^[ADD] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  )  ;^49^50^^^^46^66^[REPLACE] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^52^53^^^^46^66^[ADD] LinkedUndirectedGraphNode<N, E> src = ( LinkedUndirectedGraphNode<N, E> )  node;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^node =  getUndirectedGraphNode ( value ) ;^54^^^^^46^66^[REPLACE] node = getUndirectedGraphNode ( destValue ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( node != null )  {^55^^^^^46^66^[REPLACE] if  ( node == null )  {^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^55^56^57^58^^46^66^[ADD] if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^56^57^^^^46^66^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^throw new IllegalArgumentException (  ( value + " not found in graph" )  )  ;^56^57^^^^46^66^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^LinkedUndirectedGraphEdge<N, E> edge = new LinkedUndirectedGraphEdge<N, E> ( src, value, dest ) ;^61^62^^^^46^66^[REPLACE] LinkedUndirectedGraphEdge<N, E> edge = new LinkedUndirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.neighborIterator (  ) .add ( edge ) ;^63^^^^^46^66^[REPLACE] src.getNeighborEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^dest.neighborIterator (  ) .add ( edge ) ;^64^^^^^46^66^[REPLACE] dest.getNeighborEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^64^^^^^46^66^[ADD] dest.getNeighborEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^node.getNeighborEdges (  )  ;^64^^^^^46^66^[REPLACE] dest.getNeighborEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return edge;  ;^65^^^^^46^66^[REPLACE] return edge;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphEdge edge  [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^70^^^^^69^90^[ADD] UndiGraphNode<N, E> node = getUndirectedGraphNode ( srcValue ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( node != null )  {^71^^^^^69^90^[REPLACE] if  ( node == null )  {^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  )  ;^72^73^^^^69^90^[REPLACE] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^72^73^^^^69^90^[ADD] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^node =  getUndirectedGraphNode ( value ) ;^77^^^^^69^90^[REPLACE] node = getUndirectedGraphNode ( destValue ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( true != null )  {^78^^^^^69^90^[REPLACE] if  ( node == null )  {^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^throw new IllegalArgumentException (  ( value + " not found in graph" )  )  ;^79^80^^^^69^90^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^79^80^^^^69^90^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^for  ( UndiGraphEdge<N, E> this : getUndirectedGraphEdges ( srcValue, destValue )  )  {^85^86^^^^69^90^[REPLACE] for  ( UndiGraphEdge<N, E> edge : getUndirectedGraphEdges ( srcValue, destValue )  )  {^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.getNeighborEdges (  ) .remove ( true ) ;^87^^^^^85^89^[REPLACE] src.getNeighborEdges (  ) .remove ( edge ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.neighborIterator (  ) .remove ( edge ) ;^87^^^^^85^89^[REPLACE] src.getNeighborEdges (  ) .remove ( edge ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^dest.getNeighborEdges (  ) .add ( edge ) ;^88^^^^^85^89^[REPLACE] dest.getNeighborEdges (  ) .remove ( edge ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^node.getNeighborEdges (  )  ;^88^^^^^85^89^[REPLACE] dest.getNeighborEdges (  ) .remove ( edge ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^88^^^^^85^89^[ADD] dest.getNeighborEdges (  ) .remove ( edge ) ;^[METHOD] disconnect [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  LinkedUndirectedGraphNode dest  src  [TYPE]  boolean false  true  [TYPE]  UndiGraphNode node  nodeA  nodeB  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  UndiGraphEdge edge  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^124^^^^^123^139^[ADD] UndiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( dNode1 != false )  {^125^^^^^123^139^[REPLACE] if  ( dNode1 == null )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;^126^^^^^123^139^[REPLACE] return null;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^UndiGraphNode<N, E> uNode = getUndirectedGraphNode ( value )  ;^128^^^^^123^139^[REPLACE] UndiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if   (  uNode == null  )   {  ;^129^^^^^123^139^[REPLACE] if  ( dNode2 == null )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;^130^^^^^123^139^[REPLACE] return null;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return this;^130^^^^^123^139^[REPLACE] return null;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^GraphvizEdge> edgeList = newArrayList (  )  ;^132^^^^^123^139^[REPLACE] List<UndiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( outEdge .getNodeB (  )   == dNode2 && outEdge.getNodeB (  )  == dNode2 )  {^134^^^^^123^139^[REPLACE] if  ( outEdge.getNodeA (  )  == dNode2 || outEdge.getNodeB (  )  == dNode2 )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^edges.add ( outEdge ) ;^134^135^136^^^123^139^[ADD] if  ( outEdge.getNodeA (  )  == dNode2 || outEdge.getNodeB (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^edges.add ( null ) ;^135^^^^^123^139^[REPLACE] edges.add ( outEdge ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^for  ( UndiGraphEdge<N, E> null : dNode1.getNeighborEdges (  )  )  {^133^^^^^123^139^[REPLACE] for  ( UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges (  )  )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( this.getNodeA (  )  == dNode2 ) {^134^^^^^123^139^[REPLACE] if  ( outEdge.getNodeA (  )  == dNode2 || outEdge.getNodeB (  )  == dNode2 )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^edges.remove ( outEdge ) ;^135^^^^^123^139^[REPLACE] edges.add ( outEdge ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^135^^^^^123^139^[ADD] edges.add ( outEdge ) ;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^UndiGraphNode<N, E> dNode2 = nodes.get ( n2 )  ;^133^^^^^123^139^[REPLACE] for  ( UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges (  )  )  {^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return edge;  ;^138^^^^^123^139^[REPLACE] return edges;^[METHOD] getUndirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^172^^^^^171^187^[ADD] UndiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( null != null )  {^173^^^^^171^187^[REPLACE] if  ( dNode1 == null )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;^174^^^^^171^187^[REPLACE] return false;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^UndiGraphNode<N, E> uNode = getUndirectedGraphNode ( value )  ;^176^^^^^171^187^[REPLACE] UndiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( dNode2 != false )  {^177^^^^^171^187^[REPLACE] if  ( dNode2 == null )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^return false;^177^178^179^^^171^187^[ADD] if  ( dNode2 == null )  { return false; }^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;^178^^^^^171^187^[REPLACE] return false;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  (  ( outEdge.getNodeA (  )  == dNode1 && outEdge.getNodeB (  )  == dNode2 )  && ( outEdge.getNodeA (  )  == dNode2 && outEdge.getNodeB (  )  == dNode1 )  )  {^181^182^^^^171^187^[REPLACE] if  (  ( outEdge.getNodeA (  )  == dNode1 && outEdge.getNodeB (  )  == dNode2 )  || ( outEdge.getNodeA (  )  == dNode2 && outEdge.getNodeB (  )  == dNode1 )  )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^181^182^183^184^^171^187^[ADD] if  (  ( outEdge.getNodeA (  )  == dNode1 && outEdge.getNodeB (  )  == dNode2 )  || ( outEdge.getNodeA (  )  == dNode2 && outEdge.getNodeB (  )  == dNode1 )  )  { return true; }^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return false;^183^^^^^181^184^[REPLACE] return true;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^for  ( UndiGraphEdge<N, E> false : dNode1.getNeighborEdges (  )  )  {^180^^^^^171^187^[REPLACE] for  ( UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges (  )  )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  (  ( outEdge.getNodeA (  )  == dNode1 ) {^181^182^^^^171^187^[REPLACE] if  (  ( outEdge.getNodeA (  )  == dNode1 && outEdge.getNodeB (  )  == dNode2 )  || ( outEdge.getNodeA (  )  == dNode2 && outEdge.getNodeB (  )  == dNode1 )  )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;  ;^183^^^^^181^184^[REPLACE] return true;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return false;^183^^^^^171^187^[REPLACE] return true;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^UndiGraphNode<N, E> dNode2 = nodes.get ( n2 )  ;^180^^^^^171^187^[REPLACE] for  ( UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges (  )  )  {^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return true;^186^^^^^171^187^[REPLACE] return false;^[METHOD] isConnected [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedUndirectedGraph LinkedUndirectedGraphNode NeighborIterator LinkedUndirectedGraphEdge   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edges  neighborList  nodeList  result  [TYPE]  UndiGraphEdge outEdge  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^private List<UndiGraphEdge<N, E>> neighborList  = null ;^259^260^^^^259^260^[REPLACE] private List<UndiGraphEdge<N, E>> neighborList = Lists.newArrayList (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] LinkedUndirectedGraphNode NeighborIterator   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edgeList  edges  list  neighborList  nodeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
[REPLACE]^private static int totalNodes = 4;^264^^^^^^^[REPLACE] private static int totalNodes = 0;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] LinkedUndirectedGraphNode NeighborIterator   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edgeList  edges  list  neighborList  nodeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
[REPLACE]^private final Iterator<UndiGraphEdge<N, E>> edgeIterator ;^313^314^^^^313^314^[REPLACE] private final Iterator<UndiGraphEdge<N, E>> edgeIterator = neighborList.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] LinkedUndirectedGraphNode NeighborIterator   [TYPE]  boolean false  true  [TYPE]  UndiGraphNode dNode1  dNode2  node  nodeA  nodeB  uNode  [TYPE]  E edgeValue  value  [TYPE]  Iterator edgeIterator  i  [TYPE]  List edgeList  edges  list  neighborList  nodeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
[REPLACE]^private  Iterator<UndiGraphEdge<N, E>> edgeIterator = neighborList.iterator (  ) ;^313^314^^^^313^314^[REPLACE] private final Iterator<UndiGraphEdge<N, E>> edgeIterator = neighborList.iterator (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NeighborIterator   [TYPE]  Iterator edgeIterator  [TYPE]  List neighborList  [TYPE]  boolean false  true  [TYPE]  N nodeValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
