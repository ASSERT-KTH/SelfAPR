[REPLACE]^private static final long serialVersionUID  = null ;^55^^^^^^^[REPLACE] private static final long serialVersionUID = -1L;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^private final Map<E, Node<E>> elmap  = null ;^58^^^^^^^[REPLACE] private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap (  ) ;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^Node<E> nodeForValue ;^170^^^^^^^[REPLACE] Node<E> nodeForValue = elmap.get ( value ) ;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^int rank  = null ;^211^^^^^^^[REPLACE] int rank = 0;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^int size  = null ;^217^^^^^^^[REPLACE] int size = 1;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^for  ( E elem : other.elements (  )  )  { union ( elem, other.find ( elem )  ) ;^72^^^^^71^75^[REPLACE] for  ( E elem : other.elements (  )  )  {^[METHOD] <init> [TYPE] UnionFind) [PARAMETER] UnionFind<E> other [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E elem  element  [TYPE]  Node nodeForValue  parent  [TYPE]  UnionFind other  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^72^73^74^^^71^75^[ADD] for  ( E elem : other.elements (  )  )  { union ( elem, other.find ( elem )  ) ; }^[METHOD] <init> [TYPE] UnionFind) [PARAMETER] UnionFind<E> other [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E elem  element  [TYPE]  Node nodeForValue  parent  [TYPE]  UnionFind other  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^this.parent  =  this.parent ;^220^^^^^219^222^[REPLACE] this.parent = this;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeForValue  parent 
[ADD]^^220^221^^^^219^222^[ADD] this.parent = this; this.element = element;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeForValue  parent 
[REPLACE]^this.element =  elem;^221^^^^^219^222^[REPLACE] this.element = element;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeForValue  parent 
[REPLACE]^union ( element, e ) ;^78^^^^^77^79^[REPLACE] union ( e, e ) ;^[METHOD] add [TYPE] void [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeForValue  parent 
[REPLACE]^Node<E> nodeB = findRootOrCreateNode ( b ) ;^82^^^^^81^99^[REPLACE] Node<E> nodeA = findRootOrCreateNode ( a ) ;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^Node<E> nodeA = findRootOrCreateNode ( a ) ;^83^^^^^81^99^[REPLACE] Node<E> nodeB = findRootOrCreateNode ( b ) ;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if  ( nodeA  ||  nodeB )  {^85^^^^^81^99^[REPLACE] if  ( nodeA == nodeB )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[ADD]^return nodeA.element;^85^86^87^^^81^99^[ADD] if  ( nodeA == nodeB )  { return nodeA.element; }^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return true.element;^86^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return this.element;^86^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if  (size  >=  nodeB.rank )  {^88^^^^^81^99^[REPLACE] if  ( nodeA.rank > nodeB.rank )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeA.parent = nodeB; ;^89^^^^^81^99^[REPLACE] nodeB.parent = nodeA;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeB.size += nodeA.size; ;^90^^^^^81^99^[REPLACE] nodeA.size += nodeB.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[ADD]^^90^^^^^81^99^[ADD] nodeA.size += nodeB.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return null.element;^91^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return this.element;^91^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeB.parent = nodeA; ;^93^^^^^81^99^[REPLACE] nodeA.parent = nodeB;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if  ( nodeA.rank  !=  nodeB.rank )  {^94^^^^^81^99^[REPLACE] if  ( nodeA.rank == nodeB.rank )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REMOVE]^if  ( nodeA == nodeB )  {     return nodeA.element; }^94^^^^^81^99^[REMOVE] ^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeA.size += nodeB.size; ;^97^^^^^81^99^[REPLACE] nodeB.size += nodeA.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return nodeA.element;^98^^^^^81^99^[REPLACE] return nodeB.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^checkArgument ( elementlmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^[REPLACE] checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[METHOD] find [TYPE] E [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return findRoot ( elementlmap .keySet (  )   ) .element;^103^^^^^101^104^[REPLACE] return findRoot ( elmap.get ( e )  ) .element;^[METHOD] find [TYPE] E [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^E aRepRep = find ( a ) ;^107^^^^^106^110^[REPLACE] E aRep = find ( a ) ;^[METHOD] areEquivalent [TYPE] boolean [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^E bRepRep = find ( b ) ;^108^^^^^106^110^[REPLACE] E bRep = find ( b ) ;^[METHOD] areEquivalent [TYPE] boolean [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return true ;^109^^^^^106^110^[REPLACE] return aRep == bRep;^[METHOD] areEquivalent [TYPE] boolean [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return   elmap.keySet (  )  ;^113^^^^^112^114^[REPLACE] return Collections.unmodifiableSet ( elmap.keySet (  )  ) ;^[METHOD] elements [TYPE] Set [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  { result.add ( group.build (  )  ) ;^117^^^^^116^132^[REPLACE] Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^if  ( builder != null )  {^121^^^^^116^132^[REPLACE] if  ( builder == null )  {^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^builder ;^122^^^^^116^132^[REPLACE] builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^builder  =  builder ;^122^^^^^116^132^[REPLACE] builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> nodeForB = elmap.get ( b ) ;^118^^^^^116^132^[REPLACE] for  ( Node<E> elem : elmap.values (  )  )  {^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^118^119^120^121^122^116^132^[ADD] for  ( Node<E> elem : elmap.values (  )  )  { Node<E> root = findRoot ( elem ) ; ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ; if  ( builder == null )  { builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> root = findRoot ( null ) ;^119^^^^^116^132^[REPLACE] Node<E> root = findRoot ( elem ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^ImmutableSet.Builder<E> builder = groupsTmp.put ( root ) ;^120^^^^^116^132^[REPLACE] ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^127^^^^^116^132^[REPLACE] ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^127^^^^^116^132^[ADD] ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^128^^^^^116^132^[REPLACE] for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  {^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return result.add (  ) ;^131^^^^^116^132^[REPLACE] return result.build (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> node = elementlmap.get ( e ) ;^141^^^^^140^148^[REPLACE] Node<E> node = elmap.get ( e ) ;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^if  ( node == null )  {^142^^^^^140^148^[REPLACE] if  ( node != null )  {^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^return findRoot ( null ) ;^143^^^^^140^148^[REPLACE] return findRoot ( node ) ;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^node =  nelementw Nodelement<E> ( element ) ;^145^^^^^140^148^[REPLACE] node = new Node<E> ( e ) ;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^elmap.put ( e, null ) ;^146^^^^^140^148^[REPLACE] elmap.put ( e, node ) ;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[ADD]^^146^^^^^140^148^[ADD] elmap.put ( e, node ) ;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^return null;^147^^^^^140^148^[REPLACE] return node;^[METHOD] findRootOrCreateNode [TYPE] StandardUnionFind$Node [PARAMETER] E e [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^if  ( node.parent  ==  node )  {^158^^^^^157^162^[REPLACE] if  ( node.parent != node )  {^[METHOD] findRoot [TYPE] StandardUnionFind$Node [PARAMETER] Node<E> node [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^node.parent =  findRoot ( this.parent ) ;^159^^^^^157^162^[REPLACE] node.parent = findRoot ( node.parent ) ;^[METHOD] findRoot [TYPE] StandardUnionFind$Node [PARAMETER] Node<E> node [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[ADD]^^159^^^^^157^162^[ADD] node.parent = findRoot ( node.parent ) ;^[METHOD] findRoot [TYPE] StandardUnionFind$Node [PARAMETER] Node<E> node [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^return null.parent;^161^^^^^157^162^[REPLACE] return node.parent;^[METHOD] findRoot [TYPE] StandardUnionFind$Node [PARAMETER] Node<E> node [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForValue  parent  root 
[REPLACE]^checkArgument ( elmap.containsKey ( value ) ,true + value ) ;^165^^^^^164^200^[REPLACE] checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REMOVE]^return findRoot ( elmap.get ( value )  ) .size;^165^^^^^164^200^[REMOVE] ^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^checkArgument ( elmap.get ( value ) , "Element does not exist: " + value ) ;^165^^^^^164^200^[REPLACE] checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^if  ( Objects.equal ( element, b )  )  {^173^^^^^164^200^[REPLACE] if  ( Objects.equal ( value, b )  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return false;^174^^^^^164^200^[REPLACE] return true;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^if  ( 0 != null )  {^177^^^^^164^200^[REPLACE] if  ( nodeForB == null )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return true;^178^^^^^164^200^[REPLACE] return false;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^nodeForValue  = null ;^180^^^^^164^200^[REPLACE] nodeForValue = findRoot ( nodeForValue ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return findRoot ( nodeForB )   ||  nodeForValue;^181^^^^^164^200^[REPLACE] return findRoot ( nodeForB )  == nodeForValue;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^Node<E> nodeB = findRootOrCreateNode ( b ) ;^167^^^^^164^200^[REPLACE] final Predicate<Object> isSameRoot = new Predicate<Object> (  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^Node<E> nodeForB = elmap.containsKey ( b ) ;^176^^^^^164^200^[REPLACE] Node<E> nodeForB = elmap.get ( b ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return result.build (  ) ;^185^^^^^164^200^[REPLACE] return new AbstractSet<E> (  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return result.build (  ) ;^188^^^^^164^200^[REPLACE] return isSameRoot.apply ( o ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return unmodifiableIterator ( filter ( elmap.values (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^164^200^[REPLACE] return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return findRoot ( elmap .keySet (  )   ) .size;^197^^^^^164^200^[REPLACE] return findRoot ( elmap.get ( value )  ) .size;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^if  ( Objects.equal ( element, b )  )  {^173^^^^^172^182^[REPLACE] if  ( Objects.equal ( value, b )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return false;^174^^^^^172^182^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> nodeForB = elmap.containsKey ( b ) ;^176^^^^^172^182^[REPLACE] Node<E> nodeForB = elmap.get ( b ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^if  ( nodeForB != null )  {^177^^^^^172^182^[REPLACE] if  ( nodeForB == null )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return true;^178^^^^^172^182^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^nodeForValue  =  nodeForValue ;^180^^^^^172^182^[REPLACE] nodeForValue = findRoot ( nodeForValue ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return findRoot ( nodeForB )   &&  nodeForValue;^181^^^^^172^182^[REPLACE] return findRoot ( nodeForB )  == nodeForValue;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return isSameRoot .apply ( o )  ;^188^^^^^187^189^[REPLACE] return isSameRoot.apply ( o ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Object o [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return unmodifiableIterator ( filter ( elmap.values (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^191^194^[REPLACE] return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root 
[REPLACE]^return findRoot ( elmap.containsKey ( value )  ) .size;^197^^^^^196^198^[REPLACE] return findRoot ( elmap.get ( value )  ) .size;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root 
[REPLACE]^Node<E> nodeForValue  = null ;^170^^^^^^^[REPLACE] Node<E> nodeForValue = elmap.get ( value ) ;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root 
[REPLACE]^if  ( Objects.equal ( this, b )  )  {^173^^^^^172^182^[REPLACE] if  ( Objects.equal ( value, b )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[ADD]^return true;^173^174^175^^^172^182^[ADD] if  ( Objects.equal ( value, b )  )  { return true; }^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^return false;^174^^^^^172^182^[REPLACE] return true;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[ADD]^^176^^^^^172^182^[ADD] Node<E> nodeForB = elmap.get ( b ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^if  ( true != null )  {^177^^^^^172^182^[REPLACE] if  ( nodeForB == null )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[ADD]^return false;^177^178^179^^^172^182^[ADD] if  ( nodeForB == null )  { return false; }^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^return true;^178^^^^^172^182^[REPLACE] return false;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^nodeForValue  =  nodeForValue ;^180^^^^^172^182^[REPLACE] nodeForValue = findRoot ( nodeForValue ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^return findRoot ( nodeForB )   ||  nodeForValue;^181^^^^^172^182^[REPLACE] return findRoot ( nodeForB )  == nodeForValue;^[METHOD] apply [TYPE] boolean [PARAMETER] Object b [CLASS] 1   [TYPE]  Object b  [TYPE]  Node nodeForB  nodeForValue  [TYPE]  boolean false  true 
[REPLACE]^return null.apply ( o ) ;^188^^^^^187^189^[REPLACE] return isSameRoot.apply ( o ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] Object o [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  Object o 
[REPLACE]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , true )  ) ;^192^193^^^^191^194^[REPLACE] return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] 2   [TYPE]  boolean false  true 
[REPLACE]^return findRoot ( elmap.get ( 0 )  ) .size;^197^^^^^196^198^[REPLACE] return findRoot ( elmap.get ( value )  ) .size;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] 2   [TYPE]  boolean false  true 
[REPLACE]^E element;^208^^^^^^^[REPLACE] final E element;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
[REPLACE]^int rank  = null ;^211^^^^^^^[REPLACE] int rank = 0;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
[REPLACE]^int size ;^217^^^^^^^[REPLACE] int size = 1;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
[REPLACE]^this.parent ;^220^^^^^219^222^[REPLACE] this.parent = this;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] Node   [TYPE]  boolean false  true  [TYPE]  E element  [TYPE]  int rank  size  [TYPE]  Node parent 
[ADD]^^220^221^^^^219^222^[ADD] this.parent = this; this.element = element;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] Node   [TYPE]  boolean false  true  [TYPE]  E element  [TYPE]  int rank  size  [TYPE]  Node parent 
[REPLACE]^this.element =  null;^221^^^^^219^222^[REPLACE] this.element = element;^[METHOD] <init> [TYPE] StandardUnionFind$Node(E) [PARAMETER] E element [CLASS] Node   [TYPE]  boolean false  true  [TYPE]  E element  [TYPE]  int rank  size  [TYPE]  Node parent 
