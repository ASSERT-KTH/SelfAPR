[REPLACE]^private static  long serialVersionUID = -1;^55^^^^^^^[REPLACE] private static final long serialVersionUID = -1L;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^private final Map<E, Node<E>> elmap  = null ;^58^^^^^^^[REPLACE] private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap (  ) ;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^Node<E> nodeForValue ;^170^^^^^^^[REPLACE] Node<E> nodeForValue = elmap.get ( value ) ;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^int rank  = null ;^211^^^^^^^[REPLACE] int rank = 0;^ [CLASS] StandardUnionFind 1 2 Node  
[REPLACE]^int size  = null ;^217^^^^^^^[REPLACE] int size = 1;^ [CLASS] StandardUnionFind 1 2 Node  
[ADD]^^82^^^^^81^99^[ADD] Node<E> nodeA = findRootOrCreateNode ( a ) ;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^Node<E> root = findRoot ( elem )  ;^83^^^^^81^99^[REPLACE] Node<E> nodeB = findRootOrCreateNode ( b ) ;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if   (  node != null  )   {  ;^85^^^^^81^99^[REPLACE] if  ( nodeA == nodeB )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[ADD]^^85^86^87^^^81^99^[ADD] if  ( nodeA == nodeB )  { return nodeA.element; }^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return false.element;^86^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return true.element;^86^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if  ( nodeA.rank  <  nodeB.rank )  {^88^^^^^81^99^[REPLACE] if  ( nodeA.rank > nodeB.rank )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[ADD]^^88^89^90^91^92^81^99^[ADD] if  ( nodeA.rank > nodeB.rank )  { nodeB.parent = nodeA; nodeA.size += nodeB.size; return nodeA.element; }^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeA.parent = nodeB  ;^89^^^^^81^99^[REPLACE] nodeB.parent = nodeA;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeB.size += nodeA.size  ;^90^^^^^81^99^[REPLACE] nodeA.size += nodeB.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return null.element;^91^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[ADD]^^90^^^^^81^99^[ADD] nodeA.size += nodeB.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return nodeB.element;  ;^91^^^^^81^99^[REPLACE] return nodeA.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeB.parent = nodeA  ;^93^^^^^81^99^[REPLACE] nodeA.parent = nodeB;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^if  ( size  !=  size )  {^94^^^^^81^99^[REPLACE] if  ( nodeA.rank == nodeB.rank )  {^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^nodeA.size += nodeB.size  ;^97^^^^^81^99^[REPLACE] nodeB.size += nodeA.size;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^return true.element;^98^^^^^81^99^[REPLACE] return nodeB.element;^[METHOD] union [TYPE] E [PARAMETER] E a E b [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  b  e  elem  element  [TYPE]  Map elmap  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node nodeA  nodeB  nodeForValue  parent 
[REPLACE]^Node<E> root = findRoot ( elem )  ;^117^^^^^116^132^[REPLACE] Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^if  ( builder != null )  {^121^^^^^116^132^[REPLACE] if  ( builder == null )  {^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^121^122^123^124^^116^132^[ADD] if  ( builder == null )  { builder = ImmutableSet.builder (  ) ; groupsTmp.put ( root, builder ) ; }^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^122^^^^^116^132^[ADD] builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^builder  = null ;^122^^^^^116^132^[REPLACE] builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> root = findRoot ( this ) ;^119^^^^^116^132^[REPLACE] Node<E> root = findRoot ( elem ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^ImmutableSet.Builder<E> builder = groupsTmp.put ( root ) ;^120^^^^^116^132^[REPLACE] ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^builder  =  builder ;^122^^^^^116^132^[REPLACE] builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^118^119^120^121^122^116^132^[ADD] for  ( Node<E> elem : elmap.values (  )  )  { Node<E> root = findRoot ( elem ) ; ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ; if  ( builder == null )  { builder = ImmutableSet.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> root = findRoot ( false ) ;^119^^^^^116^132^[REPLACE] Node<E> root = findRoot ( elem ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^120^^^^^116^132^[ADD] ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Node<E> root = findRoot ( elem )  ;^127^^^^^116^132^[REPLACE] ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[ADD]^^128^129^130^^^116^132^[ADD] for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  { result.add ( group.build (  )  ) ; }^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^elmap.get ( e )  ;^129^^^^^116^132^[REPLACE] result.add ( group.build (  )  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^Builder<E> builder = groupsTmp.get ( root )  ;^128^^^^^116^132^[REPLACE] for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  {^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^return result.build  (    )  ;  ;^131^^^^^116^132^[REPLACE] return result.build (  ) ;^[METHOD] allEquivalenceClasses [TYPE] Collection [PARAMETER] [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  [TYPE]  Node elem  nodeA  nodeB  nodeForValue  parent  root  [TYPE]  Builder builder  group  result  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size 
[REPLACE]^checkArgument ( elmap.containsKey ( value ) ,this  value ) ;^165^^^^^164^200^[REPLACE] checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[ADD]^^165^^^^^164^200^[ADD] checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^checkArgument ( elmap.containsKey ( element ) , "Element does not exist: " + value ) ;^165^^^^^164^200^[REPLACE] checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^if   (  builder == null  )   {  ;^173^^^^^164^200^[REPLACE] if  ( Objects.equal ( value, b )  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return false;^174^^^^^164^200^[REPLACE] return true;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^if  ( nodeForB != null )  {^177^^^^^164^200^[REPLACE] if  ( nodeForB == null )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return true;^178^^^^^164^200^[REPLACE] return false;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^nodeForValue ;^180^^^^^164^200^[REPLACE] nodeForValue = findRoot ( nodeForValue ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return findRoot ( nodeForB )   &&  nodeForValue;^181^^^^^164^200^[REPLACE] return findRoot ( nodeForB )  == nodeForValue;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^Node<E> root = findRoot ( elem )  ;^167^^^^^164^200^[REPLACE] final Predicate<Object> isSameRoot = new Predicate<Object> (  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^Node<E> nodeForB = elmap.containsKey ( b ) ;^176^^^^^164^200^[REPLACE] Node<E> nodeForB = elmap.get ( b ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return result.build  (    )  ;  ;^185^^^^^164^200^[REPLACE] return new AbstractSet<E> (  )  {^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return isSameRoot .apply ( b )  ;^188^^^^^164^200^[REPLACE] return isSameRoot.apply ( o ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , 1 )  ) ;^192^193^^^^164^200^[REPLACE] return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^return findRoot  (  elmap.get  (  value  )    )  .size;  ;^197^^^^^164^200^[REPLACE] return findRoot ( elmap.get ( value )  ) .size;^[METHOD] findAll [TYPE] Set [PARAMETER] final E value [CLASS] StandardUnionFind 1 2 Node   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  [TYPE]  Object b  o  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Predicate isSameRoot 
[REPLACE]^Node<E> nodeForValue ;^170^^^^^^^[REPLACE] Node<E> nodeForValue = elmap.get ( value ) ;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  E a  aRep  b  bRep  e  elem  element  value  [TYPE]  Map elmap  groupsTmp  [TYPE]  long serialVersionUID  [TYPE]  int rank  size  [TYPE]  Node elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root 
[REPLACE]^E element;^208^^^^^^^[REPLACE] final E element;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
[REPLACE]^int rank  = null ;^211^^^^^^^[REPLACE] int rank = 0;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
[REPLACE]^int size ;^217^^^^^^^[REPLACE] int size = 1;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] Node   [TYPE]  boolean false  true 
