[REPLACE]^private static final long serialVersionUID = 1;^66^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^private static final  short  serialVersionUID = 1;^78^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^private List<GraphNode<N, E>> nodes ;^287^^^^^^^[REPLACE] private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^GraphNode<N, E> node1 = getNode ( n2 ) ;^122^^^^^121^138^[REPLACE] GraphNode<N, E> node1 = getNode ( n1 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^GraphNode<N, E> node2 = getNode ( n1 ) ;^123^^^^^121^138^[REPLACE] GraphNode<N, E> node2 = getNode ( n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if   (  node2 == null  )   {  ;^124^^^^^121^138^[REPLACE] if  ( node1 == null )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^124^125^126^^^121^138^[ADD] if  ( node1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^throw new IllegalArgumentException (  ( value + " does not exist in graph" )  )  ;^125^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return ;^125^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  ( node2 != null )  {^127^^^^^121^138^[REPLACE] if  ( node2 == null )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^127^128^129^^^121^138^[ADD] if  ( node2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return ;^128^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^throw new IllegalArgumentException (  ( value + " does not exist in graph" )  )  ;^128^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^Annotatable h  ;^130^^^^^121^138^[REPLACE] List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  ( e.getValue (  )  == edge && e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^[REPLACE] if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return;  ;^134^^^^^121^138^[REPLACE] return;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  (  e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^[REPLACE] if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^Annotatable h  ;^131^^^^^121^138^[REPLACE] for  ( GraphEdge<N, E> e : edgeList )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^newLinkedList (  )  ;^137^^^^^121^138^[REPLACE] connect ( n1, edge, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^private static final long serialVersionUID = 1;^66^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] popAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack [CLASS] AnnotationState   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  AnnotationState as  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^private static  long serialVersionUID = 1L;^78^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] <init> [TYPE] Annotation) [PARAMETER] Annotatable annotatable Annotation annotation [CLASS] GraphAnnotationState   [TYPE]  Annotatable annotatable  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Annotation annotation 
[REPLACE]^private List<GraphNode<N, E>> nodes ;^287^^^^^^^[REPLACE] private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] Graph$GraphAnnotationState(int) [PARAMETER] int size [CLASS] SimpleSubGraph   [TYPE]  long serialVersionUID  [TYPE]  int size  [TYPE]  boolean false  true 
