[REPLACE]^private N[] colorToNodeMap;^52^^^^^^^[REPLACE] protected N[] colorToNodeMap;^ [CLASS] GraphColoring Color GreedyGraphColoring 1  
[REPLACE]^int value ;^90^^^^^^^[REPLACE] int value = 0;^ [CLASS] GraphColoring Color GreedyGraphColoring 1  
[REPLACE]^graph .getNodes (  )  ;^133^^^^^132^168^[REPLACE] graph.clearNodeAnnotations (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^List<GraphNode<N, E>> worklist = graph.getWeight (  ) ;^134^^^^^132^168^[REPLACE] List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^142^143^^^^132^168^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^140^141^^^^132^168^[ADD] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^worklist =  Lists.newLinkedList ( this ) ;^146^^^^^132^168^[REPLACE] worklist = Lists.newLinkedList ( worklist ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int count = 1;^150^^^^^132^168^[REPLACE] int count = 0;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( subgraph.isIndependentOf ( node .setAnnotation ( color )   )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( null.getValue (  )  ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^o1.getValue (  )  ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^newLinkedList ( worklist )  ;^158^^^^^132^168^[REPLACE] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^i.next (  ) ;^159^^^^^132^168^[REPLACE] i.remove (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^Color color = new Color ( result ) ;^152^^^^^132^168^[REPLACE] Color color = new Color ( count ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^SubGraph<N, E> subgraph = graph.getWeight (  ) ;^153^^^^^132^168^[REPLACE] SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^for  ( Iterator<GraphNode<N, E>> i = false.iterator (  ) ; i.hasNext (  ) ; )  {^154^^^^^132^168^[REPLACE] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^155^^^^^132^168^[ADD] GraphNode<N, E> node = i.next (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^colorToNodeMap = map;^165^166^^^^132^168^[ADD] N[] map =  ( N[] )  new Object[count]; colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap =  null;^166^^^^^132^168^[REPLACE] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^167^^^^^132^168^[REPLACE] return count;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int value ;^90^^^^^^^[REPLACE] int value = 0;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] Color   [TYPE]  N[] colorToNodeMap  map  [TYPE]  GraphNode o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^graph.getNodes (  ) ;^133^^^^^132^168^[REPLACE] graph.clearNodeAnnotations (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^134^^^^^132^168^[ADD] List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^142^143^^^^132^168^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^132^168^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^146^^^^^132^168^[ADD] worklist = Lists.newLinkedList ( worklist ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int count = 3;^150^^^^^132^168^[REPLACE] int count = 0;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( null.isIndependentOf ( node.getValue (  )  )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( null.getValue (  )  ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^157^^^^^132^168^[ADD] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^newLinkedList ( worklist )  ;^158^^^^^132^168^[REPLACE] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^i .next (  )  ;^159^^^^^132^168^[REPLACE] i.remove (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^159^^^^^132^168^[ADD] i.remove (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^152^^^^^132^168^[ADD] Color color = new Color ( count ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^SubGraph<N, E> subgraph = graph .getWeight (  )  ;^153^^^^^132^168^[REPLACE] SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^154^155^156^157^158^132^168^[ADD] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  { GraphNode<N, E> node = i.next (  ) ; if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^155^^^^^132^168^[ADD] GraphNode<N, E> node = i.next (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int count = 0  ;^165^^^^^132^168^[REPLACE] N[] map =  ( N[] )  new Object[count];^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap =  null;^166^^^^^132^168^[REPLACE] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^167^^^^^132^168^[REPLACE] return count;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
