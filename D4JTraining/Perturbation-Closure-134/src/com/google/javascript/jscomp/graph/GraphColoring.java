[REPLACE]^protected  AdjacencyGraph<N, E> graph;^53^^^^^^^[REPLACE] protected final AdjacencyGraph<N, E> graph;^ [CLASS] GraphColoring Color GreedyGraphColoring 1  
[REPLACE]^int value ;^90^^^^^^^[REPLACE] int value = 0;^ [CLASS] GraphColoring Color GreedyGraphColoring 1  
[REPLACE]^this.graph =  this;^56^^^^^55^57^[REPLACE] this.graph = graph;^[METHOD] <init> [TYPE] AdjacencyGraph) [PARAMETER] AdjacencyGraph<N, E> graph [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[ADD]^^56^^^^^55^57^[ADD] this.graph = graph;^[METHOD] <init> [TYPE] AdjacencyGraph) [PARAMETER] AdjacencyGraph<N, E> graph [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^this.value =  null;^93^^^^^92^94^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] GraphColoring$Color(int) [PARAMETER] int value [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[ADD]^^93^^^^^92^94^[ADD] this.value = value;^[METHOD] <init> [TYPE] GraphColoring$Color(int) [PARAMETER] int value [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^this ( graph, this ) ;^118^^^^^117^119^[REPLACE] this ( graph, null ) ;^[METHOD] <init> [TYPE] AdjacencyGraph) [PARAMETER] AdjacencyGraph<N, E> graph [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^super ( this ) ;^127^^^^^125^129^[REPLACE] super ( graph ) ;^[METHOD] <init> [TYPE] Comparator) [PARAMETER] AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^this.tieBreaker =  null;^128^^^^^125^129^[REPLACE] this.tieBreaker = tieBreaker;^[METHOD] <init> [TYPE] Comparator) [PARAMETER] AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[ADD]^^73^74^^^^72^83^[ADD] Preconditions.checkNotNull ( colorToNodeMap, "No coloring founded. color (  )  should be called first." ) ;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^Color color = graph.getNode ( headNode ) .getAnnotation (  ) ;^75^^^^^72^83^[REPLACE] Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[ADD]^^75^^^^^72^83^[ADD] Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^N[] map =  ( N[] )  new Object[count];^76^^^^^72^83^[REPLACE] N headNode = colorToNodeMap[color.value];^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( node != null )  {^77^^^^^72^83^[REPLACE] if  ( headNode == null )  {^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^return node;^81^^^^^72^83^[REPLACE] return headNode;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap[color.value]  =  colorToNodeMap[color.value] ;^78^^^^^72^83^[REPLACE] colorToNodeMap[color.value] = node;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^return headNode;^79^^^^^72^83^[REPLACE] return node;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap[color.value] ;^78^^^^^72^83^[REPLACE] colorToNodeMap[color.value] = node;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[ADD]^^78^79^^^^72^83^[ADD] colorToNodeMap[color.value] = node; return node;^[METHOD] getPartitionSuperNode [TYPE] N [PARAMETER] N node [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  AdjacencyGraph graph  [TYPE]  int value  [TYPE]  N headNode  node  [TYPE]  Comparator tieBreaker 
[REPLACE]^return headNode;^86^^^^^85^87^[REPLACE] return graph;^[METHOD] getGraph [TYPE] AdjacencyGraph [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( ! ! ( other instanceof Color )  )  {^98^^^^^97^103^[REPLACE] if  ( ! ( other instanceof Color )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  Object other  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[ADD]^return false;return value ==  (  ( Color )  other ) .value;^98^99^100^101^102^97^103^[ADD] if  ( ! ( other instanceof Color )  )  { return false; } else { return value ==  (  ( Color )  other ) .value; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  Object other  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return value  ||   (  ( Color )  other ) .value;^101^^^^^97^103^[REPLACE] return value ==  (  ( Color )  other ) .value;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  Object other  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return true;^99^^^^^97^103^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  Object other  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return value  &&   (  ( Color )  other ) .value;^101^^^^^97^103^[REPLACE] return value ==  (  ( Color )  other ) .value;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  Object other  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return false;^107^^^^^106^108^[REPLACE] return value;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int value  [TYPE]  Comparator tieBreaker 
[REPLACE]^graph.getNodes (  ) ;^133^^^^^132^168^[REPLACE] graph.clearNodeAnnotations (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^133^^^^^132^168^[ADD] graph.clearNodeAnnotations (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^List<GraphNode<N, E>> worklist = graph.getWeight (  ) ;^134^^^^^132^168^[REPLACE] List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^142^143^^^^132^168^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  ||  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^132^168^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^worklist =  Lists.newLinkedList ( null ) ;^146^^^^^132^168^[REPLACE] worklist = Lists.newLinkedList ( worklist ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int count = 0 % 3;^150^^^^^132^168^[REPLACE] int count = 0;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( subgraph.isIndependentOf ( 0.getValue (  )  )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( true.getValue (  )  ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( false .setAnnotation ( color )   ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^node.setAnnotation ( color ) ;^157^158^^^^132^168^[ADD] subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^graph.clearNodeAnnotations (  ) ;^158^^^^^132^168^[REPLACE] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^i.next (  ) ;^159^^^^^132^168^[REPLACE] i.remove (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.next (  ) ; )  {^154^^^^^132^168^[REPLACE] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( true.isIndependentOf ( node.getValue (  )  )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( this.getValue (  )  ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^157^^^^^132^168^[ADD] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^node .getValue (  )  ;^158^^^^^132^168^[REPLACE] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REMOVE]^node.setAnnotation ( color ) ;^159^^^^^132^168^[REMOVE] ^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^GraphNode<N, E> node = i.hasNext (  ) ;^155^^^^^132^168^[REPLACE] GraphNode<N, E> node = i.next (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^Color color = new Color ( result ) ;^152^^^^^132^168^[REPLACE] Color color = new Color ( count ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^SubGraph<N, E> subgraph = graph.getWeight (  ) ;^153^^^^^132^168^[REPLACE] SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^for  ( Iterator<GraphNode<N, E>> i = null.iterator (  ) ; i.hasNext (  ) ; )  {^154^^^^^132^168^[REPLACE] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^154^155^156^157^158^132^168^[ADD] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  { GraphNode<N, E> node = i.next (  ) ; if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^GraphNode<N, E> node = false.next (  ) ;^155^^^^^132^168^[REPLACE] GraphNode<N, E> node = i.next (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^165^^^^^132^168^[REPLACE] N[] map =  ( N[] )  new Object[count];^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^colorToNodeMap = map;^165^166^^^^132^168^[ADD] N[] map =  ( N[] )  new Object[count]; colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap =  null;^166^^^^^132^168^[REPLACE] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[ADD]^^166^^^^^132^168^[ADD] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^167^^^^^132^168^[REPLACE] return count;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  <=  graph.getWeight ( null.getValue (  )  ) ;^140^141^^^^139^144^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  GraphNode o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^return   tieBreaker ;^142^143^^^^139^144^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] GraphColoring Color GreedyGraphColoring 1   [TYPE]  N[] colorToNodeMap  map  [TYPE]  GraphNode o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^int value  = null ;^90^^^^^^^[REPLACE] int value = 0;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] Color   [TYPE]  N[] colorToNodeMap  map  [TYPE]  GraphNode o1  o2  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true  [TYPE]  int count  result  value  [TYPE]  Comparator tieBreaker 
[REPLACE]^this.value =  null;^93^^^^^92^94^[REPLACE] this.value = value;^[METHOD] <init> [TYPE] GraphColoring$Color(int) [PARAMETER] int value [CLASS] Color   [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! ! ( other instanceof Color )  )  {^98^^^^^97^103^[REPLACE] if  ( ! ( other instanceof Color )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Color   [TYPE]  int value  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^return true ;^101^^^^^97^103^[REPLACE] return value ==  (  ( Color )  other ) .value;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Color   [TYPE]  int value  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^return true;^99^^^^^97^103^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Color   [TYPE]  int value  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^return value  !=   (  ( Color )  other ) .value;;^101^^^^^97^103^[REPLACE] return value ==  (  ( Color )  other ) .value;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Color   [TYPE]  int value  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^return false;^107^^^^^106^108^[REPLACE] return value;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] Color   [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^private  Comparator<N> tieBreaker;^116^^^^^^^[REPLACE] private final Comparator<N> tieBreaker;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^this ( graph, this ) ;^118^^^^^117^119^[REPLACE] this ( graph, null ) ;^[METHOD] <init> [TYPE] AdjacencyGraph) [PARAMETER] AdjacencyGraph<N, E> graph [CLASS] GreedyGraphColoring 1   [TYPE]  Comparator tieBreaker  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true 
[REPLACE]^super ( null ) ;^127^^^^^125^129^[REPLACE] super ( graph ) ;^[METHOD] <init> [TYPE] Comparator) [PARAMETER] AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [CLASS] GreedyGraphColoring 1   [TYPE]  Comparator tieBreaker  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true 
[REPLACE]^this.tieBreaker =  null;^128^^^^^125^129^[REPLACE] this.tieBreaker = tieBreaker;^[METHOD] <init> [TYPE] Comparator) [PARAMETER] AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [CLASS] GreedyGraphColoring 1   [TYPE]  Comparator tieBreaker  [TYPE]  AdjacencyGraph graph  [TYPE]  boolean false  true 
[REPLACE]^graph .getNodes (  )  ;^133^^^^^132^168^[REPLACE] graph.clearNodeAnnotations (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^List<GraphNode<N, E>> worklist = graph.getWeight (  ) ;^134^^^^^132^168^[REPLACE] List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^134^^^^^132^168^[ADD] List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^142^143^^^^132^168^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  |  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^132^168^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^worklist =  Lists.newLinkedList ( this ) ;^146^^^^^132^168^[REPLACE] worklist = Lists.newLinkedList ( worklist ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int count = 3;^150^^^^^132^168^[REPLACE] int count = 0;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( this.isIndependentOf ( node.getValue (  )  )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( true.getValue (  )  ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph.addNode ( null .setAnnotation ( color )   ) ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^157^^^^^132^168^[ADD] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^node .getValue (  )  ;^158^^^^^132^168^[REPLACE] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^158^^^^^132^168^[ADD] node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^i.next (  ) ;^159^^^^^132^168^[REPLACE] i.remove (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^for  ( Iterator<GraphNode<N, E>> i = worklist.isEmpty (  ) ; i.hasNext (  ) ; )  {^154^^^^^132^168^[REPLACE] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^if  ( subgraph.isIndependentOf ( this.getValue (  )  )  )  {^156^^^^^132^168^[REPLACE] if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^subgraph .isIndependentOf (  )  ;^157^^^^^132^168^[REPLACE] subgraph.addNode ( node.getValue (  )  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REMOVE]^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^157^^^^^132^168^[REMOVE] ^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^GraphNode<N, E> node = null.hasNext (  ) ;^155^^^^^132^168^[REPLACE] GraphNode<N, E> node = i.next (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^Color color = new Color ( result ) ;^152^^^^^132^168^[REPLACE] Color color = new Color ( count ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^SubGraph<N, E> subgraph = graph.getWeight (  ) ;^153^^^^^132^168^[REPLACE] SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^for  ( Iterator<GraphNode<N, E>> i = null.isEmpty (  ) ; i.hasNext (  ) ; )  {^154^^^^^132^168^[REPLACE] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^154^155^156^157^158^132^168^[ADD] for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  { GraphNode<N, E> node = i.next (  ) ; if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^165^^^^^132^168^[REPLACE] N[] map =  ( N[] )  new Object[count];^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^colorToNodeMap =  null;^166^^^^^132^168^[REPLACE] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[ADD]^^166^^^^^132^168^[ADD] colorToNodeMap = map;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result;^167^^^^^132^168^[REPLACE] return count;^[METHOD] color [TYPE] int [PARAMETER] [CLASS] GreedyGraphColoring 1   [TYPE]  N[] map  [TYPE]  boolean false  true  [TYPE]  Color color  [TYPE]  Iterator i  [TYPE]  List worklist  [TYPE]  GraphNode node  o1  o2  [TYPE]  SubGraph subgraph  [TYPE]  int count  result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  ^  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] GreedyGraphColoring 1   [TYPE]  GraphNode o1  o2  [TYPE]  boolean false  true  [TYPE]  int result  [TYPE]  Comparator tieBreaker 
[REPLACE]^return result == 0 && tieBreaker != null ? tieBreaker .compare ( this , null )   )  : result;^142^143^^^^139^144^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] GreedyGraphColoring 1   [TYPE]  GraphNode o1  o2  [TYPE]  boolean false  true  [TYPE]  int result  [TYPE]  Comparator tieBreaker 
[REPLACE]^int result = graph.getWeight ( o2.getValue (  )  )  >=  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^[REPLACE] int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  GraphNode o1  o2  [TYPE]  int result 
[REPLACE]^return result;^142^143^^^^139^144^[REPLACE] return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[METHOD] compare [TYPE] int [PARAMETER] GraphNode<N, E> o1 GraphNode<N, E> o2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  GraphNode o1  o2  [TYPE]  int result 
