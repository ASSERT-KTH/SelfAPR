[REPLACE]^protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes ;^41^42^^^^41^42^[REPLACE] protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes = Maps.newHashMap (  ) ;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^protected List<DiGraphEdge<N, E>> inEdgeList  = null ;^337^^^^^^^[REPLACE] protected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList (  ) ;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^protected List<DiGraphEdge<N, E>> outEdgeList ;^338^339^^^^338^339^[REPLACE] protected List<DiGraphEdge<N, E>> outEdgeList = Lists.newArrayList (  ) ;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^protected  N value;^341^^^^^^^[REPLACE] protected final N value;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^private  int totalNodes = 0;^347^^^^^^^[REPLACE] private static int totalNodes = 0;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^private final Iterator<DiGraphEdge<N, E>> in  = null ;^411^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^private final Iterator<DiGraphEdge<N, E>> out  = null ;^412^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^ [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  
[REPLACE]^DiGraphNode<N, E> dNode1 = nodes.get ( n1 )  ;^50^^^^^49^67^[REPLACE] DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( 0 != null )  {^51^^^^^49^67^[REPLACE] if  ( node == null )  {^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^52^53^^^^49^67^[REPLACE] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^52^53^^^^49^67^[ADD] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^LinkedDirectedGraphNode<N, E> dest =  (  ( LinkedDirectedGraphNode<N, E> )   ( node )  )  ;^55^^^^^49^67^[REPLACE] LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^56^^^^^49^67^[ADD] node = getDirectedGraphNode ( destValue ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( null != true )  {^57^^^^^49^67^[REPLACE] if  ( node == null )  {^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^57^58^59^60^^49^67^[ADD] if  ( node == null )  { throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ; }^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^58^59^^^^49^67^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^LinkedDirectedGraphNode<N, E> src =  (  ( LinkedDirectedGraphNode<N, E> )   ( node )  )  ;^61^^^^^49^67^[REPLACE] LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( this, edgeValue, dest ) ;^62^63^^^^49^67^[REPLACE] LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.getOutEdges (  ) .remove ( edge )  ;^64^^^^^49^67^[REPLACE] src.getOutEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.getInEdges (  ) .add ( edge ) ;^64^^^^^49^67^[REPLACE] src.getOutEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REMOVE]^node.getOutEdges (  )  ;^64^^^^^49^67^[REMOVE] ^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^dest.getOutEdges (  ) .add ( edge ) ;^65^^^^^49^67^[REPLACE] dest.getInEdges (  ) .add ( edge ) ;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REMOVE]^node.getOutEdges (  )  ;^65^^^^^49^67^[REMOVE] ^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return false;^66^^^^^49^67^[REPLACE] return edge;^[METHOD] connect [TYPE] GraphEdge [PARAMETER] N srcValue E edgeValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphEdge edge  [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^77^^^^^76^93^[ADD] DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if  ( node != false )  {^78^^^^^76^93^[REPLACE] if  ( node == null )  {^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^79^80^^^^76^93^[REPLACE] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^79^80^^^^76^93^[ADD] throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^LinkedDirectedGraphNode<N, E> dest =  (  ( LinkedDirectedGraphNode<N, E> )   ( node )  )  ;^82^^^^^76^93^[REPLACE] LinkedDirectedGraphNode<N, E> src =  ( LinkedDirectedGraphNode<N, E> )  node;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^node =  getDirectedGraphNode ( value ) ;^83^^^^^76^93^[REPLACE] node = getDirectedGraphNode ( destValue ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^if   (  dNode == null  )   {  ;^84^^^^^76^93^[REPLACE] if  ( node == null )  {^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^return ;^85^86^^^^76^93^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^throw new IllegalArgumentException (  ( nodeValue + " does not exist in graph" )  )  ;^85^86^^^^76^93^[REPLACE] throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^88^^^^^76^93^[ADD] LinkedDirectedGraphNode<N, E> dest =  ( LinkedDirectedGraphNode<N, E> )  node;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^89^90^91^92^^76^93^[ADD] for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  { src.getOutEdges (  ) .remove ( edge ) ; dest.getInEdges (  ) .remove ( edge ) ; }^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src.getOutEdges (  ) .add ( edge ) ;^90^^^^^76^93^[REPLACE] src.getOutEdges (  ) .remove ( edge ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^src .getOutEdges (  )  .remove ( edge ) ;^90^^^^^76^93^[REPLACE] src.getOutEdges (  ) .remove ( edge ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^dest.getInEdges (  ) .remove ( true ) ;^91^^^^^76^93^[REPLACE] dest.getInEdges (  ) .remove ( edge ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[ADD]^^91^^^^^76^93^[ADD] dest.getInEdges (  ) .remove ( edge ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^dest.getOutEdges (  ) .remove ( edge ) ;^91^^^^^76^93^[REPLACE] dest.getInEdges (  ) .remove ( edge ) ;^[METHOD] disconnectInDirection [TYPE] void [PARAMETER] N srcValue N destValue [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  LinkedDirectedGraphNode dest  src  [TYPE]  DiGraphNode destNode  node  sourceNode  [TYPE]  DiGraphEdge edge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes 
[REPLACE]^DiGraphNode<N, E> dNode1 = nodes.get ( nodeValue ) ;^171^^^^^170^186^[REPLACE] DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( null != true )  {^172^^^^^170^186^[REPLACE] if  ( dNode1 == null )  {^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[ADD]^^172^173^174^^^170^186^[ADD] if  ( dNode1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  )  ;^173^^^^^170^186^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[ADD]^^173^^^^^170^186^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^DiGraphNode<N, E> dNode2 = nodes.get ( nodeValue ) ;^175^^^^^170^186^[REPLACE] DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( dNode2 != false )  {^176^^^^^170^186^[REPLACE] if  ( dNode2 == null )  {^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[ADD]^^177^^^^^170^186^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^DiGraphNode<N, E>> nodeList = newArrayList (  )  ;^179^^^^^170^186^[REPLACE] List<DiGraphEdge<N, E>> edges = Lists.newArrayList (  ) ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( outEdge.getDestination (  )   !=  dNode2 )  {^181^^^^^170^186^[REPLACE] if  ( outEdge.getDestination (  )  == dNode2 )  {^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^edges .addAll ( this )  ;^182^^^^^170^186^[REPLACE] edges.add ( outEdge ) ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[ADD]^^180^181^182^183^^170^186^[ADD] for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  { if  ( outEdge.getDestination (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[ADD]^^181^182^183^^^170^186^[ADD] if  ( outEdge.getDestination (  )  == dNode2 )  { edges.add ( outEdge ) ; }^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^edges.remove ( outEdge ) ;^182^^^^^170^186^[REPLACE] edges.add ( outEdge ) ;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return edge;  ;^185^^^^^170^186^[REPLACE] return edges;^[METHOD] getDirectedGraphEdges [TYPE] List [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^DiGraphNode<N, E> dNode1 = nodes.get ( nodeValue ) ;^191^^^^^189^207^[REPLACE] DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( dNode1 != null )  {^192^^^^^189^207^[REPLACE] if  ( dNode1 == null )  {^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^throw new IllegalArgumentException (  ( destValue + " does not exist in graph" )  )  ;^193^^^^^189^207^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return ;^193^^^^^189^207^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^DiGraphNode<N, E> dNode2 = nodes.get ( nodeValue ) ;^195^^^^^189^207^[REPLACE] DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( true != null )  {^196^^^^^189^207^[REPLACE] if  ( dNode2 == null )  {^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return ;^197^^^^^189^207^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( outEdge.getDestination (  )   !=  this )  {^201^^^^^189^207^[REPLACE] if  ( outEdge.getDestination (  )  == dNode2 )  {^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return true;  ;^202^^^^^189^207^[REPLACE] return true;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^if  ( outEdge .getSource (  )    &&  dNode2 )  {^201^^^^^189^207^[REPLACE] if  ( outEdge.getDestination (  )  == dNode2 )  {^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return false;^202^^^^^189^207^[REPLACE] return true;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^DiGraphNode<N, E> node  ;^200^^^^^189^207^[REPLACE] for  ( DiGraphEdge<N, E> outEdge : dNode1.getOutEdges (  )  )  {^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^return true;^206^^^^^189^207^[REPLACE] return false;^[METHOD] isConnectedInDirection [TYPE] boolean [PARAMETER] N n1 N n2 [CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [TYPE]  DiGraphNode dNode1  dNode2  destNode  node  sourceNode  [TYPE]  DiGraphEdge outEdge  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^protected List<DiGraphEdge<N, E>> inEdgeList ;^337^^^^^^^[REPLACE] protected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList (  ) ;^[METHOD] getNodeB [TYPE] GraphNode [PARAMETER] [CLASS] LinkedDirectedGraphNode NeighborIterator   [TYPE]  DiGraphNode dNode  dNode1  dNode2  destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator curIterator  i  in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^private List<DiGraphEdge<N, E>> outEdgeList = Lists.newArrayList (  ) ;^338^339^^^^338^339^[REPLACE] protected List<DiGraphEdge<N, E>> outEdgeList = Lists.newArrayList (  ) ;^[METHOD] getNodeB [TYPE] GraphNode [PARAMETER] [CLASS] LinkedDirectedGraphNode NeighborIterator   [TYPE]  DiGraphNode dNode  dNode1  dNode2  destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator curIterator  i  in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^private static int totalNodes ;^347^^^^^^^[REPLACE] private static int totalNodes = 0;^[METHOD] getNodeB [TYPE] GraphNode [PARAMETER] [CLASS] LinkedDirectedGraphNode NeighborIterator   [TYPE]  DiGraphNode dNode  dNode1  dNode2  destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator curIterator  i  in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^private  Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^411^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[METHOD] getNodeB [TYPE] GraphNode [PARAMETER] [CLASS] LinkedDirectedGraphNode NeighborIterator   [TYPE]  DiGraphNode dNode  dNode1  dNode2  destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator curIterator  i  in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^private final Iterator<DiGraphEdge<N, E>> out ;^412^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[METHOD] getNodeB [TYPE] GraphNode [PARAMETER] [CLASS] LinkedDirectedGraphNode NeighborIterator   [TYPE]  DiGraphNode dNode  dNode1  dNode2  destNode  node  sourceNode  [TYPE]  boolean false  true  [TYPE]  E edgeValue  value  [TYPE]  Iterator curIterator  i  in  out  [TYPE]  List backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  [TYPE]  Map nodes  [TYPE]  N destValue  n1  n2  nodeValue  srcValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes  totalSize 
[REPLACE]^private final Iterator<DiGraphEdge<N, E>> in ;^411^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NeighborIterator   [TYPE]  Iterator curIterator  in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  boolean false  true  [TYPE]  N nodeValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
[REPLACE]^private final Iterator<DiGraphEdge<N, E>> out ;^412^^^^^^^[REPLACE] private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NeighborIterator   [TYPE]  Iterator curIterator  in  out  [TYPE]  List inEdgeList  outEdgeList  [TYPE]  boolean false  true  [TYPE]  N nodeValue  value  [TYPE]  Annotation annotation  data  [TYPE]  int id  totalNodes 
[REPLACE]^protected  E value;^445^^^^^^^[REPLACE] protected final E value;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] LinkedDirectedGraphEdge   [TYPE]  Iterator curIterator  in  out  [TYPE]  boolean false  true 
