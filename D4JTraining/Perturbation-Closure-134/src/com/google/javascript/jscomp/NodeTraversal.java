[REPLACE]^private  AbstractCompiler compiler;^41^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  Callback callback;^42^^^^^^^[REPLACE] private final Callback callback;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^public static  DiagnosticType NODE_TRAVERSAL_ERROR = DiagnosticType.error ( "JSC_NODE_TRAVERSAL_ERROR", "{0}" ) ;^47^48^^^^47^48^[REPLACE] public static final DiagnosticType NODE_TRAVERSAL_ERROR = DiagnosticType.error ( "JSC_NODE_TRAVERSAL_ERROR", "{0}" ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private final Deque<Scope> scopes ;^55^^^^^^^[REPLACE] private final Deque<Scope> scopes = new ArrayDeque<Scope> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  Deque<Node> scopeRoots = new ArrayDeque<Node> (  ) ;^61^^^^^^^[REPLACE] private final Deque<Node> scopeRoots = new ArrayDeque<Node> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^Deque<ControlFlowGraph<Node>> cfgs ;^70^^^^^^^[REPLACE] Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  boolean include;^169^^^^^^^[REPLACE] private final boolean include;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private static final  short  MISSING_SOURCE = "[source unknown]";^288^^^^^^^[REPLACE] private static final String MISSING_SOURCE = "[source unknown]";^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[ADD]^^221^^^^^218^235^[ADD] String message = unexpectedException.getMessage (  ) ;^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^if  ( sourceName.isEmpty (  )  )  {^226^^^^^218^235^[REPLACE] if  ( !sourceName.isEmpty (  )  )  {^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^226^227^228^229^230^218^235^[ADD] if  ( !sourceName.isEmpty (  )  )  { message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode != null ?^227^228^229^230^^218^235^[REPLACE] message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^compiler .report ( n , NODE_TRAVERSAL_ERROR , null )  ;^234^^^^^218^235^[REPLACE] compiler.throwInternalError ( message, unexpectedException ) ;^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^if  ( null.isEmpty (  )  )  {^265^^^^^264^286^[REPLACE] if  ( roots.isEmpty (  )  )  {^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^265^266^267^^^264^286^[ADD] if  ( roots.isEmpty (  )  )  { return; }^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^return;  ;^266^^^^^264^286^[REPLACE] return;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;Preconditions.checkState ( scopeRoot != null ) ;sourceName = "";^269^270^271^^273^269^283^[ADD] try { Node scopeRoot = roots.get ( 0 ) .getParent (  ) ; Preconditions.checkState ( scopeRoot != null ) ; sourceName = "";^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^this.sourceName = ""  ;^273^^^^^269^283^[REPLACE] sourceName = "";^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^274^^^^^269^283^[ADD] curNode = scopeRoot;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^270^^^^^269^283^[ADD] Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^277^278^279^280^^269^283^[ADD] for  ( Node root : roots )  { Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ; traverseBranch ( root, scopeRoot ) ; }^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^325^^^^^324^342^[ADD] Node n = s.getRootNode (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( n.getType (  )   &&  Token.FUNCTION )  {^326^^^^^324^342^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^checkState (  ( scopeRoot != null )  )  ;^340^^^^^326^341^[REPLACE] traverseWithScope ( n, s ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^sourceName =  getSourceName ( null ) ;^329^^^^^324^342^[REPLACE] sourceName = getSourceName ( n ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^330^^^^^324^342^[ADD] curNode = n;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^333^^^^^324^342^[ADD] Node args = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node body = scopeRoot.getNext (  ) ;^334^^^^^324^342^[REPLACE] Node body = args.getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = root  ;^330^^^^^324^342^[REPLACE] curNode = n;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node args = parent.getFirstChild (  ) .getNext (  ) ;^333^^^^^324^342^[REPLACE] Node args = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^334^335^^^^324^342^[ADD] Node body = args.getNext (  ) ; traverseBranch ( args, n ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^int type = parent.getType (  ) ;^443^^^^^442^478^[REPLACE] int type = n.getType (  ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( type  !=  Token.SCRIPT )  {^444^^^^^442^478^[REPLACE] if  ( type == Token.SCRIPT )  {^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^sourceName =  getSourceName ( parent ) ;^445^^^^^442^478^[REPLACE] sourceName = getSourceName ( n ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[ADD]^^445^^^^^442^478^[ADD] sourceName = getSourceName ( n ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^curNode = root  ;^448^^^^^442^478^[REPLACE] curNode = n;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( !callback .shouldTraverse ( true , node , root )   )  return;^449^^^^^442^478^[REPLACE] if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[ADD]^^449^450^451^452^453^442^478^[ADD] if  ( !callback.shouldTraverse ( this, n, parent )  )  return;  switch  ( type )  { case Token.CATCH: Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( !callback.shouldTraverse ( null, n, parent )  )  return;^449^^^^^442^478^[REPLACE] if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^child =  scopeRoot;^471^^^^^442^478^[REPLACE] child = next;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^final Node fnName = n.getFirstChild (  )  ;^466^^^^^442^478^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^Node child = n.getFirstChild (  )  ;^469^^^^^442^478^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^curNode = root  ;^476^^^^^442^478^[REPLACE] curNode = n;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^callback.visit ( this, node, parent ) ;^477^^^^^442^478^[REPLACE] callback.visit ( this, n, parent ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^checkState (  ( scopeRoot != null )  )  ;^484^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REMOVE]^checkState (  ( scopeRoot != null )  )  ;^484^^^^^483^516^[REMOVE] ^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( parent.getChildCount (  )  == 3 ) ;^484^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^484^485^^^^483^516^[ADD] Preconditions.checkState ( n.getChildCount (  )  == 3 ) ; Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( n.getType (  )   ||  Token.FUNCTION ) ;^485^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^485^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^final Node fnName = parent.getType (  ) ;^487^^^^^483^516^[REPLACE] final Node fnName = n.getFirstChild (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^boolean anonymous = parent != null  |  NodeUtil.isStatementBlock ( n ) ;^489^^^^^483^516^[REPLACE] boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( anonymous )  {^491^^^^^483^516^[REPLACE] if  ( !anonymous )  {^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( node, n ) ;^493^^^^^483^516^[REPLACE] traverseBranch ( fnName, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = root  ;^496^^^^^483^516^[REPLACE] curNode = n;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^pushScope ( parent ) ;^497^^^^^483^516^[REPLACE] pushScope ( n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( true )  {^499^^^^^483^516^[REPLACE] if  ( anonymous )  {^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( node, n ) ;^501^^^^^483^516^[REPLACE] traverseBranch ( fnName, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^504^^^^^483^516^[ADD] final Node args = fnName.getNext (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^final Node fnName = n.getFirstChild (  )  ;^505^^^^^483^516^[REPLACE] final Node body = args.getNext (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( node, parent )  ;^508^^^^^483^516^[REPLACE] traverseBranch ( args, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( body.getNext (  )  == null ;^511^512^^^^483^516^[REPLACE] Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( scopeRoot.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^511^512^^^^483^516^[REPLACE] Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^( parent.getType (  )  )  ;^512^^^^^483^516^[REPLACE] body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^512^^^^^483^516^[ADD] body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( body, parent ) ;^513^^^^^483^516^[REPLACE] traverseBranch ( body, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^pushScope ( s )  ;^515^^^^^483^516^[REPLACE] popScope (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^private  Set<Integer> nodeTypes;^168^^^^^^^[REPLACE] private final Set<Integer> nodeTypes;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractNodeTypePruningCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
