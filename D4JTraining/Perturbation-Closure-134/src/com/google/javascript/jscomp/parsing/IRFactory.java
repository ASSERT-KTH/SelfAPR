[REPLACE]^private static int TMP_JSDOC_PROP ;^85^^^^^^^[REPLACE] private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private final  byte  source byte ;^87^^^^^^^[REPLACE] private final String sourceString;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  Config config;^89^^^^^^^[REPLACE] private final Config config;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  JSTypeRegistry registry;^90^^^^^^^[REPLACE] private final JSTypeRegistry registry;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  ErrorReporter errorReporter;^91^^^^^^^[REPLACE] private final ErrorReporter errorReporter;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private final Set<String> ALLOWED_DIRECTIVES ;^95^^^^^^^[REPLACE] private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^IRFactory irFactory = new IRFactory ( sourceString, node.getComments (  ) , config, errorReporter ) ;^113^114^^^^112^156^[REPLACE] IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node ret = transform ( n )  ;^115^^^^^112^156^[REPLACE] Node irNode = irFactory.transform ( node ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode .getJSDocInfo (  )  ;^118^119^^^^112^156^[REPLACE] Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode.getJsDocBuilderForNode (  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo fileOverviewInfo = true;^124^^^^^112^156^[REPLACE] JSDocInfo fileOverviewInfo = null;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( node.getComments (  )  == null )  {^125^^^^^112^156^[REPLACE] if  ( node.getComments (  )  != null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( comment.getCommentType (  )  == JSDOC ) {^127^128^129^130^^112^156^[REPLACE] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^127^128^129^130^131^112^156^[ADD] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  { JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) ,^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^127^137^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo =  null;^135^^^^^127^137^[REPLACE] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , null, fileOverviewInfo ) ;^131^132^133^^^127^137^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( info != null ) {^134^^^^^112^156^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^135^^^^^112^156^[ADD] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( fileOverviewInfo == null )  {^143^^^^^112^156^[REPLACE] if  ( fileOverviewInfo != null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode.getJSDocInfo (  )  == true )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != true )  )  {^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  )  .getLineno (  )   ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( info )  .getLicense (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REMOVE]^exprNode.getRight (  )  ;^146^^^^^144^147^[REMOVE] ^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^( node.getJsDoc (  )  )  ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode.getJSDocInfo (  )  == null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode.getString (  ) .getLicense (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^146^^^^^144^147^[ADD] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^126^127^128^129^^125^154^[ADD] for  ( Comment comment : node.getComments (  )  )  { if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  ||^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( comment.getCommentType (  )  == JSDOC || ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^125^154^[REPLACE] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^127^128^129^130^131^125^154^[ADD] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  { JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) ,^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getLineno (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^125^154^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo =  null;^135^^^^^125^154^[REPLACE] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory .parseJSDocInfo ( sourceString , TMP_JSDOC_PROP , TMP_JSDOC_PROP , fileLevelJsDocBuilder , fileOverviewInfo )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^125^154^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^152^^^^^125^154^[ADD] comments = node.getComments (  ) .toArray ( comments ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^131^132^133^^^125^154^[ADD] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Comment[] comments = new Comment[node.getComments (  ) .contains (  ) ];^151^^^^^125^154^[REPLACE] Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( comment.getCommentType (  )  == JSDOC || ( comment.getLineno (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^156^[REPLACE] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^fileOverviewInfo = info;^134^135^136^^^127^137^[ADD] if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^131^132^133^^^127^137^[ADD] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^112^156^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo =  null;^135^^^^^112^156^[REPLACE] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode .setJSDocInfo ( fileOverviewInfo )   == null )  && ( irNode^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^( irNode.getJSDocInfo (  ) .getLicense (  )  )  ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( fileOverviewInfo )  .getLicense (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^144^145^146^147^^112^156^[ADD] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( comment.getCommentType (  )  == JSDOC ) {^127^128^129^130^^125^154^[REPLACE] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^135^^^^^127^137^[ADD] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getCommentType (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^127^137^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^comments =  null.getComments (  ) .toArray ( comments ) ;^152^^^^^125^154^[REPLACE] comments = node.getComments (  ) .toArray ( comments ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^CatchClause cc  ;^126^^^^^125^154^[REPLACE] for  ( Comment comment : node.getComments (  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment .getCommentType (  )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^125^154^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Comment[] comments = new Comment[node.getSourceName (  ) .size (  ) ];^151^^^^^125^154^[REPLACE] Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^return newNode;  ;^155^^^^^112^156^[REPLACE] return irNode;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node ret = transform ( n )  ;^159^^^^^158^180^[REPLACE] Node irNode = justTransform ( node ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode.getType (  )  == Token.FUNCTION || irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^[REPLACE] if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode.getLineno (  )   &&  -1 )  {^166^^^^^161^175^[REPLACE] if  ( irNode.getLineno (  )  == -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int lineno = node .getCommentType (  )  ;^170^^^^^161^175^[REPLACE] int lineno = node.getLineno (  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^172^^^^^161^175^[REPLACE] int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setLineno ( irNode.removeFirstChild (  ) .getLineno (  )  ) ;^163^^^^^161^175^[REPLACE] irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setLineno ( irNode .removeFirstChild (  )  .getLineno (  )  ) ;^163^^^^^161^175^[REPLACE] irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setCharno ( irNode.getFirstChild (  )  .getLineno (  )   ) ;^164^^^^^161^175^[REPLACE] irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setCharno ( irNode.getFirstChild (  ) .contains (  )  ) ;^164^^^^^161^175^[REPLACE] irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setCharno ( irNode.removeFirstChild (  ) .getCharno (  )  ) ;^164^^^^^161^175^[REPLACE] irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode.getLineno (  )   &&  -1 )  {^166^^^^^158^180^[REPLACE] if  ( irNode.getLineno (  )  == -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REMOVE]^if  (  (  ( irNode.getType (  )  )  ==  ( FUNCTION )  )  &&  (  ( irNode.getFirstChild (  ) .getLineno (  )  )  !=  ( -1 )  )  )  {     irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;     irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ; }else {     if  (  ( irNode.getLineno (  )  )  ==  ( -1 )  )  {         int lineno = node.getLineno (  ) ;         irNode.setLineno ( lineno ) ;         int charno = position2charno ( node.getAbsolutePosition (  )  ) ;         irNode.setCharno ( charno ) ;     } }^166^^^^^158^180^[REMOVE] ^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int lineno = node.getType (  ) ;^170^^^^^158^180^[REPLACE] int lineno = node.getLineno (  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int charno = position2charno ( node.getLineno (  )  ) ;^172^^^^^158^180^[REPLACE] int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if   (  node.getComments  (    )   != null  )   {  ;^176^^^^^158^180^[REPLACE] if  ( node.getJsDoc (  )  != null )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.putProp ( TMP_JSDOC_PROP, node.getType (  )  ) ;^177^^^^^158^180^[REPLACE] irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REMOVE]^newString ( Token.NAME, labelNode.getName (  )  )  ;^177^^^^^158^180^[REMOVE] ^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^node.getType (  )  ;^177^^^^^158^180^[REPLACE] irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^return newNode;  ;^179^^^^^158^180^[REPLACE] return irNode;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( ci >= comments.length %  0.5  )  {^194^^^^^193^234^[REPLACE] if  ( ci >= comments.length )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^return lineno;^196^^^^^193^234^[REPLACE] return ci;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getProp ( TMP_JSDOC_PROP )  == null )  {^200^^^^^193^234^[REPLACE] if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( info == true && info.hasEnumParameterType (  )  )  {^213^^^^^193^234^[REPLACE] if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getType (  )   ||  Token.NAME )  {^214^^^^^193^234^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^registry.identifyEnumName ( node.getString (  )  ) ;registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^214^215^216^217^218^193^234^[ADD] if  ( node.getType (  )  == Token.NAME )  { registry.identifyEnumName ( node.getString (  )  ) ; } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )  == Token.VAR || node.getChildCount (  )  == 1 )  {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}   registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^216^217^218^219^220^193^234^[ADD] else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getType (  )   &&  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}^219^220^221^^^193^234^[ADD] else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.removeFirstChild (  ) .getQualifiedName (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node .removeFirstChild (  )  .getQualifiedName (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.removeFirstChild (  ) .getString (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node .removeFirstChild (  )  .getString (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  else {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  ) .equals (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.newString (  )  ) ;^215^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  else {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )   ||  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  ) .contains (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  )  .newString (  )   ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^218^219^220^221^^216^221^[ADD] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  )  .getLicense (  )   ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^220^221^^^^193^234^[ADD] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^214^^^^^193^234^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getProp (  )   !=  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}   registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^219^220^221^^^193^234^[ADD] else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getType (  )   ||  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )   ) {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getType (  )   ) {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^String jsDoc =  ( String )  node .putProp ( lineno )  ;^201^^^^^193^234^[REPLACE] String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^210^211^^^^193^234^[ADD] JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( info == null && info.hasEnumParameterType (  )  )  {^213^^^^^193^234^[REPLACE] if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^213^214^215^216^^193^234^[ADD] if  ( info != null && info.hasEnumParameterType (  )  )  { if  ( node.getType (  )  == Token.NAME )  { registry.identifyEnumName ( node.getString (  )  ) ; } else if  ( node.getType (  )  == Token.VAR &&^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getType (  )   ) {^214^^^^^193^234^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^215^216^217^218^^193^234^[ADD] registry.identifyEnumName ( node.getString (  )  ) ; } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if   (  ret.getType  (    )   == Token.NAME  )   {  ;^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^String jsDoc =  ( String )  node.putProp ( TMP_JSDOC_PROP ) ;^201^^^^^193^234^[REPLACE] String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLicense (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^193^234^[REPLACE] JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^for  ( Node child : node.setLineno (  )  )  {^229^^^^^193^234^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^230^^^^^193^234^[ADD] ci = parseAllJsDocInfo ( child, comments, ci ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^ci =  parseAllJsDocInfo ( null, comments, ci ) ;^230^^^^^193^234^[REPLACE] ci = parseAllJsDocInfo ( child, comments, ci ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^229^230^231^^^193^234^[ADD] for  ( Node child : node.children (  )  )  { ci = parseAllJsDocInfo ( child, comments, ci ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^return ci;  ;^233^^^^^193^234^[REPLACE] return ci;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^int numOpeningChars = 5;^263^^^^^261^280^[REPLACE] int numOpeningChars = 3;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.valueOf ( numOpeningChars ) , lineno,^264^265^266^267^^261^280^[REPLACE] JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser.setFileLevelJsDocBuilder ( false ) ;^272^^^^^261^280^[REPLACE] jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser.getFileOverviewJSDocInfo (  )  ;^273^^^^^261^280^[REPLACE] jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REMOVE]^jsdocParser.getFileOverviewJSDocInfo (  )  ;^273^^^^^261^280^[REMOVE] ^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser.getFileOverviewJSDocInfo (  ) ;^274^^^^^261^280^[REPLACE] jsdocParser.parse (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[ADD]^^274^^^^^261^280^[ADD] jsdocParser.parse (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^if  ( this == this )  {^275^^^^^261^280^[REPLACE] if  ( fileLevelJsDocBuilder != null )  {^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser.getFileOverviewJSDocInfo (  ) ;^278^^^^^275^279^[REPLACE] return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^276^^^^^261^280^[REPLACE] return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser .setFileOverviewJSDocInfo ( fileOverviewInfo )  ;^276^^^^^261^280^[REPLACE] return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser.getFileOverviewJSDocInfo (  ) ;^278^^^^^261^280^[REPLACE] return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^if   (  isUnnamedFunction  )   {  ;^327^^^^^326^356^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^literalNode.getFlags (  )  ;^328^^^^^326^356^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^331^^^^^326^356^[REPLACE] Node node = new Node ( Token.ARRAYLIT ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int skipCount = 2;^332^^^^^326^356^[REPLACE] int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getType (  )   ) {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( c.getType (  )   ||  Token.EMPTY )  {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node ret = transform ( n )  ;^334^^^^^326^356^[REPLACE] Node c = transform ( child ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^CatchClause cc  ;^333^^^^^326^356^[REPLACE] for  ( AstNode child : literalNode.getElements (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( position  >=  0 )  {^341^^^^^326^356^[REPLACE] if  ( skipCount > 0 )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getType (  )   &&  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^346^347^348^349^350^326^356^[ADD] if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^348^^^^^326^356^[ADD] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^for  ( Node child : node.setLineno (  )  )  {^345^^^^^341^354^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j] ;^348^^^^^341^354^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^342^^^^^341^354^[REPLACE] int[] skipIndexes = new int[skipCount];^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int i = 1;^343^^^^^341^354^[REPLACE] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int i = 0  ;^344^^^^^341^354^[REPLACE] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node prev = null  ;^345^^^^^341^354^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getType (  )   !=  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^for  ( Node child : node .getChildCount (  )   )  {^345^^^^^341^354^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^341^354^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^int j = 0;^343^344^^^^341^354^[ADD] int i = 0; int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^345^346^347^348^349^341^354^[ADD] for  ( Node child : node.children (  )  )  { if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return newNode;  ;^355^^^^^326^356^[REPLACE] return node;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^CatchClause cc  ;^424^^^^^423^440^[REPLACE] AstNode catchVar = clauseNode.getVarName (  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^425^^^^^423^440^[REPLACE] Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^if   (  caseNode.getStatements  (    )   != null  )   {  ;^426^^^^^423^440^[REPLACE] if  ( clauseNode.getCatchCondition (  )  != null )  {^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^429^^^^^426^437^[REPLACE] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar .getCommentType (  )   ) ;^433^434^^^^426^437^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  )  ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^transform ( statementNode.getCondition (  )  )  ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getVarName (  )  )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[ADD]^^427^428^429^^^423^440^[ADD] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ; } else { Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[ADD]^^429^^^^^423^440^[ADD] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[ADD]^^433^434^^^^423^440^[ADD] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getLineno (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[ADD]^^438^439^440^^^423^440^[ADD] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ; return node; }^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REMOVE]^literalNode.getFlags (  )  ;^438^^^^^423^440^[REMOVE] ^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^return catchCondition;^439^^^^^423^440^[REPLACE] return node;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^AstNode catchVar = clauseNode.getVarName (  )  ;^525^^^^^524^575^[REPLACE] Name name = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^526^^^^^524^575^[ADD] Boolean isUnnamedFunction = false;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if  ( name != this  )  {^527^^^^^524^575^[REPLACE] if  ( name == null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^name =  new FunctionNode ( name.getIdentifier (  )  )  ;^528^^^^^524^575^[REPLACE] name = new Name (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^isUnnamedFunction = false;^530^^^^^524^575^[REPLACE] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getLineno (  )  ) ;^532^533^^^^524^575^[REPLACE] Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^literalNode.getFlags (  )  ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^534^^^^^524^575^[ADD] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getFunctionName (  )  ) ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node newName = transform ( fnName ) ;^535^^^^^524^575^[REPLACE] Node newName = transform ( name ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if   (  node.getJsDoc  (    )   != null  )   {  ;^536^^^^^524^575^[REPLACE] if  ( isUnnamedFunction )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^536^537^^539^^524^575^[ADD] if  ( isUnnamedFunction )  {  newName.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^int lpColumn = functionNode.getAbsolutePosition (  )   functionNode.getLp (  ) ;^543^544^^^^524^575^[REPLACE] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.removeChild ( newName ) ;^548^^^^^524^575^[REPLACE] node.addChildToBack ( newName ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^549^^^^^524^575^[REPLACE] Node lp = new Node ( Token.LP ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^AstNode catchVar = clauseNode.getVarName (  )  ;^556^^^^^524^575^[REPLACE] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if  ( fnName == null )  {^557^^^^^524^575^[REPLACE] if  ( fnName != null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^557^558^559^560^561^524^575^[ADD] if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.setLineno ( callNode.getLineno (  )  )  ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setLineno ( functionNode .getCommentType (  )   ) ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setLineno ( fnName.getIdentifier (  )  ) ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^int lparenCharno = functionNode.getLp (  )   functionNode .getCommentType (  )  ;^562^563^^^^524^575^[REPLACE] int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^position2charno ( lparenCharno )  ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setCharno ( position2charno ( skipCount )  ) ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^566^567^568^^^524^575^[ADD] for  ( AstNode param : functionNode.getParams (  )  )  { lp.addChildToBack ( transform ( param )  ) ; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^block.addChildToBack ( transform ( cc )  )  ;^567^^^^^524^575^[REPLACE] lp.addChildToBack ( transform ( param )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^transform ( expr )  ;^567^^^^^524^575^[REPLACE] lp.addChildToBack ( transform ( param )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^CatchClause cc  ;^566^^^^^524^575^[REPLACE] for  ( AstNode param : functionNode.getParams (  )  )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.removeChild ( lp ) ;^569^^^^^524^575^[REPLACE] node.addChildToBack ( lp ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^571^572^573^574^575^524^575^[ADD] Node bodyNode = transform ( functionNode.getBody (  )  ) ; parseDirectives ( bodyNode ) ; node.addChildToBack ( bodyNode ) ; return node; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^parseDirectives ( node )  ;^572^^^^^524^575^[REPLACE] parseDirectives ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node .getChildCount (  )  ;^573^^^^^524^575^[REPLACE] node.addChildToBack ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^573^574^^^^524^575^[ADD] node.addChildToBack ( bodyNode ) ; return node;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^return newNode;  ;^574^^^^^524^575^[REPLACE] return node;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^720^^^^^719^738^[ADD] Node node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^if   (  isUnnamedFunction  )   {  ;^721^^^^^719^738^[REPLACE] if  ( caseNode.isDefault (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^cur = new Node ( LABEL )  ;^725^^^^^721^726^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^AstNode expr = caseNode.getLineno (  ) ;^724^^^^^721^726^[REPLACE] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^cur = new Node ( LABEL )  ;^722^^^^^719^738^[REPLACE] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^722^^^^^719^738^[ADD] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^cur = new Node ( LABEL )  ;^725^^^^^719^738^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^AstNode expr = caseNode.getLineno (  ) ;^724^^^^^719^738^[REPLACE] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^727^^^^^719^738^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^[REPLACE] block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^node.setLineno ( callNode.getLineno (  )  )  ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REMOVE]^literalNode.getFlags (  )  ;^729^^^^^719^738^[REMOVE] ^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.setLineno ( caseNode.getExpression (  )  ) ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^729^^^^^719^738^[ADD] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^position2charno ( node.getAbsolutePosition (  )  )  ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.setCharno ( position2charno ( caseNode .getCommentType (  )   )  ) ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( caseNode.getStatements (  )  == true )  {^731^^^^^719^738^[REPLACE] if  ( caseNode.getStatements (  )  != null )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^731^732^733^734^^719^738^[ADD] if  ( caseNode.getStatements (  )  != null )  { for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^for  ( AstNode child : caseNode.getLineno (  )  )  {^732^^^^^731^735^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^732^733^734^^^731^735^[ADD] for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^for  ( AstNode child : caseNode .getLineno (  )   )  {^732^^^^^731^735^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^node.removeChild ( block ) ;^736^^^^^719^738^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^return block;^737^^^^^719^738^[REPLACE] return node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^758^^^^^757^786^[REPLACE] Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^759^^^^^757^786^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^boolean lineSet = true;^760^^^^^757^786^[REPLACE] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  (   false )  {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^lineSet = false;^767^^^^^757^786^[REPLACE] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( lineSet  &&  false )  {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^^767^^^^^757^786^[ADD] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode catchVar = clauseNode.getVarName (  )  ;^762^^^^^757^786^[REPLACE] for  ( CatchClause cc : statementNode.getCatchClauses (  )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.removeChild ( block ) ;^771^^^^^757^786^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^^773^^^^^757^786^[ADD] AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( finallyBlock == null )  {^774^^^^^757^786^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^node.addChildToBack ( transform ( finallyBlock )  ) ;^774^775^776^^^757^786^[ADD] if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.setCharno ( transform ( finallyBlock )  ) ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REMOVE]^node.addChildToBack ( c )  ;^775^^^^^757^786^[REMOVE] ^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^literalNode.getFlags (  )  ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  (  ( lineSet != false )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^[REPLACE] if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^block .getLineno (  )  ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.setLineno ( finallyBlock.getType (  )  ) ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REMOVE]^literalNode.getFlags (  )  ;^782^^^^^757^786^[REMOVE] ^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^return block;^785^^^^^757^786^[REPLACE] return node;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^return new Node  (  Token.FOR,  ;^855^^^^^852^1164^[REPLACE] return Token.ERROR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^857^^^^^852^1164^[REPLACE] return Token.EOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^859^^^^^852^1164^[REPLACE] return Token.EOL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^861^^^^^852^1164^[REPLACE] return Token.ENTERWITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^863^^^^^852^1164^[REPLACE] return Token.LEAVEWITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^865^^^^^852^1164^[REPLACE] return Token.RETURN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^867^^^^^852^1164^[REPLACE] return Token.GOTO;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^869^^^^^852^1164^[REPLACE] return Token.IFEQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^871^^^^^852^1164^[REPLACE] return Token.IFNE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^873^^^^^852^1164^[REPLACE] return Token.SETNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^875^^^^^852^1164^[REPLACE] return Token.BITOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^877^^^^^852^1164^[REPLACE] return Token.BITXOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^879^^^^^852^1164^[REPLACE] return Token.BITAND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^881^^^^^852^1164^[REPLACE] return Token.EQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^883^^^^^852^1164^[REPLACE] return Token.NE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^885^^^^^852^1164^[REPLACE] return Token.LT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^887^^^^^852^1164^[REPLACE] return Token.LE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^889^^^^^852^1164^[REPLACE] return Token.GT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^891^^^^^852^1164^[REPLACE] return Token.GE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^893^^^^^852^1164^[REPLACE] return Token.LSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^895^^^^^852^1164^[REPLACE] return Token.RSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^897^^^^^852^1164^[REPLACE] return Token.URSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^899^^^^^852^1164^[REPLACE] return Token.ADD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^901^^^^^852^1164^[REPLACE] return Token.SUB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^903^^^^^852^1164^[REPLACE] return Token.MUL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^905^^^^^852^1164^[REPLACE] return Token.DIV;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^907^^^^^852^1164^[REPLACE] return Token.MOD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^909^^^^^852^1164^[REPLACE] return Token.NOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^911^^^^^852^1164^[REPLACE] return Token.BITNOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^913^^^^^852^1164^[REPLACE] return Token.POS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^915^^^^^852^1164^[REPLACE] return Token.NEG;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^917^^^^^852^1164^[REPLACE] return Token.NEW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^919^^^^^852^1164^[REPLACE] return Token.DELPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^921^^^^^852^1164^[REPLACE] return Token.TYPEOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^923^^^^^852^1164^[REPLACE] return Token.GETPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^925^^^^^852^1164^[REPLACE] return Token.SETPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^927^^^^^852^1164^[REPLACE] return Token.GETELEM;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^929^^^^^852^1164^[REPLACE] return Token.SETELEM;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^931^^^^^852^1164^[REPLACE] return Token.CALL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^933^^^^^852^1164^[REPLACE] return Token.NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^935^^^^^852^1164^[REPLACE] return Token.NUMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^937^^^^^852^1164^[REPLACE] return Token.STRING;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^939^^^^^852^1164^[REPLACE] return Token.NULL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^941^^^^^852^1164^[REPLACE] return Token.THIS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^943^^^^^852^1164^[REPLACE] return Token.FALSE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^945^^^^^852^1164^[REPLACE] return Token.TRUE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^947^^^^^852^1164^[REPLACE] return Token.SHEQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^949^^^^^852^1164^[REPLACE] return Token.SHNE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^951^^^^^852^1164^[REPLACE] return Token.REGEXP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^953^^^^^852^1164^[REPLACE] return Token.BINDNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^955^^^^^852^1164^[REPLACE] return Token.THROW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^957^^^^^852^1164^[REPLACE] return Token.RETHROW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^959^^^^^852^1164^[REPLACE] return Token.IN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^961^^^^^852^1164^[REPLACE] return Token.INSTANCEOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^963^^^^^852^1164^[REPLACE] return Token.LOCAL_LOAD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^965^^^^^852^1164^[REPLACE] return Token.GETVAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^967^^^^^852^1164^[REPLACE] return Token.SETVAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^969^^^^^852^1164^[REPLACE] return Token.CATCH_SCOPE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^971^^^^^852^1164^[REPLACE] return Token.ENUM_INIT_KEYS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^973^^^^^852^1164^[REPLACE] return Token.ENUM_INIT_VALUES;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^975^^^^^852^1164^[REPLACE] return Token.ENUM_NEXT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^977^^^^^852^1164^[REPLACE] return Token.ENUM_ID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^979^^^^^852^1164^[REPLACE] return Token.THISFN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^981^^^^^852^1164^[REPLACE] return Token.RETURN_RESULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^983^^^^^852^1164^[REPLACE] return Token.ARRAYLIT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^985^^^^^852^1164^[REPLACE] return Token.OBJECTLIT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^987^^^^^852^1164^[REPLACE] return Token.GET_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^989^^^^^852^1164^[REPLACE] return Token.SET_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^991^^^^^852^1164^[REPLACE] return Token.DEL_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^993^^^^^852^1164^[REPLACE] return Token.REF_CALL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^995^^^^^852^1164^[REPLACE] return Token.REF_SPECIAL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^997^^^^^852^1164^[REPLACE] return Token.DEFAULTNAMESPACE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^999^^^^^852^1164^[REPLACE] return Token.ESCXMLTEXT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1001^^^^^852^1164^[REPLACE] return Token.ESCXMLATTR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1003^^^^^852^1164^[REPLACE] return Token.REF_MEMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1005^^^^^852^1164^[REPLACE] return Token.REF_NS_MEMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1007^^^^^852^1164^[REPLACE] return Token.REF_NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1009^^^^^852^1164^[REPLACE] return Token.REF_NS_NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1011^^^^^852^1164^[REPLACE] return Token.TRY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1013^^^^^852^1164^[REPLACE] return Token.SEMI;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1015^^^^^852^1164^[REPLACE] return Token.LB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1017^^^^^852^1164^[REPLACE] return Token.RB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1019^^^^^852^1164^[REPLACE] return Token.LC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1021^^^^^852^1164^[REPLACE] return Token.RC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1023^^^^^852^1164^[REPLACE] return Token.LP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1025^^^^^852^1164^[REPLACE] return Token.RP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1027^^^^^852^1164^[REPLACE] return Token.COMMA;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1029^^^^^852^1164^[REPLACE] return Token.ASSIGN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1031^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1033^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITXOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1035^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITAND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1037^^^^^852^1164^[REPLACE] return Token.ASSIGN_LSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1039^^^^^852^1164^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1041^^^^^852^1164^[REPLACE] return Token.ASSIGN_URSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1043^^^^^852^1164^[REPLACE] return Token.ASSIGN_ADD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1045^^^^^852^1164^[REPLACE] return Token.ASSIGN_SUB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1047^^^^^852^1164^[REPLACE] return Token.ASSIGN_MUL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1049^^^^^852^1164^[REPLACE] return Token.ASSIGN_DIV;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1051^^^^^852^1164^[REPLACE] return Token.ASSIGN_MOD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1053^^^^^852^1164^[REPLACE] return Token.HOOK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1055^^^^^852^1164^[REPLACE] return Token.COLON;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1057^^^^^852^1164^[REPLACE] return Token.OR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1059^^^^^852^1164^[REPLACE] return Token.AND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1061^^^^^852^1164^[REPLACE] return Token.INC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1063^^^^^852^1164^[REPLACE] return Token.DEC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1065^^^^^852^1164^[REPLACE] return Token.DOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1067^^^^^852^1164^[REPLACE] return Token.FUNCTION;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1069^^^^^852^1164^[REPLACE] return Token.EXPORT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1071^^^^^852^1164^[REPLACE] return Token.IMPORT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1073^^^^^852^1164^[REPLACE] return Token.IF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1075^^^^^852^1164^[REPLACE] return Token.ELSE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1077^^^^^852^1164^[REPLACE] return Token.SWITCH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1079^^^^^852^1164^[REPLACE] return Token.CASE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1081^^^^^852^1164^[REPLACE] return Token.DEFAULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1083^^^^^852^1164^[REPLACE] return Token.WHILE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1085^^^^^852^1164^[REPLACE] return Token.DO;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1087^^^^^852^1164^[REPLACE] return Token.FOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1089^^^^^852^1164^[REPLACE] return Token.BREAK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1091^^^^^852^1164^[REPLACE] return Token.CONTINUE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1093^^^^^852^1164^[REPLACE] return Token.VAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1095^^^^^852^1164^[REPLACE] return Token.WITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1097^^^^^852^1164^[REPLACE] return Token.CATCH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1099^^^^^852^1164^[REPLACE] return Token.FINALLY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1101^^^^^852^1164^[REPLACE] return Token.VOID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1103^^^^^852^1164^[REPLACE] return Token.RESERVED;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1105^^^^^852^1164^[REPLACE] return Token.EMPTY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1107^^^^^852^1164^[REPLACE] return Token.BLOCK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1109^^^^^852^1164^[REPLACE] return Token.LABEL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1111^^^^^852^1164^[REPLACE] return Token.TARGET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1113^^^^^852^1164^[REPLACE] return Token.LOOP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1115^^^^^852^1164^[REPLACE] return Token.EXPR_VOID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1117^^^^^852^1164^[REPLACE] return Token.EXPR_RESULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1119^^^^^852^1164^[REPLACE] return Token.JSR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1121^^^^^852^1164^[REPLACE] return Token.SCRIPT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1123^^^^^852^1164^[REPLACE] return Token.TYPEOFNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1125^^^^^852^1164^[REPLACE] return Token.USE_STACK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1127^^^^^852^1164^[REPLACE] return Token.SETPROP_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1129^^^^^852^1164^[REPLACE] return Token.SETELEM_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1131^^^^^852^1164^[REPLACE] return Token.LOCAL_BLOCK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1133^^^^^852^1164^[REPLACE] return Token.SET_REF_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1135^^^^^852^1164^[REPLACE] return Token.DOTDOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1137^^^^^852^1164^[REPLACE] return Token.COLONCOLON;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1139^^^^^852^1164^[REPLACE] return Token.XML;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1141^^^^^852^1164^[REPLACE] return Token.DOTQUERY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1143^^^^^852^1164^[REPLACE] return Token.XMLATTR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1145^^^^^852^1164^[REPLACE] return Token.XMLEND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1147^^^^^852^1164^[REPLACE] return Token.TO_OBJECT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1149^^^^^852^1164^[REPLACE] return Token.TO_DOUBLE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1151^^^^^852^1164^[REPLACE] return Token.GET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1153^^^^^852^1164^[REPLACE] return Token.SET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1155^^^^^852^1164^[REPLACE] return Token.CONST;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1157^^^^^852^1164^[REPLACE] return Token.SETCONST;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node  (  Token.FOR,  ;^1159^^^^^852^1164^[REPLACE] return Token.DEBUGGER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[ADD]^^1163^^^^^852^1164^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^literalNode.getFlags (  )  ;^1163^^^^^852^1164^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^if   (  isUnnamedFunction  )   {  ;^327^^^^^326^356^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^literalNode.getFlags (  )  ;^328^^^^^326^356^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^328^^^^^326^356^[ADD] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^331^^^^^326^356^[ADD] Node node = new Node ( Token.ARRAYLIT ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int skipCount = 0 / 3;^332^^^^^326^356^[REPLACE] int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( c.getType (  )   ) {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^for  ( AstNode child : literalNode .isDestructuring (  )   )  {^333^^^^^326^356^[REPLACE] for  ( AstNode child : literalNode.getElements (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( c.getType (  )   !=  Token.EMPTY )  {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node ret = transform ( n )  ;^334^^^^^326^356^[REPLACE] Node c = transform ( child ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^333^334^335^336^337^326^356^[ADD] for  ( AstNode child : literalNode.getElements (  )  )  { Node c = transform ( child ) ; if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( skipCount  !=  0 )  {^341^^^^^326^356^[REPLACE] if  ( skipCount > 0 )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^341^342^343^344^^326^356^[ADD] if  ( skipCount > 0 )  { int[] skipIndexes = new int[skipCount]; int i = 0; int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  (   Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^326^356^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j] ;^348^^^^^341^354^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^342^^^^^341^354^[ADD] int[] skipIndexes = new int[skipCount];^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int j = 0  ;^343^^^^^341^354^[REPLACE] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^344^^^^^341^354^[ADD] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node prev = null  ;^345^^^^^341^354^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.setCharno (  )   ||  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^348^^^^^326^356^[ADD] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^348^^^^^341^354^[ADD] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^342^343^^^^341^354^[ADD] int[] skipIndexes = new int[skipCount]; int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^return newNode;  ;^355^^^^^326^356^[REPLACE] return node;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^AstNode catchVar = clauseNode .getLineno (  )  ;^424^^^^^423^440^[REPLACE] AstNode catchVar = clauseNode.getVarName (  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^425^^^^^423^440^[REPLACE] Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^if   (  caseNode.getStatements  (    )   != null  )   {  ;^426^^^^^423^440^[REPLACE] if  ( clauseNode.getCatchCondition (  )  != null )  {^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[ADD]^^429^^^^^426^437^[ADD] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar.getLineno (  )  ) ;^433^434^^^^426^437^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getVarName (  )  )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^transform ( statementNode.getCondition (  )  )  ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^loopNode.getCondition (  )  ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^429^^^^^423^440^[REPLACE] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar .getLineno (  )   ) ;^433^434^^^^423^440^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getLineno (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^return catchCondition;^439^^^^^423^440^[REPLACE] return node;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^Name name = functionNode.getSourceName (  ) ;^525^^^^^524^575^[REPLACE] Name name = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Boolean isUnnamedFunction = true;^526^^^^^524^575^[REPLACE] Boolean isUnnamedFunction = false;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if  ( fnName != false )  {^527^^^^^524^575^[REPLACE] if  ( name == null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^527^528^529^530^531^524^575^[ADD] if  ( name == null )  { name = new Name (  ) ; name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^name =  new FunctionNode ( name.getIdentifier (  )  )  ;^528^^^^^524^575^[REPLACE] name = new Name (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^isUnnamedFunction = false;^530^^^^^524^575^[REPLACE] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^528^529^^^^524^575^[ADD] name = new Name (  ) ; name.setIdentifier ( "" ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^530^^^^^524^575^[ADD] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^524^575^[REPLACE] Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getFunctionName (  )  ) ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REMOVE]^literalNode.getFlags (  )  ;^534^^^^^524^575^[REMOVE] ^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node newName = transform ( fnName ) ;^535^^^^^524^575^[REPLACE] Node newName = transform ( name ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if   (  initializerNode.getInitializer  (    )   != null  )   {  ;^536^^^^^524^575^[REPLACE] if  ( isUnnamedFunction )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^543^544^^^^524^575^[ADD] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.addChildToBack ( c )  ;^548^^^^^524^575^[REPLACE] node.addChildToBack ( newName ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^549^^^^^524^575^[REPLACE] Node lp = new Node ( Token.LP ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Name fnName = functionNode.getSourceName (  ) ;^556^^^^^524^575^[REPLACE] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if  ( fnName == this  )  {^557^^^^^524^575^[REPLACE] if  ( fnName != null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^557^558^559^560^561^524^575^[ADD] if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setLineno ( functionNode.getLp (  )  ) ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REMOVE]^literalNode.getFlags (  )  ;^558^^^^^524^575^[REMOVE] ^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^functionNode.getLineno (  )  ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^int lparenCharno = functionNode.getLp (  )   functionNode.getAbsolutePosition (  ) ;^562^563^^^^524^575^[REPLACE] int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^position2charno ( lparenCharno )  ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setCharno ( position2charno ( lpColumn )  ) ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^block.addChildToBack ( transform ( cc )  )  ;^567^^^^^524^575^[REPLACE] lp.addChildToBack ( transform ( param )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^transform ( expr )  ;^567^^^^^524^575^[REPLACE] lp.addChildToBack ( transform ( param )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^CatchClause cc  ;^566^^^^^524^575^[REPLACE] for  ( AstNode param : functionNode.getParams (  )  )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.addChildToBack ( c )  ;^569^^^^^524^575^[REPLACE] node.addChildToBack ( lp ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node newName = transform ( name )  ;^571^^^^^524^575^[REPLACE] Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^parseDirectives ( node )  ;^572^^^^^524^575^[REPLACE] parseDirectives ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.removeChild ( bodyNode ) ;^573^^^^^524^575^[REPLACE] node.addChildToBack ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^return newName;^574^^^^^524^575^[REPLACE] return node;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^720^^^^^719^738^[ADD] Node node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( caseNode .getAbsolutePosition (  )   )  {^721^^^^^719^738^[REPLACE] if  ( caseNode.isDefault (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node = new Node ( DEFAULT )  ;^725^^^^^721^726^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^^724^^^^^721^726^[ADD] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node = new Node ( CASE, transform ( expr )  )  ;^722^^^^^719^738^[REPLACE] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node = new Node ( DEFAULT )  ;^725^^^^^719^738^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^node = new Node ( Token.CASE, transform ( expr )  ) ;^724^725^^^^719^738^[ADD] AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^727^^^^^719^738^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^[REPLACE] block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node.setLineno ( callNode.getLineno (  )  )  ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block.setLineno ( caseNode.getExpression (  )  ) ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REMOVE]^literalNode.getFlags (  )  ;^729^^^^^719^738^[REMOVE] ^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^position2charno ( caseNode.getAbsolutePosition (  )  )  ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^^730^^^^^719^738^[ADD] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^position2charno ( catchVar.getAbsolutePosition (  )  )  ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block.setCharno ( position2charno ( caseNode.getExpression (  )  )  ) ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^if   (  clauseNode.getCatchCondition  (    )   != null  )   {  ;^731^^^^^719^738^[REPLACE] if  ( caseNode.getStatements (  )  != null )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^for  ( AstNode child : caseNode.getLineno (  )  )  {^732^^^^^731^735^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^CatchClause cc  ;^732^^^^^731^735^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node .children (  )  ;^736^^^^^719^738^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^return newNode;  ;^737^^^^^719^738^[REPLACE] return node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^758^^^^^757^786^[REPLACE] Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node node = new Node ( CONTINUE )  ;^759^^^^^757^786^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^760^^^^^757^786^[ADD] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( lineSet  ) {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^lineSet = false;^767^^^^^757^786^[REPLACE] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( lineSet  &&  false )  {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^767^^^^^757^786^[ADD] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^762^763^^765^766^757^786^[ADD] for  ( CatchClause cc : statementNode.getCatchClauses (  )  )  {  if  ( lineSet == false )  { block.setLineno ( cc.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^node .children (  )  ;^771^^^^^757^786^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode finallyBlock = statementNode.getTryBlock (  ) ;^773^^^^^757^786^[REPLACE] AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( finallyBlock == null )  {^774^^^^^757^786^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.addChildToBack ( transform ( cc )  )  ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^literalNode.getFlags (  )  ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REMOVE]^transform ( exprNode.getLeft (  )  )  ;^775^^^^^757^786^[REMOVE] ^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  (  ( lineSet != false )  &&  (true )  )  {^781^^^^^757^786^[REPLACE] if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.setLineno ( finallyBlock .getType (  )   ) ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^782^^^^^757^786^[ADD] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^return block;^785^^^^^757^786^[REPLACE] return node;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
