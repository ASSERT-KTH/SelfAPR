[REPLACE]^if  ( ! node instanceof Block )  {^172^^^^^119^282^[REPLACE] if  ( node instanceof Block )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^} else  if  ( ! node instanceof Scope )  {^174^^^^^119^282^[REPLACE] } else  if  ( node instanceof Scope )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^177^178^179^180^^174^181^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^178^179^180^^^174^181^[REPLACE] node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^Token.typeToName ( node.getClass (  )  )  ) ;^180^^^^^174^181^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^Token.typeToName ( node .getClass (  )   )  ) ;^180^^^^^174^181^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^175^^^^^119^282^[REPLACE] return processScope (  ( Scope )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^177^178^179^180^^119^282^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^173^^^^^119^282^[REPLACE] return processBlock (  ( Block )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^}  else {^174^^^^^119^282^[REPLACE] } else  if  ( node instanceof Scope )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^}^174^175^176^177^178^119^282^[ADD] else  if  ( node instanceof Scope )  { return processScope (  ( Scope )  node ) ; } else { throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  +^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^if  ( ! node instanceof ExpressionStatement )  {^202^^^^^119^282^[REPLACE] if  ( node instanceof ExpressionStatement )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REMOVE]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^202^^^^^119^282^[REMOVE] ^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^}  else {^204^^^^^119^282^[REPLACE] } else  if  ( node instanceof LabeledStatement )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^207^208^209^210^^204^211^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^208^209^210^^^204^211^[REPLACE] node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^Token.typeToName ( node.getClass (  )  )  ) ;^210^^^^^204^211^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^205^^^^^119^282^[REPLACE] return processLabeledStatement (  ( LabeledStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^207^208^209^210^^119^282^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^203^^^^^119^282^[REPLACE] return processExpressionStatement (  ( ExpressionStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^}   if  ( ! node instanceof LabeledStatement )  {^204^^^^^119^282^[REPLACE] } else  if  ( node instanceof LabeledStatement )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REMOVE]^if  ( node instanceof ForLoop )  {     return processForLoop (  (  ( ForLoop )   ( node )  )  ) ; }else {     throw new IllegalStateException (  (  (  ( "Unexpected node type.  class: " +  ( node.getClass (  )  )  )  + " type: " )  +  ( typeToName ( node.getType (  )  )  )  )  ) ; }^204^^^^^119^282^[REMOVE] ^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^210^^^^^204^211^[ADD] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^if  ( ! node instanceof ForInLoop )  {^219^^^^^119^282^[REPLACE] if  ( node instanceof ForInLoop )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^return processForInLoop (  ( ForInLoop )  node ) ;return processForLoop (  ( ForLoop )  node ) ;^219^220^221^222^^119^282^[ADD] if  ( node instanceof ForInLoop )  { return processForInLoop (  ( ForInLoop )  node ) ; } else  if  ( node instanceof ForLoop )  { return processForLoop (  ( ForLoop )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^} else  if   (  node instanceof Scope  )   {  ;^221^^^^^119^282^[REPLACE] } else  if  ( node instanceof ForLoop )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^}   return processForLoop (  ( ForLoop )  node ) ;^221^222^223^224^225^119^282^[ADD] else  if  ( node instanceof ForLoop )  { return processForLoop (  ( ForLoop )  node ) ; } else { throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  +^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^224^225^226^227^^221^228^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^Token.typeToName ( node.getClass (  )  )  ) ;^227^^^^^221^228^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REMOVE]^( node.getClass (  )  )  ;^227^^^^^221^228^[REMOVE] ^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^222^^^^^119^282^[REPLACE] return processForLoop (  ( ForLoop )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^224^225^226^227^^119^282^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^220^^^^^119^282^[REPLACE] return processForInLoop (  ( ForInLoop )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^}   if  ( ! node instanceof ForLoop )  {^221^^^^^119^282^[REPLACE] } else  if  ( node instanceof ForLoop )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^227^^^^^221^228^[ADD] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^if  ( ! node instanceof VariableDeclaration )  {^266^^^^^119^282^[REPLACE] if  ( node instanceof VariableDeclaration )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^}  else {^268^^^^^119^282^[REPLACE] } else  if  ( node instanceof VariableInitializer )  {^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^271^272^273^^^268^275^[ADD] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " +^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^processName (  (  ( Name )   ( node )  )  )  ;^274^^^^^268^275^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^Token.typeToName ( node.getClass (  )  )  ) ;^274^^^^^268^275^[REPLACE] Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^269^^^^^119^282^[REPLACE] return processVariableInitializer (  ( VariableInitializer )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^271^272^273^^^119^282^[ADD] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " +^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^267^^^^^119^282^[REPLACE] return processVariableDeclaration (  ( VariableDeclaration )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^}   return processVariableInitializer (  ( VariableInitializer )  node ) ;^268^269^270^271^272^119^282^[ADD] else  if  ( node instanceof VariableInitializer )  { return processVariableInitializer (  ( VariableInitializer )  node ) ; } else { throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  +^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node .getType (  )   + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^272^273^274^^^268^275^[REPLACE] node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^145^^^^^119^282^[REPLACE] return processInfixExpression (  ( InfixExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^147^^^^^119^282^[REPLACE] return processArrayLiteral (  ( ArrayLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^160^^^^^119^282^[REPLACE] return processAssignment (  ( Assignment )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^170^^^^^119^282^[REPLACE] return processUnaryExpression (  ( UnaryExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^183^^^^^119^282^[REPLACE] return processBreakStatement (  ( BreakStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^185^^^^^119^282^[REPLACE] return processFunctionCall (  ( FunctionCall )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^188^^^^^119^282^[REPLACE] return processSwitchCase (  ( SwitchCase )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^191^^^^^119^282^[REPLACE] return processCatchClause (  ( CatchClause )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^193^^^^^119^282^[REPLACE] return processObjectProperty (  ( ObjectProperty )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^195^^^^^119^282^[REPLACE] return processContinueStatement (  ( ContinueStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^197^^^^^119^282^[REPLACE] return processDoLoop (  ( DoLoop )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^199^^^^^119^282^[REPLACE] return processEmptyExpression (  ( EmptyExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^217^^^^^119^282^[REPLACE] return processKeywordLiteral (  ( KeywordLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^230^^^^^119^282^[REPLACE] return processFunctionNode (  ( FunctionNode )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^232^^^^^119^282^[REPLACE] return processElementGet (  ( ElementGet )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^234^^^^^119^282^[REPLACE] return processPropertyGet (  ( PropertyGet )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^236^^^^^119^282^[REPLACE] return processConditionalExpression (  ( ConditionalExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^238^^^^^119^282^[REPLACE] return processIfStatement (  ( IfStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^240^^^^^119^282^[REPLACE] return processLabel (  ( Label )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^242^^^^^119^282^[REPLACE] return processParenthesizedExpression (  ( ParenthesizedExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^244^^^^^119^282^[REPLACE] return processName (  ( Name )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^246^^^^^119^282^[REPLACE] return processNewExpression (  ( NewExpression )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^248^^^^^119^282^[REPLACE] return processNumberLiteral (  ( NumberLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^250^^^^^119^282^[REPLACE] return processObjectLiteral (  ( ObjectLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^252^^^^^119^282^[REPLACE] return processRegExpLiteral (  ( RegExpLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^254^^^^^119^282^[REPLACE] return processReturnStatement (  ( ReturnStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^256^^^^^119^282^[REPLACE] return processAstRoot (  ( AstRoot )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^258^^^^^119^282^[REPLACE] return processStringLiteral (  ( StringLiteral )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^260^^^^^119^282^[REPLACE] return processSwitchStatement (  ( SwitchStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^262^^^^^119^282^[REPLACE] return processThrowStatement (  ( ThrowStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^264^^^^^119^282^[REPLACE] return processTryStatement (  ( TryStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^277^^^^^119^282^[REPLACE] return processWhileLoop (  ( WhileLoop )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processUnaryExpression  (    (  UnaryExpression  )   node  )  ;  ;^279^^^^^119^282^[REPLACE] return processWithStatement (  ( WithStatement )  node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return ;^271^272^273^274^^119^282^[REPLACE] throw new IllegalStateException ( "Unexpected node type.  class: " + node.getClass (  )  + " type: " + Token.typeToName ( node.getType (  )  )  ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return processIllegalToken  (  node  )  ;  ;^281^^^^^119^282^[REPLACE] return processIllegalToken ( node ) ;^[METHOD] process [TYPE] T [PARAMETER] AstNode node [CLASS] TypeSafeDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
