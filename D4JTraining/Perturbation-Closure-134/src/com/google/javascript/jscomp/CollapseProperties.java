[REPLACE]^final DiagnosticType UNSAFE_NAMESPACE_WARNING = DiagnosticType.warning ( "JSC_UNSAFE_NAMESPACE", "incomplete alias created for namespace {0}" ) ;^76^77^78^79^^76^79^[REPLACE] static final DiagnosticType UNSAFE_NAMESPACE_WARNING = DiagnosticType.warning ( "JSC_UNSAFE_NAMESPACE", "incomplete alias created for namespace {0}" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^static final DiagnosticType NAMESPACE_REDEFINED_WARNING  = null ;^81^82^83^84^^81^84^[REPLACE] static final DiagnosticType NAMESPACE_REDEFINED_WARNING = DiagnosticType.warning ( "JSC_NAMESPACE_REDEFINED", "namespace {0} should not be redefined" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^static final DiagnosticType UNSAFE_THIS  = null ;^86^87^88^^^86^88^[REPLACE] static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning ( "JSC_UNSAFE_THIS", "dangerous use of 'this' in static method {0}" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^private  boolean inlineAliases;^99^^^^^^^[REPLACE] private final boolean inlineAliases;^ [CLASS] CollapseProperties 1  
[REPLACE]^this.compiler =  null;^112^^^^^110^115^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes boolean inlineAliases [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^this.collapsePropertiesOnExternTypes =  true;^113^^^^^110^115^[REPLACE] this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes boolean inlineAliases [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^this.inlineAliases =  true;^114^^^^^110^115^[REPLACE] this.inlineAliases = inlineAliases;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes boolean inlineAliases [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameForest (  )  ) ;^121^^^^^120^149^[REPLACE] GlobalNamespace namespace;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^121^^^^^120^149^[ADD] GlobalNamespace namespace;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^122^^^^^120^149^[REPLACE] if  ( collapsePropertiesOnExternTypes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, externs, root ) ; ;^125^^^^^122^126^[REPLACE] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, root ) ; ;^123^^^^^120^149^[REPLACE] namespace = new GlobalNamespace ( compiler, externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, externs, root ) ; ;^125^^^^^120^149^[REPLACE] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^125^^^^^120^149^[ADD] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^128^^^^^120^149^[REPLACE] if  ( inlineAliases )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REMOVE]^if  ( numChanges > 0 )  {     compiler.reportCodeChange (  ) ; }^128^^^^^120^149^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^String originalName = n.fullName (  ) ;^129^^^^^120^149^[REPLACE] inlineAliases ( namespace ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^nameMap =  null.getNameIndex (  ) ;^131^^^^^120^149^[REPLACE] nameMap = namespace.getNameIndex (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^globalNames =  null.getNameForest (  ) ;^132^^^^^120^149^[REPLACE] globalNames = namespace.getNameForest (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^Node gramps = parent.getParent (  ) ;^133^^^^^120^149^[REPLACE] checkNamespaces (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^for  ( Name n : globalNames )  { collapseDeclarationOfNameAndDescendants ( n, n.name ) ;^135^^^^^120^149^[REPLACE] for  ( Name n : globalNames )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^for  ( Name n : globalNames )  { collapseDeclarationOfNameAndDescendants ( n, n.name ) ;^142^^^^^120^149^[REPLACE] for  ( Name n : globalNames )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^142^143^144^^^120^149^[ADD] for  ( Name n : globalNames )  { collapseDeclarationOfNameAndDescendants ( n, n.name ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameIndex (  )  ) ;^168^^^^^166^197^[REPLACE] Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameForest (  )  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^168^^^^^166^197^[ADD] Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameForest (  )  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^while  ( workList.isEmpty (  )  )  {^169^^^^^166^197^[REPLACE] while  ( !workList.isEmpty (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( name.globalSets == 1 ) {^172^173^^^^166^197^[REPLACE] if  ( name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET ||       )  {^178^^^^^172^185^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^180^^^^^172^185^[REPLACE] if  ( inlineAliasIfPossible ( ref, namespace )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^name.removeRef ( ref ) ;^180^181^182^^^172^185^[ADD] if  ( inlineAliasIfPossible ( ref, namespace )  )  { name.removeRef ( ref ) ; }^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^name .addRef ( ref )  ;^181^^^^^172^185^[REPLACE] name.removeRef ( ref ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^name.addRef ( ref ) ;^181^^^^^172^185^[REPLACE] name.removeRef ( ref ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^List<Ref> refs =   name.refs   ;^176^^^^^172^185^[REPLACE] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^176^^^^^172^185^[ADD] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^for  ( Ref r : n.refs )  {^177^^^^^172^185^[REPLACE] for  ( Ref ref : refs )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET ) {^178^^^^^166^197^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^178^179^180^181^182^166^197^[ADD] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {  if  ( inlineAliasIfPossible ( ref, namespace )  )  { name.removeRef ( ref ) ; }^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^180^^^^^166^197^[REPLACE] if  ( inlineAliasIfPossible ( ref, namespace )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^name.addRef ( ref ) ;^181^^^^^166^197^[REPLACE] name.removeRef ( ref ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^181^^^^^166^197^[ADD] name.removeRef ( ref ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  (  ( name.type != Name.Type.OBJECTLIT ) {^189^190^191^^^166^197^[REPLACE] if  (  ( name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^189^190^191^^^166^197^[ADD] if  (  ( name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^p.addRef ( newAlias ) ;^194^^^^^189^195^[REPLACE] workList.addAll ( name.props ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Name name = this.pop (  ) ;^170^^^^^166^197^[REPLACE] Name name = workList.pop (  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^List<Ref> refs =   name.refs   ;^176^^^^^166^197^[REPLACE] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^for  ( Ref r : n.refs )  {^177^^^^^166^197^[REPLACE] for  ( Ref ref : refs )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  (  name.localSets == 0 || name.aliasingGets > 0 )  {^172^173^^^^166^197^[REPLACE] if  ( name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET || ref.scope.isLocal (  )  )  {^178^^^^^172^185^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET || ref.scope.isLocal (  )  )  {^178^^^^^166^197^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^name.removeRef ( ref ) ;^180^181^182^^^166^197^[ADD] if  ( inlineAliasIfPossible ( ref, namespace )  )  { name.removeRef ( ref ) ; }^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  (  name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^189^190^191^^^166^197^[REPLACE] if  (  ( name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Name name = workList .isEmpty (  )  ;^170^^^^^166^197^[REPLACE] Name name = workList.pop (  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^176^^^^^166^197^[ADD] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Node aliasParent = alias.node.cloneTree (  ) ;^204^^^^^199^244^[REPLACE] Node aliasParent = alias.node.getParent (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^204^^^^^199^244^[ADD] Node aliasParent = alias.node.getParent (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( aliasParent.getType (  )   !=  Token.NAME )  {^205^^^^^199^244^[REPLACE] if  ( aliasParent.getType (  )  == Token.NAME )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( aliasRefs.isWellDefined (  ) ) {^217^218^219^^^199^244^[REPLACE] if  ( aliasRefs.isWellDefined (  ) && aliasRefs.firstReferenceIsAssigningDeclaration (  ) && aliasRefs.isAssignedOnce (  )  )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for (int i = 0 ; i  <=  size; i++) {^223^^^^^217^240^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^223^224^225^^227^217^240^[ADD] for  ( int i = 1; i < size; i++ )  { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ; Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef =   size   ;^224^225^^^^217^240^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node newNode = alias.node.getParent (  ) ;^227^^^^^217^240^[REPLACE] Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^227^228^^^^217^240^[ADD] Node newNode = alias.node.cloneTree (  ) ; aliasRef.getParent (  ) .replaceChild ( aliasRef.getNameNode (  ) , newNode ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return false;^239^^^^^217^240^[REPLACE] return true;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node rvalue = ref.node.getNext (  ) ;^221^^^^^217^240^[REPLACE] int size = aliasRefs.references.size (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  ||  1);^222^^^^^217^240^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^223^^^^^217^240^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef =   i   ;^224^225^^^^217^240^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for (int i = 1; i  !=  size; i++) {^223^^^^^199^244^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef =   size   ;^224^225^^^^199^244^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node newNode = alias.node.getParent (  ) ;^227^^^^^199^244^[REPLACE] Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return false;^239^^^^^199^244^[REPLACE] return true;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^boolean discardKeys = n.aliasingGets == 0;^207^^^^^199^244^[REPLACE] Scope scope = alias.scope;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Var aliasVar = scope.getVar ( newNode.getString (  )  ) ;^208^^^^^199^244^[REPLACE] Var aliasVar = scope.getVar ( aliasParent.getString (  )  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node rvalue = ref.node.getNext (  ) ;^221^^^^^199^244^[REPLACE] int size = aliasRefs.references.size (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  >  1);^222^^^^^199^244^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^223^^^^^199^244^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( size ) ;^224^225^^^^199^244^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^224^225^^^^199^244^[ADD] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( aliasRefs.isWellDefined (  ) || aliasRefs.firstReferenceIsAssigningDeclaration (  ) || aliasRefs.isAssignedOnce (  )  )  {^217^218^219^^^199^244^[REPLACE] if  ( aliasRefs.isWellDefined (  ) && aliasRefs.firstReferenceIsAssigningDeclaration (  ) && aliasRefs.isAssignedOnce (  )  )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( size ) ;^224^225^^^^217^240^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^221^222^^^^217^240^[ADD] int size = aliasRefs.references.size (  ) ; Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  ==  1);^222^^^^^217^240^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^222^^^^^217^240^[ADD] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^224^225^^^^217^240^[ADD] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for (int i = 3; i  >=  i; i++) {^223^^^^^199^244^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef =   i   ;^224^225^^^^199^244^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node newNode = alias.node .getParent (  )  ;^227^^^^^199^244^[REPLACE] Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^207^^^^^199^244^[ADD] Scope scope = alias.scope;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Var aliasVar = scope.getVar ( aliasParent.getParent (  )  ) ;^208^^^^^199^244^[REPLACE] Var aliasVar = scope.getVar ( aliasParent.getString (  )  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^215^216^^^^199^244^[ADD] ReferenceCollection aliasRefs = collector.getReferenceCollection ( aliasVar ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  ^  1);^222^^^^^199^244^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return true;^243^^^^^199^244^[REPLACE] return false;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( name.isNamespace (  )  && name.refs == null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^252^253^^^^250^269^[REPLACE] if  ( name.isNamespace (  )  && name.refs != null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^252^253^254^255^256^250^269^[ADD] if  ( name.isNamespace (  )  && name.refs != null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  { boolean initialized = name.declaration != null; for  ( Ref ref : name.refs )  { if  ( ref.type == Ref.Type.SET_FROM_GLOBAL ||^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Ref.Type.SET_FROM_GLOBAL && ref.type == Ref.Type.SET_FROM_LOCAL )  {^256^257^^^^250^269^[REPLACE] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REMOVE]^if  ( isJsIdentifier )  {     Name p = nameMap.get ( qName ) ;     if  ( p != null )  {         if  ( !discardKeys )  {             Ref newAlias = cloneAndReclassify ( ALIASING_GET ) ;             newAlias.node = refNode;             p.addRef ( newAlias ) ;         }         node = nameNode;         if  (  ( value.getType (  )  )  ==  ( FUNCTION )  )  {             checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;         }     } }^256^^^^^250^269^[REMOVE] ^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  else {^263^^^^^250^269^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^264^^^^^250^269^[REPLACE] warnAboutNamespaceAliasing ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( inlineAliases )  {^258^^^^^250^269^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REMOVE]^if  ( inlineAliases )  {     inlineAliases ( namespace ) ; }^258^^^^^250^269^[REMOVE] ^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^parent.replaceChild ( n, ref ) ;^259^^^^^250^269^[REPLACE] warnAboutNamespaceRedefinition ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^initialized = false;^262^^^^^250^269^[REPLACE] initialized = true;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^262^^^^^250^269^[ADD] initialized = true;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^warnAboutNamespaceRedefinition ( name, ref ) ;^258^259^260^^^250^269^[ADD] if  ( initialized )  { warnAboutNamespaceRedefinition ( name, ref ) ; }^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  if  ( ref.type  !=  Ref.Type.ALIASING_GET )  {^263^^^^^250^269^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^boolean initialized = name.declaration == false;^254^^^^^250^269^[REPLACE] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^254^^^^^250^269^[ADD] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^for  ( Ref r : n.refs )  {^255^^^^^250^269^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  (  ref.type == Ref.Type.SET_FROM_LOCAL )  {^256^257^^^^250^269^[REPLACE] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^264^^^^^250^269^[ADD] warnAboutNamespaceAliasing ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( true )  {^258^^^^^250^269^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^258^^^^^250^269^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameForest (  )  ) ;^251^^^^^250^269^[REPLACE] for  ( Name name : nameMap.values (  )  )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^boolean initialized = name.declaration == null;^254^^^^^250^269^[REPLACE] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^compiler.report ( JSError.make ( ref.sourceName, ref.node, UNSAFE_NAMESPACE_WARNING, nameObj.canEliminate (  )  )  ) ;^278^279^280^^^277^281^[REPLACE] compiler.report ( JSError.make ( ref.sourceName, ref.node, UNSAFE_NAMESPACE_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceAliasing [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^JSError .make ( NAMESPACE_REDEFINED_WARNING )   ) ;^279^280^^^^277^281^[REPLACE] JSError.make ( ref.sourceName, ref.node, UNSAFE_NAMESPACE_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceAliasing [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^UNSAFE_NAMESPACE_WARNING, nameObj.canEliminate (  )  )  ) ;^280^^^^^277^281^[REPLACE] UNSAFE_NAMESPACE_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceAliasing [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^compiler.report ( JSError.make ( ref.sourceName, ref.node, NAMESPACE_REDEFINED_WARNING, nameObj.canEliminate (  )  )  ) ;^290^291^292^^^289^293^[REPLACE] compiler.report ( JSError.make ( ref.sourceName, ref.node, NAMESPACE_REDEFINED_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceRedefinition [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[ADD]^^290^291^292^^^289^293^[ADD] compiler.report ( JSError.make ( ref.sourceName, ref.node, NAMESPACE_REDEFINED_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceRedefinition [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^JSError.make ( ref.sourceName, ref.node, NAMESPACE_REDEFINED_WARNING, nameObj.canEliminate (  )  )  ) ;^291^292^^^^289^293^[REPLACE] JSError.make ( ref.sourceName, ref.node, NAMESPACE_REDEFINED_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceRedefinition [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^NAMESPACE_REDEFINED_WARNING, nameObj .canEliminate (  )   )  ) ;^292^^^^^289^293^[REPLACE] NAMESPACE_REDEFINED_WARNING, nameObj.fullName (  )  )  ) ;^[METHOD] warnAboutNamespaceRedefinition [TYPE] void [PARAMETER] Name nameObj Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name nameObj 
[REPLACE]^if  ( n.props != false )  return;^304^^^^^302^315^[REPLACE] if  ( n.props == null )  return;^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^309^^^^^302^315^[REPLACE] if  ( p.canCollapse (  )  )  {^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^flattenReferencesTo ( p, propAlias ) ;^309^310^311^^^302^315^[ADD] if  ( p.canCollapse (  )  )  { flattenReferencesTo ( p, propAlias ) ; }^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenReferencesTo ( p, alias ) ;^310^^^^^302^315^[REPLACE] flattenReferencesTo ( p, propAlias ) ;^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^310^^^^^302^315^[ADD] flattenReferencesTo ( p, propAlias ) ;^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ;^306^^^^^302^315^[REPLACE] for  ( Name p : n.props )  {^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^String propAlias = appendPropForAlias ( alias, propName ) ;^307^^^^^302^315^[REPLACE] String propAlias = appendPropForAlias ( alias, p.name ) ;^[METHOD] flattenReferencesToCollapsibleDescendantNames [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.refs == null )  {^325^^^^^324^350^[REPLACE] if  ( n.refs != null )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  != null || r.isSet (  )  )  )  {^335^336^^^^324^350^[REPLACE] if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  == null || r.isSet (  )  )  )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^335^336^337^338^^324^350^[ADD] if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  == null || r.isSet (  )  )  )  { flattenNameRef ( alias, r.node, rParent, originalName ) ; }^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenPrefixes ( alias, p, depth + 1 ) ;^337^^^^^335^338^[REPLACE] flattenNameRef ( alias, r.node, rParent, originalName ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^String originalName = n .canEliminate (  )  ;^326^^^^^324^350^[REPLACE] String originalName = n.fullName (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^326^^^^^324^350^[ADD] String originalName = n.fullName (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^for  ( Ref r : n.refs )  { Node rParent = r.node.getParent (  ) ;^327^^^^^324^350^[REPLACE] for  ( Ref r : n.refs )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^327^328^^^^324^350^[ADD] for  ( Ref r : n.refs )  { Node rParent = r.node.getParent (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^Node parent = ref.node.getParent (  ) ;^328^^^^^324^350^[REPLACE] Node rParent = r.node.getParent (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenNameRef ( originalName, r.node, rParent, originalName ) ;^337^^^^^335^338^[REPLACE] flattenNameRef ( alias, r.node, rParent, originalName ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REMOVE]^flattenPrefixes ( alias, p, depth + 1 ) ;^337^^^^^335^338^[REMOVE] ^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^345^^^^^324^350^[REPLACE] if  ( n.props != null )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ;^346^^^^^324^350^[REPLACE] for  ( Name p : n.props )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^String originalName = n .canEliminate (  )  ;^364^^^^^361^386^[REPLACE] String originalName = n.fullName (  ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( n.declaration != null ) {^365^366^^^^361^386^[REPLACE] if  ( n.declaration != null && n.declaration.node != null && n.declaration.node.getType (  )  == Token.GETPROP )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^flattenNameRefAtDepth ( alias, n.declaration.node, depth, alias ) ;^367^^^^^361^386^[REPLACE] flattenNameRefAtDepth ( alias, n.declaration.node, depth, originalName ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( n.refs == true )  {^370^^^^^361^386^[REPLACE] if  ( n.refs != null )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( r.getTwin (  )  != this ) {^375^^^^^361^386^[REPLACE] if  ( r.getTwin (  )  == null || r.isSet (  )  )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^flattenNameRef ( alias, r.node, rParent, originalName ) ;^376^^^^^361^386^[REPLACE] flattenNameRefAtDepth ( alias, r.node, depth, originalName ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^for  ( Ref r : n.refs )  { Node rParent = r.node.getParent (  ) ;^371^^^^^361^386^[REPLACE] for  ( Ref r : n.refs )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( r.getTwin (  )  != null || r.isSet (  )  )  {^375^^^^^361^386^[REPLACE] if  ( r.getTwin (  )  == null || r.isSet (  )  )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^381^^^^^361^386^[REPLACE] if  ( n.props != null )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[ADD]^^381^382^383^384^^361^386^[ADD] if  ( n.props != null )  { for  ( Name p : n.props )  { flattenPrefixes ( alias, p, depth + 1 ) ; }^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ;^382^^^^^361^386^[REPLACE] for  ( Name p : n.props )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[ADD]^^382^383^384^^^361^386^[ADD] for  ( Name p : n.props )  { flattenPrefixes ( alias, p, depth + 1 ) ; }^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^for  ( int i = 1; i < depth  |  n.hasChildren (  ) ; i++ )  {^402^^^^^397^408^[REPLACE] for  ( int i = 1; i < depth && n.hasChildren (  ) ; i++ )  {^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[REPLACE]^n =  null.getFirstChild (  ) ;^403^^^^^397^408^[REPLACE] n = n.getFirstChild (  ) ;^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[REPLACE]^for  ( int i = 2; i < depth && n.hasChildren (  ) ; i++ )  {^402^^^^^397^408^[REPLACE] for  ( int i = 1; i < depth && n.hasChildren (  ) ; i++ )  {^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[REPLACE]^if  ( !varNode.hasChildren (  )  )  {^405^^^^^397^408^[REPLACE] if  ( n.hasChildren (  )  )  {^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[ADD]^^405^406^407^^^397^408^[ADD] if  ( n.hasChildren (  )  )  { flattenNameRef ( alias, n.getFirstChild (  ) , n, originalName ) ; }^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[REPLACE]^flattenNameRef ( alias, n.getLastChild (  ) , n, originalName ) ;^406^^^^^397^408^[REPLACE] flattenNameRef ( alias, n.getFirstChild (  ) , n, originalName ) ;^[METHOD] flattenNameRefAtDepth [TYPE] void [PARAMETER] String alias Node n int depth String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  i 
[REPLACE]^Node ref = NodeUtil.newName ( alias, n, alias ) ;^428^^^^^418^432^[REPLACE] Node ref = NodeUtil.newName ( alias, n, originalName ) ;^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REPLACE]^NodeUtil.copyNameAnnotations ( n.getLastChild (  ) , parent ) ;^429^^^^^418^432^[REPLACE] NodeUtil.copyNameAnnotations ( n.getLastChild (  ) , ref ) ;^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REPLACE]^NodeUtil.copyNameAnnotations ( parent.getLastChild (  ) , ref ) ;^429^^^^^418^432^[REPLACE] NodeUtil.copyNameAnnotations ( n.getLastChild (  ) , ref ) ;^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REPLACE]^parent.replaceChildAfter ( n, ref ) ;^430^^^^^418^432^[REPLACE] parent.replaceChild ( n, ref ) ;^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REMOVE]^flattenPrefixes ( alias, p, depth + 1 ) ;^430^^^^^418^432^[REMOVE] ^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REPLACE]^compiler.report (  ) ;^431^^^^^418^432^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] flattenNameRef [TYPE] void [PARAMETER] String alias Node n Node parent String originalName [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  ref  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap 
[REPLACE]^boolean canCollapseChildNames = n.canCollapse (  ) ;^443^^^^^442^465^[REPLACE] boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames (  ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.canCollapse (  )  ) {^446^^^^^442^465^[REPLACE] if  ( n.canCollapse (  )  && canCollapseChildNames )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^updateObjLitOrFunctionDeclaration ( n, alias ) ;^446^447^448^^^442^465^[ADD] if  ( n.canCollapse (  )  && canCollapseChildNames )  { updateObjLitOrFunctionDeclaration ( n, alias ) ; }^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^parent.removeChild ( rvalue ) ;^447^^^^^442^465^[REPLACE] updateObjLitOrFunctionDeclaration ( n, alias ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^450^^^^^442^465^[REPLACE] if  ( n.props != null )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( !p.inExterns ) {^456^457^458^459^^442^465^[REPLACE] if  ( !p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenPrefixes ( alias, p, depth + 1 ) ;^461^^^^^442^465^[REPLACE] appendPropForAlias ( alias, p.name ) , p, p.declaration ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ;^451^^^^^442^465^[REPLACE] for  ( Name p : n.props )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^451^452^453^454^^442^465^[ADD] for  ( Name p : n.props )  {  collapseDeclarationOfNameAndDescendants ( p, appendPropForAlias ( alias, p.name )  ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  (  canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  != Token.ASSIGN )  {^456^457^458^459^^442^465^[REPLACE] if  ( !p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^Node rvalue = ref.node.getParent (  ) ;^479^^^^^478^538^[REPLACE] Node rvalue = ref.node.getNext (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node parent = ref.node.getNext (  ) ;^480^^^^^478^538^[REPLACE] Node parent = ref.node.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node gramps = varNode.getParent (  ) ;^481^^^^^478^538^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node greatGramps = varNode.getParent (  ) ;^482^^^^^478^538^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node greatGreatGramps = varNode.getParent (  ) ;^483^^^^^478^538^[REPLACE] Node greatGreatGramps = greatGramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, gramps.getFirstChild (  ) , refName.canEliminate (  )  ) ;^486^487^^^^478^538^[REPLACE] Node nameNode = NodeUtil.newName ( alias, gramps.getFirstChild (  ) , refName.fullName (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^486^487^^^^478^538^[ADD] Node nameNode = NodeUtil.newName ( alias, gramps.getFirstChild (  ) , refName.fullName (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^NodeUtil.isStatementBlock ( ref.node.getLastChild (  ) , nameNode ) ;^488^^^^^478^538^[REPLACE] NodeUtil.copyNameAnnotations ( ref.node.getLastChild (  ) , nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^NodeUtil.copyNameAnnotations ( ref.node .getFirstChild (  )  , nameNode ) ;^488^^^^^478^538^[REPLACE] NodeUtil.copyNameAnnotations ( ref.node.getLastChild (  ) , nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REMOVE]^Node rvalue = ref.node.getNext (  ) ;^488^^^^^478^538^[REMOVE] ^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^if  ( gramps.getType (  )   ||  Token.EXPR_RESULT )  {^490^^^^^478^538^[REPLACE] if  ( gramps.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^for  ( ; varNode.getType (  )  != Token.SCRIPT || currentParent.getType (  )  != Token.BLOCK;^524^525^^^^490^535^[REPLACE] for  ( ; currentParent.getType (  )  != Token.SCRIPT && currentParent.getType (  )  != Token.BLOCK;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^current =  varNode, varNode^526^527^^^^490^535^[REPLACE] current = currentParent, currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^526^527^528^^^490^535^[ADD] current = currentParent, currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^currentParent =  varNode.getParent (  )  )  {}^527^^^^^490^535^[REPLACE] currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node current = varNode;^522^^^^^490^535^[REPLACE] Node current = gramps;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^522^^^^^490^535^[ADD] Node current = gramps;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node currentParent = rvalue.getString (  ) ;^523^^^^^490^535^[REPLACE] Node currentParent = gramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node stubVar = new Node ( Token.VAR, varNode.cloneTree (  )  ) ;^531^^^^^490^535^[REPLACE] Node stubVar = new Node ( Token.VAR, nameNode.cloneTree (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node varNode = new Node ( Token.VAR, varNode ) ;^509^^^^^478^538^[REPLACE] Node varNode = new Node ( Token.VAR, nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^509^^^^^478^538^[ADD] Node varNode = new Node ( Token.VAR, nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^for  ( ; currentParent.getType (  )  != Token.SCRIPT || currentParent.getType (  )  != Token.BLOCK;^524^525^^^^478^538^[REPLACE] for  ( ; currentParent.getType (  )  != Token.SCRIPT && currentParent.getType (  )  != Token.BLOCK;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^current =  stubVar, stubVar^526^527^^^^478^538^[REPLACE] current = currentParent, currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^currentParent =  varNode.getParent (  )  )  {}^527^^^^^478^538^[REPLACE] currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^509^510^^^^478^538^[ADD] Node varNode = new Node ( Token.VAR, nameNode ) ; greatGramps.replaceChild ( gramps, varNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node current = varNode;^522^^^^^478^538^[REPLACE] Node current = gramps;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node currentParent = varNode.getParent (  ) ;^523^^^^^478^538^[REPLACE] Node currentParent = gramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node stubVar = new Node ( Token.VAR, parent.cloneTree (  )  ) ;^531^^^^^478^538^[REPLACE] Node stubVar = new Node ( Token.VAR, nameNode.cloneTree (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^531^^^^^478^538^[ADD] Node stubVar = new Node ( Token.VAR, nameNode.cloneTree (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^compiler.report (  ) ;^537^^^^^478^538^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^switch  ( n.declaration.node.getParent (  ) .removeChild (  )  )  {^551^^^^^550^562^[REPLACE] switch  ( n.declaration.node.getParent (  ) .getType (  )  )  {^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^551^552^553^^^550^562^[ADD] switch  ( n.declaration.node.getParent (  ) .getType (  )  )  { case Token.ASSIGN: updateObjLitOrFunctionDeclarationAtAssignNode ( n, alias ) ;^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^switch  ( n.declaration.node.getType (  ) .getType (  )  )  {^551^^^^^550^562^[REPLACE] switch  ( n.declaration.node.getParent (  ) .getType (  )  )  {^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^updateObjLitOrFunctionDeclaration ( n, alias ) ;^553^^^^^550^562^[REPLACE] updateObjLitOrFunctionDeclarationAtAssignNode ( n, alias ) ;^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^updateObjLitOrFunctionDeclaration ( n, alias ) ;^556^^^^^550^562^[REPLACE] updateObjLitOrFunctionDeclarationAtVarNode ( n ) ;^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REMOVE]^String originalName = n.fullName (  ) ;^556^^^^^550^562^[REMOVE] ^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^updateObjLitOrFunctionDeclaration ( n, alias ) ;^559^^^^^550^562^[REPLACE] updateFunctionDeclarationAtFunctionNode ( n ) ;^[METHOD] updateObjLitOrFunctionDeclaration [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean initialized = name.declaration != null;^578^^^^^573^627^[REPLACE] Ref ref = n.declaration;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^578^^^^^573^627^[ADD] Ref ref = n.declaration;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node rvalue = ref.node.getParent (  ) ;^579^^^^^573^627^[REPLACE] Node rvalue = ref.node.getNext (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node rvalue = ref.node.getNext (  ) ;^580^^^^^573^627^[REPLACE] Node varNode = new Node ( Token.VAR ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node varParent = ref.node.getAncestor ( 3 % 3 ) ;^581^^^^^573^627^[REPLACE] Node varParent = ref.node.getAncestor ( 3 ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node gramps = ref.node.getAncestor ( 5 ) ;^582^^^^^573^627^[REPLACE] Node gramps = ref.node.getAncestor ( 2 ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean isObjLit = rvalue.putBooleanProp (  )   ||  Token.OBJECTLIT;^583^^^^^573^627^[REPLACE] boolean isObjLit = rvalue.getType (  )  == Token.OBJECTLIT;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^583^^^^^573^627^[ADD] boolean isObjLit = rvalue.getType (  )  == Token.OBJECTLIT;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  (  n.canEliminate (  )  )  {^585^^^^^573^627^[REPLACE] if  ( isObjLit && n.canEliminate (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( rvalue.getType (  )   !=  Token.FUNCTION )  {^591^^^^^585^610^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^591^592^593^^^585^610^[ADD] if  ( rvalue.getType (  )  == Token.FUNCTION )  { checkForHosedThisReferences ( rvalue, n.docInfo, n ) ; }^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^checkForHosedThisReferences ( varParent, n.docInfo, n ) ;^592^^^^^585^610^[REPLACE] checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( ref.node.getLastChild (  ) .removeChild ( Node.IS_CONSTANT_NAME )  )  {^600^^^^^585^610^[REPLACE] if  ( ref.node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^601^^^^^585^610^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^601^^^^^585^610^[ADD] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node =  varNode;^609^^^^^585^610^[REPLACE] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^609^^^^^585^610^[ADD] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 0 ) , n.fullName (  )  ) ;^597^598^^^^585^610^[REPLACE] Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 2 ) , n.fullName (  )  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^597^598^^^^585^610^[ADD] Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 2 ) , n.fullName (  )  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node = true;^588^^^^^573^627^[REPLACE] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^588^^^^^573^627^[ADD] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( varParent.getType (  )   !=  Token.FUNCTION )  {^591^^^^^573^627^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^591^592^593^^^573^627^[ADD] if  ( rvalue.getType (  )  == Token.FUNCTION )  { checkForHosedThisReferences ( rvalue, n.docInfo, n ) ; }^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^flattenReferencesTo ( p, propAlias ) ;^592^^^^^573^627^[REPLACE] checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^592^^^^^573^627^[ADD] checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( ref.node.getFirstChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^600^^^^^573^627^[REPLACE] if  ( ref.node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^601^^^^^573^627^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node =  varParent;^609^^^^^573^627^[REPLACE] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^609^^^^^573^627^[ADD] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 1 ) , n.fullName (  )  ) ;^597^598^^^^573^627^[REPLACE] Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 2 ) , n.fullName (  )  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^612^^^^^573^627^[REPLACE] if  ( isObjLit )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  &&  1;^613^^^^^573^627^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  &&  0;^613^^^^^573^627^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^613^^^^^573^627^[ADD] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^addStubsForUndeclaredProperties ( n, alias, varNode, varNode ) ;^620^^^^^573^627^[REPLACE] addStubsForUndeclaredProperties ( n, alias, varParent, varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( !varNode .addChildToFront ( varParent )   )  {^622^^^^^573^627^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^varParent.removeChild ( rvalue ) ;^623^^^^^573^627^[REPLACE] varParent.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^compiler .report (  )  ;^626^^^^^573^627^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( docInfo != null ) {^637^638^^^^633^650^[REPLACE] if  ( docInfo == null || ( !docInfo.isConstructor (  )  && !docInfo.hasThisType (  )  )  )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.getType (  )   ||  Token.THIS )  {^642^^^^^633^650^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.canEliminate (  )  )  ) ;^643^644^645^^^633^650^[REPLACE] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^JSError.make ( parentame.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^644^645^^^^633^650^[REPLACE] JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^UNSAFE_THIS, name .canEliminate (  )   )  ) ;^645^^^^^633^650^[REPLACE] UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.putBooleanProp (  )   !=  Token.THIS )  {^642^^^^^633^650^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^compiler.report ( JSError.make ( parentame.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^643^644^645^^^633^650^[REPLACE] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name .canEliminate (  )   )  ) ;^644^645^^^^633^650^[REPLACE] JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^UNSAFE_THIS, name.canEliminate (  )  )  ) ;^645^^^^^633^650^[REPLACE] UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.getType (  )   &&  Token.THIS )  {^642^^^^^641^647^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap 
[ADD]^^642^643^644^645^646^641^647^[ADD] if  ( n.getType (  )  == Token.THIS )  { compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap 
[REPLACE]^compiler.report ( JSError.make ( this.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^643^644^645^^^641^647^[REPLACE] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap 
[REPLACE]^JSError.make ( 0.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^644^645^^^^641^647^[REPLACE] JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap 
[REPLACE]^UNSAFE_THIS, null.fullName (  )  )  ) ;^645^^^^^641^647^[REPLACE] UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node n  parent  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap 
[REPLACE]^boolean initialized = name.declaration != null;^660^^^^^659^693^[REPLACE] Ref ref = n.declaration;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^String name = ref.node.getParent (  ) ;^661^^^^^659^693^[REPLACE] String name = ref.node.getString (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node rvalue = ref.node.getLastChild (  ) ;^662^^^^^659^693^[REPLACE] Node rvalue = ref.node.getFirstChild (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^662^663^^^^659^693^[ADD] Node rvalue = ref.node.getFirstChild (  ) ; Node varNode = ref.node.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node varNode = ref.node.getNext (  ) ;^663^^^^^659^693^[REPLACE] Node varNode = ref.node.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node gramps = rvalue.getParent (  ) ;^664^^^^^659^693^[REPLACE] Node gramps = varNode.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^664^^^^^659^693^[ADD] Node gramps = varNode.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^boolean isObjLit = rvalue.putBooleanProp (  )   !=  Token.OBJECTLIT;^666^^^^^659^693^[REPLACE] boolean isObjLit = rvalue.getType (  )  == Token.OBJECTLIT;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^int numChanges = 1;^667^^^^^659^693^[REPLACE] int numChanges = 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^669^^^^^659^693^[REPLACE] if  ( isObjLit )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^boolean discardKeys = n.aliasingGets == 0;^669^670^671^672^673^659^693^[ADD] if  ( isObjLit )  { boolean discardKeys = n.aliasingGets == 0; numChanges += declareVarsForObjLitValues ( n, name, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^numChanges +=  declareVarsForObjLitValues ( null, nullame, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^671^672^673^^^659^693^[REPLACE] numChanges += declareVarsForObjLitValues ( n, name, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  &&  0;^670^^^^^659^693^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^671^672^673^^^659^693^[ADD] numChanges += declareVarsForObjLitValues ( n, name, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  !=  0 + 0;^670^^^^^659^693^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^numChanges +=  addStubsForUnulldeclaredProperties ( null, nullame, gramps, varNode ) ;^676^^^^^659^693^[REPLACE] numChanges += addStubsForUndeclaredProperties ( n, name, gramps, varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( isObjLit || n.canEliminate (  )  )  {^678^^^^^659^693^[REPLACE] if  ( isObjLit && n.canEliminate (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^680^^^^^659^693^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^gramps.removeChild ( varNode ) ;^680^681^682^^^659^693^[ADD] if  ( !varNode.hasChildren (  )  )  { gramps.removeChild ( varNode ) ; }^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^gramps.replaceChild ( varNode ) ;^681^^^^^659^693^[REPLACE] gramps.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^ref.node = true;^687^^^^^659^693^[REPLACE] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^gramps .replaceChild ( gramps )  ;^681^^^^^659^693^[REPLACE] gramps.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^ref.node = false;^687^^^^^659^693^[REPLACE] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( numChanges  <=  0 )  {^690^^^^^659^693^[REPLACE] if  ( numChanges > 0 )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^compiler .report (  )  ;^691^^^^^659^693^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^boolean initialized = name.declaration != null;^703^^^^^702^707^[REPLACE] Ref ref = n.declaration;^[METHOD] updateFunctionDeclarationAtFunctionNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String fnName  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^String fnName = ref.node.getParent (  ) ;^704^^^^^702^707^[REPLACE] String fnName = ref.node.getString (  ) ;^[METHOD] updateFunctionDeclarationAtFunctionNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String fnName  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^addStubsForUndeclaredProperties ( n, fnName, ref.node.getAncestor ( 1 ) , ref.node.getParent (  )  ) ;^705^706^^^^702^707^[REPLACE] addStubsForUndeclaredProperties ( n, fnName, ref.node.getAncestor ( 2 ) , ref.node.getParent (  )  ) ;^[METHOD] updateFunctionDeclarationAtFunctionNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String fnName  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^n, fnName, ref.node.getAncestor ( 0 ) , ref.node.getParent (  )  ) ;^706^^^^^702^707^[REPLACE] n, fnName, ref.node.getAncestor ( 2 ) , ref.node.getParent (  )  ) ;^[METHOD] updateFunctionDeclarationAtFunctionNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String fnName  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^n, fnName, ref.node.getAncestor ( 2 ) , ref.node .cloneTree (  )   ) ;^706^^^^^702^707^[REPLACE] n, fnName, ref.node.getAncestor ( 2 ) , ref.node.getParent (  )  ) ;^[METHOD] updateFunctionDeclarationAtFunctionNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String fnName  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^int numVars = 3;^727^^^^^726^799^[REPLACE] int numVars = 0;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^int arbitraryNameCounter = 4;^728^^^^^726^799^[REPLACE] int arbitraryNameCounter = 0;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( !discardKeys )  {^748^^^^^726^799^[REPLACE] if  ( discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^objlit.removeChild ( key ) ;objlit.removeChild ( value ) ;^748^749^750^751^^726^799^[ADD] if  ( discardKeys )  { objlit.removeChild ( key ) ; objlit.removeChild ( value ) ; } else {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^754^^^^^748^758^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^754^755^756^^^748^758^[ADD] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode .getBooleanProp (  )  ;^755^^^^^748^758^[REPLACE] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode =  Node.newString ( Token.NAME, qName ) ;^753^^^^^748^758^[REPLACE] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^753^^^^^748^758^[ADD] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.replaceChild ( key ) ;^749^^^^^726^799^[REPLACE] objlit.removeChild ( key ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.replaceChild ( value ) ;^750^^^^^726^799^[REPLACE] objlit.removeChild ( value ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^754^^^^^726^799^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^755^^^^^726^799^[REPLACE] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^755^^^^^726^799^[ADD] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^763^^^^^726^799^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^764^^^^^726^799^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( nameToAddAfter == true )  {^767^^^^^726^799^[REPLACE] if  ( nameToAddAfter != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^767^768^769^770^771^726^799^[ADD] if  ( nameToAddAfter != null )  { varParent.addChildAfter ( newVar, nameToAddAfter ) ; } else { varParent.addChildBefore ( newVar, varNode ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^varParent.addChildBefore ( newVar, value ) ;^770^^^^^767^771^[REPLACE] varParent.addChildBefore ( newVar, varNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^varParent .replaceChildAfter ( newVar , key )  ;^768^^^^^726^799^[REPLACE] varParent.addChildAfter ( newVar, nameToAddAfter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^768^^^^^726^799^[ADD] varParent.addChildAfter ( newVar, nameToAddAfter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^775^^^^^726^799^[REPLACE] if  ( isJsIdentifier )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( p == null )  {^780^^^^^726^799^[REPLACE] if  ( p != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( discardKeys )  {^781^^^^^726^799^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  null;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^784^^^^^726^799^[ADD] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Ref newAlias =   Ref.Type.ALIASING_GET   ;^782^783^^^^726^799^[REPLACE] Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^782^783^^^^726^799^[ADD] Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( value, value.getString (  ) , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^791^^^^^726^799^[ADD] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  varParent;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^p.addRef ( newAlias ) ;^784^785^^^^726^799^[ADD] newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  varNode;^788^^^^^726^799^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^784^785^^^^726^799^[ADD] newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent .getString (  )    ||  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Name p = nameMap.get ( propName ) ;^779^^^^^726^799^[REPLACE] Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^779^^^^^726^799^[ADD] Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^780^781^782^783^784^726^799^[ADD] if  ( p != null )  { if  ( !discardKeys )  { Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ; newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value.getJSDocInfo (  ) , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  null;^788^^^^^726^799^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^for  ( NodevarParent = objlit.getFirstChild (  ) , nextKey; key == true;^730^^^^^726^799^[REPLACE] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( !discardKeys )  {^748^^^^^730^797^[REPLACE] if  ( discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^754^^^^^748^758^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^755^^^^^748^758^[REPLACE] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^755^^^^^748^758^[ADD] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.removeChild ( varParent ) ;^749^^^^^730^797^[REPLACE] objlit.removeChild ( key ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.replaceChild ( varParent ) ;^750^^^^^730^797^[REPLACE] objlit.removeChild ( value ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( key .getType (  )   )  {^754^^^^^730^797^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^754^755^756^^^730^797^[ADD] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^755^^^^^730^797^[REPLACE] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^755^^^^^730^797^[ADD] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^763^^^^^730^797^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^764^^^^^730^797^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  (varNode == null )  {^767^^^^^730^797^[REPLACE] if  ( nameToAddAfter != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^varParent.addChildBefore ( varParent, varNode ) ;^770^^^^^767^771^[REPLACE] varParent.addChildBefore ( newVar, varNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^770^771^^^^767^771^[ADD] varParent.addChildBefore ( newVar, varNode ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^varParent.addChildBefore ( newVar, varParent ) ;^768^^^^^730^797^[REPLACE] varParent.addChildAfter ( newVar, nameToAddAfter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^768^^^^^730^797^[ADD] varParent.addChildAfter ( newVar, nameToAddAfter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^775^^^^^730^797^[REPLACE] if  ( isJsIdentifier )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( p == null )  {^780^^^^^730^797^[REPLACE] if  ( p != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^780^781^782^783^784^730^797^[ADD] if  ( p != null )  { if  ( !discardKeys )  { Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ; newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( discardKeys )  {^781^^^^^730^797^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^781^782^783^784^785^730^797^[ADD] if  ( !discardKeys )  { Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ; newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  varParent;^784^^^^^730^797^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Ref newAlias =   Ref.Type.ALIASING_GET   ;^782^783^^^^730^797^[REPLACE] Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^782^783^^^^730^797^[ADD] Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^790^^^^^730^797^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( value, value.getString (  ) , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( value, value .getString (  )  , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^791^^^^^730^797^[ADD] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  null;^788^^^^^730^797^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( !true )  {^781^^^^^730^797^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^784^^^^^730^797^[ADD] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^790^^^^^730^797^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value.getString (  ) , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value.getJSDocInfo (  ) , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REMOVE]^flattenPrefixes ( alias, p, depth + 1 ) ;^791^^^^^730^797^[REMOVE] ^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  varParent;^788^^^^^730^797^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Name p = nameMap.get ( propName ) ;^779^^^^^730^797^[REPLACE] Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^790^791^792^^^730^797^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varNode, value.getJSDocInfo (  ) , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^p.addRef ( newAlias ) ;^784^785^^^^730^797^[ADD] newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  varNode;^788^^^^^730^797^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  null;^784^^^^^730^797^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value .getString (  )  , p ) ;^791^^^^^730^797^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nextKey =  varParent.getNext (  ) ;^733^^^^^730^797^[REPLACE] nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^733^^^^^730^797^[ADD] nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode =  Node.newString ( Token.NAME, qName ) ;^753^^^^^730^797^[REPLACE] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^addAfter = newVar; ;^773^^^^^730^797^[REPLACE] nameToAddAfter = newVar;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^788^^^^^730^797^[ADD] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node value = varParent.getParent (  ) ;^732^^^^^730^797^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^732^733^^^^730^797^[ADD] Node value = key.getNext (  ) ; nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^boolean isJsIdentifier = key.getType (  )  != Token.NUMBER ||   key.getString (  )  ;^740^741^^^^730^797^[REPLACE] boolean isJsIdentifier = key.getType (  )  != Token.NUMBER && TokenStream.isJSIdentifier ( key.getString (  )  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propName = isJsIdentifier ? varParent .newString ( propName )   : String.valueOf ( ++arbitraryNameCounter ) ;^742^743^^^^730^797^[REPLACE] String propName = isJsIdentifier ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propAlias = appendPropForAlias ( propAlias, propName ) ;^744^^^^^730^797^[REPLACE] String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^744^^^^^730^797^[ADD] String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String qName = objlitName.fullName (  )   !=  '.'  !=  propName;^745^^^^^730^797^[REPLACE] String qName = objlitName.fullName (  )  + '.' + propName;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node refNode = true;^747^^^^^730^797^[REPLACE] Node refNode = null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node nameNode = Node.replaceChild ( Token.NAME, propAlias ) ;^761^^^^^730^797^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node newVar = new Node ( Token.VAR, varParent ) ;^766^^^^^730^797^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^key =  varParent )  {^731^^^^^726^799^[REPLACE] key = nextKey )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^731^732^^^^726^799^[ADD] key = nextKey )  { Node value = key.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nextKey =  varParent.getNext (  ) ;^733^^^^^726^799^[REPLACE] nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^733^^^^^726^799^[ADD] nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode =  Node.newString ( Token.NAME, qName ) ;^753^^^^^726^799^[REPLACE] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^addAfter = newVar; ;^773^^^^^726^799^[REPLACE] nameToAddAfter = newVar;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^773^^^^^726^799^[ADD] nameToAddAfter = newVar;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  varParent;^788^^^^^726^799^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^for  ( Node key = varParent.getFirstChild (  ) , nextKey; key != null;^730^^^^^726^799^[REPLACE] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node rvalue = ref.node.getFirstChild (  ) ;^730^^^^^726^799^[REPLACE] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^730^731^732^733^^726^799^[ADD] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null; key = nextKey )  { Node value = key.getNext (  ) ; nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node value = varParent .getParent (  )  ;^732^^^^^726^799^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^732^^^^^726^799^[ADD] Node value = key.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^boolean isJsIdentifier = key.getType (  )  != Token.NUMBER ||   key.getString (  )  ;^740^741^^^^726^799^[REPLACE] boolean isJsIdentifier = key.getType (  )  != Token.NUMBER && TokenStream.isJSIdentifier ( key.getString (  )  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^740^741^742^743^744^726^799^[ADD] boolean isJsIdentifier = key.getType (  )  != Token.NUMBER && TokenStream.isJSIdentifier ( key.getString (  )  ) ; String propName = isJsIdentifier ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ; String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propName = true ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ;^742^743^^^^726^799^[REPLACE] String propName = isJsIdentifier ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propAlias = appendPropForAlias ( propAlias, propName ) ;^744^^^^^726^799^[REPLACE] String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String qName = objlitName.fullName (  )   |  '.'  |  qName;^745^^^^^726^799^[REPLACE] String qName = objlitName.fullName (  )  + '.' + propName;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node refNode = true;^747^^^^^726^799^[REPLACE] Node refNode = null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node nameNode = Node.newString ( Token.NAME, qName ) ;^761^^^^^726^799^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node newVar = new Node ( Token.VAR, varParent ) ;^766^^^^^726^799^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^return arbitraryNameCounter;^798^^^^^726^799^[REPLACE] return numVars;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isStatementBlock ( nameNode )  ) ;^816^^^^^815^843^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatementBlock ( parent )  ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^816^817^^^^815^843^[ADD] Preconditions.checkArgument ( NodeUtil.isStatementBlock ( parent )  ) ; int numStubs = 0;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isObjectLitKey ( nameNode )  ) ;^816^^^^^815^843^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatementBlock ( parent )  ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^int numStubs = 1;^817^^^^^815^843^[REPLACE] int numStubs = 0;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^817^^^^^815^843^[ADD] int numStubs = 0;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^818^^^^^815^843^[REPLACE] if  ( n.props != null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( aliasParent.getType (  )  == Token.NAME )  {^820^^^^^815^843^[REPLACE] if  ( p.needsToBeStubbed (  )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( parent !=parent )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^parent.addChildToFront ( newVar ) ;parent.addChildAfter ( newVar, addAfter ) ;addAfter = newVar;^824^825^826^827^828^815^843^[ADD] if  ( addAfter == null )  { parent.addChildToFront ( newVar ) ; } else { parent.addChildAfter ( newVar, addAfter ) ; addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameToAddAfter = newVar; ;^828^^^^^824^829^[REPLACE] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToBack ( newVar ) ;^825^^^^^815^843^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^825^^^^^815^843^[ADD] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 4 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^837^^^^^835^838^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^837^^^^^835^838^[ADD] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameToAddAfter = newVar; ;^828^^^^^815^843^[REPLACE] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^String propAlias = appendPropForAlias ( propAlias, p.name ) ;^821^^^^^815^843^[REPLACE] String propAlias = appendPropForAlias ( alias, p.name ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node nameNode = Node .getString (  )  ;^822^^^^^815^843^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node newVar = new Node ( Token.VAR, parent ) ;^823^^^^^815^843^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( addAfter != this  )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 1 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ;^819^^^^^815^843^[REPLACE] for  ( Name p : n.props )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^821^822^^^^815^843^[ADD] String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node nameNode = Node.newString ( Token.NAME, alias ) ;^822^^^^^815^843^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^String propAlias = appendPropForAlias ( alias, p.name ) ;Node nameNode = Node.newString ( Token.NAME, propAlias ) ;Node newVar = new Node ( Token.VAR, nameNode ) ;^820^821^822^823^^815^843^[ADD] if  ( p.needsToBeStubbed (  )  )  { String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ; Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( addAfter != this )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^828^^^^^824^829^[ADD] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToFront ( nameNode ) ;^825^^^^^815^843^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REMOVE]^parent.removeChild ( rvalue ) ;^825^^^^^815^843^[REMOVE] ^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 2 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^828^^^^^815^843^[ADD] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^823^^^^^815^843^[ADD] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  (parent != null )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 0L ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^835^836^837^838^^815^843^[ADD] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode .getBooleanProp (  )  ;^837^^^^^835^838^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^return root + '$' + prop;^842^^^^^815^843^[REPLACE] return numStubs;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( prop.indexOf ( '$' )   ==  -1 )  {^846^^^^^845^853^[REPLACE] if  ( prop.indexOf ( '$' )  != -1 )  {^[METHOD] appendPropForAlias [TYPE] String [PARAMETER] String root String prop [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  refs  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  String prop  root  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^prop =  root.replaceAll ( "\\$", "\\$0" ) ;^850^^^^^845^853^[REPLACE] prop = prop.replaceAll ( "\\$", "\\$0" ) ;^[METHOD] appendPropForAlias [TYPE] String [PARAMETER] String root String prop [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  refs  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  String prop  root  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^return false;^852^^^^^845^853^[REPLACE] return root + '$' + prop;^[METHOD] appendPropForAlias [TYPE] String [PARAMETER] String root String prop [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  List globalNames  refs  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  String prop  root  [TYPE]  Map nameMap  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS 
[REPLACE]^if  ( n.getType (  )   !=  Token.THIS )  {^642^^^^^641^647^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^compiler.report ( JSError.make ( false.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^643^644^645^^^641^647^[REPLACE] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^643^644^645^^^641^647^[ADD] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^JSError.make ( true.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^644^645^^^^641^647^[REPLACE] JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^UNSAFE_THIS, 0.fullName (  )  )  ) ;^645^^^^^641^647^[REPLACE] UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
