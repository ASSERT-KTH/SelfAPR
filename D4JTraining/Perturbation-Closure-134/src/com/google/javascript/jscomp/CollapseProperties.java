[REPLACE]^static final DiagnosticType UNSAFE_NAMESPACE_WARNING ;^76^77^78^79^^76^79^[REPLACE] static final DiagnosticType UNSAFE_NAMESPACE_WARNING = DiagnosticType.warning ( "JSC_UNSAFE_NAMESPACE", "incomplete alias created for namespace {0}" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^static final DiagnosticType NAMESPACE_REDEFINED_WARNING ;^81^82^83^84^^81^84^[REPLACE] static final DiagnosticType NAMESPACE_REDEFINED_WARNING = DiagnosticType.warning ( "JSC_NAMESPACE_REDEFINED", "namespace {0} should not be redefined" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^static  DiagnosticType UNSAFE_THIS = DiagnosticType.warning ( "JSC_UNSAFE_THIS", "dangerous use of 'this' in static method {0}" ) ;^86^87^88^^^86^88^[REPLACE] static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning ( "JSC_UNSAFE_THIS", "dangerous use of 'this' in static method {0}" ) ;^ [CLASS] CollapseProperties 1  
[REPLACE]^private  boolean collapsePropertiesOnExternTypes;^98^^^^^^^[REPLACE] private final boolean collapsePropertiesOnExternTypes;^ [CLASS] CollapseProperties 1  
[REPLACE]^Name n  ;^121^^^^^120^149^[REPLACE] GlobalNamespace namespace;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^122^^^^^120^149^[REPLACE] if  ( collapsePropertiesOnExternTypes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, externs, root )  ;^125^^^^^122^126^[REPLACE] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, root )  ;^123^^^^^120^149^[REPLACE] namespace = new GlobalNamespace ( compiler, externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^123^^^^^120^149^[ADD] namespace = new GlobalNamespace ( compiler, externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^namespace = new GlobalNamespace ( compiler, externs, root )  ;^125^^^^^120^149^[REPLACE] namespace = new GlobalNamespace ( compiler, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^128^^^^^120^149^[REPLACE] if  ( inlineAliases )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^( n.canEliminate (  )  )  ;^129^^^^^120^149^[REPLACE] inlineAliases ( namespace ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^131^132^^^^120^149^[ADD] nameMap = namespace.getNameIndex (  ) ; globalNames = namespace.getNameForest (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^globalNames =  null.getNameForest (  ) ;^132^^^^^120^149^[REPLACE] globalNames = namespace.getNameForest (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^( n.canEliminate (  )  )  ;^133^^^^^120^149^[REPLACE] checkNamespaces (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[ADD]^^135^136^137^^^120^149^[ADD] for  ( Name n : globalNames )  { flattenReferencesToCollapsibleDescendantNames ( n, n.name ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^flattenReferencesToCollapsibleDescendantNames ( p, propAlias )  ;^136^^^^^120^149^[REPLACE] flattenReferencesToCollapsibleDescendantNames ( n, n.name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^GlobalNamespace namespace  ;^135^^^^^120^149^[REPLACE] for  ( Name n : globalNames )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^( n.canEliminate (  )  )  ;^143^^^^^120^149^[REPLACE] collapseDeclarationOfNameAndDescendants ( n, n.name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^GlobalNamespace namespace  ;^142^^^^^120^149^[REPLACE] for  ( Name n : globalNames )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node externs  root  [TYPE]  List globalNames  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Name n 
[REPLACE]^Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameIndex (  )  ) ;^168^^^^^166^197^[REPLACE] Deque<Name> workList = new ArrayDeque<Name> ( namespace.getNameForest (  )  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( name.globalSets == 1 ) {^172^173^^^^166^197^[REPLACE] if  ( name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET || ref.scope.isLocal (  )  )  {^178^^^^^172^185^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^180^^^^^172^185^[REPLACE] if  ( inlineAliasIfPossible ( ref, namespace )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Node nextKey  ;^176^^^^^172^185^[REPLACE] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^177^^^^^172^185^[REPLACE] for  ( Ref ref : refs )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Type.ALIASING_GET || ref.scope.isLocal (  )  )  {^178^^^^^166^197^[REPLACE] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^178^179^180^181^182^166^197^[ADD] if  ( ref.type == Type.ALIASING_GET && ref.scope.isLocal (  )  )  {  if  ( inlineAliasIfPossible ( ref, namespace )  )  { name.removeRef ( ref ) ; }^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^180^^^^^166^197^[REPLACE] if  ( inlineAliasIfPossible ( ref, namespace )  )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^name.addRef ( ref ) ;^181^^^^^166^197^[REPLACE] name.removeRef ( ref ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^if  (  ( name.type != Name.Type.OBJECTLIT ) {^189^190^191^^^166^197^[REPLACE] if  (  ( name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^189^190^191^^^166^197^[ADD] if  (  ( name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION )  && name.aliasingGets == 0 && name.props != null )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^( n.canEliminate (  )  )  ;^194^^^^^189^195^[REPLACE] workList.addAll ( name.props ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[ADD]^^194^^^^^189^195^[ADD] workList.addAll ( name.props ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Name name = null .isEmpty (  )  ;^170^^^^^173^185^[REPLACE] Name name = workList.pop (  ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Node nextKey  ;^176^^^^^173^185^[REPLACE] List<Ref> refs = Lists.newArrayList ( name.refs ) ;^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^177^^^^^173^185^[REPLACE] for  ( Ref ref : refs )  {^[METHOD] inlineAliases [TYPE] void [PARAMETER] GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  GlobalNamespace namespace  [TYPE]  Deque workList  [TYPE]  Name name 
[REPLACE]^Node aliasParent = alias.node.cloneTree (  ) ;^204^^^^^199^244^[REPLACE] Node aliasParent = alias.node.getParent (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( aliasParent.getType (  )   !=  Token.NAME )  {^205^^^^^199^244^[REPLACE] if  ( aliasParent.getType (  )  == Token.NAME )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^205^206^207^208^209^199^244^[ADD] if  ( aliasParent.getType (  )  == Token.NAME )  {  Scope scope = alias.scope; Var aliasVar = scope.getVar ( aliasParent.getString (  )  ) ; ReferenceCollectingCallback collector =^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( aliasRefs.isWellDefined (  ) || aliasRefs.firstReferenceIsAssigningDeclaration (  ) || aliasRefs.isAssignedOnce (  )  )  {^217^218^219^^^199^244^[REPLACE] if  ( aliasRefs.isWellDefined (  ) && aliasRefs.firstReferenceIsAssigningDeclaration (  ) && aliasRefs.isAssignedOnce (  )  )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return false;^239^^^^^217^240^[REPLACE] return true;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^221^^^^^217^240^[ADD] int size = aliasRefs.references.size (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  0 );^222^^^^^217^240^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^223^^^^^217^240^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( size ) ;^224^225^^^^217^240^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^227^228^^^^217^240^[ADD] Node newNode = alias.node.cloneTree (  ) ; aliasRef.getParent (  ) .replaceChild ( aliasRef.getNameNode (  ) , newNode ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return false;^239^^^^^199^244^[REPLACE] return true;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node nextKey  ;^207^^^^^199^244^[REPLACE] Scope scope = alias.scope;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^208^^^^^199^244^[ADD] Var aliasVar = scope.getVar ( aliasParent.getString (  )  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^221^^^^^199^244^[ADD] int size = aliasRefs.references.size (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size  1);^222^^^^^199^244^[REPLACE] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^223^^^^^199^244^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( size ) ;^224^225^^^^199^244^[REPLACE] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node newNode = alias.node .getParent (  )  ;^227^^^^^199^244^[REPLACE] Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node nextKey  ;^221^^^^^217^240^[REPLACE] int size = aliasRefs.references.size (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^223^224^225^^227^217^240^[ADD] for  ( int i = 1; i < size; i++ )  { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ; Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^224^225^^^^217^240^[ADD] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^Node newNode = alias.node .getParent (  )  ;^227^^^^^217^240^[REPLACE] Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return true;  ;^239^^^^^199^244^[REPLACE] return true;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^207^208^^^^199^244^[ADD] Scope scope = alias.scope; Var aliasVar = scope.getVar ( aliasParent.getString (  )  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^222^^^^^199^244^[ADD] Set<Node> newNodes = Sets.newHashSetWithExpectedSize ( size - 1 ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^^223^224^225^^227^199^244^[ADD] for  ( int i = 1; i < size; i++ )  { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get ( i ) ; Node newNode = alias.node.cloneTree (  ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[ADD]^aliasRef.getParent (  ) .replaceChild ( aliasRef.getNameNode (  ) , newNode ) ;^227^228^^^^199^244^[ADD] Node newNode = alias.node.cloneTree (  ) ; aliasRef.getParent (  ) .replaceChild ( aliasRef.getNameNode (  ) , newNode ) ;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^return true;^243^^^^^199^244^[REPLACE] return false;^[METHOD] inlineAliasIfPossible [TYPE] boolean [PARAMETER] Ref alias GlobalNamespace namespace [CLASS] CollapseProperties 1   [TYPE]  ReferenceCollectingCallback collector  [TYPE]  Set newNodes  [TYPE]  Var aliasVar  [TYPE]  Reference aliasRef  [TYPE]  Node aliasParent  newNode  [TYPE]  GlobalNamespace namespace  [TYPE]  int i  size  [TYPE]  AbstractCompiler compiler  [TYPE]  Ref alias  [TYPE]  boolean collapsePropertiesOnExternTypes  false  inlineAliases  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  ReferenceCollection aliasRefs 
[REPLACE]^if  ( name.isNamespace (  )  && name.refs == null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^252^253^^^^250^269^[REPLACE] if  ( name.isNamespace (  )  && name.refs != null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Ref.Type.SET_FROM_GLOBAL && ref.type == Ref.Type.SET_FROM_LOCAL )  {^256^257^^^^252^267^[REPLACE] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^256^257^258^259^260^252^267^[ADD] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  { if  ( initialized )  { warnAboutNamespaceRedefinition ( name, ref ) ; }^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( true )  {^258^^^^^252^267^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  if  ( ref.type  &&  Ref.Type.ALIASING_GET )  {^263^^^^^252^267^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^255^256^257^258^259^252^267^[ADD] for  ( Ref ref : name.refs )  { if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  { if  ( initialized )  { warnAboutNamespaceRedefinition ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^initialized = false;^262^^^^^252^267^[REPLACE] initialized = true;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^boolean initialized = name.declaration == null;^254^^^^^252^267^[REPLACE] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( ref.type == Ref.Type.SET_FROM_GLOBAL && ref.type == Ref.Type.SET_FROM_LOCAL )  {^256^257^^^^250^269^[REPLACE] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  else {^263^^^^^250^269^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^warnAboutNamespaceRedefinition ( name, ref )  ;^264^^^^^250^269^[REPLACE] warnAboutNamespaceAliasing ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^258^^^^^256^265^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^262^^^^^256^265^[ADD] initialized = true;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( true )  {^258^^^^^250^269^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^warnAboutNamespaceAliasing ( name, ref )  ;^259^^^^^250^269^[REPLACE] warnAboutNamespaceRedefinition ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  if  ( ref.type  &&  Ref.Type.ALIASING_GET )  {^263^^^^^250^269^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^251^252^253^254^^250^269^[ADD] for  ( Name name : nameMap.values (  )  )  { if  ( name.isNamespace (  )  && name.refs != null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  { boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( name.isNamespace (  )  && name.refs == this && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^252^253^^^^250^269^[REPLACE] if  ( name.isNamespace (  )  && name.refs != null && ( name.aliasingGets > 0 || name.localSets + name.globalSets > 1 )  )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^258^^^^^252^267^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^} else if  ( ref.type  !=  Ref.Type.ALIASING_GET )  {^263^^^^^252^267^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^255^^^^^252^267^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  (  ref.type == Ref.Type.SET_FROM_LOCAL )  {^256^257^^^^250^269^[REPLACE] if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^}  if  ( ref.type  !=  Ref.Type.ALIASING_GET )  {^263^^^^^250^269^[REPLACE] } else if  ( ref.type == Ref.Type.ALIASING_GET )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^}   warnAboutNamespaceAliasing ( name, ref ) ;^263^264^265^^^250^269^[ADD] else if  ( ref.type == Ref.Type.ALIASING_GET )  { warnAboutNamespaceAliasing ( name, ref ) ; }^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^258^^^^^250^269^[REPLACE] if  ( initialized )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^259^^^^^250^269^[ADD] warnAboutNamespaceRedefinition ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^264^^^^^250^269^[ADD] warnAboutNamespaceAliasing ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^initialized = false;^262^^^^^253^267^[REPLACE] initialized = true;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^254^^^^^253^267^[ADD] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^255^^^^^253^267^[REPLACE] for  ( Ref ref : name.refs )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^251^^^^^253^267^[REPLACE] for  ( Name name : nameMap.values (  )  )  {^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^boolean initialized = name.declaration == false;^254^^^^^253^267^[REPLACE] boolean initialized = name.declaration != null;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[ADD]^^255^256^257^258^259^253^267^[ADD] for  ( Ref ref : name.refs )  { if  ( ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.SET_FROM_LOCAL )  { if  ( initialized )  { warnAboutNamespaceRedefinition ( name, ref ) ;^[METHOD] checkNamespaces [TYPE] void [PARAMETER] [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.refs == true )  {^325^^^^^324^350^[REPLACE] if  ( n.refs != null )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^String originalName = n.fullName (  ) ;^325^326^327^328^^324^350^[ADD] if  ( n.refs != null )  { String originalName = n.fullName (  ) ; for  ( Ref r : n.refs )  { Node rParent = r.node.getParent (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  != null || r.isSet (  )  )  )  {^335^336^^^^324^350^[REPLACE] if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  == null || r.isSet (  )  )  )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenNameRef ( alias, r.node, rParent, alias ) ;^337^^^^^335^338^[REPLACE] flattenNameRef ( alias, r.node, rParent, originalName ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^326^^^^^325^340^[ADD] String originalName = n.fullName (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^GlobalNamespace namespace  ;^327^^^^^325^340^[REPLACE] for  ( Ref r : n.refs )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^Node rParent = r.node .cloneTree (  )  ;^328^^^^^325^340^[REPLACE] Node rParent = r.node.getParent (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  != null ) {^335^336^^^^324^350^[REPLACE] if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  == null || r.isSet (  )  )  )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^335^336^337^338^^324^350^[ADD] if  ( !NodeUtil.isObjectLitKey ( r.node, rParent )  && ( r.getTwin (  )  == null || r.isSet (  )  )  )  { flattenNameRef ( alias, r.node, rParent, originalName ) ; }^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^flattenNameRef ( alias, n.getFirstChild (  ) , n, originalName )  ;^337^^^^^335^338^[REPLACE] flattenNameRef ( alias, r.node, rParent, originalName ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REMOVE]^( getParent (  ) .getType (  )  )  ;^337^^^^^335^338^[REMOVE] ^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^String originalName = n .canEliminate (  )  ;^326^^^^^325^340^[REPLACE] String originalName = n.fullName (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^328^^^^^325^340^[ADD] Node rParent = r.node.getParent (  ) ;^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^345^^^^^324^350^[REPLACE] if  ( n.props != null )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^345^346^347^348^^324^350^[ADD] if  ( n.props != null )  { for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ; }^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^346^347^348^^^345^349^[ADD] for  ( Name p : n.props )  { flattenPrefixes ( alias, p, 1 ) ; }^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^GlobalNamespace namespace  ;^346^^^^^345^349^[REPLACE] for  ( Name p : n.props )  {^[METHOD] flattenReferencesTo [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node rParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^String originalName = n .canEliminate (  )  ;^364^^^^^361^386^[REPLACE] String originalName = n.fullName (  ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( n.declaration != null && n.declaration.node != null && n.declaration.node.getType (  )  != Token.GETPROP )  {^365^366^^^^361^386^[REPLACE] if  ( n.declaration != null && n.declaration.node != null && n.declaration.node.getType (  )  == Token.GETPROP )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^flattenNameRefAtDepth ( originalName, n.declaration.node, depth, originalName ) ;^367^^^^^365^368^[REPLACE] flattenNameRefAtDepth ( alias, n.declaration.node, depth, originalName ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if   (  p != null  )   {  ;^370^^^^^361^386^[REPLACE] if  ( n.refs != null )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( r.getTwin (  )  != null || r.isSet (  )  )  {^375^^^^^361^386^[REPLACE] if  ( r.getTwin (  )  == null || r.isSet (  )  )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^flattenNameRef ( alias, r.node, rParent, originalName )  ;^376^^^^^361^386^[REPLACE] flattenNameRefAtDepth ( alias, r.node, depth, originalName ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[ADD]^^371^372^^^^370^379^[ADD] for  ( Ref r : n.refs )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  (  r.isSet (  )  )  {^375^^^^^361^386^[REPLACE] if  ( r.getTwin (  )  == null || r.isSet (  )  )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[ADD]^^376^^^^^361^386^[ADD] flattenNameRefAtDepth ( alias, r.node, depth, originalName ) ;^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^GlobalNamespace namespace  ;^371^^^^^370^379^[REPLACE] for  ( Ref r : n.refs )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^381^^^^^361^386^[REPLACE] if  ( n.props != null )  {^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[ADD]^^382^383^384^^^381^385^[ADD] for  ( Name p : n.props )  { flattenPrefixes ( alias, p, depth + 1 ) ; }^[METHOD] flattenPrefixes [TYPE] void [PARAMETER] String alias Name n int depth [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref r  [TYPE]  boolean collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  originalName  [TYPE]  Map nameMap  [TYPE]  int depth  [TYPE]  Name n  p 
[REPLACE]^boolean canCollapseChildNames = n.canCollapse (  ) ;^443^^^^^442^465^[REPLACE] boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames (  ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.canCollapse (  )  || canCollapseChildNames )  {^446^^^^^442^465^[REPLACE] if  ( n.canCollapse (  )  && canCollapseChildNames )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^446^447^448^^^442^465^[ADD] if  ( n.canCollapse (  )  && canCollapseChildNames )  { updateObjLitOrFunctionDeclaration ( n, alias ) ; }^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^updateObjLitOrFunctionDeclarationAtAssignNode ( n, alias )  ;^447^^^^^442^465^[REPLACE] updateObjLitOrFunctionDeclaration ( n, alias ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^447^^^^^442^465^[ADD] updateObjLitOrFunctionDeclaration ( n, alias ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  ( n.props == null )  {^450^^^^^442^465^[REPLACE] if  ( n.props != null )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^450^451^^453^454^442^465^[ADD] if  ( n.props != null )  { for  ( Name p : n.props )  { collapseDeclarationOfNameAndDescendants ( p, appendPropForAlias ( alias, p.name )  ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  (  canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  != Token.ASSIGN )  {^456^457^458^459^^442^465^[REPLACE] if  ( !p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^456^457^458^459^460^442^465^[ADD] if  ( !p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  == Token.ASSIGN )  { updateSimpleDeclaration (^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^updateSimpleDeclaration ( appendPropForAlias ( alias, p.name ) , p, p.declaration )  ;^461^^^^^456^462^[REPLACE] appendPropForAlias ( alias, p.name ) , p, p.declaration ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^GlobalNamespace namespace  ;^451^^^^^450^464^[REPLACE] for  ( Name p : n.props )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^if  (  true && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  != Token.ASSIGN )  {^456^457^458^459^^442^465^[REPLACE] if  ( !p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent (  )  != null && p.declaration.node.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[ADD]^^461^^^^^456^462^[ADD] appendPropForAlias ( alias, p.name ) , p, p.declaration ) ;^[METHOD] collapseDeclarationOfNameAndDescendants [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n  p 
[REPLACE]^Node rvalue = ref.node.getParent (  ) ;^479^^^^^478^538^[REPLACE] Node rvalue = ref.node.getNext (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node parent = ref.node.getNext (  ) ;^480^^^^^478^538^[REPLACE] Node parent = ref.node.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^481^^^^^478^538^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^Node greatGreatGramps = greatGramps.getParent (  ) ;^482^483^^^^478^538^[ADD] Node greatGramps = gramps.getParent (  ) ; Node greatGreatGramps = greatGramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node parent = getParent (  )  ;^483^^^^^478^538^[REPLACE] Node greatGreatGramps = greatGramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, gramps.getLastChild (  ) , refName.fullName (  )  ) ;^486^487^^^^478^538^[REPLACE] Node nameNode = NodeUtil.newName ( alias, gramps.getFirstChild (  ) , refName.fullName (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^NodeUtil.copyNameAnnotations ( ref.node.getFirstChild (  ) , varNode ) ;^488^^^^^478^538^[REPLACE] NodeUtil.copyNameAnnotations ( ref.node.getLastChild (  ) , nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^getFirstChild (  )  ;^488^^^^^478^538^[REPLACE] NodeUtil.copyNameAnnotations ( ref.node.getLastChild (  ) , nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^if  ( gramps.getType (  )   !=  Token.EXPR_RESULT )  {^490^^^^^478^538^[REPLACE] if  ( gramps.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^current =  varNode, varNode^526^527^^^^490^535^[REPLACE] current = currentParent, currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^currentParent =  varNode.getParent (  )  )  {}^527^^^^^490^535^[REPLACE] currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node nextKey  ;^522^^^^^490^535^[REPLACE] Node current = gramps;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node currentParent = gramps.getString (  ) ;^523^^^^^490^535^[REPLACE] Node currentParent = gramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node stubVar = new Node ( Token.VAR, varNode.cloneTree (  )  ) ;^531^^^^^490^535^[REPLACE] Node stubVar = new Node ( Token.VAR, nameNode.cloneTree (  )  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node nameNode = newString ( Token.NAME, propAlias )  ;^509^^^^^478^538^[REPLACE] Node varNode = new Node ( Token.VAR, nameNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^current =  null, null^526^527^^^^478^538^[REPLACE] current = currentParent, currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^currentParent =  varNode.getParent (  )  )  {}^527^^^^^478^538^[REPLACE] currentParent = currentParent.getParent (  )  )  {}^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^509^510^^^^478^538^[ADD] Node varNode = new Node ( Token.VAR, nameNode ) ; greatGramps.replaceChild ( gramps, varNode ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^522^^^^^478^538^[ADD] Node current = gramps;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^Node currentParent = varNode.getParent (  ) ;^523^^^^^478^538^[REPLACE] Node currentParent = gramps.getParent (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^531^532^^^^478^538^[ADD] Node stubVar = new Node ( Token.VAR, nameNode.cloneTree (  )  ) ; currentParent.addChildBefore ( stubVar, current ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[REPLACE]^compiler .report (  )  ;^537^^^^^478^538^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^537^^^^^478^538^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] updateSimpleDeclaration [TYPE] void [PARAMETER] String alias Name refName Ref ref [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  false  initialized  inlineAliases  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node current  currentParent  gramps  greatGramps  greatGreatGramps  nameNode  parent  rvalue  stubVar  varNode  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name refName 
[ADD]^^578^^^^^573^627^[ADD] Ref ref = n.declaration;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node rvalue = ref.node.getParent (  ) ;^579^^^^^573^627^[REPLACE] Node rvalue = ref.node.getNext (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^580^581^^^^573^627^[ADD] Node varNode = new Node ( Token.VAR ) ; Node varParent = ref.node.getAncestor ( 3 ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node varParent = ref.node .getNext (  )  ;^581^^^^^573^627^[REPLACE] Node varParent = ref.node.getAncestor ( 3 ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^582^^^^^573^627^[ADD] Node gramps = ref.node.getAncestor ( 2 ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean isObjLit = rvalue.getType (  )   ||  Token.OBJECTLIT;^583^^^^^573^627^[REPLACE] boolean isObjLit = rvalue.getType (  )  == Token.OBJECTLIT;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( isObjLit ) {^585^^^^^573^627^[REPLACE] if  ( isObjLit && n.canEliminate (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( rvalue.getType (  )   !=  Token.FUNCTION )  {^591^^^^^585^610^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p )  ;^592^^^^^585^610^[REPLACE] checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REMOVE]^collector.getReferenceCollection ( aliasVar )  ;^592^^^^^585^610^[REMOVE] ^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if   (  get  (  0  )  getLastChild  (    )  .getBooleanProp  (  Node.IS_CONSTANT_NAME  )    )   {  ;^600^^^^^585^610^[REPLACE] if  ( ref.node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^600^601^602^^^585^610^[ADD] if  ( ref.node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^key.getBooleanProp ( Node.IS_CONSTANT_NAME )  ;^601^^^^^585^610^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^601^^^^^585^610^[ADD] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node =  varParent;^609^^^^^585^610^[REPLACE] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 0 ) , n.fullName (  )  ) ;^597^598^^^^585^610^[REPLACE] Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 2 ) , n.fullName (  )  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^588^^^^^573^627^[ADD] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( rvalue .getString (  )    ||  Token.FUNCTION )  {^591^^^^^573^627^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p )  ;^592^^^^^573^627^[REPLACE] checkForHosedThisReferences ( rvalue, n.docInfo, n ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if   (  get  (  0  )  getLastChild  (    )  .getBooleanProp  (  Node.IS_CONSTANT_NAME  )    )   {  ;^600^^^^^573^627^[REPLACE] if  ( ref.node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^key.getBooleanProp ( Node.IS_CONSTANT_NAME )  ;^601^^^^^573^627^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^601^^^^^573^627^[ADD] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node = this;^588^^^^^573^627^[REPLACE] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^ref.node =  varNode;^609^^^^^573^627^[REPLACE] ref.node = nameNode;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 1 ) , n.fullName (  )  ) ;^597^598^^^^573^627^[REPLACE] Node nameNode = NodeUtil.newName ( alias, ref.node.getAncestor ( 2 ) , n.fullName (  )  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( inlineAliases )  {^612^^^^^573^627^[REPLACE] if  ( isObjLit )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  ||  1;^613^^^^^573^627^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  &&  0;^613^^^^^573^627^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^addStubsForUndeclaredProperties ( n, name, gramps, varNode )  ;^620^^^^^573^627^[REPLACE] addStubsForUndeclaredProperties ( n, alias, varParent, varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^622^^^^^573^627^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^622^623^624^^^573^627^[ADD] if  ( !varNode.hasChildren (  )  )  { varParent.removeChild ( varNode ) ; }^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^varParent.replaceChild ( rvalue ) ;^623^^^^^573^627^[REPLACE] varParent.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^623^^^^^573^627^[ADD] varParent.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^compiler.report (  ) ;^626^^^^^573^627^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[ADD]^^626^^^^^573^627^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtAssignNode [TYPE] void [PARAMETER] Name n String alias [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  nameNode  rvalue  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  [TYPE]  Map nameMap  [TYPE]  Name n 
[REPLACE]^if  ( docInfo != null || ( !docInfo.isConstructor (  )  && !docInfo.hasThisType (  )  )  )  {^637^638^^^^634^650^[REPLACE] if  ( docInfo == null || ( !docInfo.isConstructor (  )  && !docInfo.hasThisType (  )  )  )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.getType (  )   &&  Token.THIS )  {^642^^^^^637^649^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^if  ( n.getType (  )   ) {^642^^^^^634^650^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^compiler.report ( JSError.make ( parentame.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^643^644^645^^^634^650^[REPLACE] compiler.report ( JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.canEliminate (  )  )  ) ;^644^645^^^^634^650^[REPLACE] JSError.make ( name.declaration.sourceName, n, UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^n.fullName (  )  ;^645^^^^^634^650^[REPLACE] UNSAFE_THIS, name.fullName (  )  )  ) ;^[METHOD] checkForHosedThisReferences [TYPE] void [PARAMETER] Node function JSDocInfo docInfo Name name [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node function  n  parent  [TYPE]  List globalNames  refs  [TYPE]  JSDocInfo docInfo  [TYPE]  Map nameMap  [TYPE]  Name name 
[REPLACE]^GlobalNamespace namespace  ;^660^^^^^659^693^[REPLACE] Ref ref = n.declaration;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^String name = ref.node.getParent (  ) ;^661^^^^^659^693^[REPLACE] String name = ref.node.getString (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node newNode = cloneTree (  )  ;^662^^^^^659^693^[REPLACE] Node rvalue = ref.node.getFirstChild (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node varNode = ref.node .cloneTree (  )  ;^663^^^^^659^693^[REPLACE] Node varNode = ref.node.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^Node gramps = rvalue.getParent (  ) ;^664^^^^^659^693^[REPLACE] Node gramps = varNode.getParent (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^int numChanges = 0;^666^667^^^^659^693^[ADD] boolean isObjLit = rvalue.getType (  )  == Token.OBJECTLIT; int numChanges = 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^667^^^^^659^693^[ADD] int numChanges = 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^669^^^^^659^693^[REPLACE] if  ( isObjLit )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^boolean discardKeys = n.aliasingGets == 0;^669^670^671^672^673^659^693^[ADD] if  ( isObjLit )  { boolean discardKeys = n.aliasingGets == 0; numChanges += declareVarsForObjLitValues ( n, name, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^numChanges +=  declareVarsForObjLitValues ( null, nullame, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^671^672^673^^^659^693^[REPLACE] numChanges += declareVarsForObjLitValues ( n, name, rvalue, varNode, gramps.getChildBefore ( varNode ) , gramps, discardKeys ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^boolean discardKeys = n.aliasingGets  ||  0;^670^^^^^659^693^[REPLACE] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^670^^^^^659^693^[ADD] boolean discardKeys = n.aliasingGets == 0;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^numChanges +=  addStubsForUnulldeclaredProperties ( null, nullame, gramps, varNode ) ;^676^^^^^659^693^[REPLACE] numChanges += addStubsForUndeclaredProperties ( n, name, gramps, varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( isObjLit || n.canEliminate (  )  )  {^678^^^^^659^693^[REPLACE] if  ( isObjLit && n.canEliminate (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^680^^^^^659^693^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^gramps.replaceChild ( varNode ) ;^681^^^^^659^693^[REPLACE] gramps.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^681^^^^^659^693^[ADD] gramps.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[ADD]^^687^^^^^659^693^[ADD] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if   (  n.hasChildren  (    )    )   {  ;^680^^^^^659^693^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^gramps.removeChild ( rvalue ) ;^681^^^^^659^693^[REPLACE] gramps.removeChild ( varNode ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^ref.node = this;^687^^^^^659^693^[REPLACE] ref.node = null;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^if  ( numChanges  <=  0 )  {^690^^^^^659^693^[REPLACE] if  ( numChanges > 0 )  {^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^compiler.report (  ) ;^691^^^^^659^693^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] updateObjLitOrFunctionDeclarationAtVarNode [TYPE] void [PARAMETER] Name n [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref ref  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node gramps  rvalue  varNode  [TYPE]  List globalNames  refs  [TYPE]  String name  [TYPE]  Map nameMap  [TYPE]  int numChanges  [TYPE]  Name n 
[REPLACE]^int numVars = 1;^727^^^^^726^799^[REPLACE] int numVars = 0;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^728^^^^^726^799^[ADD] int arbitraryNameCounter = 0;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if   (  !discardKeys  )   {  ;^748^^^^^726^799^[REPLACE] if  ( discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^754^^^^^748^758^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^754^755^756^^^748^758^[ADD] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode =  Node.newString ( Token.NAME, qName ) ;^753^^^^^748^758^[REPLACE] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.replaceChild ( key ) ;^749^^^^^726^799^[REPLACE] objlit.removeChild ( key ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^objlit.replaceChild ( value ) ;^750^^^^^726^799^[REPLACE] objlit.removeChild ( value ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent .getType (  )   )  {^754^^^^^726^799^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^754^755^756^^^726^799^[ADD] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^755^^^^^726^799^[REPLACE] refNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( varParent.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^763^^^^^726^799^[REPLACE] if  ( key.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nameNode .getBooleanProp (  )  ;^764^^^^^726^799^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  (varParent == null )  {^767^^^^^726^799^[REPLACE] if  ( nameToAddAfter != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^currentParent.addChildBefore ( stubVar, current )  ;^770^^^^^767^771^[REPLACE] varParent.addChildBefore ( newVar, varNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^varParent.addChildBefore ( newVar, varNode )  ;^768^^^^^726^799^[REPLACE] varParent.addChildAfter ( newVar, nameToAddAfter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^775^^^^^726^799^[REPLACE] if  ( isJsIdentifier )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^775^776^^^779^726^799^[ADD] if  ( isJsIdentifier )  {  Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( p == null )  {^780^^^^^726^799^[REPLACE] if  ( p != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^780^781^782^783^784^726^799^[ADD] if  ( p != null )  { if  ( !discardKeys )  { Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ; newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( !true )  {^781^^^^^726^799^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  value;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^782^783^^^^726^799^[ADD] Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   !=  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( rvalue, n.docInfo, n )  ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^791^^^^^726^799^[ADD] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( value, value.getString (  ) , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  varNode;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  varParent;^788^^^^^726^799^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if   (  discardKeys  )   {  ;^781^^^^^726^799^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  varParent;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REMOVE]^scope.getVar ( aliasParent.getString (  )  )  ;^791^^^^^726^799^[REMOVE] ^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value.getString (  ) , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^788^^^^^726^799^[ADD] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^779^^^^^726^799^[ADD] Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if   (  n.props != null  )   {  ;^780^^^^^726^799^[REPLACE] if  ( p != null )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( discardKeys )  {^781^^^^^726^799^[REPLACE] if  ( !discardKeys )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if   (  rvalue.getType  (    )   == Token.FUNCTION  )   {  ;^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( value, value .getString (  )  , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^checkForHosedThisReferences ( varParent, value.getJSDocInfo (  ) , p ) ;^791^^^^^726^799^[REPLACE] checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^784^785^^^^726^799^[ADD] newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^p.declaration.node =  value;^788^^^^^726^799^[REPLACE] p.declaration.node = nameNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^781^782^783^784^785^726^799^[ADD] if  ( !discardKeys )  { Ref newAlias = p.declaration.cloneAndReclassify ( Ref.Type.ALIASING_GET ) ; newAlias.node = refNode; p.addRef ( newAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^newAlias.node =  null;^784^^^^^726^799^[REPLACE] newAlias.node = refNode;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^790^^^^^726^799^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^790^791^792^^^726^799^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { checkForHosedThisReferences ( value, value.getJSDocInfo (  ) , p ) ; }^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^731^732^^^^726^799^[ADD] key = nextKey )  { Node value = key.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^nextKey =  varParent.getNext (  ) ;^733^^^^^726^799^[REPLACE] nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^753^^^^^726^799^[ADD] refNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^addAfter = newVar  ;^773^^^^^726^799^[REPLACE] nameToAddAfter = newVar;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^for  ( Node key = varParent.getFirstChild (  ) , nextKey; key != null;^730^^^^^726^799^[REPLACE] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node current = gramps  ;^730^^^^^726^799^[REPLACE] for  ( Node key = objlit.getFirstChild (  ) , nextKey; key != null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^nextKey = value.getNext (  ) ;^732^733^^^^726^799^[ADD] Node value = key.getNext (  ) ; nextKey = value.getNext (  ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[ADD]^^740^741^742^743^744^726^799^[ADD] boolean isJsIdentifier = key.getType (  )  != Token.NUMBER && TokenStream.isJSIdentifier ( key.getString (  )  ) ; String propName = isJsIdentifier ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ; String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propName = isJsIdentifier ? varParent.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ;^742^743^^^^726^799^[REPLACE] String propName = isJsIdentifier ? key.getString (  )  : String.valueOf ( ++arbitraryNameCounter ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String propAlias = appendPropForAlias ( propAlias, propName ) ;^744^^^^^726^799^[REPLACE] String propAlias = appendPropForAlias ( alias, propName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^String qName = objlitName.addRef (  )   '.'  propName;^745^^^^^726^799^[REPLACE] String qName = objlitName.fullName (  )  + '.' + propName;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node refNode = true;^747^^^^^726^799^[REPLACE] Node refNode = null;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node nameNode = Node.newString ( Token.NAME, qName ) ;^761^^^^^726^799^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Node newVar = new Node ( Token.VAR, varParent ) ;^766^^^^^726^799^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^GlobalNamespace namespace  ;^779^^^^^726^799^[REPLACE] Name p = nameMap.get ( qName ) ;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^return arbitraryNameCounter;^798^^^^^726^799^[REPLACE] return numVars;^[METHOD] declareVarsForObjLitValues [TYPE] int [PARAMETER] Name objlitName String alias Node objlit Node varNode Node nameToAddAfter Node varParent boolean discardKeys [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Ref newAlias  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node key  nameNode  nameToAddAfter  newVar  nextKey  objlit  refNode  value  varNode  varParent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  propName  qName  [TYPE]  Map nameMap  [TYPE]  int arbitraryNameCounter  numVars  [TYPE]  Name objlitName  p 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isObjectLitKey ( nameNode )  ) ;^816^^^^^815^843^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatementBlock ( parent )  ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^( isObjectLitKey ( r.node, rParent )  )  ;^816^^^^^815^843^[REPLACE] Preconditions.checkArgument ( NodeUtil.isStatementBlock ( parent )  ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^int numStubs = 0L;^817^^^^^815^843^[REPLACE] int numStubs = 0;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if   (  p != null  )   {  ;^818^^^^^815^843^[REPLACE] if  ( n.props != null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^820^^^^^815^843^[REPLACE] if  ( p.needsToBeStubbed (  )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^String propAlias = appendPropForAlias ( alias, p.name ) ;Node nameNode = Node.newString ( Token.NAME, propAlias ) ;Node newVar = new Node ( Token.VAR, nameNode ) ;^820^821^822^823^^815^843^[ADD] if  ( p.needsToBeStubbed (  )  )  { String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ; Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if   (  nameToAddAfter != null  )   {  ;^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameToAddAfter = newVar  ;^828^^^^^824^829^[REPLACE] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToBack ( newVar ) ;^825^^^^^815^843^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 1 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^835^836^837^838^^815^843^[ADD] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^837^^^^^835^838^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^828^^^^^815^843^[ADD] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^String propAlias = appendPropForAlias ( alias, propName )  ;^821^^^^^815^843^[REPLACE] String propAlias = appendPropForAlias ( alias, p.name ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^822^^^^^815^843^[ADD] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^823^^^^^815^843^[ADD] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( addAfter != null )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^parent.addChildToFront ( newVar ) ;parent.addChildAfter ( newVar, addAfter ) ;addAfter = newVar;^824^825^826^827^828^815^843^[ADD] if  ( addAfter == null )  { parent.addChildToFront ( newVar ) ; } else { parent.addChildAfter ( newVar, addAfter ) ; addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToBack ( nameNode ) ;^825^^^^^815^843^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^825^^^^^815^843^[ADD] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 2 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^key.getBooleanProp ( Node.IS_CONSTANT_NAME )  ;^837^^^^^835^838^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if   (  aliasParent.getType  (    )   == Token.NAME  )   {  ;^820^^^^^818^841^[REPLACE] if  ( p.needsToBeStubbed (  )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( addAfter != null )  {^824^^^^^818^841^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^parent.addChildToFront ( newVar ) ;parent.addChildAfter ( newVar, addAfter ) ;addAfter = newVar;^824^825^826^827^828^818^841^[ADD] if  ( addAfter == null )  { parent.addChildToFront ( newVar ) ; } else { parent.addChildAfter ( newVar, addAfter ) ; addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToFront ( nameNode ) ;^825^^^^^818^841^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 4 ) .node.getLastChild (  ) .removeChild ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^818^841^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameToAddAfter = newVar  ;^828^^^^^818^841^[REPLACE] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^821^822^^^^818^841^[ADD] String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node varNode = new Node ( VAR, nameNode )  ;^822^^^^^818^841^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node newVar = new Node ( Token.VAR, parent ) ;^823^^^^^818^841^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  (nameNode != null )  {^824^^^^^818^841^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent .addChildBefore ( addAfter , addAfter )  ;^825^^^^^818^841^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 1 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^818^841^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode.replaceChild ( Node.IS_CONSTANT_NAME, false ) ;^837^^^^^835^838^[REPLACE] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^828^^^^^818^841^[ADD] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^String propAlias = appendPropForAlias ( alias, propName )  ;^821^^^^^818^841^[REPLACE] String propAlias = appendPropForAlias ( alias, p.name ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node nameNode = Node.newString ( Token.NAME, alias ) ;^822^^^^^818^841^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^GlobalNamespace namespace  ;^819^^^^^818^841^[REPLACE] for  ( Name p : n.props )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^821^^^^^818^841^[ADD] String propAlias = appendPropForAlias ( alias, p.name ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node nameNode = Node.replaceChild ( Token.NAME, alias ) ;^822^^^^^818^841^[REPLACE] Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode.addChildToFront ( rvalue )  ;^825^^^^^815^843^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 0 / 2 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameToAddAfter = newVar  ;^828^^^^^815^843^[REPLACE] addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^821^822^^^^815^843^[ADD] String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^822^823^^^^815^843^[ADD] Node nameNode = Node.newString ( Token.NAME, propAlias ) ; Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^Node varNode = new Node ( VAR, nameNode )  ;^823^^^^^815^843^[REPLACE] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( addAfter !=parent )  {^824^^^^^815^843^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 0 - 4 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^815^843^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^819^820^821^822^823^818^841^[ADD] for  ( Name p : n.props )  { if  ( p.needsToBeStubbed (  )  )  { String propAlias = appendPropForAlias ( alias, p.name ) ; Node nameNode = Node.newString ( Token.NAME, propAlias ) ; Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  (parent != null )  {^824^^^^^818^841^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^824^825^826^827^828^818^841^[ADD] if  ( addAfter == null )  { parent.addChildToFront ( newVar ) ; } else { parent.addChildAfter ( newVar, addAfter ) ; addAfter = newVar;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^parent.addChildToBack ( newVar ) ;^825^^^^^818^841^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 2 ) .node.replaceChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^818^841^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if   (  nameToAddAfter != null  )   {  ;^824^^^^^818^841^[REPLACE] if  ( addAfter == null )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^nameNode.addChildToFront ( rvalue )  ;^825^^^^^818^841^[REPLACE] parent.addChildToFront ( newVar ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^if  ( p.refs.get ( 0 * 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^835^836^^^^818^841^[REPLACE] if  ( p.refs.get ( 0 ) .node.getLastChild (  ) .getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^837^^^^^835^838^[ADD] nameNode.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^822^823^^^^818^841^[ADD] Node nameNode = Node.newString ( Token.NAME, propAlias ) ; Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[ADD]^^823^^^^^818^841^[ADD] Node newVar = new Node ( Token.VAR, nameNode ) ;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
[REPLACE]^return numStubs;  ;^842^^^^^815^843^[REPLACE] return numStubs;^[METHOD] addStubsForUndeclaredProperties [TYPE] int [PARAMETER] Name n String alias Node parent Node addAfter [CLASS] CollapseProperties 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  false  initialized  inlineAliases  isJsIdentifier  isObjLit  true  [TYPE]  DiagnosticType NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  [TYPE]  Node addAfter  nameNode  newVar  parent  [TYPE]  List globalNames  refs  [TYPE]  String alias  propAlias  [TYPE]  Map nameMap  [TYPE]  int numStubs  [TYPE]  Name n  p 
