[REPLACE]^fnNode.itsFunctionType =  i;^310^^^^^309^340^[REPLACE] fnNode.itsFunctionType = functionType;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^caseNode.addChildToBack ( statements )  ;^311^^^^^309^340^[REPLACE] fnNode.addChildToBack ( args ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.addChildToBack ( args )  ;^312^^^^^309^340^[REPLACE] fnNode.addChildToBack ( statements ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.getSourceName (  )  == null )  {^313^^^^^309^340^[REPLACE] if  ( parser.getSourceName (  )  != null )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^313^314^315^^^309^340^[ADD] if  ( parser.getSourceName (  )  != null )  { fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^child.getString (  )  ;^314^^^^^309^340^[REPLACE] fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putProp ( Node.SOURCENAME_PROP, parser .reportError ( name )   ) ;^314^^^^^309^340^[REPLACE] fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( info == null )  {^316^^^^^309^340^[REPLACE] if  ( info != null )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^n.setJSDocInfo ( info )  ;^317^^^^^309^340^[REPLACE] fnNode.setJSDocInfo ( info ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^int functionCount = fn.getFunctionType (  ) ;^320^^^^^309^340^[REPLACE] int functionCount = fnNode.getFunctionCount (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if   (  skipCount != 0  )   {  ;^321^^^^^309^340^[REPLACE] if  ( functionCount != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( fnNode.getFunctionType (  )  ) {^327^328^329^^^309^340^[REPLACE] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^327^328^329^330^^309^340^[ADD] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) { String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  (  name.length (  )  - 5 != 0 )  {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^331^332^333^^^327^334^[ADD] if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = child.getString (  )  ;^330^^^^^327^334^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null && name.length (  )  *  2 != 0 )  {^331^^^^^309^340^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putIntProp ( name ) ;^332^^^^^309^340^[REPLACE] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.itsNeedsActivation = false;^323^^^^^309^340^[REPLACE] fnNode.itsNeedsActivation = true;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 3; i != functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^FunctionNode fn = fnNode.putIntProp ( i ) ;^325^^^^^309^340^[REPLACE] FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = fnNode.getFunctionName (  ) ;^330^^^^^309^340^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( fn.getFunctionType (  )  &&  FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^309^340^[REPLACE] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != false && name.length (  )  - 1 != 0 )  {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^332^^^^^309^340^[ADD] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0L; i != functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^FunctionNode fn = fnNode.getFunctionNode ( functionType ) ;^325^^^^^309^340^[REPLACE] FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = child.getString (  )  ;^330^^^^^309^340^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putIntProp ( Node.FUNCTION_PROP, i ) ;^338^^^^^309^340^[REPLACE] fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^338^^^^^309^340^[ADD] fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^return fn;^339^^^^^309^340^[REPLACE] return fnNode;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^426^^^^^425^445^[ADD] int length = elems.size (  ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^int[] skipIndexes = false;^427^^^^^425^445^[REPLACE] int[] skipIndexes = null;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( skipCount  ==  1 )  {^428^^^^^425^445^[REPLACE] if  ( skipCount != 0 )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[ADD]^^428^429^430^^^425^445^[ADD] if  ( skipCount != 0 )  { skipIndexes = new int[skipCount]; }^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes =  new int[lineno];^429^^^^^425^445^[REPLACE] skipIndexes = new int[skipCount];^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes =  new int[null];^429^^^^^425^445^[REPLACE] skipIndexes = new int[skipCount];^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node n =  (  ( Node )   ( obj.get ( i )  )  )  ;^431^^^^^425^445^[REPLACE] Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( elem == null )  {^434^^^^^425^445^[REPLACE] if  ( elem != null )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[ADD]^^437^^^^^434^439^[ADD] skipIndexes[j] = i;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^array .addChildToBack ( array , elem )  ;^435^^^^^425^445^[REPLACE] array.addChildToBack ( elem ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes[j]  = null ;^437^^^^^425^445^[REPLACE] skipIndexes[j] = i;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^int j = 0  ;^432^^^^^425^445^[REPLACE] for  ( int i = 0, j = 0; i != length; ++i )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^int i = 0  ;^432^^^^^425^445^[REPLACE] for  ( int i = 0, j = 0; i != length; ++i )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node n =  (  ( Node )   ( obj.get ( i )  )  )  ;^433^^^^^425^445^[REPLACE] Node elem =  ( Node ) elems.get ( i ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( skipCount  ==  4 )  {^441^^^^^425^445^[REPLACE] if  ( skipCount != 0 )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[ADD]^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^441^442^443^^^425^445^[ADD] if  ( skipCount != 0 )  { array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ; }^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^array .putProp (  )  ;^442^^^^^425^445^[REPLACE] array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^return array;  ;^444^^^^^425^445^[REPLACE] return array;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^int j = 0  ;^504^^^^^503^525^[REPLACE] int type = Node.NON_SPECIALCALL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( child.getType (  )   !=  Token.NAME )  {^505^^^^^503^525^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  else {^512^^^^^503^525^[REPLACE] } else if  ( child.getType (  )  == Token.GETPROP )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^514^^^^^503^525^[REPLACE] if  ( name.equals ( "eval" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_WITH  ;^515^^^^^503^525^[REPLACE] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getString (  ) .getString (  ) ;^513^^^^^503^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getString (  )  ;^513^^^^^503^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^507^^^^^503^525^[REPLACE] if  ( name.equals ( "eval" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^type = Node.SPECIALCALL_EVAL;type = Node.SPECIALCALL_WITH;^507^508^509^510^511^503^525^[ADD] if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; } else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  if  ( name.equals ( "With" )  )  {^509^^^^^503^525^[REPLACE] } else if  ( name.equals ( "With" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^510^^^^^503^525^[ADD] type = Node.SPECIALCALL_WITH;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_EVAL  ;^510^^^^^503^525^[REPLACE] type = Node.SPECIALCALL_WITH;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_WITH  ;^508^^^^^503^525^[REPLACE] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^508^^^^^503^525^[ADD] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getType (  ) ;^506^^^^^503^525^[REPLACE] String name = child.getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  if  ( child.getType (  )   ||  Token.GETPROP )  {^512^^^^^503^525^[REPLACE] } else if  ( child.getType (  )  == Token.GETPROP )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^}   String name = child.getLastChild (  ) .getString (  ) ;type = Node.SPECIALCALL_EVAL;^512^513^514^515^516^503^525^[ADD] else if  ( child.getType (  )  == Token.GETPROP )  { String name = child.getLastChild (  ) .getString (  ) ; if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^513^^^^^503^525^[ADD] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^506^^^^^503^525^[ADD] String name = child.getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getLastChild (  )  .newString ( name )  ;^513^^^^^503^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^Node node = new Node ( nodeType, child, type, charno ) ;^518^^^^^503^525^[REPLACE] Node node = new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( nodeType  ==  Node.NON_SPECIALCALL )  {^519^^^^^503^525^[REPLACE] if  ( type != Node.NON_SPECIALCALL )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^child.getString (  )  ;^521^^^^^503^525^[REPLACE] setRequiresActivation (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^521^^^^^503^525^[ADD] setRequiresActivation (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^child.getString (  )  ;^522^^^^^503^525^[REPLACE] node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^return fnNode;  ;^524^^^^^503^525^[REPLACE] return node;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^child =  makeReference ( null ) ;^530^^^^^529^556^[REPLACE] child = makeReference ( child ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( child != this )  {^531^^^^^529^556^[REPLACE] if  ( child == null )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( nodeType  ||  Token.DEC )  {^533^^^^^529^556^[REPLACE] if  ( nodeType == Token.DEC )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[ADD]^^533^534^535^536^537^529^556^[ADD] if  ( nodeType == Token.DEC )  { msg = "msg.bad.decr"; } else { msg = "msg.bad.incr"; }^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = decr"  ;^536^^^^^533^537^[REPLACE] msg = "msg.bad.incr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[ADD]^^534^^^^^529^556^[ADD] msg = "msg.bad.decr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = incr"  ;^534^^^^^529^556^[REPLACE] msg = "msg.bad.decr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = decr"  ;^536^^^^^529^556^[REPLACE] msg = "msg.bad.incr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return null;  ;^539^^^^^529^556^[REPLACE] return null;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^int j = 0  ;^532^^^^^529^556^[REPLACE] String msg;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( lineno  && lineno )  {^533^^^^^529^556^[REPLACE] if  ( nodeType == Token.DEC )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return true;^539^^^^^529^556^[REPLACE] return null;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^int childType = child.setType (  ) ;^542^^^^^529^556^[REPLACE] int childType = child.getType (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return n;  ;^552^^^^^529^556^[REPLACE] return n;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^Node n = new Node ( lineno, child, lineno, charno ) ;^550^^^^^529^556^[REPLACE] Node n = new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return ;^555^^^^^529^556^[REPLACE] throw Kit.codeBug (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^(  ( Node )   ( obj.get ( i )  )  )  ;^555^^^^^529^556^[REPLACE] throw Kit.codeBug (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( namespace != null && memberTypeFlags == 0 )  {^562^^^^^561^581^[REPLACE] if  ( namespace == null && memberTypeFlags == 0 )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if  (ref != null )  {^563^^^^^561^581^[REPLACE] if  ( target == null )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName  (  name, nameLineno, nameCharno  )  ;  ;^564^^^^^561^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^567^^^^^561^581^[REPLACE] if  ( ScriptRuntime.isSpecialProperty ( name )  )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^^567^568^569^570^571^561^581^[ADD] if  ( ScriptRuntime.isSpecialProperty ( name )  )  { Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ; return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ; }^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, dotLineno, nameLineno ) ;^570^^^^^561^581^[REPLACE] return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^ref.putProp ( Node.NAME_PROP, name ) ;^568^569^^^^561^581^[ADD] Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( namespace, nameLineno, nameCharno ) ;^564^^^^^561^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, nameLineno, dotCharno ) ;^570^^^^^561^581^[REPLACE] return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GETPROP, ref, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^561^581^[REPLACE] return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node ref = new Node ( Token.REF_SPECIAL, ref ) ;^568^^^^^561^581^[REPLACE] Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( name, nameCharno, nameCharno ) ;^564^^^^^561^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( name, memberTypeFlags, nameCharno ) ;^564^^^^^561^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^561^581^[REPLACE] return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node n =  (  ( Node )   ( obj.get ( i )  )  )  ;^568^^^^^561^581^[REPLACE] Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node elem = createString ( namespace ) ;^577^^^^^561^581^[REPLACE] Node elem = createString ( name ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^^578^^^^^561^581^[ADD] memberTypeFlags |= Node.PROPERTY_FLAG;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createMemberRefGet  (  target, namespace, elem, memberTypeFlags, dotLineno, dotCharno  )  ;  ;^579^580^^^^561^581^[REPLACE] return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node nsNode = false;^601^^^^^600^629^[REPLACE] Node nsNode = null;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if   (  namespace == null  )   {  ;^602^^^^^600^629^[REPLACE] if  ( namespace != null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^602^603^604^605^^600^629^[ADD] if  ( namespace != null )  {  if  ( namespace.equals ( "*" )  )  { nsNode = new Node ( Token.NULL, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^604^^^^^600^629^[REPLACE] if  ( namespace.equals ( "*" )  )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^604^608^[REPLACE] nsNode = createName ( namespace, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno )  ;^605^^^^^600^629^[REPLACE] nsNode = new Node ( Token.NULL, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^600^629^[REPLACE] nsNode = createName ( namespace, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^604^605^606^607^608^600^629^[ADD] if  ( namespace.equals ( "*" )  )  { nsNode = new Node ( Token.NULL, lineno, charno ) ; } else { nsNode = createName ( namespace, lineno, charno ) ; }^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^607^^^^^600^629^[ADD] nsNode = createName ( namespace, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^Node temp  ;^610^^^^^600^629^[REPLACE] Node ref;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( target !=ref )  {^611^^^^^600^629^[REPLACE] if  ( target == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if   (  namespace != null  )   {  ;^618^^^^^611^624^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno )  ;^619^^^^^611^624^[REPLACE] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^621^622^^^^611^624^[ADD] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if   (  namespace != null  )   {  ;^612^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^caseNode = new Node ( Token.DEFAULT, lineno, charno )  ;^615^^^^^612^616^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno )  ;^613^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno )  ;^615^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != null )  {^612^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^612^613^614^615^616^600^629^[ADD] if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno )  ;^615^^^^^612^616^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != null )  {^618^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref =  new Node ( Token.REF_NS_MEMBER, elem, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^[REPLACE] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno )  ;^619^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^caseNode = new Node ( Token.DEFAULT, lineno, charno )  ;^615^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^caseNode = new Node ( Token.DEFAULT, lineno, charno )  ;^619^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref =  new Node ( Token.REF_NS_MEMBER, elem, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( memberTypeFlags  ==  0 )  {^625^^^^^600^629^[REPLACE] if  ( memberTypeFlags != 0 )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^child.getString (  )  ;^626^^^^^600^629^[REPLACE] ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, memberTypeFlags, charno ) ;^628^^^^^600^629^[REPLACE] return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^Node caseNode  ;^637^^^^^636^652^[REPLACE] Node temp;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^nodeType = Token.GETELEM  ;^641^^^^^636^652^[REPLACE] nodeType = Token.GETPROP;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^nodeType = Token.GETPROP  ;^648^^^^^636^652^[REPLACE] nodeType = Token.GETELEM;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^Node idNode = left;^642^^^^^636^652^[REPLACE] Node idNode = right;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^return new Node ( nodeType, left, left, lineno, charno ) ;^651^^^^^636^652^[REPLACE] return new Node ( nodeType, left, right, lineno, charno ) ;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^int nodeType = right.getType (  ) ;^657^^^^^656^670^[REPLACE] int nodeType = left.getType (  ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^child.getString (  )  ;^666^^^^^656^670^[REPLACE] parser.reportError ( "msg.bad.assign.left" ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^return new Node ( Token.ASSIGN, left, right, lineno, lineno ) ;^669^^^^^656^670^[REPLACE] return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^if   (  child.getType  (    )   == Token.NAME  )   {  ;^713^^^^^712^733^[REPLACE] if  ( parser.insideFunction (  )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^713^714^715^716^717^712^733^[ADD] if  ( parser.insideFunction (  )  )  { boolean activation = false; if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  )^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames == null && parser.compilerEnv.activationNames.createString ( name )  )  ) {^715^716^717^718^^712^733^[REPLACE] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^715^716^717^718^719^712^733^[ADD] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) { activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^}  if  ( "length %  0.5 ".equals ( name )  )  {^720^^^^^712^733^[REPLACE] } else if  ( "length".equals ( name )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP || parser.compilerEnv .setRequiresActivation (  )  == Context.VERSION_1_2 ) {^721^722^723^724^^712^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^726^^^^^721^727^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^726^^^^^712^733^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP ) {^721^722^723^724^^712^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^719^^^^^715^728^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^}  else {^720^^^^^712^733^[REPLACE] } else if  ( "length".equals ( name )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP || parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^712^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^726^^^^^721^727^[ADD] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^721^722^723^724^^712^733^[ADD] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( true )  {^729^^^^^712^733^[REPLACE] if  ( activation )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^child.getString (  )  ;^730^^^^^712^733^[REPLACE] setRequiresActivation (  ) ;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^730^^^^^712^733^[ADD] setRequiresActivation (  ) ;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^719^^^^^712^733^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^boolean activation = true;^714^^^^^712^733^[REPLACE] boolean activation = false;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames == true && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^712^733^[REPLACE] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^}^720^721^722^723^^712^733^[ADD] else if  ( "length".equals ( name )  )  { if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 )^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  (  parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^712^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^726^^^^^712^733^[ADD] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^}  if  ( "length /  2".equals ( name )  )  {^720^^^^^712^733^[REPLACE] } else if  ( "length".equals ( name )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP || parser.compilerEnv.createLeaf (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^712^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^729^730^731^^^712^733^[ADD] if  ( activation )  { setRequiresActivation (  ) ; }^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^719^^^^^712^733^[ADD] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^714^^^^^712^733^[ADD] boolean activation = false;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
