[REPLACE]^private static final long serialVersionUID = 1;^51^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StringType  
[REPLACE]^getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  { return UNKNOWN;^54^^^^^53^55^[REPLACE] super ( registry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] JSTypeRegistry registry [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true 
[ADD]^^54^^^^^53^55^[ADD] super ( registry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] JSTypeRegistry registry [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true 
[REPLACE]^if  (   super.testForEquality ( that )   )  {^59^^^^^58^67^[REPLACE] if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return FALSE;^60^^^^^58^67^[REPLACE] return UNKNOWN;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^if  ( that.isUnknownType (  )  ) {^62^63^^^^58^67^[REPLACE] if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return FALSE;^64^^^^^58^67^[REPLACE] return UNKNOWN;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return "string";^66^^^^^58^67^[REPLACE] return FALSE;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return false;^71^^^^^70^72^[REPLACE] return true;^[METHOD] isStringValueType [TYPE] boolean [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^76^^^^^75^77^[REPLACE] return true;^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^81^^^^^80^82^[REPLACE] return true;^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^87^^^^^85^88^[REPLACE] return true;^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return FALSE;^92^^^^^91^93^[REPLACE] return "string";^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return visitor.caseStringType (  ) ;^97^^^^^96^98^[REPLACE] return getNativeType ( JSTypeNative.STRING_OBJECT_TYPE ) ;^[METHOD] autoboxesTo [TYPE] JSType [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return FALSE;^102^^^^^101^103^[REPLACE] return BooleanLiteralSet.BOTH;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] StringType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false.caseStringType (  ) ;^107^^^^^106^108^[REPLACE] return visitor.caseStringType (  ) ;^[METHOD] visit [TYPE] <T> [PARAMETER] Visitor<T> visitor [CLASS] StringType   [TYPE]  Visitor visitor  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
