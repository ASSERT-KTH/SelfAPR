[REPLACE]^private static final long serialVersionUID ;^66^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] UnionType  
[REPLACE]^Set<JSType> alternates;^68^^^^^^^[REPLACE] final Set<JSType> alternates;^ [CLASS] UnionType  
[REPLACE]^result.append ( t.toString (  )  ) ;^76^^^^^75^78^[REPLACE] super ( registry ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] JSTypeRegistry registry JSType> alternates [CLASS] UnionType   [TYPE]  JSTypeRegistry registry  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^this.alternates =  false;^77^^^^^75^78^[REPLACE] this.alternates = alternates;^[METHOD] <init> [TYPE] Set) [PARAMETER] JSTypeRegistry registry JSType> alternates [CLASS] UnionType   [TYPE]  JSTypeRegistry registry  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return canAssign;^86^^^^^85^87^[REPLACE] return alternates;^[METHOD] getAlternates [TYPE] Iterable [PARAMETER] [CLASS] UnionType   [TYPE]  long serialVersionUID  [TYPE]  Set alternates  [TYPE]  boolean false  true 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^91^^^^^90^94^[REPLACE] for  ( JSType type : getAlternates (  )  )  {^[METHOD] forgiveUnknownNames [TYPE] void [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^91^92^93^^^90^94^[ADD] for  ( JSType type : getAlternates (  )  )  { type.forgiveUnknownNames (  ) ; }^[METHOD] forgiveUnknownNames [TYPE] void [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t.matchesStringContext (  )  )  {^106^^^^^103^111^[REPLACE] if  ( t.matchesNumberContext (  )  )  {^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^107^^^^^103^111^[REPLACE] return true;^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^105^^^^^103^111^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^110^^^^^103^111^[REPLACE] return false;^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t .matchesNumberContext (  )   )  {^128^^^^^125^133^[REPLACE] if  ( t.matchesStringContext (  )  )  {^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^128^129^130^^^125^133^[ADD] if  ( t.matchesStringContext (  )  )  { return true; }^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^129^^^^^125^133^[REPLACE] return true;^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^127^^^^^125^133^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^132^^^^^125^133^[REPLACE] return false;^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t.matchesNumberContext (  )  )  {^155^^^^^152^160^[REPLACE] if  ( t.matchesObjectContext (  )  )  {^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^156^^^^^152^160^[REPLACE] return true;^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^154^^^^^152^160^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^159^^^^^152^160^[REPLACE] return false;^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^JSType propertyType = true;^164^^^^^163^185^[REPLACE] JSType propertyType = null;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  alternate.isVoidType (  )  )  {^168^^^^^163^185^[REPLACE] if  ( alternate.isNullType (  )  || alternate.isVoidType (  )  )  {^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^168^169^170^^^163^185^[ADD] if  ( alternate.isNullType (  )  || alternate.isVoidType (  )  )  { continue; }^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (propertyType != null )  {^173^^^^^163^185^[REPLACE] if  ( altPropertyType == null )  {^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  (  ( alternate.isNullType (  )  )  ||  ( alternate.isVoidType (  )  )  )  {     continue; }^173^^^^^163^185^[REMOVE] ^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( propertyType != false )  {^177^^^^^163^185^[REPLACE] if  ( propertyType == null )  {^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^propertyType =  alternate.getLeastSupertype ( altPropertyType ) ;^180^^^^^163^185^[REPLACE] propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^propertyType =  alternate;^178^^^^^163^185^[REPLACE] propertyType = altPropertyType;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^178^^^^^163^185^[ADD] propertyType = altPropertyType;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^180^^^^^163^185^[ADD] propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^166^^^^^163^185^[REPLACE] for  ( JSType alternate : getAlternates (  )  )  {^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^166^167^168^169^170^163^185^[ADD] for  ( JSType alternate : getAlternates (  )  )  {  if  ( alternate.isNullType (  )  || alternate.isVoidType (  )  )  { continue; }^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^JSType altPropertyType = alternate.isSubtype ( propertyName ) ;^172^^^^^163^185^[REPLACE] JSType altPropertyType = alternate.findPropertyType ( propertyName ) ;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return alternate;^184^^^^^163^185^[REPLACE] return propertyType;^[METHOD] findPropertyType [TYPE] JSType [PARAMETER] String propertyName [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  String propertyName  [TYPE]  JSType altPropertyType  alternate  propertyType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^boolean canAssign = false;^189^^^^^188^197^[REPLACE] boolean canAssign = true;^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t .isNullType (  )   )  {^191^^^^^188^197^[REPLACE] if  ( t.isUnknownType (  )  )  {^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( element.isSubtype ( that )  )  )  {     return false; }^191^^^^^188^197^[REMOVE] ^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^192^^^^^188^197^[REPLACE] return true;^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^canAssign &=  that.canAssignTo ( thathathat ) ;^194^^^^^188^197^[REPLACE] canAssign &= t.canAssignTo ( that ) ;^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^190^^^^^188^197^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^196^^^^^188^197^[REPLACE] return canAssign;^[METHOD] canAssignTo [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  boolean canAssign  false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !t.getRestrictedTypeGivenToBooleanOutcome (  )  )  {^202^^^^^200^207^[REPLACE] if  ( !t.canBeCalled (  )  )  {^[METHOD] canBeCalled [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^203^^^^^200^207^[REPLACE] return false;^[METHOD] canBeCalled [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^201^^^^^200^207^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] canBeCalled [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^206^^^^^200^207^[REPLACE] return true;^[METHOD] canBeCalled [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^211^^^^^210^216^[REPLACE] UnionTypeBuilder restricted = new UnionTypeBuilder ( registry ) ;^[METHOD] restrictByNotNullOrUndefined [TYPE] JSType [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^212^^^^^210^216^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] restrictByNotNullOrUndefined [TYPE] JSType [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^return restricted.addAlternate (  ) ;^215^^^^^210^216^[REPLACE] return restricted.build (  ) ;^[METHOD] restrictByNotNullOrUndefined [TYPE] JSType [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^TernaryValue result = false;^220^^^^^219^230^[REPLACE] TernaryValue result = null;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^220^^^^^219^230^[ADD] TernaryValue result = null;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( result != null )  {^223^^^^^219^230^[REPLACE] if  ( result == null )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( !result.equals ( test )  )  {^225^^^^^219^230^[REPLACE] } else if  ( !result.equals ( test )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^}   return UNKNOWN;^225^226^227^^^219^230^[ADD] else if  ( !result.equals ( test )  )  { return UNKNOWN; }^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return canAssign;^226^^^^^219^230^[REPLACE] return UNKNOWN;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^result =  null;^224^^^^^219^230^[REPLACE] result = test;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^}  if  ( result.equals ( test )  )  {^225^^^^^219^230^[REPLACE] } else if  ( !result.equals ( test )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^}^225^226^227^^^219^230^[ADD] else if  ( !result.equals ( test )  )  { return UNKNOWN; }^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^221^^^^^219^230^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^TernaryValue test = t.getTypesUnderEquality ( that ) ;^222^^^^^219^230^[REPLACE] TernaryValue test = t.testForEquality ( that ) ;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return test;^229^^^^^219^230^[REPLACE] return result;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  that  [TYPE]  TernaryValue result  test  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t .isNullType (  )   )  {^243^^^^^241^248^[REPLACE] if  ( t.isNullable (  )  )  {^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( element.isSubtype ( that )  )  )  {     return false; }^243^^^^^241^248^[REMOVE] ^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^244^^^^^241^248^[REPLACE] return true;^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^242^^^^^241^248^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^247^^^^^241^248^[REPLACE] return false;^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t.isNullType (  )  )  {^253^^^^^251^258^[REPLACE] if  ( t.isUnknownType (  )  )  {^[METHOD] isUnknownType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^253^254^255^^^251^258^[ADD] if  ( t.isUnknownType (  )  )  { return true; }^[METHOD] isUnknownType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^254^^^^^251^258^[REPLACE] return true;^[METHOD] isUnknownType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^252^^^^^251^258^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] isUnknownType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^257^^^^^251^258^[REPLACE] return false;^[METHOD] isUnknownType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( that.isUnknownType (  )  )  {^262^^^^^261^271^[REPLACE] if  ( !that.isUnknownType (  )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^262^263^264^265^266^261^271^[ADD] if  ( !that.isUnknownType (  )  )  { for  ( JSType alternate : alternates )  { if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  { return this; }^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^264^^^^^261^271^[REPLACE] if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return null;^265^^^^^261^271^[REPLACE] return this;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^263^^^^^261^271^[REPLACE] for  ( JSType alternate : alternates )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^263^264^265^266^^261^271^[ADD] for  ( JSType alternate : alternates )  { if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  { return this; }^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  that.isSubtype ( alternate )  )  {^264^^^^^261^271^[REPLACE] if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return getLeastSupertype ( this, alternate ) ;^270^^^^^261^271^[REPLACE] return getLeastSupertype ( this, that ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! that instanceof UnionType )  {^275^^^^^274^279^[REPLACE] if  ( that instanceof UnionType )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return getGreatestSubtype ( this, that ) ;^276^^^^^274^279^[REPLACE] return meet (  ( UnionType )  that ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return getGreatestSubtype ( null, that ) ;^278^^^^^274^279^[REPLACE] return getGreatestSubtype ( this, that ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder restricted = new UnionTypeBuilder ( registry ) ;^282^^^^^281^295^[REPLACE] UnionTypeBuilder builder = new UnionTypeBuilder ( registry ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[ADD]^^282^^^^^281^295^[ADD] UnionTypeBuilder builder = new UnionTypeBuilder ( registry ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !element.isSubtype ( that )  )  {^284^^^^^281^295^[REPLACE] if  ( alternate.isSubtype ( that )  )  {^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[ADD]^^284^285^286^^^281^295^[ADD] if  ( alternate.isSubtype ( that )  )  { builder.addAlternate ( alternate ) ; }^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^builder .build (  )  ;^285^^^^^281^295^[REPLACE] builder.addAlternate ( alternate ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^283^^^^^281^295^[REPLACE] for  ( JSType alternate : alternates )  {^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( result.isSubtype ( this )  )  {^289^^^^^281^295^[REPLACE] if  ( otherAlternate.isSubtype ( this )  )  {^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[ADD]^^289^290^291^^^281^295^[ADD] if  ( otherAlternate.isSubtype ( this )  )  { builder.addAlternate ( otherAlternate ) ; }^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addAlternate ( result ) ;^290^^^^^281^295^[REPLACE] builder.addAlternate ( otherAlternate ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[ADD]^^290^^^^^281^295^[ADD] builder.addAlternate ( otherAlternate ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^288^^^^^281^295^[REPLACE] for  ( JSType otherAlternate : that.alternates )  {^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^JSType result = builder .addAlternate (  )  ;^293^^^^^281^295^[REPLACE] JSType result = builder.build (  ) ;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^return otherAlternate;^294^^^^^281^295^[REPLACE] return result == null ? getNativeType ( JSTypeNative.NO_TYPE )  : result;^[METHOD] meet [TYPE] JSType [PARAMETER] UnionType that [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Set alternates  [TYPE]  JSType alternate  otherAlternate  result  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder builder  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! object instanceof UnionType )  {^303^^^^^302^309^[REPLACE] if  ( object instanceof UnionType )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^UnionType that =  ( UnionType )  object;return alternates.equals ( that.alternates ) ;return false;^303^304^305^306^307^302^309^[ADD] if  ( object instanceof UnionType )  { UnionType that =  ( UnionType )  object; return alternates.equals ( that.alternates ) ; } else { return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^307^^^^^302^309^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return alternates .equals ( object )  ;^305^^^^^302^309^[REPLACE] return alternates.equals ( that.alternates ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^304^^^^^302^309^[REPLACE] UnionType that =  ( UnionType )  object;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return alternates.contains ( that.alternates ) ;^305^^^^^302^309^[REPLACE] return alternates.equals ( that.alternates ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^304^^^^^302^309^[ADD] UnionType that =  ( UnionType )  object;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] UnionType   [TYPE]  UnionType that  [TYPE]  Object object  [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return alternates .hashCode (  )  ;^313^^^^^312^314^[REPLACE] return alternates.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] UnionType   [TYPE]  long serialVersionUID  [TYPE]  Set alternates  [TYPE]  boolean false  true 
[REPLACE]^return false;^318^^^^^317^319^[REPLACE] return true;^[METHOD] isUnionType [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  long serialVersionUID  [TYPE]  Set alternates  [TYPE]  boolean false  true 
[REPLACE]^if  ( !alternate .matchesObjectContext (  )   )  {^324^^^^^322^329^[REPLACE] if  ( !alternate.isObject (  )  )  {^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( element.isSubtype ( that )  )  )  {     return false; }^324^^^^^322^329^[REMOVE] ^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^325^^^^^322^329^[REPLACE] return false;^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^323^^^^^322^329^[REPLACE] for  ( JSType alternate : alternates )  {^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^323^324^325^326^^322^329^[ADD] for  ( JSType alternate : alternates )  { if  ( !alternate.isObject (  )  )  { return false; }^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^328^^^^^322^329^[REPLACE] return true;^[METHOD] isObject [TYPE] boolean [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return alternates .equals ( null )  ;^342^^^^^341^343^[REPLACE] return alternates.contains ( alternate ) ;^[METHOD] contains [TYPE] boolean [PARAMETER] JSType alternate [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType alternate  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^360^^^^^359^367^[REPLACE] UnionTypeBuilder restricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getRestrictedUnion [TYPE] JSType [PARAMETER] JSType type [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  type  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( t.isUnknownType (  )  || t.isSubtype ( type )  )  {^362^^^^^359^367^[REPLACE] if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^[METHOD] getRestrictedUnion [TYPE] JSType [PARAMETER] JSType type [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  type  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^restricted .build (  )  ;^363^^^^^359^367^[REPLACE] restricted.addAlternate ( t ) ;^[METHOD] getRestrictedUnion [TYPE] JSType [PARAMETER] JSType type [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  type  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^361^^^^^359^367^[REPLACE] for  ( JSType t : alternates )  {^[METHOD] getRestrictedUnion [TYPE] JSType [PARAMETER] JSType type [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  type  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^return restricted.addAlternate (  ) ;^366^^^^^359^367^[REPLACE] return restricted.build (  ) ;^[METHOD] getRestrictedUnion [TYPE] JSType [PARAMETER] JSType type [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType t  type  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^SortedSet<JSType> sorted = new TreeSet<JSType> ( ALPHA ) ;^370^^^^^369^385^[REPLACE] StringBuilder result = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^boolean firstAlternate = false;^371^^^^^369^385^[REPLACE] boolean firstAlternate = true;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^result.toString ( " ( " ) ;^373^^^^^369^385^[REPLACE] result.append ( " ( " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^StringBuilder result = new StringBuilder (  ) ;^374^^^^^369^385^[REPLACE] SortedSet<JSType> sorted = new TreeSet<JSType> ( ALPHA ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addAlternate ( otherAlternate ) ;^375^^^^^369^385^[REPLACE] sorted.addAll ( alternates ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !true )  {^377^^^^^369^385^[REPLACE] if  ( !firstAlternate )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^result.append ( " ( " ) ;^378^^^^^369^385^[REPLACE] result.append ( "|" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^firstAlternate = true;^381^^^^^369^385^[REPLACE] firstAlternate = false;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^376^^^^^369^385^[REPLACE] for  ( JSType t : sorted )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[ADD]^^376^377^378^379^^369^385^[ADD] for  ( JSType t : sorted )  { if  ( !firstAlternate )  { result.append ( "|" ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^result.append ( "|" ) ;^383^^^^^369^385^[REPLACE] result.append ( " ) " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^return result.StringBuilder (  ) ;^384^^^^^369^385^[REPLACE] return result.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  firstAlternate  true  [TYPE]  JSType t  [TYPE]  StringBuilder result  [TYPE]  SortedSet sorted  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( element.isSubtype ( that )  )  {^390^^^^^388^395^[REPLACE] if  ( !element.isSubtype ( that )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^391^^^^^388^395^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^389^^^^^388^395^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^394^^^^^388^395^[REPLACE] return true;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^400^^^^^398^406^[REPLACE] UnionTypeBuilder restricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getRestrictedTypeGivenToBooleanOutcome [TYPE] JSType [PARAMETER] boolean outcome [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  outcome  true  [TYPE]  JSType element  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[ADD]^^400^^^^^398^406^[ADD] UnionTypeBuilder restricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getRestrictedTypeGivenToBooleanOutcome [TYPE] JSType [PARAMETER] boolean outcome [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  outcome  true  [TYPE]  JSType element  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^401^^^^^398^406^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] getRestrictedTypeGivenToBooleanOutcome [TYPE] JSType [PARAMETER] boolean outcome [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  outcome  true  [TYPE]  JSType element  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^return restricted .addAlternate (  )  ;^405^^^^^398^406^[REPLACE] return restricted.build (  ) ;^[METHOD] getRestrictedTypeGivenToBooleanOutcome [TYPE] JSType [PARAMETER] boolean outcome [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  outcome  true  [TYPE]  JSType element  [TYPE]  UnionTypeBuilder restricted  [TYPE]  long serialVersionUID 
[REPLACE]^boolean firstAlternate = true;^410^^^^^409^418^[REPLACE] BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( literals  ||  BooleanLiteralSet.BOTH )  {^413^^^^^409^418^[REPLACE] if  ( literals == BooleanLiteralSet.BOTH )  {^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^literals =  null.union ( element.getPossibleToBooleanOutcomes (  )  ) ;^412^^^^^409^418^[REPLACE] literals = literals.union ( element.getPossibleToBooleanOutcomes (  )  ) ;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^412^^^^^409^418^[ADD] literals = literals.union ( element.getPossibleToBooleanOutcomes (  )  ) ;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^411^^^^^409^418^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return canAssign;^417^^^^^409^418^[REPLACE] return literals;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] UnionType   [TYPE]  BooleanLiteralSet literals  [TYPE]  Set alternates  [TYPE]  JSType element  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^422^^^^^421^436^[REPLACE] UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^423^^^^^421^436^[REPLACE] UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.first == null )  {^426^^^^^421^436^[REPLACE] if  ( p.first != null )  {^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^thisRestricted .build (  )  ;^427^^^^^421^436^[REPLACE] thisRestricted.addAlternate ( p.first ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.second == this  )  {^429^^^^^421^436^[REPLACE] if  ( p.second != null )  {^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^thatRestricted.addAlternate ( false.second ) ;^430^^^^^421^436^[REPLACE] thatRestricted.addAlternate ( p.second ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^424^^^^^421^436^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^425^^^^^421^436^[REPLACE] Pair<JSType, JSType> p = element.getTypesUnderEquality ( that ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^return   thisRestricted.build (  )   ) ;^433^434^435^^^421^436^[REPLACE] return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[METHOD] getTypesUnderEquality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^440^^^^^439^454^[REPLACE] UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[ADD]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^440^441^^^^439^454^[ADD] UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ; UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^441^^^^^439^454^[REPLACE] UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.first == this )  {^444^^^^^439^454^[REPLACE] if  ( p.first != null )  {^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^thisRestricted.addAlternate ( this.first ) ;^445^^^^^439^454^[REPLACE] thisRestricted.addAlternate ( p.first ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.second == null )  {^447^^^^^439^454^[REPLACE] if  ( p.second != null )  {^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( otherAlternate.isSubtype ( this )  )  { builder.addAlternate ( otherAlternate ) ;^448^^^^^439^454^[REPLACE] thatRestricted.addAlternate ( p.second ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^442^^^^^439^454^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^Pair<JSType, JSType> p = element.getTypesUnderEquality ( that ) ;^443^^^^^439^454^[REPLACE] Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^return Pair.of ( thisRestricted.addAlternate (  ) , thatRestricted.build (  )  ) ;^451^452^453^^^439^454^[REPLACE] return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[METHOD] getTypesUnderInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^458^^^^^457^472^[REPLACE] UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^UnionTypeBuilder thisRestricted = new UnionTypeBuilder ( registry ) ;^459^^^^^457^472^[REPLACE] UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.first == null )  {^462^^^^^457^472^[REPLACE] if  ( p.first != null )  {^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^thisRestricted.addAlternate ( true.first ) ;^463^^^^^457^472^[REPLACE] thisRestricted.addAlternate ( p.first ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^if  ( p.second == null )  {^465^^^^^457^472^[REPLACE] if  ( p.second != null )  {^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^thatRestricted.addAlternate ( false.second ) ;^466^^^^^457^472^[REPLACE] thatRestricted.addAlternate ( p.second ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^for  ( JSType t : alternates )  { if  ( t.matchesObjectContext (  )  )  {^460^^^^^457^472^[REPLACE] for  ( JSType element : alternates )  {^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^461^^^^^457^472^[REPLACE] Pair<JSType, JSType> p = element.getTypesUnderShallowInequality ( that ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^return Pair.of ( thisRestricted.addAlternate (  ) , thatRestricted.build (  )  ) ;^469^470^471^^^457^472^[REPLACE] return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[METHOD] getTypesUnderShallowInequality [TYPE] Pair [PARAMETER] JSType that [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  JSType element  that  [TYPE]  boolean false  true  [TYPE]  UnionTypeBuilder thatRestricted  thisRestricted  [TYPE]  long serialVersionUID  [TYPE]  Pair p 
[REPLACE]^return visitor.caseUnionType ( null ) ;^476^^^^^475^477^[REPLACE] return visitor.caseUnionType ( this ) ;^[METHOD] visit [TYPE] <T> [PARAMETER] Visitor<T> visitor [CLASS] UnionType   [TYPE]  Set alternates  [TYPE]  boolean false  true  [TYPE]  Visitor visitor  [TYPE]  long serialVersionUID 
