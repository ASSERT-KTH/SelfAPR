[REPLACE]^private static final long serialVersionUID ;^51^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] BooleanType  
[REPLACE]^getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^54^^^^^53^55^[REPLACE] super ( registry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] JSTypeRegistry registry [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  true 
[REPLACE]^return true;^59^^^^^58^60^[REPLACE] return false;^[METHOD] isNullable [TYPE] boolean [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  (   super.testForEquality ( that )   )  {^64^^^^^63^73^[REPLACE] if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return false;^65^^^^^63^73^[REPLACE] return UNKNOWN;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^if  (  that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  && that.isObject (  )  )  {^67^68^69^^^63^73^[REPLACE] if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return false;^70^^^^^63^73^[REPLACE] return UNKNOWN;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return false;^72^^^^^63^73^[REPLACE] return FALSE;^[METHOD] testForEquality [TYPE] TernaryValue [PARAMETER] JSType that [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  JSType that  [TYPE]  boolean false  true 
[REPLACE]^return false;^77^^^^^76^78^[REPLACE] return true;^[METHOD] isBooleanValueType [TYPE] boolean [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^82^^^^^81^83^[REPLACE] return true;^[METHOD] matchesNumberContext [TYPE] boolean [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^87^^^^^86^88^[REPLACE] return true;^[METHOD] matchesStringContext [TYPE] boolean [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^93^^^^^91^94^[REPLACE] return true;^[METHOD] matchesObjectContext [TYPE] boolean [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return visitor.caseBooleanType (  ) ;^98^^^^^97^99^[REPLACE] return getNativeType ( JSTypeNative.BOOLEAN_OBJECT_TYPE ) ;^[METHOD] autoboxesTo [TYPE] JSType [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^103^^^^^102^104^[REPLACE] return "boolean";^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return false;^108^^^^^107^109^[REPLACE] return BooleanLiteralSet.BOTH;^[METHOD] getPossibleToBooleanOutcomes [TYPE] BooleanLiteralSet [PARAMETER] [CLASS] BooleanType   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return true.caseBooleanType (  ) ;^113^^^^^112^114^[REPLACE] return visitor.caseBooleanType (  ) ;^[METHOD] visit [TYPE] <T> [PARAMETER] Visitor<T> visitor [CLASS] BooleanType   [TYPE]  Visitor visitor  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
