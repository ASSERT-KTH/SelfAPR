[REPLACE]^private static final long serialVersionUID  = null ;^60^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] RecordType  
[REPLACE]^private final Map<String, JSType> properties ;^62^^^^^^^[REPLACE] private final Map<String, JSType> properties = new HashMap<String, JSType> (  ) ;^ [CLASS] RecordType  
[REPLACE]^private boolean isFrozen ;^63^^^^^^^[REPLACE] private boolean isFrozen = false;^ [CLASS] RecordType  
[REPLACE]^super ( registry, this, this ) ;^72^^^^^71^80^[REPLACE] super ( registry, null, null ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] JSTypeRegistry registry JSType> properties [CLASS] RecordType   [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  isFrozen  true  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^74^^^^^71^80^[REPLACE] for  ( String property : properties.keySet (  )  )  {^[METHOD] <init> [TYPE] Map) [PARAMETER] JSTypeRegistry registry JSType> properties [CLASS] RecordType   [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  isFrozen  true  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^isFrozen = false;^79^^^^^71^80^[REPLACE] isFrozen = true;^[METHOD] <init> [TYPE] Map) [PARAMETER] JSTypeRegistry registry JSType> properties [CLASS] RecordType   [TYPE]  JSTypeRegistry registry  [TYPE]  boolean false  isFrozen  true  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! ! ( other instanceof RecordType )  )  {^84^^^^^83^91^[REPLACE] if  ( ! ( other instanceof RecordType )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] RecordType   [TYPE]  Object other  [TYPE]  boolean false  isFrozen  true  [TYPE]  RecordType otherRecord  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^84^85^86^^^83^91^[ADD] if  ( ! ( other instanceof RecordType )  )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] RecordType   [TYPE]  Object other  [TYPE]  boolean false  isFrozen  true  [TYPE]  RecordType otherRecord  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^85^^^^^83^91^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] RecordType   [TYPE]  Object other  [TYPE]  boolean false  isFrozen  true  [TYPE]  RecordType otherRecord  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^RecordType thatRecord =  ( RecordType )  that;^89^^^^^83^91^[REPLACE] RecordType otherRecord =  ( RecordType )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] RecordType   [TYPE]  Object other  [TYPE]  boolean false  isFrozen  true  [TYPE]  RecordType otherRecord  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return otherRecord.properties .getLeastSupertype ( false )  ;^90^^^^^83^91^[REPLACE] return otherRecord.properties.equals ( properties ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] RecordType   [TYPE]  Object other  [TYPE]  boolean false  isFrozen  true  [TYPE]  RecordType otherRecord  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return registry.getTypesWithProperty ( JSTypeNative.OBJECT_TYPE ) ;^95^^^^^94^96^[REPLACE] return registry.getNativeObjectType ( JSTypeNative.OBJECT_TYPE ) ;^[METHOD] getImplicitPrototype [TYPE] ObjectType [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  isFrozen  true  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !typeA.hasProperty ( property )  )  {^101^^^^^99^110^[REPLACE] if  ( isFrozen )  {^[METHOD] defineProperty [TYPE] boolean [PARAMETER] String propertyName JSType type boolean inferred boolean inExterns [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String propertyName  [TYPE]  JSType type  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^102^^^^^99^110^[REPLACE] return false;^[METHOD] defineProperty [TYPE] boolean [PARAMETER] String propertyName JSType type boolean inferred boolean inExterns [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String propertyName  [TYPE]  JSType type  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( inferred )  {^105^^^^^99^110^[REPLACE] if  ( !inferred )  {^[METHOD] defineProperty [TYPE] boolean [PARAMETER] String propertyName JSType type boolean inferred boolean inExterns [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String propertyName  [TYPE]  JSType type  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType greatestSubtype = super.getGreatestSubtype ( that ) ;^106^^^^^99^110^[REPLACE] properties.put ( propertyName, type ) ;^[METHOD] defineProperty [TYPE] boolean [PARAMETER] String propertyName JSType type boolean inferred boolean inExterns [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String propertyName  [TYPE]  JSType type  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return super .getLeastSupertype ( type )  ;^109^^^^^99^110^[REPLACE] return super.defineProperty ( propertyName, type, inferred, inExterns ) ;^[METHOD] defineProperty [TYPE] boolean [PARAMETER] String propertyName JSType type boolean inferred boolean inExterns [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String propertyName  [TYPE]  JSType type  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( that.isRecordType (  )  )  {^114^^^^^113^133^[REPLACE] if  ( !that.isRecordType (  )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return super.getGreatestSubtype ( that ) ;^115^^^^^113^133^[REPLACE] return super.getLeastSupertype ( that ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^RecordType otherRecord =  ( RecordType )  other;^118^^^^^113^133^[REPLACE] RecordType thatRecord =  ( RecordType )  that;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^StringBuilder sb = new StringBuilder (  ) ;^119^^^^^113^133^[REPLACE] RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( thatRecord.hasProperty ( property )  ) {^125^126^127^^^113^133^[REPLACE] if  ( thatRecord.hasProperty ( property )  && thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^128^^^^^113^133^[REPLACE] builder.addProperty ( property, getPropertyType ( property )  ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^128^^^^^113^133^[ADD] builder.addProperty ( property, getPropertyType ( property )  ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^124^^^^^113^133^[REPLACE] for  ( String property : properties.keySet (  )  )  {^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^132^^^^^113^133^[REPLACE] return builder.build (  ) ;^[METHOD] getLeastSupertype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  RecordType thatRecord  [TYPE]  String property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( propType.isRecordType (  )  )  {^137^^^^^136^188^[REPLACE] if  ( that.isRecordType (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( thatRecord.hasProperty ( propName )  ) {^145^146^147^^^136^188^[REPLACE] if  ( thatRecord.hasProperty ( property )  && !thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^145^146^147^148^149^136^188^[ADD] if  ( thatRecord.hasProperty ( property )  && !thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  { return registry.getNativeObjectType ( JSTypeNative.NO_TYPE ) ; }^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return registry.getTypesWithProperty ( JSTypeNative.NO_TYPE ) ;^148^^^^^145^149^[REPLACE] return registry.getNativeObjectType ( JSTypeNative.NO_TYPE ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !hasProperty ( propName )  )  {^155^^^^^136^188^[REPLACE] if  ( !hasProperty ( property )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^155^156^157^^^136^188^[ADD] if  ( !hasProperty ( property )  )  { builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ; }^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addProperty ( propName, thatRecord .hasProperty ( property )   ) ;^156^^^^^136^188^[REPLACE] builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addProperty ( propName, thatRecord.getPropertyType ( property )  ) ;^156^^^^^136^188^[REPLACE] builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^156^^^^^136^188^[ADD] builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return registry .getTypesWithProperty ( property )  ;^148^^^^^136^188^[REPLACE] return registry.getNativeObjectType ( JSTypeNative.NO_TYPE ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^160^^^^^136^188^[REPLACE] return builder.build (  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^RecordType otherRecord =  ( RecordType )  other;^138^^^^^136^188^[REPLACE] RecordType thatRecord =  ( RecordType )  that;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^138^139^^^^136^188^[ADD] RecordType thatRecord =  ( RecordType )  that; RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^StringBuilder sb = new StringBuilder (  ) ;^139^^^^^136^188^[REPLACE] RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^139^^^^^136^188^[ADD] RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^144^^^^^136^188^[REPLACE] for  ( String property : properties.keySet (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^144^145^146^147^148^136^188^[ADD] for  ( String property : properties.keySet (  )  )  { if  ( thatRecord.hasProperty ( property )  && !thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  { return registry.getNativeObjectType ( JSTypeNative.NO_TYPE ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( String property : properties.keySet (  )  )  { if  ( i > 0 )  {^154^^^^^136^188^[REPLACE] for  ( String property : thatRecord.properties.keySet (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  {^145^146^147^^^136^188^[REPLACE] if  ( thatRecord.hasProperty ( property )  && !thatRecord.getPropertyType ( property ) .equals ( getPropertyType ( property )  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^builder.addProperty ( property, getPropertyType ( property )  ) ;^156^^^^^136^188^[REPLACE] builder.addProperty ( property, thatRecord.getPropertyType ( property )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return registry.getNativeObjectType ( JSTypeNative.OBJECT_TYPE ) ;^148^^^^^136^188^[REPLACE] return registry.getNativeObjectType ( JSTypeNative.NO_TYPE ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType greatestSubtype = super .getLeastSupertype ( altPropType )  ;^163^^^^^136^188^[REPLACE] JSType greatestSubtype = super.getGreatestSubtype ( that ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  that.isNoObjectType (  )  )  {^164^^^^^136^188^[REPLACE] if  ( greatestSubtype.isNoObjectType (  )  && !that.isNoObjectType (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^164^165^^^^136^188^[ADD] if  ( greatestSubtype.isNoObjectType (  )  && !that.isNoObjectType (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  altPropType.isUnknownType (  )  || altPropType.equals ( propType )  )  )  {^177^178^179^180^^136^188^[REPLACE] if  ( altPropType != null && !alt.equals ( this )  && alt.isSubtype ( that )  && ( propType.isUnknownType (  )  || altPropType.isUnknownType (  )  || altPropType.equals ( propType )  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^177^178^179^180^181^136^188^[ADD] if  ( altPropType != null && !alt.equals ( this )  && alt.isSubtype ( that )  && ( propType.isUnknownType (  )  || altPropType.isUnknownType (  )  || altPropType.equals ( propType )  )  )  { builder.addAlternate ( alt ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^altPropType.equals ( propType )  )  )  { builder.addAlternate ( alt ) ;^181^^^^^177^182^[REPLACE] builder.addAlternate ( alt ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^181^^^^^177^182^[ADD] builder.addAlternate ( alt ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^greatestSubtype =  that.getLeastSupertype ( builder.build (  )  ) ;^184^^^^^136^188^[REPLACE] greatestSubtype = greatestSubtype.getLeastSupertype ( builder.build (  )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^171^^^^^136^188^[REPLACE] for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^String propName = this.getKey (  ) ;^172^^^^^136^188^[REPLACE] String propName = entry.getKey (  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^172^173^^^^136^188^[ADD] String propName = entry.getKey (  ) ; JSType propType = entry.getValue (  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType propType = null.getValue (  ) ;^173^^^^^136^188^[REPLACE] JSType propType = entry.getValue (  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^174^^^^^136^188^[REPLACE] UnionTypeBuilder builder = new UnionTypeBuilder ( registry ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^175^^^^^136^188^[REPLACE] for  ( ObjectType alt : registry.getTypesWithProperty ( propName )  )  {^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^175^176^177^178^179^136^188^[ADD] for  ( ObjectType alt : registry.getTypesWithProperty ( propName )  )  { JSType altPropType = alt.getPropertyType ( propName ) ; if  ( altPropType != null && !alt.equals ( this )  && alt.isSubtype ( that )  && ( propType.isUnknownType (  )  || altPropType.isUnknownType (  )  ||^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType altPropType = alt.hasProperty ( propName ) ;^176^^^^^136^188^[REPLACE] JSType altPropType = alt.getPropertyType ( propName ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^builder .build (  )  ;^181^^^^^177^182^[REPLACE] builder.addAlternate ( alt ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^184^^^^^136^188^[ADD] greatestSubtype = greatestSubtype.getLeastSupertype ( builder.build (  )  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType propType = 0.getValue (  ) ;^173^^^^^136^188^[REPLACE] JSType propType = entry.getValue (  ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^174^^^^^136^188^[ADD] UnionTypeBuilder builder = new UnionTypeBuilder ( registry ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType altPropType = alt.hasProperty ( property ) ;^176^^^^^136^188^[REPLACE] JSType altPropType = alt.getPropertyType ( propName ) ;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return that;^187^^^^^136^188^[REPLACE] return greatestSubtype;^[METHOD] getGreatestSubtype [TYPE] JSType [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  ObjectType alt  [TYPE]  Entry entry  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType altPropType  greatestSubtype  propType  that  [TYPE]  RecordType thatRecord  [TYPE]  UnionTypeBuilder builder  [TYPE]  String propName  property  [TYPE]  RecordTypeBuilder builder  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^192^^^^^191^193^[REPLACE] return true;^[METHOD] isRecordType [TYPE] boolean [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( JSType .isSubtype ( that )   )  {^197^^^^^196^215^[REPLACE] if  ( JSType.isSubtype ( this, that )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^198^^^^^196^215^[REPLACE] return true;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( registry.getTypesWithProperty ( JSTypeNative.OBJECT_TYPE ) .isSubtype ( that )  )  {^202^203^^^^196^215^[REPLACE] if  ( registry.getNativeObjectType ( JSTypeNative.OBJECT_TYPE ) .isSubtype ( that )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^202^203^204^205^^196^215^[ADD] if  ( registry.getNativeObjectType ( JSTypeNative.OBJECT_TYPE ) .isSubtype ( that )  )  { return true; }^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^204^^^^^196^215^[REPLACE] return true;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !that .isUnknownType (  )   )  {^210^^^^^196^215^[REPLACE] if  ( !that.isRecordType (  )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^211^^^^^196^215^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return RecordType .isSubtype ( that )  ;^214^^^^^196^215^[REPLACE] return RecordType.isSubtype ( this,  ( RecordType )  that ) ;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] JSType that [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType that  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !typeA.getPropertyType ( property )  )  {^237^^^^^218^257^[REPLACE] if  ( !typeA.hasProperty ( property )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( other instanceof RecordType )  )  {     return false; }^237^^^^^218^257^[REMOVE] ^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^238^^^^^218^257^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( propA.isUnknownType (  )  && !propB.isUnknownType (  )  )  {^243^^^^^218^257^[REPLACE] if  ( !propA.isUnknownType (  )  && !propB.isUnknownType (  )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( typeA .getPropertyType ( property )   )  {^244^^^^^218^257^[REPLACE] if  ( typeA.isPropertyTypeDeclared ( property )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !propA.equals ( propB )  )  {^249^^^^^244^252^[REPLACE] if  ( !propA.isSubtype ( propB )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^250^^^^^244^252^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !propA.isSubtype ( propB )  )  {^245^^^^^218^257^[REPLACE] if  ( !propA.equals ( propB )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^246^^^^^218^257^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( other instanceof RecordType )  )  {     return false; }^245^^^^^218^257^[REMOVE] ^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !propA.equals ( propB )  )  {^249^^^^^218^257^[REPLACE] if  ( !propA.isSubtype ( propB )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^250^^^^^218^257^[REPLACE] return false;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( typeA.getPropertyType ( property )  )  {^244^^^^^218^257^[REPLACE] if  ( typeA.isPropertyTypeDeclared ( property )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !propA .getLeastSupertype ( propA )   )  {^245^^^^^218^257^[REPLACE] if  ( !propA.equals ( propB )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( propA.equals ( propB )  )  {^245^^^^^218^257^[REPLACE] if  ( !propA.equals ( propB )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^236^^^^^218^257^[REPLACE] for  ( String property : typeB.properties.keySet (  )  )  {^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[ADD]^^236^237^238^239^^218^257^[ADD] for  ( String property : typeB.properties.keySet (  )  )  { if  ( !typeA.hasProperty ( property )  )  { return false; }^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType propA = typeA .hasProperty ( property )  ;^241^^^^^218^257^[REPLACE] JSType propA = typeA.getPropertyType ( property ) ;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^JSType propB = typeB.hasProperty ( property ) ;^242^^^^^218^257^[REPLACE] JSType propB = typeB.getPropertyType ( property ) ;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^256^^^^^218^257^[REPLACE] return true;^[METHOD] isSubtype [TYPE] boolean [PARAMETER] ObjectType typeA RecordType typeB [CLASS] RecordType   [TYPE]  ObjectType typeA  [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  JSType propA  propB  [TYPE]  RecordType typeB  [TYPE]  String property  [TYPE]  Map properties  [TYPE]  long serialVersionUID 
[REPLACE]^RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;^261^^^^^260^280^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^sb .StringBuilder (  )  ;^262^^^^^260^280^[REPLACE] sb.append ( "{ " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[ADD]^^262^^^^^260^280^[ADD] sb.append ( "{ " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^int i = 1;^264^^^^^260^280^[REPLACE] int i = 0;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^if  ( i  <  0 )  {^267^^^^^260^280^[REPLACE] if  ( i > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^sb .append ( property )  ;^268^^^^^260^280^[REPLACE] sb.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^for  ( Map.Entry<String, JSType> entry : properties.entrySet (  )  )  { String propName = entry.getKey (  ) ;^266^^^^^260^280^[REPLACE] for  ( String property : properties.keySet (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^sb.append ( ", " ) ;^278^^^^^260^280^[REPLACE] sb.append ( " }" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
[REPLACE]^return sb .getPropertyType ( property )  ;^279^^^^^260^280^[REPLACE] return sb.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RecordType   [TYPE]  boolean false  inExterns  inferred  isFrozen  true  [TYPE]  String property  [TYPE]  StringBuilder sb  [TYPE]  Map properties  [TYPE]  long serialVersionUID  [TYPE]  int i 
