[REPLACE]^EOF_CHAR ;^71^^^^^^^[REPLACE] EOF_CHAR = -1;^ [CLASS] TokenStream  
[REPLACE]^double  regExpFlags;^1657^^^^^^^[REPLACE] String regExpFlags;^ [CLASS] TokenStream  
[REPLACE]^private  short  pushbackToken;^1659^^^^^^^[REPLACE] private int pushbackToken;^ [CLASS] TokenStream  
[REPLACE]^private  char  string = "";^1666^^^^^^^[REPLACE] private String string = "";^ [CLASS] TokenStream  
[REPLACE]^private char[] stringBuffer  = null ;^1669^^^^^^^[REPLACE] private char[] stringBuffer = new char[128];^ [CLASS] TokenStream  
[REPLACE]^private  long  stringBufferTop;^1670^^^^^^^[REPLACE] private int stringBufferTop;^ [CLASS] TokenStream  
[REPLACE]^private ObjToIntMap allStrings  = null ;^1671^^^^^^^[REPLACE] private ObjToIntMap allStrings = new ObjToIntMap ( 50 ) ;^ [CLASS] TokenStream  
[REPLACE]^private  int[] ungetBuffer = new int[3];^1674^^^^^^^[REPLACE] private final int[] ungetBuffer = new int[3];^ [CLASS] TokenStream  
[REPLACE]^private boolean hitEOF ;^1677^^^^^^^[REPLACE] private boolean hitEOF = false;^ [CLASS] TokenStream  
[REPLACE]^private int lineStart  = null ;^1679^^^^^^^[REPLACE] private int lineStart = 0;^ [CLASS] TokenStream  
[REPLACE]^private int charno  = null ;^1681^^^^^^^[REPLACE] private int charno = -1;^ [CLASS] TokenStream  
[REPLACE]^private int lineEndChar ;^1682^^^^^^^[REPLACE] private int lineEndChar = -1;^ [CLASS] TokenStream  
[REPLACE]^private  long  sourceEnd;^1687^^^^^^^[REPLACE] private int sourceEnd;^ [CLASS] TokenStream  
[REPLACE]^private  short  xmlOpenTagsCount;^1693^^^^^^^[REPLACE] private int xmlOpenTagsCount;^ [CLASS] TokenStream  
[REPLACE]^this.parser =  null;^76^^^^^75^89^[REPLACE] this.parser = parser;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.lineno =  tokenno;^77^^^^^75^89^[REPLACE] this.lineno = lineno;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceReader == null )  {^78^^^^^75^89^[REPLACE] if  ( sourceReader != null )  {^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == null )  Kit.codeBug (  ) ;^79^^^^^75^89^[REPLACE] if  ( sourceString != null )  Kit.codeBug (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.sourceReader = sourceReader;this.sourceBuffer = new char[512];this.sourceEnd = 0;^79^80^81^82^^75^89^[ADD] if  ( sourceString != null )  Kit.codeBug (  ) ; this.sourceReader = sourceReader; this.sourceBuffer = new char[512]; this.sourceEnd = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString != null )  Kit.codeBug (  ) ;^84^^^^^75^89^[REPLACE] if  ( sourceString == null )  Kit.codeBug (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.sourceString = sourceString;this.sourceEnd = sourceString.length (  ) ;^84^85^86^87^^75^89^[ADD] if  ( sourceString == null )  Kit.codeBug (  ) ; this.sourceString = sourceString; this.sourceEnd = sourceString.length (  ) ; }^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceReader =  null;^80^^^^^75^89^[REPLACE] this.sourceReader = sourceReader;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceBuffer = new char[512 << 2];^81^^^^^75^89^[REPLACE] this.sourceBuffer = new char[512];^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceCursor = 0  ;^82^^^^^75^89^[REPLACE] this.sourceEnd = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceString =  string;^85^^^^^75^89^[REPLACE] this.sourceString = sourceString;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceEnd =  null.length (  ) ;^86^^^^^75^89^[REPLACE] this.sourceEnd = sourceString.length (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceCursor = 2;^88^^^^^75^89^[REPLACE] this.sourceCursor = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^97^^^^^96^113^[REPLACE] if  ( Token.printTrees )  {^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return name + " `" + this.string + "'";  ;^104^^^^^96^113^[REPLACE] return name + " `" + this.string + "'";^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return "NUMBER "  this.number;^107^^^^^96^113^[REPLACE] return "NUMBER " + this.number;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceString;^110^^^^^96^113^[REPLACE] return name;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String name = Token.name ( ungetCursor ) ;^98^^^^^96^113^[REPLACE] String name = Token.name ( token ) ;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return "NUMBER " + this.number;  ;^107^^^^^96^113^[REPLACE] return "NUMBER " + this.number;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return "";  ;^112^^^^^96^113^[REPLACE] return "";^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^125^126^127^^^121^294^[ADD] Id_break         = Token.BREAK, Id_case          = Token.CASE, Id_continue      = Token.CONTINUE,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^135^136^137^^^121^294^[ADD] Id_function      = Token.FUNCTION, Id_if            = Token.IF, Id_in            = Token.IN,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^143^144^145^^^121^294^[ADD] Id_true          = Token.TRUE, Id_typeof        = Token.TYPEOF, Id_var           = Token.VAR,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^146^147^148^^^121^294^[ADD] Id_void          = Token.VOID, Id_while         = Token.WHILE, Id_with          = Token.WITH,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^152^153^154^^^121^294^[ADD] Id_boolean       = Token.RESERVED, Id_byte          = Token.RESERVED, Id_catch         = Token.CATCH,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^171^172^173^^^121^294^[ADD] Id_long          = Token.RESERVED, Id_native        = Token.RESERVED, Id_package       = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^179^180^181^^^121^294^[ADD] Id_super         = Token.RESERVED, Id_synchronized  = Token.RESERVED, Id_throw         = Token.THROW,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^181^182^183^^^121^294^[ADD] Id_throw         = Token.THROW, Id_throws        = Token.RESERVED, Id_transient     = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^185^^^^^121^294^[ADD] Id_volatile      = Token.RESERVED;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^187^^^^^121^294^[ADD] int id;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String s = sourceString;^188^^^^^121^294^[REPLACE] String s = name;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount || 'f' )  { if  ( s.equals ( 0 )  || 'i' )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c ) { if  ( s.charAt ( 0 )  && 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'o' )  { if  ( s.equals ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^195^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='o'  )   { if   (  s.charAt  (  0  )  =='d'  )   {id=Id_do; break L0;} } break L;  ;^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^195^196^197^198^199^121^294^[ADD] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} } break L; case 3: switch  ( s.charAt ( 0 )  )  { case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L; case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  'n' )  { if  ( s.equals ( 0 - 1 )  &&false )  {id=Id_in; break L0 - 1;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( string.charAt ( 0 )  && 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'o' )  { if  ( s .substring ( Id_extends , lineEndChar )   != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_throw  ;^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 - 2 )  || 'd' )  {id=Id_do; break L0 - 2;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^195^196^197^198^199^121^294^[ADD] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} } break L; case 3: switch  ( s.charAt ( 0 )  )  { case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L; case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^194^195^^^^121^294^[ADD] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} } else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'f' )  { if  ( s.equals ( 0 )  != 'i' )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^193^194^^^^121^294^[ADD] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} } else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'f' )  { if  ( s.charAt ( 0 )  || 'i' )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c != 'n' )  { if  ( s.charAt ( 0 )  != 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.equals ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c ) { if  ( s .substring ( Id_public , Id_int )   && 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='o'  )   { if   (  s.charAt  (  0  )  =='d'  )   {id=Id_do; break L0;} } break L;  ;^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^194^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  (  'o' )  { if  ( s.equals ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'o' )  { if  ( s.equals ( 0 )  != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 - 3 )  != 'd' )  {id=Id_do; break L0 - 3;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'f': if  (  s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^198^^^^^121^294^[REPLACE] case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^198^^^^^121^294^[REPLACE] case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'i': if  (  s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^199^^^^^121^294^[REPLACE] case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;} break L;^199^200^201^202^203^121^294^[ADD] case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L; case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L; case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L; case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'n': if  ( s.equals ( 2 ) =='w' || s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^200^^^^^121^294^[REPLACE] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;} break L;^200^201^202^203^^121^294^[ADD] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L; case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L; case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': if  ( s.charAt ( 3 ) =='y' || s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^201^^^^^121^294^[REPLACE] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_throw  ;^201^^^^^121^294^[REPLACE] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  ( s.charAt ( 2 - 0 ) =='r' || s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^202^^^^^121^294^[REPLACE] case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^202^^^^^121^294^[REPLACE] case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='r'  )   { if   (  s.charAt  (  2  )  =='a' && s.charAt  (  1  )  =='h'  )   {  ;^207^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^207^208^^^^121^294^[ADD] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  { id=Id_case; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 2 )  && 'a' && s.charAt ( 1 )  && 'h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.equals ( 2 ) =='a' || s.charAt ( 1 ) =='h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_var  ;^210^^^^^121^294^[REPLACE] id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c=='e'  )   { if   (  s.charAt  (  2  )  =='s' && s.charAt  (  1  )  =='l'  )   {  ;^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.charAt ( 3 ) =='s' ) {^207^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_false  ;^208^^^^^121^294^[REPLACE] id=Id_case; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  (  s.charAt ( 1 )  != 'h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^209^210^^^^121^294^[ADD] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  { id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'e' )  { if  ( s.equals ( 2 )  || 's' && s.charAt ( 1 )  || 'l' )  {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 2 )  || 'u' && s.charAt ( 1 )  || 'n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='r'  )   { if   (  s.charAt  (  2  )  =='a' && s.charAt  (  1  )  =='h'  )   {  ;^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^215^216^^^^121^294^[ADD] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  { id=Id_enum; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^216^^^^^121^294^[REPLACE] id=Id_enum; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' ) {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' || s.charAt ( 1 ) =='l' )  {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^214^^^^^121^294^[REPLACE] id=Id_else; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_false  ;^214^^^^^121^294^[REPLACE] id=Id_else; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.charAt ( 1 ) =='s' ) {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^213^214^^^^121^294^[ADD] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  { id=Id_else; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c ||xmlOpenTagsCount )  { if  ( s.equals ( 2 )  || 'u' && s.charAt ( 1 )  || 'n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^215^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^216^217^^^^121^294^[ADD] id=Id_enum; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  (  s.charAt ( 1 ) =='n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c !=xmlOpenTagsCount )  { if  ( s.equals ( 2 )  != 'u' && s.charAt ( 1 )  != 'r' )  {^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount != 's' )  { if  ( s.charAt ( 2 )  != 'i' && s.charAt ( 1 )  != 'h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^225^^^^^121^294^[REPLACE] id=Id_this; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='s' )  { if  ( s.charAt ( 1 ) =='i' || s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'm' )  {     if  (  (  ( s.charAt ( 2 )  )  == 'u' )  &&  (  ( s.charAt ( 1 )  )  == 'n' )  )  {         id = Id_enum;         break L0;     } }^224^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^225^226^^^^121^294^[ADD] id=Id_this; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.equals ( 2 ) =='u' ) {^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_throw  ;^223^^^^^121^294^[REPLACE] id=Id_true; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^223^224^225^^^121^294^[ADD] id=Id_true; break L0;} } else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  { id=Id_this; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='r'  )   { if   (  s.charAt  (  2  )  =='a' && s.charAt  (  1  )  =='h'  )   {  ;^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 2 )  || 'i' && s.charAt ( 1 )  || 'h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^224^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.equals ( 2 ) =='i' || s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' || s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c && 'c' )  { X="const";id=Id_const; }^236^^^^^121^294^[REPLACE] if  ( c=='c' )  { X="const";id=Id_const; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount != 'f' )  { X="final";id=Id_final; }^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "float"  ;^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^236^237^^^^121^294^[ADD] if  ( c=='c' )  { X="const";id=Id_const; } else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^236^^^^^121^294^[REPLACE] if  ( c=='c' )  { X="const";id=Id_const; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='f'  )   { X="final";id=Id_final; } break L;  ;^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'f' )  { X="float";id=Id_float; }^240^^^^^121^294^[REPLACE] if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'n' )  {     if  (  ( s.charAt ( 0 )  )  == 'i' )  {         id = Id_in;         break L0;     } }else     if  ( c == 'o' )  {         if  (  ( s.charAt ( 0 )  )  == 'd' )  {             id = Id_do;             break L0;         }     }^240^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 's' )  { X="short";id=Id_short; }^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "float"  ;^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_export  ;^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^241^242^243^244^245^121^294^[ADD] else if  ( c=='s' )  { X="short";id=Id_short; } break L; case 'p': X="super";id=Id_super; break L; case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "long"  ;^240^^^^^121^294^[REPLACE] if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_export  ;^240^^^^^121^294^[REPLACE] if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c != 's' )  { X="short";id=Id_short; }^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'p': X="super";id=Id_super; break L;case 't': X="catch";id=Id_catch; break L;^241^242^243^244^245^121^294^[ADD] else if  ( c=='s' )  { X="short";id=Id_short; } break L; case 'p': X="super";id=Id_super; break L; case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'd' )  { X="delete";id=Id_delete; }^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='r'  )   { X="return";id=Id_return; } break L;  ;^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c = null ;^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_enum  ;^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^251^252^253^254^255^121^294^[ADD] else if  ( c=='r' )  { X="return";id=Id_return; } break L; case 'h': X="throws";id=Id_throws; break L; case 'm': X="import";id=Id_import; break L; case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'm': X="import";id=Id_import; break L;case 'o': X="double";id=Id_double; break L;^251^252^253^254^255^121^294^[ADD] else if  ( c=='r' )  { X="return";id=Id_return; } break L; case 'h': X="throws";id=Id_throws; break L; case 'm': X="import";id=Id_import; break L; case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^250^251^^^^121^294^[ADD] if  ( c=='d' )  { X="delete";id=Id_delete; } else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_false  ;^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  (  'r' )  { X="return";id=Id_return; }^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c =  else if  ( c;^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'i' )  { X="interface";id=Id_interface; }^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( xmlOpenTagsCount != 'p' )  { X="protected";id=Id_protected; }^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^279^280^^^^121^294^[ADD] else if  ( c=='p' )  { X="protected";id=Id_protected; } else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  c=='t'  )   { X="transient";id=Id_transient; } break L;  ;^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^280^281^282^283^^121^294^[ADD] else if  ( c=='t' )  { X="transient";id=Id_transient; } break L; case 10: c=s.charAt ( 1 ) ; if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 10: c=s.charAt ( 1 ) ;^280^281^282^283^^121^294^[ADD] else if  ( c=='t' )  { X="transient";id=Id_transient; } break L; case 10: c=s.charAt ( 1 ) ; if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c;^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c = null ;^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_private  ;^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount || 't' )  { X="transient";id=Id_transient; }^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c =  else if  ( c;^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="protected";id=Id_protected; }^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="transient";id=Id_transient; }^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  'm' )  { X="implements";id=Id_implements; }^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( ! c=='n' )  { X="instanceof";id=Id_instanceof; }^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c =  else if  ( c;^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 12: X="synchronized";id=Id_synchronized; break L;^284^285^286^287^^121^294^[ADD] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; } break L; case 12: X="synchronized";id=Id_synchronized; break L; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_instanceof  ;^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_implements  ;^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^283^284^^^^121^294^[ADD] if  ( c=='m' )  { X="implements";id=Id_implements; } else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c = null ;^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X==null && X!=s && !X.equals ( s )  )  id = 0;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^288^289^^^^121^294^[ADD] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X!=null && X!=s && !X.equals ( s )  )  id = 3;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^L4: { id = 4; String X = null; int c;^190^^^^^121^294^[REPLACE] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 2: c=s.charAt ( 2 ) ;^192^^^^^121^294^[REPLACE] case 2: c=s.charAt ( 1 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^200^^^^^121^294^[REPLACE] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_break  ;^201^^^^^121^294^[REPLACE] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': X;^205^^^^^121^294^[REPLACE] case 'b': X="byte";id=Id_byte; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_break  ;^205^^^^^121^294^[REPLACE] case 'b': X="byte";id=Id_byte; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^206^^^^^121^294^[ADD] case 'c': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^208^209^210^^^121^294^[ADD] id=Id_case; break L0;} } else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  { id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^210^211^^^^121^294^[ADD] id=Id_char; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = s.charAt ( 1 )  ;^212^^^^^121^294^[REPLACE] case 'e': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^218^^^^^121^294^[ADD] case 'g': X="goto";id=Id_goto; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^218^^^^^121^294^[REPLACE] case 'g': X="goto";id=Id_goto; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "const"  ;^219^^^^^121^294^[REPLACE] case 'l': X="long";id=Id_long; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^219^^^^^121^294^[REPLACE] case 'l': X="long";id=Id_long; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'n': X="true";id=Id_true; break L;^220^^^^^121^294^[REPLACE] case 'n': X="null";id=Id_null; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^220^^^^^121^294^[REPLACE] case 'n': X="null";id=Id_null; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 5 ) ;^221^^^^^121^294^[REPLACE] case 't': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^227^228^^^^121^294^[ADD] case 'v': X="void";id=Id_void; break L; case 'w': X="with";id=Id_with; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_volatile  ;^227^^^^^121^294^[REPLACE] case 'v': X="void";id=Id_void; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^228^229^^^^121^294^[ADD] case 'w': X="with";id=Id_with; break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^228^^^^^121^294^[REPLACE] case 'w': X="with";id=Id_with; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "const"  ;^231^^^^^121^294^[REPLACE] case 'a': X="class";id=Id_class; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_case  ;^231^^^^^121^294^[REPLACE] case 'a': X="class";id=Id_class; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "boolean"  ;^232^^^^^121^294^[REPLACE] case 'e': X="break";id=Id_break; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_boolean  ;^232^^^^^121^294^[REPLACE] case 'e': X="break";id=Id_break; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "with"  ;^233^^^^^121^294^[REPLACE] case 'i': X="while";id=Id_while; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_with  ;^233^^^^^121^294^[REPLACE] case 'i': X="while";id=Id_while; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^234^235^^^^121^294^[ADD] case 'l': X="false";id=Id_false; break L; case 'n': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'n': c=s.charAt ( 0 ) ;^234^235^^^^121^294^[ADD] case 'l': X="false";id=Id_false; break L; case 'n': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = s.charAt ( 1 )  ;^235^^^^^121^294^[REPLACE] case 'n': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "long"  ;^236^^^^^121^294^[REPLACE] if  ( c=='c' )  { X="const";id=Id_const; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': c=s.charAt ( 3 ) ;^239^^^^^121^294^[REPLACE] case 'o': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^240^241^^^^121^294^[ADD] if  ( c=='f' )  { X="float";id=Id_float; } else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'p': X;^243^^^^^121^294^[REPLACE] case 'p': X="super";id=Id_super; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_export  ;^243^^^^^121^294^[REPLACE] case 'p': X="super";id=Id_super; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^244^245^^^^121^294^[ADD] case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_typeof  ;^244^^^^^121^294^[REPLACE] case 'r': X="throw";id=Id_throw; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^245^^^^^121^294^[ADD] case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_with  ;^245^^^^^121^294^[REPLACE] case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "volatile"  ;^248^^^^^121^294^[REPLACE] case 'a': X="native";id=Id_native; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_volatile  ;^248^^^^^121^294^[REPLACE] case 'a': X="native";id=Id_native; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = s.charAt ( 1 )  ;^249^^^^^121^294^[REPLACE] case 'e': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "throw"  ;^253^^^^^121^294^[REPLACE] case 'h': X="throws";id=Id_throws; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'm': X="import";id=Id_import; break L;^253^254^^^^121^294^[ADD] case 'h': X="throws";id=Id_throws; break L; case 'm': X="import";id=Id_import; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "export"  ;^254^^^^^121^294^[REPLACE] case 'm': X="import";id=Id_import; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_int  ;^254^^^^^121^294^[REPLACE] case 'm': X="import";id=Id_import; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "null"  ;^255^^^^^121^294^[REPLACE] case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_while  ;^255^^^^^121^294^[REPLACE] case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': X =  case 't': X;^256^^^^^121^294^[REPLACE] case 't': X="static";id=Id_static; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_native  ;^256^^^^^121^294^[REPLACE] case 't': X="static";id=Id_static; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^257^^^^^121^294^[ADD] case 'u': X="public";id=Id_public; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^257^258^^^^121^294^[ADD] case 'u': X="public";id=Id_public; break L; case 'w': X="switch";id=Id_switch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "with"  ;^258^^^^^121^294^[REPLACE] case 'w': X="switch";id=Id_switch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_with  ;^258^^^^^121^294^[REPLACE] case 'w': X="switch";id=Id_switch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "import"  ;^259^^^^^121^294^[REPLACE] case 'x': X="export";id=Id_export; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^259^260^^^^121^294^[ADD] case 'x': X="export";id=Id_export; break L; case 'y': X="typeof";id=Id_typeof; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "throw"  ;^260^^^^^121^294^[REPLACE] case 'y': X="typeof";id=Id_typeof; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^260^261^^^^121^294^[ADD] case 'y': X="typeof";id=Id_typeof; break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "private"  ;^263^^^^^121^294^[REPLACE] case 'a': X="package";id=Id_package; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_false  ;^263^^^^^121^294^[REPLACE] case 'a': X="package";id=Id_package; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^264^265^^^^121^294^[ADD] case 'e': X="default";id=Id_default; break L; case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'e': X= "default";id^264^^^^^121^294^[REPLACE] case 'e': X="default";id=Id_default; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "final"  ;^265^^^^^121^294^[REPLACE] case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_false  ;^265^^^^^121^294^[REPLACE] case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X;^266^^^^^121^294^[REPLACE] case 'o': X="boolean";id=Id_boolean; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_break  ;^266^^^^^121^294^[REPLACE] case 'o': X="boolean";id=Id_boolean; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^X = "package"  ;^267^^^^^121^294^[REPLACE] case 'r': X="private";id=Id_private; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^267^^^^^121^294^[ADD] case 'r': X="private";id=Id_private; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^} break L;^268^269^^^^121^294^[ADD] case 'x': X="extends";id=Id_extends; break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'x': X= "extends";id^268^^^^^121^294^[REPLACE] case 'x': X="extends";id=Id_extends; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'a': X;^271^^^^^121^294^[REPLACE] case 'a': X="abstract";id=Id_abstract; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'a': X= "abstract";id^271^^^^^121^294^[REPLACE] case 'a': X="abstract";id=Id_abstract; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^272^^^^^121^294^[ADD] case 'c': X="continue";id=Id_continue; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'c': X= "continue";id^272^^^^^121^294^[REPLACE] case 'c': X="continue";id=Id_continue; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^273^^^^^121^294^[ADD] case 'd': X="debugger";id=Id_debugger; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'd': X= "debugger";id^273^^^^^121^294^[REPLACE] case 'd': X="debugger";id=Id_debugger; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'f': X =  case 'f': X;^274^^^^^121^294^[REPLACE] case 'f': X="function";id=Id_function; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'f': X= "function";id^274^^^^^121^294^[REPLACE] case 'f': X="function";id=Id_function; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^275^276^^^^121^294^[ADD] case 'v': X="volatile";id=Id_volatile; break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_native  ;^275^^^^^121^294^[REPLACE] case 'v': X="volatile";id=Id_volatile; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^277^^^^^121^294^[ADD] case 9: c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 30: c=s.charAt ( 3 ) ;^282^^^^^121^294^[REPLACE] case 10: c=s.charAt ( 1 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_synchronized  ;^286^^^^^121^294^[REPLACE] case 12: X="synchronized";id=Id_synchronized; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^286^^^^^121^294^[ADD] case 12: X="synchronized";id=Id_synchronized; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0L;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^L0: { id = 0; String X = true; int c;^190^^^^^121^294^[REPLACE] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^190^^^^^121^294^[ADD] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( id  ) { return Token.EOF; }^292^^^^^121^294^[REPLACE] if  ( id == 0 )  { return Token.EOF; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^292^^^^^121^294^[REPLACE] if  ( id == 0 )  { return Token.EOF; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Id_public | 0xff;^293^^^^^121^294^[REPLACE] return id & 0xff;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^297^^^^^296^321^[ADD] int length = s.length (  ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( length %  2 == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false;^299^300^^^^296^321^[REPLACE] if  ( length == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^299^300^^302^303^296^321^[ADD] if  ( length == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false; for  ( int i=1; i<length; i++ )  { char c = s.charAt ( i ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;  ;^300^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^300^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( Character.isJavaIdentifierPart ( c )  )  {^304^^^^^296^321^[REPLACE] if  ( !Character.isJavaIdentifierPart ( c )  )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '\\' )  {^305^^^^^296^321^[REPLACE] if  ( c == '\\' )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( Id_private + 5 )  < length + 4 ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^312^^^^^306^313^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;  ;^312^^^^^296^321^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 0  )  < length /  2 ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^306^307^308^309^310^296^321^[ADD] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^312^^^^^296^321^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^316^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^305^^^^^296^321^[REPLACE] if  ( c == '\\' )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length - 5 ) &&  ( s.length ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length - 4 ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit .xDigitToInt ( c , Id_return )  && 0 <= Kit^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;  ;^316^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^302^303^304^305^306^296^321^[ADD] for  ( int i=1; i<length; i++ )  { char c = s.charAt ( i ) ; if  ( !Character.isJavaIdentifierPart ( c )  )  { if  ( c == '\\' )  { if  ( !  (  ( i + 5 )  < length )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^char c = string.charAt ( i ) ;^303^^^^^296^321^[REPLACE] char c = s.charAt ( i ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^320^^^^^296^321^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_public  ==  Token.EOF )  {^338^^^^^334^854^[REPLACE] if  ( this.pushbackToken != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return result;^340^341^^^^334^854^[ADD] this.pushbackToken = Token.EOF; return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceCursor;^341^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^339^^^^^334^854^[REPLACE] int result = this.pushbackToken;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.pushbackToken  =  this.pushbackToken ;^340^^^^^334^854^[REPLACE] this.pushbackToken = Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return result;  ;^341^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int id  ;^343^^^^^334^854^[REPLACE] int c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  EOF_CHAR )  {^351^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.EOF;dirtyLine = false;return Token.EOL;^351^352^353^354^355^334^854^[ADD] if  ( c == EOF_CHAR )  { return Token.EOF; } else if  ( c == '\n' )  { dirtyLine = false; return Token.EOL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if   (  c == '['  )   {  ;^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( isJSSpace ( c )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^358^^^^^334^854^[ADD] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^357^358^359^^^334^854^[ADD] if  ( c != '-' )  { dirtyLine = true; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false;^358^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = true  ;^354^^^^^334^854^[REPLACE] dirtyLine = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^355^^^^^334^854^[REPLACE] return Token.EOL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^356^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^dirtyLine = true;^357^358^359^^^334^854^[ADD] if  ( c != '-' )  { dirtyLine = true; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^354^355^^^^334^854^[ADD] dirtyLine = false; return Token.EOL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^352^^^^^334^854^[REPLACE] return Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isJSSpace ( c )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false  ;^358^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = true;^354^^^^^334^854^[REPLACE] dirtyLine = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c == '-'  )   {  ;^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '@' )  return Token.XMLATTR;^364^^^^^334^854^[REPLACE] if  ( c == '@' )  return Token.XMLATTR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^364^365^^^368^334^854^[ADD] if  ( c == '@' )  return Token.XMLATTR;  boolean identifierStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.XMLEND;  ;^364^^^^^334^854^[REPLACE] if  ( c == '@' )  return Token.XMLATTR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c != '-'  )   {  ;^370^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;identifierStart = true;isUnicodeEscapeStart = true;^370^371^372^373^374^334^854^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { identifierStart = true; isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^383^^^^^370^387^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^383^384^385^386^^370^387^[ADD] if  ( identifierStart )  { stringBufferTop = 0; addToString ( c ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart =  Character.isJavaIdentifierStart (  ( char ) c ) ;^382^^^^^370^387^[REPLACE] identifierStart = Character.isJavaIdentifierStart (  ( char ) c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 << 1;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^372^373^374^375^^334^854^[ADD] if  ( c == 'u' )  { identifierStart = true; isUnicodeEscapeStart = true; stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^377^378^379^380^^372^380^[ADD] identifierStart = false; ungetChar ( c ) ; c = '\\'; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'  ;^379^^^^^372^380^[REPLACE] c = '\\';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isUnicodeEscapeStart = true;stringBufferTop = 0;identifierStart = false;^373^374^375^376^377^334^854^[ADD] identifierStart = true; isUnicodeEscapeStart = true; stringBufferTop = 0; } else { identifierStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^374^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^371^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = false  ;^373^^^^^334^854^[REPLACE] identifierStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = true;^377^^^^^334^854^[REPLACE] identifierStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'  ;^379^^^^^334^854^[REPLACE] c = '\\';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (   'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c ) ;c = '\\';^377^378^379^380^^372^380^[ADD] identifierStart = false; ungetChar ( c ) ; c = '\\'; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = false;^373^^^^^334^854^[REPLACE] identifierStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^383^^^^^334^854^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^Id_shortf  ( identifierStart )  {^389^^^^^334^854^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_supersUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^392^393^^^^334^854^[ADD] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  && xmlOpenTagsCount )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '\\' )  {     c = getChar (  ) ;     if  ( c == 'u' )  {         identifierStart = true;         isUnicodeEscapeStart = true;         stringBufferTop = 0;     }else {         identifierStart = false;         ungetChar ( c ) ;         c = '\\';     } }else {     identifierStart = isJavaIdentifierStart (  (  ( char )   ( c )  )  ) ;     if  ( identifierStart )  {         stringBufferTop = 0;         addToString ( c ) ;     } }^414^^^^^392^431^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c != '-'  )   {  ;^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isUnicodeEscapeStart = true;containsEscape = true;parser.addError ( "msg.illegal.character" ) ;^416^417^418^419^420^392^431^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^421^^^^^416^422^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^417^^^^^392^431^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^containsEscape = false;^418^^^^^392^431^[REPLACE] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^415^^^^^392^431^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^418^^^^392^431^[ADD] isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^421^^^^^392^431^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false  ;^417^^^^^392^431^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^418^^^^^392^431^[ADD] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ==xmlIsTagContent ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^424^^^^^392^431^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^413^^^^^392^431^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^^^^^392^431^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (ungetCursor  ==  3 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( s.charAt ( 0 )  )  == 'd' )  {     id = Id_do;     break L0; }^404^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^408^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^401^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = xDigitToInt ( c, 0 )  ;^402^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = true;^411^^^^^334^854^[REPLACE] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^399^^^^^334^854^[ADD] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c1 = c  ;^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  >  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( token  >=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^parser.addError ( "msg.invalid.escape" ) ;return Token.ERROR;^406^407^408^409^^334^854^[ADD] if  ( escapeVal < 0 )  { parser.addError ( "msg.invalid.escape" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^424^^^^^414^430^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ) {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false  ;^417^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^418^^^^^334^854^[ADD] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^415^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^^^^^334^854^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^containsEscape = false;^418^^^^^334^854^[REPLACE] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^421^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c != '-'  )   {  ;^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isUnicodeEscapeStart = true;containsEscape = true;parser.addError ( "msg.illegal.character" ) ;^416^417^418^419^420^334^854^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^417^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( containsEscape )  {^436^^^^^334^854^[REPLACE] if  ( !containsEscape )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  result != Token.RESERVED  )   {  ;^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  result != Token.EOF  )   {  ;^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^443^444^445^446^^334^854^[ADD] if  ( result != Token.RESERVED )  { return result; } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  )^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( str )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.addWarning ( "msg.reserved.keyword", string ) ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return result;  ;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return quoteChar;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return result;  ;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (lineStart  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return result;^445^446^447^448^^334^854^[ADD] else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) { return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ungetCursor;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeStart;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return length;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return result;  ;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int result = stringingToKeyword ( str ) ;^441^^^^^334^854^[REPLACE] int result = stringToKeyword ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( X )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeVal;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( sourceString )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return quoteChar;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceCursor;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^401^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^411^^^^^334^854^[ADD] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^413^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( string ) ;^457^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^458^^^^^334^854^[REPLACE] return Token.NAME;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean containsEscape = xmlIsTagContent;^390^^^^^334^854^[REPLACE] boolean containsEscape = isUnicodeEscapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal  ;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^400^401^402^^404^334^854^[ADD] for  ( int i = 0; i != 4; ++i )  { c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ; if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String numString = getStringFromBuffer (  )  ;^435^^^^^334^854^[REPLACE] String str = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^441^^^^^334^854^[ADD] int result = stringToKeyword ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_synchronizedsUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^414^415^416^417^418^392^431^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^424^425^426^427^428^392^431^[ADD] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^415^^^^^392^431^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  escapeVal < 0  )   { break; } }  ;^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^404^405^^^^334^854^[ADD] if  ( escapeVal < 0 )  { break; } }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 * 4 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = true  ;^411^^^^^334^854^[REPLACE] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 4;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( val  !=  3 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^414^415^416^417^418^334^854^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount ==xmlIsAttribute || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == xmlIsTagContent || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (escapeStart  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( quoteChar  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return result;^443^444^445^446^^334^854^[ADD] if  ( result != Token.RESERVED )  { return result; } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  )^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( string )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return length;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (quoteChar  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( length  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeVal;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return stringBufferTop;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return pushbackToken;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isDigit ( c )  &&  ( c == '.' && isDigit ( peekChar (  )  )  )  )  {^462^^^^^334^854^[REPLACE] if  ( isDigit ( c )  ||  ( c == '.' && isDigit ( peekChar (  )  )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^462^463^464^465^^334^854^[ADD] if  ( isDigit ( c )  ||  ( c == '.' && isDigit ( peekChar (  )  )  )  )  {  stringBufferTop = 0; int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ) {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'x' && c == 'X' )  {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( isDigit ( c )  )  {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^475^^^^^472^476^[REPLACE] addToString ( '0' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10  ;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8  ;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^471^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^475^^^^^472^476^[ADD] addToString ( '0' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^468^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 - 4;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^471^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 4;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'x' ) {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c <= 127 )  {     if  (  ( c == '\n' )  ||  ( c == '\r' )  )  {         lineEndChar = c;         c = '\n';     } }else {     if  ( isJSFormatChar ( c )  )  {         continue;     }     if  ( isJSLineTerminator ( c )  )  {         lineEndChar = c;         c = '\n';     } }^469^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   base = 8;addToString ( '0' ) ;^472^473^474^475^476^334^854^[ADD] else if  ( isDigit ( c )  )  { base = 8; } else { addToString ( '0' ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if   (  !isJSSpace  (  c  )    )   {  ;^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base  ) {^479^^^^^334^854^[REPLACE] if  ( base == 16 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 || c >= '8' )  {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^492^493^494^495^496^479^500^[ADD] if  ( base == 8 && c >= '8' )  { parser.addWarning ( "msg.bad.octal.literal", c == '8' ? "8" : "9" ) ; base = 10; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8  ;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 0;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^498^^^^^479^500^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^482^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 ||xmlIsTagContent )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^495^^^^^334^854^[ADD] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^trueif  ( isUnicodeEscapeStart ||  ( c == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isInteger = false;addToString ( c ) ;^504^505^506^507^508^334^854^[ADD] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  { isInteger = false; if  ( c == '.' )  { do { addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^506^507^508^509^510^334^854^[ADD] if  ( c == '.' )  { do { addToString ( c ) ; c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^509^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c == '+' || c == '-'  )   {  ;^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  c == '"' || c == '\''  )   {  ;^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^515^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^517^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isAlpha  (  c  )    )   {  ;^519^^^^^334^854^[REPLACE] if  ( !isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^521^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^514^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^517^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^525^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '+' && c == '-' )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;c = getChar (  ) ;^515^516^517^518^^334^854^[ADD] if  ( c == '+' || c == '-' )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isDigit ( xmlOpenTagsCount )  )  {^519^^^^^334^854^[REPLACE] if  ( !isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^505^^^^^334^854^[ADD] isInteger = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ) {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^519^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 10 ) {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 0L, base ) ;^543^^^^^533^544^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^dval = Double.valueOf ( numString ) .doubleValue (  ) ;^534^535^536^537^^334^854^[ADD] try {  dval = Double.valueOf ( numString ) .doubleValue (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval =  Double.valueOf ( null ) .doubleValue (  ) ;^536^^^^^334^854^[REPLACE] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^536^^^^^334^854^[ADD] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^540^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^464^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^468^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^470^^^^^334^854^[ADD] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 / 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^482^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 - 0;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^498^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isInteger = true;^505^^^^^334^854^[REPLACE] isInteger = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^514^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval =  Double.valueOf ( string ) .doubleValue (  ) ;^536^^^^^334^854^[REPLACE] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 4, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.number =  null;^546^^^^^334^854^[REPLACE] this.number = dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^547^^^^^334^854^[REPLACE] return Token.NUMBER;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^465^^^^^334^854^[ADD] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean isInteger = false;^502^^^^^334^854^[REPLACE] boolean isInteger = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String str = getStringFromBuffer (  )  ;^530^^^^^334^854^[REPLACE] String numString = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^532^^^^^334^854^[REPLACE] double dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '0' )  {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^467^468^469^470^471^334^854^[ADD] if  ( c == '0' )  { c = getChar (  ) ; if  ( c == 'x' || c == 'X' )  { base = 16; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^472^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^matchChar ( '&' )  ;^475^^^^^472^476^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 14;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 + 3;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 6;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  isUnicodeEscapeStart )  {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isDigit ( xmlOpenTagsCount )  )  {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 + 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 * 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^479^480^481^482^483^334^854^[ADD] if  ( base == 16 )  { while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 ) {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 2;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^495^^^^^479^500^[ADD] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (   ( c == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^509^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'e' && c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^515^516^517^518^^334^854^[ADD] if  ( c == '+' || c == '-' )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^519^520^521^522^^334^854^[ADD] if  ( !isDigit ( c )  )  { parser.addError ( "msg.missing.exponent" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^525^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^parser.addError ( "msg.missing.exponent" ) ;return Token.ERROR;^519^520^521^522^^334^854^[ADD] if  ( !isDigit ( c )  )  { parser.addError ( "msg.missing.exponent" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^} while  ( isDigit ( c )  ) ;^525^526^^^^334^854^[ADD] c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  isInteger )  {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^533^534^^536^537^334^854^[ADD] if  ( base == 10 && !isInteger )  { try { dval = Double.valueOf ( numString ) .doubleValue (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 2, base ) ;^543^^^^^533^544^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^538^539^^^^334^854^[ADD] catch  ( NumberFormatException ex )  { parser.addError ( "msg.caught.nfe" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart && c == '\'' )  {^551^^^^^334^854^[REPLACE] if  ( c == '"' || c == '\'' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^551^552^^^^334^854^[ADD] if  ( c == '"' || c == '\'' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == '\n' && c == EOF_CHAR )  {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c ) ;parser.addError ( "msg.unterminated.string.lit" ) ;return Token.ERROR;^562^563^564^565^566^334^854^[ADD] if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ; parser.addError ( "msg.unterminated.string.lit" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^565^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  2 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;continue strLoop;int c1 = c;^609^610^611^612^613^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; continue strLoop; } else { int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;addToString ( c1 ) ;continue strLoop;^616^617^618^619^^609^624^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^614^^^^^609^624^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = xDigitToInt ( c, 0 )  ;^615^^^^^609^624^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^613^^^^^609^624^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^610^^^^^334^854^[REPLACE] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ==  3 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;addToString ( c1 ) ;continue strLoop;^616^617^618^619^^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  token;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^617^^^^^334^854^[REPLACE] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^matchChar ( '&' )  ;^617^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^618^^^^^334^854^[REPLACE] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' )  {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^634^635^636^637^638^334^854^[ADD] if  ( '0' <= c && c < '8' )  { int val = c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^637^638^639^640^^334^854^[ADD] if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= xmlOpenTagsCount || c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^643^644^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^644^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^639^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^636^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^638^639^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 11 * val + c  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^648^^^^^334^854^[REPLACE] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^val = 8 * val + c - '0';c = getChar (  ) ;^637^638^639^640^^334^854^[ADD] if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^640^641^^643^644^334^854^[ADD] if  ( '0' <= c && c < '8' && val <= 037 )  {  val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^643^644^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^639^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^644^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^572^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^574^^^^^334^854^[REPLACE] case 'b': c = '\b'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'n': c = '\n'; break;^575^576^^^^334^854^[ADD] case 'f': c = '\f'; break; case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^576^^^^^334^854^[REPLACE] case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^577^^^^^334^854^[REPLACE] case 'r': c = '\r'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^578^^^^^334^854^[ADD] case 't': c = '\t'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^582^^^^^334^854^[ADD] case 'v': c = 0xb; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 3;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^592^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = xDigitToInt ( c, 0 )  ;^593^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_volatile;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^607^608^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 3 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^614^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = xDigitToInt ( c, 0 )  ;^615^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^continue strLoop;^630^631^^^^334^854^[ADD] c = getChar (  ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^636^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * 0 * val + c  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0  ;^570^^^^^334^854^[REPLACE] int escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop  ;^588^^^^^334^854^[REPLACE] int escapeStart = stringBufferTop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c1 = c  ;^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^613^^^^^334^854^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = xmlOpenTagsCount  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (token  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  >  0 * 3 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^615^^^^609^624^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^^^^^609^624^[ADD] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^int val = c - '0';c = getChar (  ) ;val = 8 * val + c - '0';^634^635^636^637^638^334^854^[ADD] if  ( '0' <= c && c < '8' )  { int val = c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' || xmlOpenTagsCount <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^643^^^^^334^854^[ADD] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^640^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^648^^^^^334^854^[ADD] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^635^636^^^^334^854^[ADD] int val = c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 2 * val + c  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^638^^^^^334^854^[ADD] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^558^^^^^334^854^[ADD] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^560^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^575^^^^^334^854^[REPLACE] case 'f': c = '\f'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^577^^^^^334^854^[ADD] case 'r': c = '\r'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id = Id_break  ;^582^^^^^334^854^[REPLACE] case 'v': c = 0xb; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 0 % 3;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  escapeVal;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^607^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0L ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^615^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  ungetCursor;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^630^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^653^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( string ) ;^657^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^658^^^^^334^854^[REPLACE] return Token.STRING;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int quoteChar = xmlOpenTagsCount;^557^^^^^334^854^[REPLACE] int quoteChar = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^570^^^^^334^854^[ADD] int escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 3; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^^^^^334^854^[ADD] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String numString = getStringFromBuffer (  )  ;^656^^^^^334^854^[REPLACE] String str = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' ) {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  1 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^continue strLoop;^594^595^596^^^334^854^[ADD] if  ( escapeVal < 0 )  { continue strLoop; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( token  >  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '-' )  &&  (  ( peekChar (  )  )  == '-' )  )  {     c = getChar (  ) ;     addToString ( c ) ;     if  (  ( peekChar (  )  )  == '>' )  {         c = getChar (  ) ;         addToString ( c ) ;         return true;     }else {         continue;     } }^609^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  <=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^^^^^609^624^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^618^^^^^334^854^[REPLACE] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^addToString ( 'T' )  ;^618^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent || c < '8' )  {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent || xmlOpenTagsCount < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^648^^^^^334^854^[REPLACE] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c xmlOpenTagsCount;^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^572^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 1;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_var;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  token;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^607^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 4 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^615^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 3 * val + c  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^588^589^^^^334^854^[ADD] int escapeStart = stringBufferTop; addToString ( 'u' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  != stringBufferTop )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^594^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  <=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ) {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent || c < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ) {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 7 * val + c  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 + 1 * val + c  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^672^^^^^334^854^[REPLACE] if  ( matchChar ( ':' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^672^673^674^675^676^334^854^[ADD] if  ( matchChar ( ':' )  )  { return Token.COLONCOLON; } else { return Token.COLON; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^675^^^^^672^676^[REPLACE] return Token.COLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^673^^^^^334^854^[REPLACE] return Token.COLONCOLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^678^^^^^334^854^[REPLACE] if  ( matchChar ( '.' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^678^679^680^681^^334^854^[ADD] if  ( matchChar ( '.' )  )  { return Token.DOTDOT; } else if  ( matchChar ( ' ( ' )  )  { return Token.DOTQUERY;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( ' ( ' )  )  {^680^^^^^334^854^[REPLACE] } else if  ( matchChar ( ' ( ' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^683^^^^^680^684^[REPLACE] return Token.DOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.DOTQUERY;  ;^681^^^^^334^854^[REPLACE] return Token.DOTQUERY;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^683^^^^^334^854^[REPLACE] return Token.DOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^679^^^^^334^854^[REPLACE] return Token.DOTDOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if   (  matchChar  (  '='  )    )   {  ;^680^^^^^334^854^[REPLACE] } else if  ( matchChar ( ' ( ' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^680^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^687^^^^^334^854^[REPLACE] if  ( matchChar ( '|' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.OR;return Token.ASSIGN_BITOR;^687^688^689^690^^334^854^[ADD] if  ( matchChar ( '|' )  )  { return Token.OR; } else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '=' )  )  {^689^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^692^^^^^689^693^[REPLACE] return Token.BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^690^^^^^334^854^[REPLACE] return Token.ASSIGN_BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^692^^^^^334^854^[REPLACE] return Token.BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^688^^^^^334^854^[REPLACE] return Token.OR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^689^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^696^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^696^697^698^699^700^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITXOR; } else { return Token.BITXOR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.GT;  ;^699^^^^^696^700^[REPLACE] return Token.BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^697^^^^^334^854^[REPLACE] return Token.ASSIGN_BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^703^^^^^334^854^[REPLACE] if  ( matchChar ( '&' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^705^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^708^^^^^705^709^[REPLACE] return Token.BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^706^^^^^334^854^[REPLACE] return Token.ASSIGN_BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^708^^^^^334^854^[REPLACE] return Token.BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^704^^^^^334^854^[REPLACE] return Token.AND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^705^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.ASSIGN_BITAND;return Token.BITAND;^705^706^707^708^709^334^854^[ADD] else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITAND; } else { return Token.BITAND; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^712^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.AND;  ;^718^^^^^712^719^[REPLACE] return Token.ASSIGN;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '='  )    )  return Token.SHNE;  ;^713^714^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  ) return Token.SHEQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^716^^^^^334^854^[REPLACE] return Token.EQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^714^^^^^334^854^[REPLACE] return Token.SHEQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^713^714^715^716^^334^854^[ADD] if  ( matchChar ( '=' )  ) return Token.SHEQ; else return Token.EQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^722^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^722^723^724^725^726^334^854^[ADD] if  ( matchChar ( '=' )  )  { if  ( matchChar ( '=' )  ) return Token.SHNE; else return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^728^^^^^722^729^[REPLACE] return Token.NOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '='  )    )  return Token.SHEQ;  ;^723^724^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  ) return Token.SHNE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.SHNE;return Token.NE;^723^724^725^726^^334^854^[ADD] if  ( matchChar ( '=' )  ) return Token.SHNE; else return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^726^^^^^334^854^[REPLACE] return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^724^^^^^334^854^[REPLACE] return Token.SHNE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '' )  )  {^733^^^^^334^854^[REPLACE] if  ( matchChar ( '!' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^733^734^735^736^737^334^854^[ADD] if  ( matchChar ( '!' )  )  { if  ( matchChar ( '-' )  )  { if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '>'  )    )   {  ;^734^^^^^334^854^[REPLACE] if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^734^735^736^737^738^334^854^[ADD] if  ( matchChar ( '-' )  )  { if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '>'  )    )   {  ;^735^^^^^334^854^[REPLACE] if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^735^736^737^738^^334^854^[ADD] if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^( peekChar (  )  )  ;^736^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^skipLine (  ) ;continue retry;^735^736^737^738^^334^854^[ADD] if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^743^^^^^334^854^[REPLACE] if  ( matchChar ( '<' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^743^744^745^746^747^334^854^[ADD] if  ( matchChar ( '<' )  )  { if  ( matchChar ( '=' )  )  { return Token.ASSIGN_LSH; } else { return Token.LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^750^^^^^743^755^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^751^^^^^743^755^[REPLACE] return Token.LE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^753^^^^^743^755^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^744^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^747^^^^^744^748^[REPLACE] return Token.LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^745^^^^^334^854^[REPLACE] return Token.ASSIGN_LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^747^^^^^334^854^[REPLACE] return Token.LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^750^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.LE;return Token.LT;^750^751^752^753^754^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.LE; } else { return Token.LT; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^753^^^^^750^754^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^751^^^^^334^854^[REPLACE] return Token.LE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^758^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^773^^^^^758^778^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.GE;return Token.GT;^773^774^775^776^777^758^778^[ADD] if  ( matchChar ( '=' )  )  { return Token.GE; } else { return Token.GT; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^776^^^^^773^777^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^774^^^^^758^778^[REPLACE] return Token.GE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^776^^^^^758^778^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^759^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^766^^^^^759^771^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^766^767^768^769^770^759^771^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_RSH; } else { return Token.RSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^767^^^^^759^771^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^769^^^^^759^771^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^760^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^763^^^^^760^764^[REPLACE] return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^761^^^^^334^854^[REPLACE] return Token.ASSIGN_URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^763^^^^^334^854^[REPLACE] return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^766^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^766^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^769^^^^^766^770^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^767^^^^^334^854^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^769^^^^^334^854^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^759^760^761^762^763^334^854^[ADD] if  ( matchChar ( '>' )  )  { if  ( matchChar ( '=' )  )  { return Token.ASSIGN_URSH; } else { return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^760^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_RSH;return Token.RSH;^766^767^768^769^770^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_RSH; } else { return Token.RSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^773^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^774^^^^^334^854^[REPLACE] return Token.GE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^781^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^784^^^^^781^785^[REPLACE] return Token.MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^782^^^^^334^854^[REPLACE] return Token.ASSIGN_MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^789^^^^^334^854^[REPLACE] if  ( matchChar ( '/' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^( peekChar (  )  )  ;^790^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^793^^^^^334^854^[REPLACE] if  ( matchChar ( '*' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (   EOF_CHAR )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^800^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c  = null ;^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  Id_throws )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^805^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_DIV;return Token.DIV;^805^806^807^808^809^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_DIV; } else { return Token.DIV; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^808^^^^^805^809^[REPLACE] return Token.DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^806^^^^^334^854^[REPLACE] return Token.ASSIGN_DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^812^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^812^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^815^^^^^812^816^[REPLACE] return Token.MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^813^^^^^334^854^[REPLACE] return Token.ASSIGN_MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^822^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_ADD;return Token.INC;^822^823^824^825^^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_ADD; } else if  ( matchChar ( '+' )  )  { return Token.INC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^824^^^^^334^854^[REPLACE] } else if  ( matchChar ( '+' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^827^^^^^824^828^[REPLACE] return Token.ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^825^^^^^334^854^[REPLACE] return Token.INC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^827^^^^^334^854^[REPLACE] return Token.ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;  ;^823^^^^^334^854^[REPLACE] return Token.ASSIGN_ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^831^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '<' )  {     return Token.LT; }else {     if  ( c == '.' )  {         c = getChar (  ) ;         if  ( c == '.' )  {             return Token.ELLIPSIS;         }else {             addToString ( '.' ) ;         }     }     ungetBuffer[ (  ( ungetCursor ) ++ ) ] = c;     c = '.'; }^831^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^833^^^^^334^854^[REPLACE] } else if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.DEC  ;^844^^^^^833^845^[REPLACE] c = Token.SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( dirtyLine )  {^834^^^^^334^854^[REPLACE] if  ( !dirtyLine )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^834^835^^837^838^334^854^[ADD] if  ( !dirtyLine )  {  if  ( matchChar ( '>' )  )  { skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^837^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^( peekChar (  )  )  ;^838^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^842^^^^^334^854^[ADD] c = Token.DEC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.DEC  ;^844^^^^^334^854^[REPLACE] c = Token.SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^832^^^^^334^854^[REPLACE] c = Token.ASSIGN_SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '-' )  )  {^833^^^^^334^854^[REPLACE] } else if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^skipLine (  ) ;continue retry;^837^838^839^840^^334^854^[ADD] if  ( matchChar ( '>' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^838^^^^^334^854^[ADD] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^837^838^839^840^^334^854^[ADD] if  ( matchChar ( '>' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.SUB  ;^842^^^^^334^854^[REPLACE] c = Token.DEC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^super (  )  ;^838^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 / 3;^349^^^^^334^854^[REPLACE] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^350^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^374^^^^^334^854^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 / 4;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart =  Character.isJavaIdentifierStart (  ( char ) c ) ;^382^^^^^334^854^[REPLACE] identifierStart = Character.isJavaIdentifierStart (  ( char ) c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^413^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^415^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^int base = 10;^464^465^^^^334^854^[ADD] stringBufferTop = 0; int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^473^^^^^334^854^[ADD] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8  ;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 3, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^558^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^578^^^^^334^854^[REPLACE] case 't': c = '\t'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 0L;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^593^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_transient;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = xDigitToInt ( c, escapeVal )  ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^794^795^796^^^334^854^[ADD] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^844^^^^^334^854^[ADD] c = Token.SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false;^846^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ungetCursor;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^662^^^^^334^854^[REPLACE] case ';': return Token.SEMI;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^663^^^^^334^854^[REPLACE] case '[': return Token.LB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^664^^^^^334^854^[REPLACE] case ']': return Token.RB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^665^^^^^334^854^[REPLACE] case '{': return Token.LC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^666^^^^^334^854^[REPLACE] case '}': return Token.RC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^667^^^^^334^854^[REPLACE] case ' ( ': return Token.LP;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^668^^^^^334^854^[REPLACE] case ' ) ': return Token.RP;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^669^^^^^334^854^[REPLACE] case ',': return Token.COMMA;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^670^^^^^334^854^[REPLACE] case '?': return Token.HOOK;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^675^^^^^334^854^[REPLACE] return Token.COLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.GT;  ;^699^^^^^334^854^[REPLACE] return Token.BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.AND;  ;^718^^^^^334^854^[REPLACE] return Token.ASSIGN;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^728^^^^^334^854^[REPLACE] return Token.NOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^753^^^^^334^854^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^776^^^^^334^854^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^784^^^^^334^854^[REPLACE] return Token.MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^808^^^^^334^854^[REPLACE] return Token.DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^815^^^^^334^854^[REPLACE] return Token.MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.AND;  ;^819^^^^^334^854^[REPLACE] return Token.BITNOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return c;  ;^847^^^^^334^854^[REPLACE] return c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^851^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^368^^^^^334^854^[REPLACE] boolean identifierStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^369^^^^^334^854^[ADD] boolean isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean containsEscape = xmlIsAttribute;^390^^^^^334^854^[REPLACE] boolean containsEscape = isUnicodeEscapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int base = 10 - 2;^465^^^^^334^854^[REPLACE] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^530^^^^^334^854^[ADD] String numString = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^532^^^^^334^854^[ADD] double dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^591^592^593^594^595^334^854^[ADD] for  ( int i = 0; i != 4; ++i )  { c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ; if  ( escapeVal < 0 )  { continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int i = 1  ;^613^^^^^334^854^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^861^^^^^860^995^[ADD] int c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1  ;^862^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  EOF_CHAR )  {^868^^^^^860^995^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( !isJSSpace ( c )  )  {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^872^^^^^860^995^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^871^^^^^860^995^[REPLACE] return Token.EOL;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( !isJSSpace ( xmlOpenTagsCount )  )  {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   break;^872^873^874^^^860^995^[ADD] else if  ( !isJSSpace ( c )  )  { break; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^869^^^^^860^995^[REPLACE] return Token.EOF;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !isDigit  (  c  )    )   {  ;^882^^^^^860^995^[REPLACE] if  ( isAlpha ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;ungetChar ( c ) ;this.string = getStringFromBuffer (  ) ;^882^883^884^885^886^860^995^[ADD] if  ( isAlpha ( c )  )  { addToString ( c ) ; } else { ungetChar ( c ) ; this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^886^^^^^882^889^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^887^^^^^882^889^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ANNOTATION;  ;^888^^^^^882^889^[REPLACE] return Token.ANNOTATION;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^883^^^^^860^995^[REPLACE] addToString ( c ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  matchChar  (  '-'  )    )   {  ;^893^^^^^860^995^[REPLACE] if  ( matchChar ( '/' )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^893^894^895^896^897^860^995^[ADD] if  ( matchChar ( '/' )  )  { return Token.EOC; } else { return Token.STAR; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^896^^^^^893^897^[REPLACE] return Token.STAR;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^894^^^^^860^995^[REPLACE] return Token.EOC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '<' )  {^941^^^^^860^995^[REPLACE] if  ( c == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  '.' )  {^944^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^944^945^946^947^^941^955^[ADD] if  ( c == '.' )  { c = getChar (  ) ; if  ( c == '.' )  { return Token.ELLIPSIS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^946^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'n' )  {     X = "instanceof";     id = Id_instanceof; }^946^^^^^941^955^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^945^^^^^941^955^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  xmlOpenTagsCount;^953^^^^^941^955^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^954^^^^^941^955^[REPLACE] c = '.';^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;  ;^947^^^^^941^955^[REPLACE] return Token.ELLIPSIS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^942^^^^^860^995^[REPLACE] return Token.LT;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (   '.' )  {^944^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ELLIPSIS;addToString ( '.' ) ;^946^947^948^949^950^860^995^[ADD] if  ( c == '.' )  { return Token.ELLIPSIS; } else { addToString ( '.' ) ; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^949^^^^^946^950^[REPLACE] addToString ( '.' ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;  ;^947^^^^^860^995^[REPLACE] return Token.ELLIPSIS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^945^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '.' )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^matchChar ( '&' )  ;^949^^^^^946^950^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSDocString ( c2 )  )  {^964^^^^^860^995^[REPLACE] if  ( !isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c2 ) ;this.string = getStringFromBuffer (  ) ;stringBufferTop = 0;return Token.STRING;^964^965^966^967^968^860^995^[ADD] if  ( !isJSDocString ( c2 )  )  { ungetChar ( c2 ) ; this.string = getStringFromBuffer (  ) ; stringBufferTop = 0; return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart ) {^973^^^^^964^991^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c2 ) ;ungetChar ( c1 ) ;this.string = getStringFromBuffer (  ) ;stringBufferTop = 0;^973^974^975^976^977^964^991^[ADD] if  ( c1 == '.' && c2 == '<' )  { ungetChar ( c2 ) ; ungetChar ( c1 ) ; this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !isJSDocString  (  c2  )    )   {  ;^980^^^^^973^989^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c1 ) ;ungetChar ( c2 ) ;addToString ( c1 ) ;^980^981^982^983^984^973^989^[ADD] if  ( isJSDocString ( c2 )  )  { addToString ( c1 ) ; } else { ungetChar ( c2 ) ; addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 2;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^987^^^^^980^988^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^981^^^^^973^989^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^981^^^^^973^989^[ADD] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^987^^^^^973^989^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get boolean FromBuffer (  ) ;^976^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^977^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^978^^^^^964^991^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !isJSDocString  (  c2  )    )   {  ;^980^^^^^964^991^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^981^^^^^964^991^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^addToString ( 'T' )  ;^981^^^^^964^991^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^971^^^^^964^991^[ADD] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^972^^^^^964^991^[REPLACE] c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^976^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^^^^^964^991^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.STRING;^986^987^^^^964^991^[ADD] stringBufferTop = 0; return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^987^^^^^964^991^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^966^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^967^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^968^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart || c2 == '<' )  {^973^^^^^860^995^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get long FromBuffer (  ) ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^976^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^977^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^978^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !isJSDocString  (  c2  )    )   {  ;^980^^^^^860^995^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^986^^^^980^988^[ADD] this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^981^^^^^860^995^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^981^^^^^860^995^[ADD] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^866^867^^^^860^995^[ADD] charno = -1; c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^867^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^881^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^886^^^^^860^995^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^887^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^940^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  xmlOpenTagsCount;^953^^^^^860^995^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^954^^^^^860^995^[ADD] c = '.';^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^966^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^967^968^^^^860^995^[ADD] stringBufferTop = 0; return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^971^^^^^860^995^[ADD] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^972^^^^^860^995^[REPLACE] c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 << 1;^977^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^985^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^986^^^^^860^995^[ADD] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ANNOTATION;  ;^888^^^^^860^995^[REPLACE] return Token.ANNOTATION;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^896^^^^^860^995^[REPLACE] return Token.STAR;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^900^^^^^860^995^[REPLACE] return Token.COMMA;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^903^^^^^860^995^[REPLACE] return Token.GT;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^906^^^^^860^995^[REPLACE] return Token.LP;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^909^^^^^860^995^[REPLACE] return Token.RP;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^912^^^^^860^995^[REPLACE] return Token.LC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^915^^^^^860^995^[REPLACE] return Token.RC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^918^^^^^860^995^[REPLACE] return Token.LB;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^921^^^^^860^995^[REPLACE] return Token.RB;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^924^^^^^860^995^[REPLACE] return Token.QMARK;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^927^^^^^860^995^[REPLACE] return Token.BANG;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^930^^^^^860^995^[REPLACE] return Token.COLON;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;  ;^933^^^^^860^995^[REPLACE] return Token.EQUALS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^937^^^^^860^995^[REPLACE] return Token.PIPE;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;  ;^987^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^961^^^^^860^995^[REPLACE] int c1 = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c = getChar (  )  ;^963^^^^^860^995^[REPLACE] int c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int id  ;^1003^^^^^1002^1025^[REPLACE] int c;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  peekChar  (    )   == '>'  )   {  ;^1008^^^^^1002^1025^[REPLACE] if  ( peekChar (  )  != '/' )  {^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^1009^^^^^1002^1025^[REPLACE] addToString ( c ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1005^^^^^1002^1025^[REPLACE] c = getChar (  ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^1016^^^^^1002^1025^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1017^^^^^1002^1025^[REPLACE] stringBufferTop = 0;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.STRING;  ;^1018^^^^^1002^1025^[REPLACE] return this.string;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;  ;^1046^^^^^1027^1051^[REPLACE] return false;^[METHOD] isJSDocString [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return !isJSSpace ( xmlOpenTagsCount ) ;^1049^^^^^1027^1051^[REPLACE] return !isJSSpace ( c ) ;^[METHOD] isJSDocString [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1121^^^^^1120^1167^[REPLACE] stringBufferTop = 0;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( startToken  ) {^1122^^^^^1120^1167^[REPLACE] if  ( startToken == Token.ASSIGN_DIV )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( startToken  ==  Token.DIV )  Kit.codeBug (  ) ;^1126^^^^^1122^1127^[REPLACE] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^1124^^^^^1120^1167^[REPLACE] addToString ( '=' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1124^^^^^1120^1167^[ADD] addToString ( '=' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_while  ==  Token.DIV )  Kit.codeBug (  ) ;^1126^^^^^1120^1167^[REPLACE] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1126^1127^^^^1120^1167^[ADD] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1129^^^^^1120^1167^[ADD] boolean inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int id  ;^1130^^^^^1120^1167^[REPLACE] int c;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == EOF_CHAR )  {^1132^^^^^1120^1167^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1132^1133^1134^1135^^1120^1167^[ADD] if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ; throw parser.reportError ( "msg.unterminated.re.lit" ) ; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.reportError ( flag" )  ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( xmlOpenTagsCount ) ;^1133^^^^^1120^1167^[REPLACE] ungetChar ( c ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.addError ( "msg.unterminated.re.lit" ) ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '\\' )  {^1136^^^^^1120^1167^[REPLACE] if  ( c == '\\' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;c = getChar (  ) ;inCharSet = true;^1136^1137^1138^1139^1140^1120^1167^[ADD] if  ( c == '\\' )  { addToString ( c ) ; c = getChar (  ) ; } else if  ( c == '[' )  { inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  (   '[' )  {^1139^^^^^1120^1167^[REPLACE] } else if  ( c == '[' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  !=  ']' )  {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = true;^1142^^^^^1120^1167^[REPLACE] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = false;^1140^^^^^1120^1167^[REPLACE] inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   inCharSet = false;^1141^1142^1143^^^1120^1167^[ADD] else if  ( c == ']' )  { inCharSet = false; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1138^^^^^1120^1167^[REPLACE] c = getChar (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   inCharSet = false;^1139^1140^1141^1142^1143^1120^1167^[ADD] else if  ( c == '[' )  { inCharSet = true; } else if  ( c == ']' )  { inCharSet = false; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1141^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1142^^^^^1120^1167^[ADD] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = false  ;^1140^^^^^1120^1167^[REPLACE] inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = true  ;^1142^^^^^1120^1167^[REPLACE] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1131^1132^1133^^^1120^1167^[ADD] while  (  ( c = getChar (  )  )  != '/' || inCharSet )  { if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int N = stringBufferTop  ;^1147^^^^^1120^1167^[REPLACE] int reEnd = stringBufferTop;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  matchChar  (  'i'  )    )  addToString  (  'i'  )  ;  ;^1150^1151^^^^1120^1167^[REPLACE] if  ( matchChar ( 'g' )  ) addToString ( 'g' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^1154^1155^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^1155^^^^^1120^1167^[REPLACE] addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1155^^^^^1120^1167^[ADD] addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^1153^^^^^1120^1167^[REPLACE] addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' )  ;^1151^^^^^1120^1167^[REPLACE] addToString ( 'g' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^1152^1153^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if   (  matchChar  (  'i'  )    )  addToString  (  'i'  )  ;  ;^1154^1155^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'm' ) ;break;^1154^1155^1156^1157^1158^1120^1167^[ADD] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ; else break; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^1160^^^^^1120^1167^[REPLACE] if  ( isAlpha ( peekChar (  )  )  )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.reportError ( lit" )  ;^1161^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( lit" )  ;^1161^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^parser.addError ( character" )  ;^1161^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ;^1161^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = new String ( stringBuffer, 0 >> 0, reEnd ) ;^1164^^^^^1120^1167^[REPLACE] this.string = new String ( stringBuffer, 0, reEnd ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop  reEnd ) ;^1165^1166^^^^1120^1167^[REPLACE] this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1185^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^1188^^^^^1184^1331^[REPLACE] if  ( xmlIsTagContent )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '-' )  {^1248^^^^^1188^1324^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1254^^^^^1248^1257^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1256^^^^^1248^1257^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readXmlComment (  )  )  return Token.ERROR;^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  !readXmlComment  (    )    )   return Token.ERROR; } else {  ;^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( getChar (  )  == 'C' || getChar (  )  == 'D' || getChar (  )  == 'A' || getChar (  )  == 'T' ||^1262^1263^1264^1265^^1188^1324^[REPLACE] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1262^1263^1264^1265^1266^1188^1324^[ADD] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' && getChar (  )  == 'A' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1279^^^^^1262^1283^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1280^^^^^1262^1283^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1282^^^^^1262^1283^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readCDATA (  )  )  return Token.ERROR;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !readPI  (    )    )   return Token.ERROR; break;  ;^1275^^^^^1188^1324^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1275^^^^^1188^1324^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readEntity (  )  )  return Token.ERROR;^1286^^^^^1188^1324^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1286^1287^1288^^^1188^1324^[ADD] if ( !readEntity (  )  )  return Token.ERROR; break; }^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1286^^^^^1188^1324^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !readPI  (    )    )   return Token.ERROR; break;  ;^1293^^^^^1188^1324^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1293^^^^^1188^1324^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  0 )  {^1299^^^^^1188^1324^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1299^1300^1301^1302^1303^1188^1324^[ADD] if  ( xmlOpenTagsCount == 0 )  {  stringBufferTop = 0; this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^1301^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1302^1303^^^^1188^1324^[ADD] this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1304^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1237^^^^^1188^1324^[ADD] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1240^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c2 = getChar (  )  ;^1242^^^^^1188^1324^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1245^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1247^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1  ;^1253^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1254^1255^^^^1188^1324^[ADD] this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1260^^^^^1188^1324^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1279^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1280^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1291^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1297^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 4;^1301^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1302^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1306^^^^^1188^1324^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1311^^^^^1188^1324^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^1318^^^^^1188^1324^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1256^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1282^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1319^^^^^1188^1324^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   != sourceEnd )  {^1197^^^^^1184^1331^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;addToString ( c ) ;xmlIsTagContent = false;xmlOpenTagsCount--;^1197^1198^1199^1200^1201^1184^1331^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; xmlIsTagContent = false; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1198^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true  ;^1200^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readQuotedString ( xmlOpenTagsCount )  )  return Token.ERROR;^1211^^^^^1184^1331^[REPLACE] if  ( !readQuotedString ( c )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1211^^^^^1184^1331^[REPLACE] if  ( !readQuotedString ( c )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent ) {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1231^^^^^1184^1331^[REPLACE] return Token.XMLEND;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true;^1192^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1193^1194^^^^1184^1331^[ADD] xmlIsAttribute = false; break;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1198^^^^^1184^1331^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^1206^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = false  ;^1215^^^^^1184^1331^[REPLACE] xmlIsAttribute = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true  ;^1225^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1207^^^^^1184^1331^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  peekChar  (    )   != '/'  )   {  ;^1197^^^^^1184^1331^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1197^1198^1199^1200^1201^1184^1331^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; xmlIsTagContent = false; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;^1198^1199^^^^1184^1331^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^xmlOpenTagsCount--;^1200^1201^^^^1184^1331^[ADD] xmlIsTagContent = false; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent && xmlOpenTagsCount == 0 )  {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1230^^^^^1184^1331^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^1248^^^^^1184^1331^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;if ( !readXmlComment (  )  )  return Token.ERROR;^1248^1249^1250^1251^^1184^1331^[ADD] if  ( c == '-' )  { addToString ( c ) ; if ( !readXmlComment (  )  )  return Token.ERROR; } else {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 4;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1254^^^^^1248^1257^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  !readXmlComment  (    )    )   return Token.ERROR; } else {  ;^1250^^^^^1184^1331^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1250^^^^^1184^1331^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( getChar (  )  == 'C' || getChar (  )  == 'D' || getChar (  )  == 'A' || getChar (  )  == 'T' ||^1262^1263^1264^1265^^1184^1331^[REPLACE] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1279^^^^^1262^1283^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1280^1281^^^^1262^1283^[ADD] this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !readPI  (    )    )   return Token.ERROR; break;  ;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1275^1276^1277^^1279^1262^1283^[ADD] if  ( !readCDATA (  )  )  return Token.ERROR;  } else { stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !readPI  (    )    )   return Token.ERROR; break;  ;^1275^^^^^1184^1331^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1275^1276^1277^^1279^1184^1331^[ADD] if  ( !readCDATA (  )  )  return Token.ERROR;  } else { stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1275^^^^^1184^1331^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readEntity (  )  )  return Token.ERROR;^1286^^^^^1184^1331^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1286^^^^^1184^1331^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  !readPI  (    )    )   return Token.ERROR; break;  ;^1293^^^^^1184^1331^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1293^^^^^1184^1331^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ) {^1299^^^^^1184^1331^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1301^^^^^1184^1331^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1302^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1304^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1187^^^^^1184^1331^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1193^^^^^1184^1331^[ADD] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true;^1200^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.XML;^1206^1207^^^^1184^1331^[ADD] this.string = getStringFromBuffer (  ) ; return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true;^1225^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get boolean FromBuffer (  ) ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c2 = getChar (  )  ;^1237^^^^^1184^1331^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1240^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1242^^^^^1184^1331^[ADD] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1245^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1247^^^^^1184^1331^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^1253^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1254^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1260^1261^^^^1184^1331^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1279^^^^^1184^1331^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1280^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1291^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1297^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1302^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1306^^^^^1184^1331^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1311^^^^^1184^1331^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get double FromBuffer (  ) ;^1318^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1256^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1282^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1319^^^^^1184^1331^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  )  ;^1187^^^^^1184^1331^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 >>> 4;^1327^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1328^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.addError ( character" )  ;^1329^^^^^1184^1331^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1330^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '-' || peekChar (  )  == '-' )  {^1356^^^^^1353^1374^[REPLACE] if  ( c == '-' && peekChar (  )  == '-' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1356^1357^1358^1359^1360^1353^1374^[ADD] if  ( c == '-' && peekChar (  )  == '-' )  { c = getChar (  ) ; addToString ( c ) ; if  ( peekChar (  )  == '>' )  { c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  peekChar  (    )   != '/'  )   {  ;^1359^^^^^1353^1374^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1359^1360^1361^1362^^1353^1374^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; return true;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1360^^^^^1353^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^1362^^^^^1353^1374^[REPLACE] return true;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1357^^^^^1353^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor (  )   ||  '>' )  {^1359^^^^^1353^1374^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1367^^^^^1353^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  )  ;^1354^^^^^1353^1374^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1370^^^^^1353^1374^[REPLACE] stringBufferTop = 0;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1371^^^^^1353^1374^[ADD] this.string = null;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .reportError ( str )  ;^1372^^^^^1353^1374^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;  ;^1373^^^^^1353^1374^[REPLACE] return false;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == ']' ) {^1383^^^^^1380^1401^[REPLACE] if  ( c == ']' && peekChar (  )  == ']' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   !=  '>' )  {^1386^^^^^1380^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1386^1387^1388^1389^^1380^1401^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; return true;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1387^^^^^1380^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^1389^^^^^1380^1401^[REPLACE] return true;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1384^^^^^1380^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   ) {^1386^^^^^1380^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1387^^^^^1380^1401^[ADD] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1394^^^^^1380^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  )  ;^1381^^^^^1380^1401^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1397^^^^^1380^1401^[REPLACE] stringBufferTop = 0;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1398^^^^^1380^1401^[REPLACE] this.string = null;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .reportError ( s )  ;^1399^^^^^1380^1401^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1400^^^^^1380^1401^[REPLACE] return false;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int declTags = 0;^1408^^^^^1407^1426^[REPLACE] int declTags = 1;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if   (  declTags == 0  )   return true; break;  ;^1417^^^^^1407^1426^[REPLACE] if  ( declTags == 0 )  return true;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( declTags == 0 )  return false;^1417^^^^^1407^1426^[REPLACE] if  ( declTags == 0 )  return true;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  )  ;^1409^^^^^1407^1426^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  )  ;^1409^^^^^1407^1426^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 3;^1422^^^^^1407^1426^[REPLACE] stringBufferTop = 0;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1423^^^^^1407^1426^[REPLACE] this.string = null;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1424^^^^^1407^1426^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1425^^^^^1407^1426^[REPLACE] return false;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (declTags  ==  1 )  {^1495^^^^^1494^1558^[REPLACE] if  ( ungetCursor != 0 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -3 )  {^1497^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1498^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return ungetBuffer[ungetCursor];  ;^1500^^^^^1494^1558^[REPLACE] return ungetBuffer[ungetCursor];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ) {^1497^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1497^1498^1499^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1498^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  sourceReader != null  )   {  ;^1505^^^^^1494^1558^[REPLACE] if  ( sourceString != null )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   sourceEnd )  {^1515^^^^^1505^1525^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  {^1516^^^^^1505^1525^[REPLACE] if  ( !fillSourceBuffer (  )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  &&  -1 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1519^^^^^1505^1525^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1517^^^^^1505^1525^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1519^^^^^1505^1525^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1521^^^^^1505^1525^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (declTags  !=  -1 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -2 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1518^1519^1520^^^1505^1525^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  = null ;^1519^^^^^1505^1525^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^1524^^^^^1505^1525^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   sourceEnd )  {^1506^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  !=  -1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1509^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1507^^^^^1494^1558^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1509^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1511^^^^^1494^1558^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ) {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c ;^1513^^^^^1494^1558^[REPLACE] c = sourceString.charAt ( sourceCursor++ ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (quoteChar  !=  sourceEnd )  {^1506^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   -1 >>> 3 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1508^1509^1510^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1507^^^^^1494^1558^[ADD] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  !=  -3 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1508^1509^1510^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   sourceEnd )  {^1515^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  {^1516^^^^^1494^1558^[REPLACE] if  ( !fillSourceBuffer (  )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   -1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1518^1519^1520^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1517^^^^^1494^1558^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  = null ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;  ;^1521^^^^^1494^1558^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (sourceCursor  ||  -1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1517^^^^^1494^1558^[ADD] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (lineno  ) {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1519^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (Id_transient  ==  4 )  {^1527^^^^^1494^1558^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar == '\r' || c == '\n' )  {^1528^^^^^1494^1558^[REPLACE] if  ( lineEndChar == '\r' && c == '\n' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1  ;^1529^^^^^1494^1558^[REPLACE] lineEndChar = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^continue;^1529^1530^^^^1494^1558^[ADD] lineEndChar = '\n'; continue;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -0;^1532^^^^^1494^1558^[REPLACE] lineEndChar = -1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = xmlOpenTagsCount  c1;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^lineEndChar = '\n';continue;^1528^1529^1530^1531^^1494^1558^[ADD] if  ( lineEndChar == '\r' && c == '\n' )  { lineEndChar = '\n'; continue; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  127 )  {^1537^^^^^1494^1558^[REPLACE] if  ( c <= 127 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1537^1538^1539^1540^1541^1494^1558^[ADD] if  ( c <= 127 )  { if  ( c == '\n' || c == '\r' )  { lineEndChar = c; c = '\n'; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSFormatChar ( xmlOpenTagsCount )  )  {^1543^^^^^1537^1550^[REPLACE] if  ( isJSFormatChar ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime .stringToNumber ( name , result , Id_with )   )  {^1546^^^^^1537^1550^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^1546^^^^^1537^1550^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1  ;^1547^^^^^1537^1550^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^1548^^^^^1537^1550^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  c == '+' || c == '-'  )   {  ;^1538^^^^^1494^1558^[REPLACE] if  ( c == '\n' || c == '\r' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1  ;^1539^^^^^1494^1558^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^1540^^^^^1494^1558^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == '\n' && c == '\r' )  {^1538^^^^^1494^1558^[REPLACE] if  ( c == '\n' || c == '\r' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSFormatChar ( xmlOpenTagsCount )  )  {^1543^^^^^1494^1558^[REPLACE] if  ( isJSFormatChar ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^continue;^1543^1544^1545^^^1494^1558^[ADD] if  ( isJSFormatChar ( c )  )  { continue; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1546^^^^^1494^1558^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1  ;^1547^^^^^1494^1558^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '\\'  ;^1548^^^^^1494^1558^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (declTags  &&  -1 )  {^1552^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1552^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1553^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1509^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^1513^^^^^1494^1558^[REPLACE] c = sourceString.charAt ( sourceCursor++ ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  = null ;^1524^^^^^1494^1558^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = '\n'  ;^1532^^^^^1494^1558^[REPLACE] lineEndChar = -1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = sourceEnd  1;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return c;  ;^1556^^^^^1494^1558^[REPLACE] return c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1504^^^^^1494^1558^[ADD] int c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == null )  {^1575^^^^^1574^1617^[REPLACE] if  ( sourceString != null )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( Id_typeof  <=  0 )  {^1592^^^^^1575^1616^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  && Id_throws )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  !fillSourceBuffer  (    )    )   {  ;^1600^^^^^1592^1614^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1600^1601^^1603^1604^1592^1614^[ADD] if  ( !fillSourceBuffer (  )  )  { break; } } catch  ( IOException ioe )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1592^1614^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^1600^^^^^1592^1614^[REMOVE] ^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_throw  lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1592^1614^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  isUnicodeEscapeStart  )   {  ;^1610^^^^^1592^1614^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^break;^1610^1611^1612^^^1592^1614^[ADD] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1607^^^^^1592^1614^[ADD] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i = lineStart  lineLength;^1597^^^^^1592^1614^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1609^^^^^1592^1614^[ADD] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1601^1602^1603^^^1592^1614^[ADD] catch  ( IOException ioe )  {  break;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  &&  sourceEnd )  {^1598^^^^^1575^1616^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  !fillSourceBuffer  (    )    )   {  ;^1600^^^^^1575^1616^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1575^1616^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1575^1616^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1600^1601^^1603^1604^1575^1616^[ADD] if  ( !fillSourceBuffer (  )  )  { break; } } catch  ( IOException ioe )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart  lineLength;^1607^^^^^1575^1616^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^1600^^^^^1575^1616^[REMOVE] ^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1575^1616^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^break;^1610^1611^1612^^^1575^1616^[ADD] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_void  lineLength;^1607^^^^^1575^1616^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return new String  (  sourceBuffer, lineStart, lineLength  )  ;  ;^1615^^^^^1575^1616^[REPLACE] return new String ( sourceBuffer, lineStart, lineLength ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int lineLength =length  lineStart;^1591^^^^^1575^1616^[REPLACE] int lineLength = sourceCursor - lineStart;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_try  lineLength;^1597^^^^^1575^1616^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^1609^^^^^1575^1616^[REPLACE] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  >  0L )  {^1578^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1578^1579^1580^1581^1582^1574^1617^[ADD] if  ( lineEndChar >= 0 )  { --lineEnd; } else { for  ( ; lineEnd != sourceEnd; ++lineEnd )  { int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1583^^^^^1578^1587^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( xmlOpenTagsCount ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1583^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return sourceString .String ( stringBuffer , Id_for , i )  ;^1588^^^^^1574^1617^[REPLACE] return sourceString.substring ( lineStart, lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^1577^^^^^1574^1617^[REPLACE] int lineEnd = sourceCursor;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( test ) ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEndChar  !=  0 )  {^1578^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( reEnd ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  > Id_throw )  {^1592^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  !=  sourceEnd )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1598^1599^1600^^^1592^1614^[ADD] if  ( i == sourceEnd )  { try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart  lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1592^1614^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = Id_throws  Id_var;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1597^^^^^1592^1614^[ADD] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  !=  sourceEnd )  {^1598^^^^^1574^1617^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if   (  !fillSourceBuffer  (    )    )   {  ;^1600^^^^^1574^1617^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1600^1601^^1603^1604^1574^1617^[ADD] if  ( !fillSourceBuffer (  )  )  { break; } } catch  ( IOException ioe )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1574^1617^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1574^1617^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^1600^^^^^1574^1617^[REMOVE] ^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1607^^^^^1574^1617^[ADD] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart length;^1607^^^^^1574^1617^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return sourceString.substring  (  lineStart, lineEnd  )  ;  ;^1588^^^^^1574^1617^[REPLACE] return sourceString.substring ( lineStart, lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return new String  (  sourceBuffer, lineStart, lineLength  )  ;  ;^1615^^^^^1574^1617^[REPLACE] return new String ( sourceBuffer, lineStart, lineLength ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.equals ( reEnd ) ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int lineLength = sourceCursor  lineStart;^1591^^^^^1574^1617^[REPLACE] int lineLength = sourceCursor - lineStart;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1597^^^^^1574^1617^[ADD] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^final int Id_switch = Token.SWITCH  ;^1609^^^^^1574^1617^[REPLACE] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (str == null )  Kit.codeBug (  ) ;^1621^^^^^1620^1642^[REPLACE] if  ( sourceString != null )  Kit.codeBug (  ) ;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd == sourceBuffer.length /  2 )  {^1622^^^^^1620^1642^[REPLACE] if  ( sourceEnd == sourceBuffer.length )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineStart  ==  0 )  {^1623^^^^^1620^1642^[REPLACE] if  ( lineStart != 0 )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1623^1624^1625^1626^1627^1620^1642^[ADD] if  ( lineStart != 0 )  { System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ; sourceEnd -= lineStart; sourceCursor -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1632^^^^^1623^1633^[ADD] sourceBuffer = tmp;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[ ( stringBuffer.length )  * 2]  ;^1630^^^^^1623^1633^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceCursor -= lineStart  ;^1626^^^^^1620^1642^[REPLACE] sourceEnd -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1627^1628^^^^1620^1642^[ADD] sourceCursor -= lineStart; lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 3;^1628^^^^^1620^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceEnd -= lineStart  ;^1627^^^^^1620^1642^[REPLACE] sourceCursor -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 0L;^1628^^^^^1620^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1632^^^^^1620^1642^[REPLACE] sourceBuffer = tmp;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1630^^^^^1620^1642^[ADD] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp  ;^1632^^^^^1623^1633^[REPLACE] sourceBuffer = tmp;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1630^^^^^1623^1633^[ADD] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1626^^^^^1620^1642^[ADD] sourceEnd -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1628^^^^^1620^1642^[ADD] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[ ( stringBuffer.length )  * 2]  ;^1630^^^^^1620^1642^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length *  2 - sourceEnd ) ;^1635^1636^^^^1620^1642^[REPLACE] int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >  0 )  {^1637^^^^^1620^1642^[REPLACE] if  ( n < 0 )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^return false;^1637^1638^1639^^^1620^1642^[ADD] if  ( n < 0 )  { return false; }^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return true;^1638^^^^^1620^1642^[REPLACE] return false;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return false;  ;^1638^^^^^1620^1642^[REPLACE] return false;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceEnd +=  xmlOpenTagsCount;^1640^^^^^1620^1642^[REPLACE] sourceEnd += n;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return false;^1641^^^^^1620^1642^[REPLACE] return true;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
