[REPLACE]^private static final char[] DIGITS  = null ;^37^^^^^37^40^[REPLACE] private static final char[] DIGITS = {^ [CLASS] Hex  
[REPLACE]^int len = DIGITS.length;^57^^^^^55^75^[REPLACE] int len = data.length;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^if  (  ( len & 0x01 )   ==  0 )  {^59^^^^^55^75^[REPLACE] if  (  ( len & 0x01 )  != 0 )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^throw new DecoderException (  (  (  ( "Illegal hexadecimal charcter " + ch )  + " at index " )  + index )  )  ;^60^^^^^55^75^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^byte[] out = new byte[len  >=  1];^63^^^^^55^75^[REPLACE] byte[] out = new byte[len >> 1];^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^69^70^^^^55^75^[ADD] f = f | toDigit ( data[j], j ) ; j++;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^out[i] =  ( byte )   ( f | 0xFF ) ;^71^^^^^55^75^[REPLACE] out[i] =  ( byte )   ( f & 0xFF ) ;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^for  ( int i = 2, j = 2; j < len; i++ )  {^66^^^^^55^75^[REPLACE] for  ( int i = 0, j = 0; j < len; i++ )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^66^67^68^69^70^55^75^[ADD] for  ( int i = 0, j = 0; j < len; i++ )  { int f = toDigit ( data[j], j )  << 4; j++; f = f | toDigit ( data[j], j ) ; j++;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^int f = toDigit ( data[j], j )   >  4;^67^^^^^55^75^[REPLACE] int f = toDigit ( data[j], j )  << 4;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^return out;  ;^74^^^^^55^75^[REPLACE] return out;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
