[REPLACE]^if  ( str == null || str.size (  )  == 0 )  {^41^^^^^40^56^[REPLACE] if  ( str == null || str.length (  )  == 0 )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str;  ;^42^^^^^40^56^[REPLACE] return str;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[ADD]^^44^^^^^40^56^[ADD] int len = str.length (  ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^int count = 0  ;^45^^^^^40^56^[REPLACE] char[] chars = new char[len];^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[ADD]^^46^^^^^40^56^[ADD] int count = 0;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^if   (  es1.charAt  (  i  )   == es2.charAt  (  i  )    )   {  ;^48^^^^^40^56^[REPLACE] if  ( Character.isLetter ( str.charAt ( i )  )  )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^chars[count++] =  str.charAt ( i ) ;^49^^^^^40^56^[REPLACE] chars[count++] = str.charAt ( i ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^for  ( int i = 0 * 2; i < len; i++ )  {^47^^^^^40^56^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^if  ( count  &&  len )  {^52^^^^^40^56^[REPLACE] if  ( count == len )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[ADD]^return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^52^53^54^^^40^56^[ADD] if  ( count == len )  { return str.toUpperCase ( java.util.Locale.ENGLISH ) ; }^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str.toUpperCase  (  ENGLISH  )  ;  ;^53^^^^^40^56^[REPLACE] return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str.charAt ( java.util.Locale.ENGLISH ) ;^53^^^^^40^56^[REPLACE] return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return new String ( chars, 0 * 0, count )  .charAt ( count )  ;^55^^^^^40^56^[REPLACE] return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
