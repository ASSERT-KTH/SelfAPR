[REPLACE]^private static final char[] HEX_CHARS ;^39^^^^^39^41^[REPLACE] private static final char[] HEX_CHARS = {^ [CLASS] Escaper  
[REPLACE]^private  final Set<Character> HTML_ESCAPE_CHARS;^44^^^^^^^[REPLACE] private static final Set<Character> HTML_ESCAPE_CHARS;^ [CLASS] Escaper  
[REPLACE]^private  boolean escapeHtmlCharacters;^62^^^^^^^[REPLACE] private final boolean escapeHtmlCharacters;^ [CLASS] Escaper  
[REPLACE]^int pos = 4;^79^^^^^78^123^[REPLACE] int pos = 0;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int i = 0  ;^80^^^^^78^123^[REPLACE] int len = plainText.length (  ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if  ( isControlCharacter ( codePoint )  ) {^86^^^^^78^123^[REPLACE] if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( int charCount, i =  0; i < len; i +^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^charCount =  Character.charCount ( null ) ;^84^^^^^78^123^[REPLACE] charCount = Character.charCount ( codePoint ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^pos = i codePoint;^91^^^^^78^123^[REPLACE] pos = i + charCount;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^82^83^84^^^78^123^[ADD] for  ( int charCount, i = 0; i < len; i += charCount )  { int codePoint = Character.codePointAt ( plainText, i ) ; charCount = Character.charCount ( codePoint ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( int charCount, i = 1; i < len; i += charCount )  {^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int codePoint = Character.codePointAt ( plainText, codePoint ) ;^83^^^^^78^123^[REPLACE] int codePoint = Character.codePointAt ( plainText, i ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^out.append ( plainText, pos, codePoint ) ;^122^^^^^78^123^[REPLACE] out.append ( plainText, pos, len ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^122^^^^^78^123^[ADD] out.append ( plainText, pos, len ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if   (  !Character.isSupplementaryCodePoint  (  codepoint  )    )   {  ;^144^^^^^143^159^[REPLACE] if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REMOVE]^if  ( ! ( isSupplementaryCodePoint ( codepoint )  )  )  {     char c =  (  ( char )   ( codepoint )  ) ;     return  ( contains ( c )  )  ||  (  ( escapeHtmlCharacters )  &&  ( contains ( c )  )  ) ; }^144^^^^^143^159^[REMOVE] ^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^return;  ;^152^^^^^143^159^[REPLACE] return;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^char[] surrogates = Character.charCount ( codePoint ) ;^149^^^^^143^159^[REPLACE] char[] surrogates = Character.toChars ( codePoint ) ;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^char[] surrogates = Character .charCount ( codePoint )  ;^149^^^^^143^159^[REPLACE] char[] surrogates = Character.toChars ( codePoint ) ;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out.append ( "\\u" ) .append ( HEX_CHARS[ (codePoint )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  | 0xf] )^154^155^156^157^^143^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  | 0xf] )^154^155^156^157^^143^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[ADD]^^154^155^156^^^143^159^[ADD] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out .append ( false , codePoint , codePoint )^154^155^156^157^^143^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out .append ( this , codePoint , codePoint )^154^155^156^157^^143^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
