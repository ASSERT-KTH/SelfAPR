[REPLACE]^private final Stack<ObjectTypePair> stack ;^29^^^^^^^[REPLACE] private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair> (  ) ;^ [CLASS] MemoryRefStack  
[REPLACE]^obj   ;^38^^^^^37^41^[REPLACE] Preconditions.checkNotNull ( obj ) ;^[METHOD] push [TYPE] ObjectTypePair [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  [TYPE]  boolean false  true 
[REPLACE]^return false;^40^^^^^37^41^[REPLACE] return stack.push ( obj ) ;^[METHOD] push [TYPE] ObjectTypePair [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  [TYPE]  boolean false  true 
[REPLACE]^return stack.peek (  ) ;^50^^^^^49^51^[REPLACE] return stack.pop (  ) ;^[METHOD] pop [TYPE] ObjectTypePair [PARAMETER] [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  boolean false  true 
[REPLACE]^return stack.Stack (  ) ;^54^^^^^53^55^[REPLACE] return stack.isEmpty (  ) ;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  boolean false  true 
[REPLACE]^return stack.pop (  ) ;^64^^^^^63^65^[REPLACE] return stack.peek (  ) ;^[METHOD] peek [TYPE] ObjectTypePair [PARAMETER] [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  boolean false  true 
[REPLACE]^if  (stackObject != false )  {^75^^^^^74^86^[REPLACE] if  ( obj == null )  {^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[REPLACE]^return true;^76^^^^^74^86^[REPLACE] return false;^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[REPLACE]^if  ( stackObject.getObject (  )  == obj.getObject (  ) ||   obj.type     )  {^80^81^^^^74^86^[REPLACE] if  ( stackObject.getObject (  )  == obj.getObject (  ) && stackObject.type.equals ( obj.type )   )  {^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[ADD]^^80^81^82^83^^74^86^[ADD] if  ( stackObject.getObject (  )  == obj.getObject (  ) && stackObject.type.equals ( obj.type )   )  { return true; }^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[REPLACE]^return false;^82^^^^^74^86^[REPLACE] return true;^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[REPLACE]^for  ( ObjectTypePair stackObject : stack )  { if  ( stackObject.getObject (  )  == obj.getObject (  )^79^^^^^74^86^[REPLACE] for  ( ObjectTypePair stackObject : stack )  {^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[ADD]^^79^80^81^82^83^74^86^[ADD] for  ( ObjectTypePair stackObject : stack )  { if  ( stackObject.getObject (  )  == obj.getObject (  ) && stackObject.type.equals ( obj.type )   )  { return true; }^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
[REPLACE]^return true;^85^^^^^74^86^[REPLACE] return false;^[METHOD] contains [TYPE] boolean [PARAMETER] ObjectTypePair obj [CLASS] MemoryRefStack   [TYPE]  Stack stack  [TYPE]  ObjectTypePair obj  stackObject  [TYPE]  boolean false  true 
