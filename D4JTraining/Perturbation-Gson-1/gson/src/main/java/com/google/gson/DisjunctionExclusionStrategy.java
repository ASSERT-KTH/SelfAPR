[REPLACE]^private  Collection<ExclusionStrategy> strategies;^28^^^^^^^[REPLACE] private final Collection<ExclusionStrategy> strategies;^ [CLASS] DisjunctionExclusionStrategy  
[REPLACE]^null   ;^31^^^^^30^33^[REPLACE] Preconditions.checkNotNull ( strategies ) ;^[METHOD] <init> [TYPE] Collection) [PARAMETER] ExclusionStrategy> strategies [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  boolean false  true 
[REPLACE]^this.strategies =  this;^32^^^^^30^33^[REPLACE] this.strategies = strategies;^[METHOD] <init> [TYPE] Collection) [PARAMETER] ExclusionStrategy> strategies [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  boolean false  true 
[REPLACE]^if  ( strategy.shouldSkipClass ( f )  )  {^37^^^^^35^42^[REPLACE] if  ( strategy.shouldSkipField ( f )  )  {^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f 
[REPLACE]^return false;^38^^^^^35^42^[REPLACE] return true;^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f 
[REPLACE]^for  ( ExclusionStrategy strategy : strategies )  { if  ( strategy.shouldSkipField ( f )  )  {^36^^^^^35^42^[REPLACE] for  ( ExclusionStrategy strategy : strategies )  {^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f 
[REPLACE]^return true;^41^^^^^35^42^[REPLACE] return false;^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f 
[REPLACE]^if  ( strategy.shouldSkipField ( clazz )  )  {^46^^^^^44^51^[REPLACE] if  ( strategy.shouldSkipClass ( clazz )  )  {^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
[REMOVE]^if  ( strategy.shouldSkipField ( f )  )  {     return true; }^46^^^^^44^51^[REMOVE] ^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
[REPLACE]^return false;^47^^^^^44^51^[REPLACE] return true;^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
[REPLACE]^for  ( ExclusionStrategy strategy : strategies )  { if  ( strategy.shouldSkipField ( f )  )  {^45^^^^^44^51^[REPLACE] for  ( ExclusionStrategy strategy : strategies )  {^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
[ADD]^^45^46^47^48^^44^51^[ADD] for  ( ExclusionStrategy strategy : strategies )  { if  ( strategy.shouldSkipClass ( clazz )  )  { return true; }^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
[REPLACE]^return true;^50^^^^^44^51^[REPLACE] return false;^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] DisjunctionExclusionStrategy   [TYPE]  Collection strategies  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy strategy  [TYPE]  boolean false  true 
