[REPLACE]^this.modifiers ;^33^^^^^32^39^[REPLACE] this.modifiers = new HashSet<Integer> (  ) ;^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[ADD]^^33^34^35^36^37^32^39^[ADD] this.modifiers = new HashSet<Integer> (  ) ; if  ( modifiers != null )  { for  ( int modifier : modifiers )  { this.modifiers.add ( modifier ) ; }^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[REPLACE]^if  ( modifiers == null )  {^34^^^^^32^39^[REPLACE] if  ( modifiers != null )  {^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[ADD]^^34^35^36^37^^32^39^[ADD] if  ( modifiers != null )  { for  ( int modifier : modifiers )  { this.modifiers.add ( modifier ) ; }^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[REPLACE]^for  ( int modifier : modifiers )  { if  ( f.hasModifier ( modifier )  )  {^35^^^^^32^39^[REPLACE] for  ( int modifier : modifiers )  {^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[ADD]^^35^36^37^^^32^39^[ADD] for  ( int modifier : modifiers )  { this.modifiers.add ( modifier ) ; }^[METHOD] <init> [TYPE] ModifierBasedExclusionStrategy(int[]) [PARAMETER]  modifiers [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  int[] modifiers  [TYPE]  boolean false  true  [TYPE]  int modifier 
[REPLACE]^if  ( modifiers != null )  {^43^^^^^41^48^[REPLACE] if  ( f.hasModifier ( modifier )  )  {^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[ADD]^return true;^43^44^45^^^41^48^[ADD] if  ( f.hasModifier ( modifier )  )  { return true; }^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[REPLACE]^return false;^44^^^^^41^48^[REPLACE] return true;^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[REPLACE]^for  ( int modifier : modifiers )  { if  ( f.hasModifier ( modifier )  )  {^42^^^^^41^48^[REPLACE] for  ( int modifier : modifiers )  {^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[ADD]^^42^43^44^45^^41^48^[ADD] for  ( int modifier : modifiers )  { if  ( f.hasModifier ( modifier )  )  { return true; }^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[REPLACE]^return true;^47^^^^^41^48^[REPLACE] return false;^[METHOD] shouldSkipField [TYPE] boolean [PARAMETER] FieldAttributes f [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  boolean false  true  [TYPE]  FieldAttributes f  [TYPE]  int modifier 
[REPLACE]^return true;^51^^^^^50^52^[REPLACE] return false;^[METHOD] shouldSkipClass [TYPE] boolean [PARAMETER] Class<?> clazz [CLASS] ModifierBasedExclusionStrategy   [TYPE]  Collection modifiers  [TYPE]  Class clazz  [TYPE]  boolean false  true 
