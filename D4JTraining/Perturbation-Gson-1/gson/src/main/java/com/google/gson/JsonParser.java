[REPLACE]^boolean lenient = json .setLenient ( false )  ;^63^^^^^62^79^[REPLACE] boolean lenient = json.isLenient (  ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^json.isLenient (  )  ;^64^^^^^62^79^[REPLACE] json.setLenient ( true ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[ADD]^^64^^^^^62^79^[ADD] json.setLenient ( true ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^if  ( ! e.getCause (  )  instanceof EOFException )  {^72^^^^^62^79^[REPLACE] if  ( e.getCause (  )  instanceof EOFException )  {^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[ADD]^^72^73^74^^^62^79^[ADD] if  ( e.getCause (  )  instanceof EOFException )  { return JsonNull.createJsonNull (  ) ; }^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return parse  (  new StringReader  (  json  )    )  ;  ;^73^^^^^62^79^[REPLACE] return JsonNull.createJsonNull (  ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[ADD]^return Streams.parse ( json ) ;^65^66^67^68^69^62^79^[ADD] try { return Streams.parse ( json ) ; } catch  ( StackOverflowError e )  { throw new JsonParseException  (" ")  ; } catch  ( OutOfMemoryError e )  {^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return Streams .parse ( null )  ;^66^^^^^62^79^[REPLACE] return Streams.parse ( json ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return parse  (  new StringReader  (  json  )    )  ;  ;^66^^^^^62^79^[REPLACE] return Streams.parse ( json ) ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return ;^68^^^^^62^79^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return ;^70^^^^^62^79^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
[REPLACE]^return ;^75^^^^^62^79^[REPLACE] throw e;^[METHOD] parse [TYPE] JsonElement [PARAMETER] JsonReader json [CLASS] JsonParser   [TYPE]  boolean false  lenient  true  [TYPE]  JsonReader json  [TYPE]  JsonParseException e  [TYPE]  StackOverflowError e  [TYPE]  OutOfMemoryError e 
