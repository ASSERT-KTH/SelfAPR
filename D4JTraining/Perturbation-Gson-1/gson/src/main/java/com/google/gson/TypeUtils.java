[REPLACE]^if  ( ! type instanceof Class<?> )  {^70^^^^^69^86^[REPLACE] if  ( type instanceof Class<?> )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^return  ( Class<?> )  type;ParameterizedType actualType =  ( ParameterizedType ) type;return toRawClass ( actualType.getRawType (  )  ) ;^70^71^72^73^74^69^86^[ADD] if  ( type instanceof Class<?> )  { return  ( Class<?> )  type; } else if  ( type instanceof ParameterizedType )  { ParameterizedType actualType =  ( ParameterizedType ) type; return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  else {^72^^^^^69^86^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  else {^75^^^^^69^86^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  else {^79^^^^^69^86^[REPLACE] } else if  ( type instanceof WildcardType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return ;^83^84^^^^79^85^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0L] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^ParameterizedType actualType =  (  ( ParameterizedType )   ( type )  )  ;^80^^^^^69^86^[REPLACE] WildcardType castedType =  ( WildcardType )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return ;^83^84^^^^69^86^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( 0 ) ;^78^^^^^69^86^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^76^^^^^69^86^[ADD] GenericArrayType actualType =  ( GenericArrayType )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^WildcardType castedType =  (  ( WildcardType )   ( type )  )  ;^77^^^^^69^86^[REPLACE] Class<?> rawClass = toRawClass ( actualType.getGenericComponentType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REMOVE]^if  ( type instanceof GenericArrayType )  {     return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType )   ( type )  ) .getGenericComponentType (  )  ) ; }else {     throw new IllegalArgumentException (  (  (  ( "Type \'" + type )  + "\' is not a Class, " )  + "ParameterizedType, or GenericArrayType. Can't extract class." )  ) ; }^79^^^^^69^86^[REMOVE] ^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [3] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( this ) ;^78^^^^^69^86^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0 / 4] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^WildcardType castedType =  (  ( WildcardType )   ( type )  )  ;^76^^^^^69^86^[REPLACE] GenericArrayType actualType =  ( GenericArrayType )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^80^81^^^^69^86^[ADD] WildcardType castedType =  ( WildcardType )  type; return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return   (    (  Class<?>  )  type  )  .isArray  (    )  ;  ;^74^^^^^69^86^[REPLACE] return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^73^^^^^69^86^[ADD] ParameterizedType actualType =  ( ParameterizedType ) type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  if  ( ! type instanceof GenericArrayType )  {^75^^^^^69^86^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if  ( ! type instanceof WildcardType )  {^79^^^^^69^86^[REPLACE] } else if  ( type instanceof WildcardType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0 << 4] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [2] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( null ) ;^78^^^^^69^86^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if   (  type instanceof GenericArrayType  )   {  ;^79^^^^^69^86^[REPLACE] } else if  ( type instanceof WildcardType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0 - 3] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^80^^^^^69^86^[ADD] WildcardType castedType =  ( WildcardType )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0 + 3] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^WildcardType castedType =  (  ( WildcardType )   ( type )  )  ;^73^^^^^69^86^[REPLACE] ParameterizedType actualType =  ( ParameterizedType ) type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^80^81^^^^69^86^[ADD] WildcardType castedType =  ( WildcardType )  type; return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return   (    (  Class<?>  )  type  )  .isArray  (    )  ;  ;^71^^^^^69^86^[REPLACE] return  ( Class<?> )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if  ( ! type instanceof ParameterizedType )  {^72^^^^^69^86^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if  ( ! type instanceof GenericArrayType )  {^75^^^^^69^86^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [1] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [0 * 4] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^Class<?> rawClass = toRawClass ( actualType.getGenericComponentType (  )  ) ;^76^77^^^^69^86^[ADD] GenericArrayType actualType =  ( GenericArrayType )  type; Class<?> rawClass = toRawClass ( actualType.getGenericComponentType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( actualType .getActualTypeArguments (  )   ) ;^74^^^^^69^86^[REPLACE] return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^73^74^^^^69^86^[ADD] ParameterizedType actualType =  ( ParameterizedType ) type; return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if   (  type instanceof WildcardType  )   {  ;^75^^^^^69^86^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  if  ( ! type instanceof WildcardType )  {^79^^^^^69^86^[REPLACE] } else if  ( type instanceof WildcardType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( castedType.getUpperBounds (  ) [4] ) ;^81^^^^^69^86^[REPLACE] return toRawClass ( castedType.getUpperBounds (  ) [0] ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( true ) ;^78^^^^^69^86^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^83^84^^^^69^86^[ADD] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  WildcardType castedType  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
