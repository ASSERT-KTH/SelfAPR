[REPLACE]^exclusionStrategy   ;^91^^^^^90^95^[REPLACE] Preconditions.checkNotNull ( exclusionStrategy ) ;^[METHOD] <init> [TYPE] ExclusionStrategy) [PARAMETER] ObjectTypePair objTypePair ExclusionStrategy exclusionStrategy [CLASS] ObjectNavigator   [TYPE]  ObjectTypePair objTypePair  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true 
[REMOVE]^Object objectToVisit =  ( obj == null )  ? visitor.getTarget (  )  : obj;^91^^^^^90^95^[REMOVE] ^[METHOD] <init> [TYPE] ExclusionStrategy) [PARAMETER] ObjectTypePair objTypePair ExclusionStrategy exclusionStrategy [CLASS] ObjectNavigator   [TYPE]  ObjectTypePair objTypePair  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true 
[REPLACE]^this.objTypePair =  null;^93^^^^^90^95^[REPLACE] this.objTypePair = objTypePair;^[METHOD] <init> [TYPE] ExclusionStrategy) [PARAMETER] ObjectTypePair objTypePair ExclusionStrategy exclusionStrategy [CLASS] ObjectNavigator   [TYPE]  ObjectTypePair objTypePair  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true 
[REPLACE]^this.exclusionStrategy =  null;^94^^^^^90^95^[REPLACE] this.exclusionStrategy = exclusionStrategy;^[METHOD] <init> [TYPE] ExclusionStrategy) [PARAMETER] ObjectTypePair objTypePair ExclusionStrategy exclusionStrategy [CLASS] ObjectNavigator   [TYPE]  ObjectTypePair objTypePair  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true 
[REPLACE]^Type declaredTypeOfField = fieldTypeInfo.getActualType (  ) ;^102^^^^^101^139^[REPLACE] TypeInfo objTypeInfo = new TypeInfo ( objTypePair.type ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( exclusionStrategy.shouldSkipField ( objTypeInfo.getRawClass (  )  )  )  {^103^^^^^101^139^[REPLACE] if  ( exclusionStrategy.shouldSkipClass ( objTypeInfo.getRawClass (  )  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^103^104^105^^^101^139^[ADD] if  ( exclusionStrategy.shouldSkipClass ( objTypeInfo.getRawClass (  )  )  )  { return; }^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^104^^^^^101^139^[REPLACE] return;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^boolean visitedWithCustomHandler = visitor.start ( objTypePair ) ;^106^^^^^101^139^[REPLACE] boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler ( objTypePair ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( visitedWithCustomHandler )  {^107^^^^^101^139^[REPLACE] if  ( !visitedWithCustomHandler )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( objectToVisit != null )  {^110^^^^^101^139^[REPLACE] if  ( objectToVisit == null )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^111^^^^^101^139^[REPLACE] return;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( fieldTypeInfo.isArray (  )  )  {^116^^^^^101^139^[REPLACE] if  ( objTypeInfo.isArray (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^}  else {^118^119^^^^101^139^[REPLACE] } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^}   visitor.visitPrimitive ( objectToVisit ) ;^118^119^^^122^101^139^[ADD] else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  { visitor.visitPrimitive ( objectToVisit ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( curr.isSynthetic (  )  )  {^130^^^^^118^134^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^118^134^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != null  ||  !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^navigateClassFields ( objectToVisit, curr, visitor ) ;^130^131^132^^^118^134^[ADD] if  ( !curr.isSynthetic (  )  )  { navigateClassFields ( objectToVisit, curr, visitor ) ; }^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^visitor.visitArray ( objectToVisit, objTypePair.type ) ;^131^^^^^118^134^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; this !^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^128^129^130^131^132^118^134^[ADD] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  { if  ( !curr.isSynthetic (  )  )  { navigateClassFields ( objectToVisit, curr, visitor ) ; }^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^ObjectTypePair currObjTypePair = objTypePair.getObject (  ) ;^126^^^^^118^134^[REPLACE] ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^126^127^128^129^^118^134^[ADD] ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ; Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ; for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Class<?> topLevelClass = new TypeInfo ( objTypePair.type ) .getRawClass (  ) ;^127^^^^^118^134^[REPLACE] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = null; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^objectToVisit =  null.getTarget (  ) ;^123^^^^^118^134^[REPLACE] objectToVisit = visitor.getTarget (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^123^^^^^118^134^[ADD] objectToVisit = visitor.getTarget (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( !curr .getDeclaredFields (  )   )  {^130^^^^^101^139^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, null, visitor ) ;^131^^^^^101^139^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass;visitedWithCustomHandler ;^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( curr.isSynthetic (  )  )  {^130^^^^^128^133^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^128^133^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^objectToVisit =  null.getTarget (  ) ;^123^^^^^101^139^[REPLACE] objectToVisit = visitor.getTarget (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; 0 !^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^ObjectTypePair currObjTypePair = objTypePair.getObject (  ) ;^126^^^^^101^139^[REPLACE] ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Class<?> topLevelClass = new TypeInfo ( objTypePair.type ) .getRawClass (  ) ;^127^^^^^101^139^[REPLACE] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = false; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^128^129^130^131^132^101^139^[ADD] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  { if  ( !curr.isSynthetic (  )  )  { navigateClassFields ( objectToVisit, curr, visitor ) ; }^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^visitor.visitArray ( obj, objTypePair.type ) ;^117^^^^^101^139^[REPLACE] visitor.visitArray ( objectToVisit, objTypePair.type ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^131^^^^^118^134^[ADD] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr == this ;^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; null !^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = false; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( objectToVisit == null )  {^130^^^^^101^139^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, this, visitor ) ;^131^^^^^101^139^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != this  >=  !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^visitor.visitArray ( objectToVisit, objTypePair.type ) ;^131^^^^^128^133^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^visitor.visitArray ( objectToVisit, objTypePair.type ) ;^115^116^117^118^119^101^139^[ADD] try { if  ( objTypeInfo.isArray (  )  )  { visitor.visitArray ( objectToVisit, objTypePair.type ) ; } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^visitor.visitArray ( objectToVisit, objTypePair.type ) ;^116^117^118^119^^101^139^[ADD] if  ( objTypeInfo.isArray (  )  )  { visitor.visitArray ( objectToVisit, objTypePair.type ) ; } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^}  if  ( objTypeInfo.getActualType (  )  == Object.class || isPrimitiveOrString ( objectToVisit )  )  {^118^119^^^^101^139^[REPLACE] } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( objectToVisit == null )  {^130^^^^^118^134^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr == null ;^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, null, visitor ) ;^131^^^^^118^134^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr == null || !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^navigateClassFields ( objectToVisit, curr, visitor ) ;^130^131^132^^^128^133^[ADD] if  ( !curr.isSynthetic (  )  )  { navigateClassFields ( objectToVisit, curr, visitor ) ; }^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, true, visitor ) ;^131^^^^^128^133^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; this !^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^126^127^128^129^^101^139^[ADD] ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ; Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ; for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type )  .getActualType (  )  ;^127^^^^^101^139^[REPLACE] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = 0; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^visitor .visitArrayField ( 1 , this , obj )  ;^117^^^^^101^139^[REPLACE] visitor.visitArray ( objectToVisit, objTypePair.type ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != this  >  !curr.equals ( Object.class ) ; curr = curr.getDeclaredFields (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, 1, visitor ) ;^131^^^^^118^134^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, this, visitor ) ;^131^^^^^128^133^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^123^^^^^101^139^[ADD] objectToVisit = visitor.getTarget (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; false !^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^ObjectTypePair currObjTypePair = objTypePair .getObject (  )  ;^126^^^^^101^139^[REPLACE] ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = null; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; null !^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Object obj = objTypePair.toMoreSpecificType (  ) ;^108^^^^^101^139^[REPLACE] Object obj = objTypePair.getObject (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Object objectToVisit  =  visitor.getTarget (  )  ;^109^^^^^101^139^[REPLACE] Object objectToVisit =  ( obj == null )  ? visitor.getTarget (  )  : obj;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^109^^^^^101^139^[ADD] Object objectToVisit =  ( obj == null )  ? visitor.getTarget (  )  : obj;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^127^^^^^101^139^[ADD] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = true; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  (obj != null )  {^110^^^^^101^139^[REPLACE] if  ( objectToVisit == null )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, this, visitor ) ;^131^^^^^118^134^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = this; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( curr.isSynthetic (  )  )  {^130^^^^^101^139^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^visitor.visitArray ( objectToVisit, objTypePair.type ) ;^131^^^^^101^139^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^131^^^^^101^139^[ADD] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != null ;^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REMOVE]^if  ( objTypeInfo.isArray (  )  )  { visitor.visitArray ( objectToVisit, objTypePair.type ) ;^131^^^^^118^134^[REMOVE] ^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != null ;^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; true !^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^127^^^^^118^134^[ADD] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = true; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( obj, curr, visitor ) ;^131^^^^^101^139^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = this; curr != null || !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^131^^^^^128^133^[ADD] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^}  if  ( objTypeInfo.getActualType (  )  == Object.class ) {^118^119^^^^101^139^[REPLACE] } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != null || !curr.equals ( Object.class ) ; curr = curr.getDeclaredFields (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( objTypeInfo.isArray (  )  )  { visitor.visitArray ( objectToVisit, objTypePair.type ) ;^117^^^^^101^139^[REPLACE] visitor.visitArray ( objectToVisit, objTypePair.type ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[ADD]^^117^^^^^101^139^[ADD] visitor.visitArray ( objectToVisit, objTypePair.type ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^} else if  ( objTypeInfo.getActualType (  )  == Object.class ) {^118^119^^^^101^139^[REPLACE] } else if  ( objTypeInfo.getActualType (  )  == Object.class && isPrimitiveOrString ( objectToVisit )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass;visitedWithCustomHandler ;^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; false !^128^129^^^^118^134^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type )  .getActualType (  )  ;^127^^^^^118^134^[REPLACE] Class<?> topLevelClass = new TypeInfo ( currObjTypePair.type ) .getRawClass (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^navigateClassFields ( objectToVisit, true, visitor ) ;^131^^^^^101^139^[REPLACE] navigateClassFields ( objectToVisit, curr, visitor ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = topLevelClass; curr != this  ==  !curr.equals ( Object.class ) ; curr = curr .getDeclaredFields (  )   )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^if  ( !curr .getDeclaredFields (  )   )  {^130^^^^^128^133^[REPLACE] if  ( !curr.isSynthetic (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr =  topLevelClass; true !^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^for  ( Class<?> curr = this; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^128^129^^^^101^139^[REPLACE] for  ( Class<?> curr = topLevelClass; curr != null && !curr.equals ( Object.class ) ; curr = curr.getSuperclass (  )  )  {^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Object obj = objTypePair .setObject ( objectToVisit )  ;^108^^^^^101^139^[REPLACE] Object obj = objTypePair.getObject (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] Visitor visitor [CLASS] ObjectNavigator   [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  objectToVisit  [TYPE]  Class curr  topLevelClass  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo objTypeInfo 
[REPLACE]^Class<?> realClazz = objectToVisit .equals ( objectToVisit )  ;^142^^^^^141^145^[REPLACE] Class<?> realClazz = objectToVisit.getClass (  ) ;^[METHOD] isPrimitiveOrString [TYPE] boolean [PARAMETER] Object objectToVisit [CLASS] ObjectNavigator   [TYPE]  Object objectToVisit  [TYPE]  Class realClazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair 
[REPLACE]^return false ;^143^144^^^^141^145^[REPLACE] return realClazz == Object.class || realClazz == String.class || Primitives.unwrap ( realClazz ) .isPrimitive (  ) ;^[METHOD] isPrimitiveOrString [TYPE] boolean [PARAMETER] Object objectToVisit [CLASS] ObjectNavigator   [TYPE]  Object objectToVisit  [TYPE]  Class realClazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  boolean false  true  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair 
[REPLACE]^Field[] fields = 0.getDeclaredFields (  ) ;^148^^^^^147^168^[REPLACE] Field[] fields = clazz.getDeclaredFields (  ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^AccessibleObject.setAccessible ( fields, false ) ;^149^^^^^147^168^[REPLACE] AccessibleObject.setAccessible ( fields, true ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^if  (  exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^152^153^^^^147^168^[REPLACE] if  ( exclusionStrategy.shouldSkipField ( fieldAttributes ) || exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  {^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^if  ( visitedWithCustomHandler )  {^160^^^^^147^168^[REPLACE] if  ( !visitedWithCustomHandler )  {^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^if  ( objTypeInfo.isArray (  )  )  {^161^^^^^147^168^[REPLACE] if  ( fieldTypeInfo.isArray (  )  )  {^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[ADD]^^161^162^163^164^165^147^168^[ADD] if  ( fieldTypeInfo.isArray (  )  )  { visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ; } else { visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ; }^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;^164^^^^^147^168^[REPLACE] visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^162^^^^^147^168^[REPLACE] visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[ADD]^visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ;visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^161^162^163^164^165^147^168^[ADD] if  ( fieldTypeInfo.isArray (  )  )  { visitor.visitArrayField ( fieldAttributes, declaredTypeOfField, obj ) ; } else { visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ; }^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^visitor .visitArrayField ( fieldAttributes , declaredTypeOfField , obj )  ;^164^^^^^147^168^[REPLACE] visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[ADD]^^164^^^^^147^168^[ADD] visitor.visitObjectField ( fieldAttributes, declaredTypeOfField, obj ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^Field[] fields = clazz.getDeclaredFields (  ) ;^150^^^^^147^168^[REPLACE] for  ( Field f : fields )  {^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[ADD]^^150^151^152^153^154^147^168^[ADD] for  ( Field f : fields )  { FieldAttributes fieldAttributes = new FieldAttributes ( clazz, f ) ; if  ( exclusionStrategy.shouldSkipField ( fieldAttributes ) || exclusionStrategy.shouldSkipClass ( fieldAttributes.getDeclaredClass (  )  )  )  { continue;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^151^^^^^147^168^[REPLACE] FieldAttributes fieldAttributes = new FieldAttributes ( clazz, f ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^TypeInfo objTypeInfo = new TypeInfo ( objTypePair.type ) ;^156^^^^^147^168^[REPLACE] TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField ( f, objTypePair.type ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^Type declaredTypeOfField = fieldTypeInfo.getRawClass (  ) ;^157^^^^^147^168^[REPLACE] Type declaredTypeOfField = fieldTypeInfo.getActualType (  ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[ADD]^^157^^^^^147^168^[ADD] Type declaredTypeOfField = fieldTypeInfo.getActualType (  ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
[REPLACE]^boolean visitedWithCustomHandler = visitor .visitUsingCustomHandler ( node )  ;^158^159^^^^147^168^[REPLACE] boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler ( fieldAttributes, declaredTypeOfField, obj ) ;^[METHOD] navigateClassFields [TYPE] void [PARAMETER] Object obj Class<?> clazz Visitor visitor [CLASS] ObjectNavigator   [TYPE]  Field f  [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  visitedWithCustomHandler  [TYPE]  Visitor visitor  [TYPE]  ObjectTypePair currObjTypePair  node  objTypePair  [TYPE]  Object obj  [TYPE]  Class clazz  [TYPE]  ExclusionStrategy exclusionStrategy  [TYPE]  TypeInfo fieldTypeInfo  [TYPE]  Field[] fields  [TYPE]  FieldAttributes fieldAttributes 
