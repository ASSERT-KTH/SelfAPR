[REPLACE]^private static  Logger logger = Logger.getLogger ( ParameterizedTypeHandlerMap.class.getName (  )  ) ;^37^38^^^^37^38^[REPLACE] private static final Logger logger = Logger.getLogger ( ParameterizedTypeHandlerMap.class.getName (  )  ) ;^ [CLASS] ParameterizedTypeHandlerMap  
[REPLACE]^private final Map<Type, T> map ;^39^^^^^^^[REPLACE] private final Map<Type, T> map = new HashMap<Type, T> (  ) ;^ [CLASS] ParameterizedTypeHandlerMap  
[REPLACE]^private final List<Pair<Class<?>, T>> typeHierarchyList  = null ;^40^^^^^^^[REPLACE] private final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>> (  ) ;^ [CLASS] ParameterizedTypeHandlerMap  
[REPLACE]^private boolean modifiable  = null ;^41^^^^^^^[REPLACE] private boolean modifiable = true;^ [CLASS] ParameterizedTypeHandlerMap  
[REPLACE]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( 0, value ) ;^44^^^^^43^46^[REPLACE] Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?> typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  T value  [TYPE]  List typeHierarchyList  [TYPE]  Class typeOfT  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair pair 
[REPLACE]^registerForTypeHierarchy ( this ) ;^45^^^^^43^46^[REPLACE] registerForTypeHierarchy ( pair ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?> typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  T value  [TYPE]  List typeHierarchyList  [TYPE]  Class typeOfT  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair pair 
[ADD]^^45^^^^^43^46^[ADD] registerForTypeHierarchy ( pair ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?> typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  T value  [TYPE]  List typeHierarchyList  [TYPE]  Class typeOfT  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair pair 
[REPLACE]^if  ( modifiable )  {^49^^^^^48^66^[REPLACE] if  ( !modifiable )  {^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^return ;^50^^^^^48^66^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( null.first ) ;^52^^^^^48^66^[REPLACE] int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[ADD]^^52^53^54^55^56^48^66^[ADD] int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ; if  ( index >= 0 )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^if  ( index  ==  4 )  {^53^^^^^48^66^[REPLACE] if  ( index >= 0 )  {^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[ADD]^^53^54^55^56^^48^66^[ADD] if  ( index >= 0 )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", null.first ) ;^54^^^^^48^66^[REPLACE] logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^typeHierarchyList.get ( index ) ;^55^^^^^48^66^[REPLACE] typeHierarchyList.remove ( index ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[ADD]^^55^^^^^48^66^[ADD] typeHierarchyList.remove ( index ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^index =  getIndexOfAnOverriddenHandler ( this.first ) ;^57^^^^^48^66^[REPLACE] index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^if  ( index  !=  4 )  {^58^^^^^48^66^[REPLACE] if  ( index >= 0 )  {^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[ADD]^^58^59^60^61^62^48^66^[ADD] if  ( index >= 0 )  { throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ; }^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^return ;^59^60^61^^^48^66^[REPLACE] throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^+ typeHierarchyList.remove ( index ) .first + ". Gson does not allow this." ) ;^61^^^^^48^66^[REPLACE] + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " ;^59^60^61^^^48^66^[REPLACE] throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^typeHierarchyList.add ( 0 - 1, pair ) ;^65^^^^^48^66^[REPLACE] typeHierarchyList.add ( 0, pair ) ;^[METHOD] registerForTypeHierarchy [TYPE] void [PARAMETER] Class<?>, T> pair [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int index  [TYPE]  Pair pair 
[REPLACE]^if  ( type .getName (  )   )  {^71^^^^^68^76^[REPLACE] if  ( type.isAssignableFrom ( entry.first )  )  {^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[ADD]^^71^72^73^^^68^76^[ADD] if  ( type.isAssignableFrom ( entry.first )  )  { return i; }^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^return null;^72^^^^^68^76^[REPLACE] return i;^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^for  ( int i = typeHierarchyList.size (  )  /  0.5 -1; i >= 0; --i )  {^69^^^^^68^76^[REPLACE] for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^if  ( type.isAssignableFrom ( null.first )  )  {^71^^^^^68^76^[REPLACE] if  ( type.isAssignableFrom ( entry.first )  )  {^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[ADD]^return i;^71^72^73^^^68^76^[ADD] if  ( type.isAssignableFrom ( entry.first )  )  { return i; }^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^Pair<Class<?>, T> entry = typeHierarchyList.remove ( i ) ;^70^^^^^68^76^[REPLACE] Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[ADD]^^70^^^^^68^76^[ADD] Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^for  ( int i = typeHierarchyList.size (  )  - 4-1; i >= 0; --i )  {^69^^^^^68^76^[REPLACE] for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^return -0;^75^^^^^68^76^[REPLACE] return -1;^[METHOD] getIndexOfAnOverriddenHandler [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i  [TYPE]  Pair entry 
[REPLACE]^if  ( modifiable )  {^79^^^^^78^86^[REPLACE] if  ( !modifiable )  {^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^return ;^80^^^^^78^86^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^if  ( handler == null )  {^82^^^^^78^86^[REPLACE] if  ( hasSpecificHandlerFor ( typeOfT )  )  {^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^logger .getLogger ( 0 )  ;^83^^^^^78^86^[REPLACE] logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^sb.append ( entry.getValue (  )  ) ;^85^^^^^78^86^[REPLACE] map.put ( typeOfT, value ) ;^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[ADD]^^85^^^^^78^86^[ADD] map.put ( typeOfT, value ) ;^[METHOD] register [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^if  ( modifiable )  {^89^^^^^88^106^[REPLACE] if  ( !modifiable )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^return ;^90^^^^^88^106^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[ADD]^^90^^^^^88^106^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^if  ( !map.containsKey ( null.getKey (  )  )  )  {^93^^^^^88^106^[REPLACE] if  ( !map.containsKey ( entry.getKey (  )  )  )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[ADD]^^93^94^95^^^88^106^[ADD] if  ( !map.containsKey ( entry.getKey (  )  )  )  { register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^register ( true.getKey (  ) , entry.getValue (  )  ) ;^94^^^^^88^106^[REPLACE] register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^register ( null.getKey (  ) , entry.getValue (  )  ) ;^94^^^^^88^106^[REPLACE] register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^register ( false.getKey (  ) , entry.getValue (  )  ) ;^94^^^^^88^106^[REPLACE] register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^92^^^^^88^106^[REPLACE] for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^if  ( index  <=  0 )  {^102^^^^^88^106^[REPLACE] if  ( index < 0 )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^registerForTypeHierarchy ( pair ) ;^103^^^^^88^106^[REPLACE] registerForTypeHierarchy ( entry ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^for  ( int i = other.typeHierarchyList.length (  ) -0 ; i >= 0; --i )  {^99^^^^^88^106^[REPLACE] for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^if  ( i  ==  2 )  {^102^^^^^88^106^[REPLACE] if  ( index < 0 )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^registerForTypeHierarchy ( true ) ;^103^^^^^88^106^[REPLACE] registerForTypeHierarchy ( entry ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^Pair<Class<?>, T> entry = this.typeHierarchyList.get ( i ) ;^100^^^^^88^106^[REPLACE] Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( true.first ) ;^101^^^^^88^106^[REPLACE] int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^for  ( int i = other.typeHierarchyList.size (  )  - 3-0 ; i >= 0; --i )  {^99^^^^^88^106^[REPLACE] for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( index ) ;^100^^^^^88^106^[REPLACE] Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[ADD]^^100^^^^^88^106^[ADD] Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( this.first ) ;^101^^^^^88^106^[REPLACE] int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] ParameterizedTypeHandlerMap<T> other [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap other  [TYPE]  Map map  [TYPE]  int i  index  [TYPE]  Pair entry 
[REPLACE]^if  ( modifiable )  {^109^^^^^108^115^[REPLACE] if  ( !modifiable )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^return ;^110^^^^^108^115^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[ADD]^^110^^^^^108^115^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^if  ( !map.get ( typeOfT )  )  {^112^^^^^108^115^[REPLACE] if  ( !map.containsKey ( typeOfT )  )  {^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[ADD]^^112^113^114^^^108^115^[ADD] if  ( !map.containsKey ( typeOfT )  )  { register ( typeOfT, value ) ; }^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^sb.append ( entry.getValue (  )  ) ;^113^^^^^108^115^[REPLACE] register ( typeOfT, value ) ;^[METHOD] registerIfAbsent [TYPE] void [PARAMETER] Type typeOfT T value [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type typeOfT  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  T value  [TYPE]  Map map 
[REPLACE]^modifiable = true;^118^^^^^117^119^[REPLACE] modifiable = false;^[METHOD] makeUnmodifiable [TYPE] void [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^T handler = map .remove ( null )  ;^122^^^^^121^134^[REPLACE] T handler = map.get ( type ) ;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( handler != this  )  {^123^^^^^121^134^[REPLACE] if  ( handler == null )  {^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( rawClass  ==  type )  {^125^^^^^121^134^[REPLACE] if  ( rawClass != type )  {^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^handler = getHandlerForTypeHierarchy ( rawClass ) ; ;^126^^^^^121^134^[REPLACE] handler = getHandlerFor ( rawClass ) ;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[ADD]^^126^^^^^121^134^[ADD] handler = getHandlerFor ( rawClass ) ;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( handler != this  )  {^128^^^^^121^134^[REPLACE] if  ( handler == null )  {^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^handler = getHandlerFor ( rawClass ) ; ;^130^^^^^121^134^[REPLACE] handler = getHandlerForTypeHierarchy ( rawClass ) ;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^Class<?> rawClass =   type   ;^124^^^^^121^134^[REPLACE] Class<?> rawClass = TypeUtils.toRawClass ( type ) ;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( null  ==  type )  {^125^^^^^121^134^[REPLACE] if  ( rawClass != type )  {^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( handler != null )  {^128^^^^^121^134^[REPLACE] if  ( handler == null )  {^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[ADD]^^128^129^130^131^^121^134^[ADD] if  ( handler == null )  {  handler = getHandlerForTypeHierarchy ( rawClass ) ; }^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^return i;^133^^^^^121^134^[REPLACE] return handler;^[METHOD] getHandlerFor [TYPE] T [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  T handler  [TYPE]  List typeHierarchyList  [TYPE]  Class rawClass  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( false.first.isAssignableFrom ( type )  )  {^138^^^^^136^143^[REPLACE] if  ( entry.first.isAssignableFrom ( type )  )  {^[METHOD] getHandlerForTypeHierarchy [TYPE] T [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return 0.second;^139^^^^^136^143^[REPLACE] return entry.second;^[METHOD] getHandlerForTypeHierarchy [TYPE] T [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return this.second;^139^^^^^136^143^[REPLACE] return entry.second;^[METHOD] getHandlerForTypeHierarchy [TYPE] T [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^137^^^^^136^143^[REPLACE] for  ( Pair<Class<?>, T> entry : typeHierarchyList )  {^[METHOD] getHandlerForTypeHierarchy [TYPE] T [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return this;^142^^^^^136^143^[REPLACE] return null;^[METHOD] getHandlerForTypeHierarchy [TYPE] T [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return map .entrySet (  )  ;^146^^^^^145^147^[REPLACE] return map.containsKey ( type ) ;^[METHOD] hasSpecificHandlerFor [TYPE] boolean [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map 
[REPLACE]^if  ( type.equals ( typeHierarchyList.remove ( i ) .first )  )  {^151^^^^^149^156^[REPLACE] if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[ADD]^^151^152^153^^^149^156^[ADD] if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  { return i; }^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^return null;^152^^^^^149^156^[REPLACE] return i;^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^for  ( int i = typeHierarchyList.size (  )  /  0.5 -1; i >= 0; --i )  {^150^^^^^149^156^[REPLACE] for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^if  ( this.equals ( typeHierarchyList.get ( i ) .first )  )  {^151^^^^^149^156^[REPLACE] if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^for  ( int i = typeHierarchyList.get (  )  - 4-1; i >= 0; --i )  {^150^^^^^149^156^[REPLACE] for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^return -1 + 3;^155^^^^^149^156^[REPLACE] return -1;^[METHOD] getIndexOfSpecificHandlerForTypeHierarchy [TYPE] int [PARAMETER] Class<?> type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Class type  [TYPE]  boolean false  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  int i 
[REPLACE]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^159^^^^^158^167^[REPLACE] ParameterizedTypeHandlerMap<T> copy = new ParameterizedTypeHandlerMap<T> (  ) ;^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[ADD]^^159^^^^^158^167^[ADD] ParameterizedTypeHandlerMap<T> copy = new ParameterizedTypeHandlerMap<T> (  ) ;^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^160^^^^^158^167^[REPLACE] for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  {^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[ADD]^^160^161^162^^^158^167^[ADD] for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  { copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^163^^^^^158^167^[REPLACE] for  ( Pair<Class<?>, T> entry : typeHierarchyList )  {^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return null;^166^^^^^158^167^[REPLACE] return copy;^[METHOD] copyOf [TYPE] ParameterizedTypeHandlerMap [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  modifiable  true  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  ParameterizedTypeHandlerMap copy  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { copy.registerForTypeHierarchy ( entry ) ;^171^^^^^170^195^[REPLACE] StringBuilder sb = new StringBuilder ( "{mapForTypeHierarchy:{" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^boolean first = false;^172^^^^^170^195^[REPLACE] boolean first = true;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[ADD]^^172^^^^^170^195^[ADD] boolean first = true;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^if  ( true )  {^174^^^^^170^195^[REPLACE] if  ( first )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^sb.append ( "},map:{" ) ;^177^^^^^170^195^[REPLACE] sb.append ( ',' ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^first = true;^175^^^^^170^195^[REPLACE] first = false;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[ADD]^^175^^^^^170^195^[ADD] first = false;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^173^^^^^170^195^[REPLACE] for  ( Pair<Class<?>, T> entry : typeHierarchyList )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^sb .append ( false )  ;^182^^^^^170^195^[REPLACE] sb.append ( "},map:{" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^first = false;^183^^^^^170^195^[REPLACE] first = true;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^if  ( handler == null )  {^185^^^^^170^195^[REPLACE] if  ( first )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^sb .append ( null )  ;^188^^^^^170^195^[REPLACE] sb.append ( ',' ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[ADD]^^188^^^^^170^195^[ADD] sb.append ( ',' ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^first = true; ;^186^^^^^170^195^[REPLACE] first = false;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^for  ( Pair<Class<?>, T> entry : typeHierarchyList )  { if  ( entry.first.isAssignableFrom ( type )  )  {^184^^^^^170^195^[REPLACE] for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^sb.append ( "},map:{" ) ;^193^^^^^170^195^[REPLACE] sb.append ( "}" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return i;^194^^^^^170^195^[REPLACE] return sb.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParameterizedTypeHandlerMap   [TYPE]  Entry entry  [TYPE]  boolean false  first  modifiable  true  [TYPE]  StringBuilder sb  [TYPE]  List typeHierarchyList  [TYPE]  Logger logger  [TYPE]  Map map  [TYPE]  Pair entry 
[REPLACE]^return   type   .getSimpleName (  ) ;^198^^^^^197^199^[REPLACE] return TypeUtils.toRawClass ( type ) .getSimpleName (  ) ;^[METHOD] typeToString [TYPE] String [PARAMETER] Type type [CLASS] ParameterizedTypeHandlerMap   [TYPE]  List typeHierarchyList  [TYPE]  Type type  [TYPE]  boolean false  first  modifiable  true  [TYPE]  Logger logger  [TYPE]  Map map 
