[REPLACE]^if  ( ! superclass instanceof Class<?> )  {^104^^^^^103^131^[REPLACE] if  ( type instanceof Class<?> )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  type instanceof GenericArrayType  )   {  ;^107^^^^^103^131^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^}^107^108^^^^103^131^[ADD] else if  ( type instanceof ParameterizedType )  { ParameterizedType parameterizedType =  ( ParameterizedType )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^}  else {^118^^^^^103^131^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^throw buildUnexpectedTypeError ( type, class, class, class )  ;^128^129^^^^118^130^[REPLACE] throw buildUnexpectedTypeError ( type, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^throw buildUnexpectedTypeError ( superclass, ParameterizedType.class, GenericArrayType.class ) ;^128^129^^^^118^130^[REPLACE] throw buildUnexpectedTypeError ( type, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return rawArrayType.getClass  (    )  ;  ;^126^^^^^103^131^[REPLACE] return rawArrayType.getClass (  ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Type itype  ;^119^^^^^103^131^[REPLACE] GenericArrayType genericArrayType =  ( GenericArrayType )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 + 4 ) ;^124^125^^^^103^131^[REPLACE] Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return rawArrayType.Object (  ) ;^126^^^^^103^131^[REPLACE] return rawArrayType.getClass (  ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^^124^125^^^^103^131^[ADD] Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^throw buildUnexpectedTypeError ( type, class, class, class )  ;^128^129^^^^103^131^[REPLACE] throw buildUnexpectedTypeError ( type, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! rawType instanceof Class<?> )  {^114^^^^^103^131^[REPLACE] if  ( rawType instanceof Class<?> )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^return  ( Class<?> )  rawType;^114^115^116^^^103^131^[ADD] if  ( rawType instanceof Class<?> )  { return  ( Class<?> )  rawType; }^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return isAssignableFrom  (    (  Type  )   cls  )  ;  ;^115^^^^^103^131^[REPLACE] return  ( Class<?> )  rawType;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Type itype  ;^108^^^^^103^131^[REPLACE] ParameterizedType parameterizedType =  ( ParameterizedType )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Type rawType = parameterizedType .getRawType ( type )  ;^113^^^^^103^131^[REPLACE] Type rawType = parameterizedType.getRawType (  ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^^117^^^^^103^131^[ADD] throw buildUnexpectedTypeError ( rawType, Class.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^}   GenericArrayType genericArrayType =  ( GenericArrayType )  type;^118^119^^^^103^131^[ADD] else if  ( type instanceof GenericArrayType )  { GenericArrayType genericArrayType =  ( GenericArrayType )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^^128^129^^^^118^130^[ADD] throw buildUnexpectedTypeError ( type, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^^108^^^^^103^131^[ADD] ParameterizedType parameterizedType =  ( ParameterizedType )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Type rawType = parameterizedType.getActualTypeArguments (  ) ;^113^^^^^103^131^[REPLACE] Type rawType = parameterizedType.getRawType (  ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 4 ) ;^124^125^^^^103^131^[REPLACE] Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return ;^117^^^^^103^131^[REPLACE] throw buildUnexpectedTypeError ( rawType, Class.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return isAssignableFrom  (    (  Type  )   cls  )  ;  ;^106^^^^^103^131^[REPLACE] return  ( Class<?> )  type;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof ParameterizedType )  {^107^^^^^103^131^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof GenericArrayType )  {^118^^^^^103^131^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 2 ) ;^124^125^^^^103^131^[REPLACE] Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^return ;^128^129^^^^103^131^[REPLACE] throw buildUnexpectedTypeError ( type, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Type rawType = parameterizedType .getRawType ( rawType )  ;^113^^^^^103^131^[REPLACE] Type rawType = parameterizedType.getRawType (  ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! type instanceof Class<?> )  {^114^^^^^103^131^[REPLACE] if  ( rawType instanceof Class<?> )  {^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[ADD]^^114^115^116^^^103^131^[ADD] if  ( rawType instanceof Class<?> )  { return  ( Class<?> )  rawType; }^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 - 2 ) ;^124^125^^^^103^131^[REPLACE] Object rawArrayType = Array.newInstance ( getRawType ( genericArrayType.getGenericComponentType (  )  ) , 0 ) ;^[METHOD] getRawType [TYPE] Class [PARAMETER] Type type [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType parameterizedType  [TYPE]  Type rawType  superclass  type  [TYPE]  Class rawType  subclass  [TYPE]  Object rawArrayType  [TYPE]  GenericArrayType genericArrayType  [TYPE]  boolean false  true 
[REPLACE]^if  ( from != this )  {^158^^^^^157^178^[REPLACE] if  ( from == null )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[ADD]^^158^159^160^^^157^178^[ADD] if  ( from == null )  { return false; }^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return true;^159^^^^^157^178^[REPLACE] return false;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.equals ( superclass )  )  {^162^^^^^157^178^[REPLACE] if  ( type.equals ( from )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return false;^163^^^^^157^178^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return true;  ;^163^^^^^157^178^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^if   (  superclass instanceof Class<?>  )   {  ;^166^^^^^157^178^[REPLACE] if  ( type instanceof Class<?> )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^}  else {^168^^^^^157^178^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof GenericArrayType )  {^171^^^^^157^178^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[ADD]^^175^176^^^^171^177^[ADD] throw buildUnexpectedTypeError ( type, Class.class, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return   isAssignableFrom ( from,  ( GenericArrayType )  type ) ;^172^173^^^^157^178^[REPLACE] return rawType.isAssignableFrom ( getRawType ( from )  ) && isAssignableFrom ( from,  ( GenericArrayType )  type ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return rawType.isAssignableFrom ( getRawType ( superclass )  ) || isAssignableFrom ( from,  ( GenericArrayType )  type ) ;^172^173^^^^157^178^[REPLACE] return rawType.isAssignableFrom ( getRawType ( from )  ) && isAssignableFrom ( from,  ( GenericArrayType )  type ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^throw buildUnexpectedTypeError ( type, class, class )  ;^175^176^^^^157^178^[REPLACE] throw buildUnexpectedTypeError ( type, Class.class, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return isAssignableFrom ( from,  ( ParameterizedType )  type,  new String, Type> ( typeVarMap )   ) ;^169^170^^^^157^178^[REPLACE] return isAssignableFrom ( from,  ( ParameterizedType )  type, new HashMap<String, Type> (  )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^}  else {^171^^^^^157^178^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return ;^175^176^^^^171^177^[REPLACE] throw buildUnexpectedTypeError ( type, Class.class, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return ;^175^176^^^^157^178^[REPLACE] throw buildUnexpectedTypeError ( type, Class.class, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return rawType.isAssignableFrom ( getRawType ( superclass )  ) ;^167^^^^^157^178^[REPLACE] return rawType.isAssignableFrom ( getRawType ( from )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof ParameterizedType )  {^168^^^^^157^178^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return rawType.isAssignableFrom ( getRawType ( from )  ) ;^172^173^^^^157^178^[REPLACE] return rawType.isAssignableFrom ( getRawType ( from )  ) && isAssignableFrom ( from,  ( GenericArrayType )  type ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^return rawType .isAssignableFrom ( from , 1 , null )  ;^167^^^^^157^178^[REPLACE] return rawType.isAssignableFrom ( getRawType ( from )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[ADD]^^175^176^^^^157^178^[ADD] throw buildUnexpectedTypeError ( type, Class.class, ParameterizedType.class, GenericArrayType.class ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  type  [TYPE]  Class cls  rawType  subclass  [TYPE]  boolean false  true 
[REPLACE]^Type itype  ;^192^^^^^191^210^[REPLACE] Type toGenericComponentType = to.getGenericComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! toGenericComponentType instanceof ParameterizedType )  {^193^^^^^191^210^[REPLACE] if  ( toGenericComponentType instanceof ParameterizedType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^Type t = from;t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;^193^194^195^196^^191^210^[ADD] if  ( toGenericComponentType instanceof ParameterizedType )  { Type t = from; if  ( from instanceof GenericArrayType )  { t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! from instanceof GenericArrayType )  {^195^^^^^191^210^[REPLACE] if  ( from instanceof GenericArrayType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;Class<?> classType =  ( Class<?> )  from;^195^196^197^198^^191^210^[ADD] if  ( from instanceof GenericArrayType )  { t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ; } else if  ( from instanceof Class<?> )  { Class<?> classType =  ( Class<?> )  from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( ! from instanceof Class<?> )  {^197^^^^^191^210^[REPLACE] } else if  ( from instanceof Class<?> )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^classType =  0.getComponentType (  ) ;^200^^^^^191^210^[REPLACE] classType = classType.getComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^t =  null;^202^^^^^191^210^[REPLACE] t = classType;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^Type itype  ;^198^^^^^191^210^[REPLACE] Class<?> classType =  ( Class<?> )  from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^^200^^^^^191^210^[ADD] classType = classType.getComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^t =   (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;^196^^^^^191^210^[REPLACE] t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! from instanceof Class<?> )  {^197^^^^^191^210^[REPLACE] } else if  ( from instanceof Class<?> )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^classType =  true.getComponentType (  ) ;^200^^^^^191^210^[REPLACE] classType = classType.getComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^t =  false;^202^^^^^191^210^[REPLACE] t = classType;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^^198^^^^^191^210^[ADD] Class<?> classType =  ( Class<?> )  from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^^196^^^^^191^210^[ADD] t =  (  ( GenericArrayType )  from ) .getGenericComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^t =  this;^202^^^^^191^210^[REPLACE] t = classType;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^return isAssignableFrom ( t,  ( ParameterizedType )  toGenericComponentType,  new String, Type> ( typeVarMap )   ) ;^204^205^^^^191^210^[REPLACE] return isAssignableFrom ( t,  ( ParameterizedType )  toGenericComponentType, new HashMap<String, Type> (  )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^Type t = toGenericComponentType;^194^^^^^191^210^[REPLACE] Type t = from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^}  else {^197^^^^^191^210^[REPLACE] } else if  ( from instanceof Class<?> )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^}   Class<?> classType =  ( Class<?> )  from;classType = classType.getComponentType (  ) ;^197^198^199^200^201^191^210^[ADD] else if  ( from instanceof Class<?> )  { Class<?> classType =  ( Class<?> )  from; while  ( classType.isArray (  )  )  { classType = classType.getComponentType (  ) ; }^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^classType =  null.getComponentType (  ) ;^200^^^^^191^210^[REPLACE] classType = classType.getComponentType (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^^202^^^^^191^210^[ADD] t = classType;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^t =  1;^202^^^^^191^210^[REPLACE] t = classType;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! toGenericComponentType instanceof Class<?> )  {^197^^^^^191^210^[REPLACE] } else if  ( from instanceof Class<?> )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[ADD]^^194^^^^^191^210^[ADD] Type t = from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^return false;^209^^^^^191^210^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from GenericArrayType to [CLASS] TypeToken SimpleTypeToken   [TYPE]  Type from  rawType  superclass  t  toGenericComponentType  type  [TYPE]  Class classType  cls  rawType  subclass  [TYPE]  GenericArrayType to  [TYPE]  boolean false  true 
[REPLACE]^if  ( from != null )  {^219^^^^^217^267^[REPLACE] if  ( from == null )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return true;^220^^^^^217^267^[REPLACE] return false;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if  ( to .getClass (  )   )  {^223^^^^^217^267^[REPLACE] if  ( to.equals ( from )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^223^224^225^^^217^267^[ADD] if  ( to.equals ( from )  )  { return true; }^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return true;  ;^224^^^^^217^267^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Class<?> clazz = getRawType ( toGenericComponentType ) ;^228^^^^^217^267^[REPLACE] Class<?> clazz = getRawType ( from ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^229^^^^^217^267^[ADD] ParameterizedType ptype = null;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^} else if   (  type instanceof ParameterizedType  )   {  ;^230^^^^^217^267^[REPLACE] if  ( from instanceof ParameterizedType )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^231^^^^^217^267^[ADD] ptype =  ( ParameterizedType )  from;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if  ( ptype == false )  {^235^^^^^217^267^[REPLACE] if  ( ptype != null )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if  ( typeEquals ( ptype, to, this )  )  {^249^^^^^217^267^[REPLACE] if  ( typeEquals ( ptype, to, typeVarMap )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return false;^250^^^^^217^267^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^arg =  null.get ( v.getName (  )  ) ;^243^^^^^217^267^[REPLACE] arg = typeVarMap.get ( v.getName (  )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^TypeVariable<?>[] tParams = clazz.getTypeParameters (  ) ;^236^237^^^^217^267^[ADD] Type[] tArgs = ptype.getActualTypeArguments (  ) ; TypeVariable<?>[] tParams = clazz.getTypeParameters (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^TypeVariable<?>[] tParams = null.getTypeParameters (  ) ;^237^^^^^217^267^[REPLACE] TypeVariable<?>[] tParams = clazz.getTypeParameters (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^238^239^240^241^242^217^267^[ADD] for  ( int i = 0; i < tArgs.length; i++ )  { Type arg = tArgs[i]; TypeVariable<?> var = tParams[i]; while  ( arg instanceof TypeVariable<?> )  { TypeVariable<?> v =  ( TypeVariable<?> )  arg;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type t = from  ;^239^^^^^217^267^[REPLACE] Type arg = tArgs[i];^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type arg = tArgs[i]  ;^240^^^^^217^267^[REPLACE] TypeVariable<?> var = tParams[i];^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^242^^^^^217^267^[ADD] TypeVariable<?> v =  ( TypeVariable<?> )  arg;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if   (  o == null  )   {  ;^249^^^^^217^267^[REPLACE] if  ( typeEquals ( ptype, to, typeVarMap )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return true;  ;^250^^^^^217^267^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^243^^^^^217^267^[ADD] arg = typeVarMap.get ( v.getName (  )  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type[] tArgs = to.getActualTypeArguments (  ) ;^236^^^^^217^267^[REPLACE] Type[] tArgs = ptype.getActualTypeArguments (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^TypeVariable<?>[] tParams = this.getName (  ) ;^237^^^^^217^267^[REPLACE] TypeVariable<?>[] tParams = clazz.getTypeParameters (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < tArgs.length; i++ )  {^238^^^^^217^267^[REPLACE] for  ( int i = 0; i < tArgs.length; i++ )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^240^^^^^217^267^[ADD] TypeVariable<?> var = tParams[i];^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type itype  ;^242^^^^^217^267^[REPLACE] TypeVariable<?> v =  ( TypeVariable<?> )  arg;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if  ( isAssignableFrom ( itype, ptype, new HashMap<String, Type> ( typeVarMap )  )  )  {^255^^^^^217^267^[REPLACE] if  ( isAssignableFrom ( itype, to, new HashMap<String, Type> ( typeVarMap )  )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return false;^256^^^^^217^267^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[ADD]^^254^255^256^257^^217^267^[ADD] for  ( Type itype : clazz.getGenericInterfaces (  )  )  { if  ( isAssignableFrom ( itype, to, new HashMap<String, Type> ( typeVarMap )  )  )  { return true; }^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type t = from  ;^254^^^^^217^267^[REPLACE] for  ( Type itype : clazz.getGenericInterfaces (  )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^Type sType = null.getGenericSuperclass (  ) ;^261^^^^^217^267^[REPLACE] Type sType = clazz.getGenericSuperclass (  ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^if  ( isAssignableFrom ( sType, ptype, new HashMap<String, Type> ( typeVarMap )  )  )  {^262^^^^^217^267^[REPLACE] if  ( isAssignableFrom ( sType, to, new HashMap<String, Type> ( typeVarMap )  )  )  {^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return false;^263^^^^^217^267^[REPLACE] return true;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
[REPLACE]^return true;^266^^^^^217^267^[REPLACE] return false;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type from ParameterizedType to Type> typeVarMap [CLASS] TypeToken SimpleTypeToken   [TYPE]  ParameterizedType ptype  to  [TYPE]  Type arg  from  itype  rawType  sType  superclass  t  toGenericComponentType  type  [TYPE]  boolean false  true  [TYPE]  TypeVariable v  var  [TYPE]  Type[] tArgs  [TYPE]  Class classType  clazz  cls  rawType  subclass  [TYPE]  TypeVariable[] tParams  [TYPE]  Map typeVarMap  [TYPE]  int i 
