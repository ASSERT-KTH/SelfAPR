[REPLACE]^private  Writer out;^126^^^^^^^[REPLACE] private final Writer out;^ [CLASS] JsonWriter  
[REPLACE]^private final List<JsonScope> stack  = null ;^128^^^^^^^[REPLACE] private final List<JsonScope> stack = new ArrayList<JsonScope> (  ) ;^ [CLASS] JsonWriter  
[REPLACE]^private String separator  = null ;^142^^^^^^^[REPLACE] private String separator = ":";^ [CLASS] JsonWriter  
[REPLACE]^out .close ( null , 0 , name )  ;^425^^^^^424^484^[REPLACE] out.write ( "\"" ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^if   (  context == JsonScope.NONEMPTY_OBJECT  )   {  ;^467^^^^^424^484^[REPLACE] if  ( htmlSafe )  {^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.write ( "\"" )  ;^470^^^^^467^471^[REPLACE] out.write ( c ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.append ( String.format ( "\\u%04x",  ( int )  c )  ) ;^468^^^^^424^484^[REPLACE] out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.write ( format ( "\\u%04x",  (  ( int )   ( c )  )  )  )  ;^468^^^^^424^484^[REPLACE] out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^if  ( c  !=  0x1F )  {^475^^^^^424^484^[REPLACE] if  ( c <= 0x1F )  {^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[ADD]^out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ;^475^476^477^478^479^424^484^[ADD] if  ( c <= 0x1F )  { out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ; } else { out.write ( c ) ; }^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.write ( "\"" )  ;^478^^^^^475^479^[REPLACE] out.write ( c ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.append ( String.format ( "\\u%04x",  ( int )  c )  ) ;^476^^^^^424^484^[REPLACE] out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.write ( format ( "\\u%04x",  (  ( int )   ( c )  )  )  )  ;^476^^^^^424^484^[REPLACE] out.write ( String.format ( "\\u%04x",  ( int )  c )  ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^for  ( int i = 0 , length = value.length (  ) ; i < length; i++ )  {^426^^^^^424^484^[REPLACE] for  ( int i = 0, length = value.length (  ) ; i < length; i++ )  {^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^for  ( int i = 0, length = separator.length (  ) ; i < length; i++ )  {^426^^^^^424^484^[REPLACE] for  ( int i = 0, length = value.length (  ) ; i < length; i++ )  {^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^char c = value .format ( value , null )  ;^427^^^^^424^484^[REPLACE] char c = value.charAt ( i ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^out.write ( "null" )  ;^483^^^^^424^484^[REPLACE] out.write ( "\"" ) ;^[METHOD] string [TYPE] void [PARAMETER] String value [CLASS] JsonWriter   [TYPE]  char c  [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out  [TYPE]  int i  length 
[REPLACE]^if  ( lenient && !lenient )  {^523^^^^^520^552^[REPLACE] if  ( !lenient && !root )  {^[METHOD] beforeValue [TYPE] void [PARAMETER] boolean root [CLASS] JsonWriter   [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  root  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out 
[REPLACE]^throw new IllegalStateException (  ( "Nesting problem: " +  ( stack )  )  )  ;^524^525^^^^520^552^[REPLACE] throw new IllegalStateException ( "JSON must start with an array or an object." ) ;^[METHOD] beforeValue [TYPE] void [PARAMETER] boolean root [CLASS] JsonWriter   [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  root  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out 
[ADD]^^546^547^^^^520^552^[ADD] throw new IllegalStateException ( "JSON must have only one top-level value." ) ;^[METHOD] beforeValue [TYPE] void [PARAMETER] boolean root [CLASS] JsonWriter   [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  root  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out 
[ADD]^^550^^^^^520^552^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] beforeValue [TYPE] void [PARAMETER] boolean root [CLASS] JsonWriter   [TYPE]  List stack  [TYPE]  boolean false  htmlSafe  lenient  root  true  value  [TYPE]  String closeBracket  indent  name  openBracket  separator  string  value  [TYPE]  Writer out 
