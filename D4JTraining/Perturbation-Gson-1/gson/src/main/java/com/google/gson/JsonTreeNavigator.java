[REPLACE]^private  JsonElementVisitor visitor;^28^^^^^^^[REPLACE] private final JsonElementVisitor visitor;^ [CLASS] JsonTreeNavigator  
[REPLACE]^private  boolean visitNulls;^29^^^^^^^[REPLACE] private final boolean visitNulls;^ [CLASS] JsonTreeNavigator  
[REPLACE]^if   (  child.isJsonNull  (    )    )   {  ;^37^^^^^36^64^[REPLACE] if  ( element.isJsonNull (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^37^38^39^40^41^36^64^[ADD] if  ( element.isJsonNull (  )  )  { visitor.visitNull (  ) ; } else if  ( element.isJsonArray (  )  )  { JsonArray array = element.getAsJsonArray (  ) ; visitor.startArray ( array ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^} else if   (  element.isJsonObject  (    )    )   {  ;^39^^^^^36^64^[REPLACE] } else if  ( element.isJsonArray (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^}  else {^50^^^^^36^64^[REPLACE] } else if  ( element.isJsonObject (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.visitPrimitive ( element.getAsJsonArray (  )  ) ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited || visitNulls )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^isFirst = false;^56^57^58^^^36^64^[ADD] if  ( visited && isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^57^^^^^36^64^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^57^^^^^50^61^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^51^52^^^^50^61^[ADD] JsonObject object = element.getAsJsonObject (  ) ; visitor.startObject ( object ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean isFirst = false;^53^^^^^50^61^[REPLACE] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonElement child  ;^54^^^^^50^61^[REPLACE] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, 0.getKey (  ) , member.getValue (  ) , isFirst ) ;^55^^^^^50^61^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  (  visited )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element.getAsJsonArray (  )  ;^51^^^^^50^61^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , visited ) ;^55^^^^^50^61^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited )  {^45^^^^^36^64^[REPLACE] if  ( isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^46^^^^^36^64^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^46^^^^^39^50^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element .isJsonArray (  )  ;^40^^^^^39^50^[REPLACE] JsonArray array = element.getAsJsonArray (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean isFirst = false;^42^^^^^39^50^[REPLACE] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray childAsArray = child.getAsJsonArray (  )  ;^43^^^^^39^50^[REPLACE] for  ( JsonElement child : array )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor .visitArrayMember ( array , array , true )  ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.visitPrimitive ( element .getAsJsonArray (  )   ) ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^62^^^^^50^63^[ADD] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visitNulls || visited )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^57^^^^^50^61^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^54^55^56^57^58^50^61^[ADD] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  { boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ; if  ( visited && isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, null.getKey (  ) , member.getValue (  ) , isFirst ) ;^55^^^^^50^61^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited || isFirst )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REMOVE]^if  ( isFirst )  {     isFirst = false; }^56^^^^^36^64^[REMOVE] ^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^54^55^56^57^58^39^50^[ADD] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  { boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ; if  ( visited && isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^57^^^^^39^50^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element.isJsonArray (  ) ;^40^^^^^39^50^[REPLACE] JsonArray array = element.getAsJsonArray (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^43^44^45^46^47^39^50^[ADD] for  ( JsonElement child : array )  { visitChild ( array, child, isFirst ) ; if  ( isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^51^52^^^^39^50^[ADD] JsonObject object = element.getAsJsonObject (  ) ; visitor.startObject ( object ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean isFirst = false;^53^^^^^39^50^[REPLACE] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonElement child  ;^54^^^^^39^50^[REPLACE] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member .getValue (  )  , member.getValue (  ) , visited ) ;^55^^^^^39^50^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor .visitNullArrayMember ( array , visited )  ;^38^^^^^36^64^[REPLACE] visitor.visitNull (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^}  if  ( element.isJsonArray (  )  )  {^39^^^^^36^64^[REPLACE] } else if  ( element.isJsonArray (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^}  if  ( element.isJsonObject (  )  )  {^50^^^^^36^64^[REPLACE] } else if  ( element.isJsonObject (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^}   JsonObject object = element.getAsJsonObject (  ) ;visitor.startObject ( object ) ;boolean isFirst = true;^50^51^52^53^^36^64^[ADD] else if  ( element.isJsonObject (  )  )  { JsonObject object = element.getAsJsonObject (  ) ; visitor.startObject ( object ) ; boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonObject object = element.isJsonObject (  ) ;^51^^^^^50^61^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^53^^^^^50^61^[ADD] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, true.getKey (  ) , member.getValue (  ) , isFirst ) ;^55^^^^^50^61^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^57^^^^^36^64^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member.getKey (  ) , member.getKey (  ) , isFirst ) ;^55^^^^^50^61^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^46^^^^^36^64^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^46^^^^^39^50^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visitNulls )  {^45^^^^^36^64^[REPLACE] if  ( isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^45^46^47^^^36^64^[ADD] if  ( isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^} else if   (  element.isJsonArray  (    )    )   {  ;^50^^^^^36^64^[REPLACE] } else if  ( element.isJsonObject (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^element.getAsJsonObject (  )  ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  (  isFirst )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^for  ( Map.Entry<String, JsonElement> null : object.entrySet (  )  )  {^54^^^^^50^61^[REPLACE] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonObject object = element .isJsonObject (  )  ;^51^^^^^50^61^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^55^^^^^50^61^[ADD] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited ) {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^42^^^^^39^50^[ADD] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonObject object = element.isJsonObject (  ) ;^51^^^^^39^50^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonElement child  ;^55^^^^^39^50^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if   (  element.isJsonNull  (    )    )   {  ;^71^^^^^70^90^[REPLACE] if  ( child.isJsonNull (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^} else if   (  element.isJsonArray  (    )    )   {  ;^78^^^^^70^90^[REPLACE] } else if  ( child.isJsonArray (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^}  else {^82^^^^^70^90^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor .visitObjectMember ( childAsObject , childName , childAsArray , visited )  ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^87^^^^^82^88^[ADD] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( parent, childName, child.getAsJsonArray (  ) , isFirst ) ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^83^^^^^70^90^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^83^84^^^^70^90^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child.isJsonArray (  ) ;^79^^^^^70^90^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^}  if  ( child.isJsonObject (  )  )  {^82^^^^^70^90^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^}   JsonObject childAsObject = child.getAsJsonObject (  ) ;visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ;navigate ( childAsObject ) ;^82^83^84^85^^70^90^[ADD] else if  ( child.isJsonObject (  )  )  { JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ; navigate ( childAsObject ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitNullObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , visited ) ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^element.getAsJsonPrimitive (  )  ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child.isJsonObject (  ) ;^83^^^^^70^90^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonArray array = element.getAsJsonArray (  )  ;^79^^^^^70^90^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^} else if   (  element.isJsonObject  (    )    )   {  ;^72^^^^^70^90^[REPLACE] if  ( visitNulls )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^visitor.visitNullObjectMember ( parent, childName, isFirst ) ;navigate ( child.getAsJsonNull (  )  ) ;return false;^72^73^74^75^76^70^90^[ADD] if  ( visitNulls )  { visitor.visitNullObjectMember ( parent, childName, isFirst ) ; navigate ( child.getAsJsonNull (  )  ) ; } else { return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return true;^76^^^^^72^77^[REPLACE] return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, childAsObject, isFirst )  ;^73^^^^^70^90^[REPLACE] visitor.visitNullObjectMember ( parent, childName, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^child.getAsJsonNull (  )  ;^74^^^^^70^90^[REPLACE] navigate ( child.getAsJsonNull (  )  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^child.getAsJsonPrimitive (  )  ;^74^^^^^70^90^[REPLACE] navigate ( child.getAsJsonNull (  )  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return true;^76^^^^^70^90^[REPLACE] return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return false;  ;^76^^^^^72^77^[REPLACE] return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REMOVE]^visitor.visitArrayMember ( parent, childAsObject, isFirst )  ;^73^^^^^70^90^[REMOVE] ^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( parent, childName, child .getAsJsonArray (  )  , isFirst ) ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child .isJsonObject (  )  ;^83^^^^^70^90^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^79^80^^^^70^90^[ADD] JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^} else if   (  element.isJsonObject  (    )    )   {  ;^82^^^^^70^90^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst )  ;^87^^^^^82^88^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return false;  ;^76^^^^^70^90^[REPLACE] return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child.getAsJsonArray (  )  ;^83^^^^^70^90^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return true;  ;^89^^^^^70^90^[REPLACE] return true;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
