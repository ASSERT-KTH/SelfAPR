[REPLACE]^if  ( ! type instanceof Class )  {^44^^^^^43^54^[REPLACE] if  ( type instanceof Class )  {^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^return Object.class;return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];^44^45^46^47^^43^54^[ADD] if  ( type instanceof Class )  { return Object.class; } else if  ( type instanceof ParameterizedType )  { return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^46^^^^^43^54^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType ) type ) .getGenericComponentType (  )  ) ;^46^47^48^49^^43^54^[ADD] else if  ( type instanceof ParameterizedType )  { return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0]; } else if  ( type instanceof GenericArrayType )  { return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType ) type ) .getGenericComponentType (  )  ) ;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( ! type instanceof GenericArrayType )  {^48^^^^^43^54^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return ;^51^52^^^^43^54^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  (  ( Class<?> ) type ) .isArray (  ) ;^49^^^^^43^54^[REPLACE] return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType ) type ) .getGenericComponentType (  )  ) ;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " ;^51^52^^^^43^54^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  (  ( ParameterizedType ) type ) .getRawType (  ) [0];^47^^^^^43^54^[REPLACE] return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof GenericArrayType )  {^48^^^^^43^54^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^^51^52^^^^43^54^[ADD] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return false;^45^^^^^43^54^[REPLACE] return Object.class;^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REMOVE]^if  ( type instanceof Class )  {     return class; }else     if  ( type instanceof ParameterizedType )  {         return  (  ( ParameterizedType )   ( type )  ) .getActualTypeArguments (  ) [0];     }else         if  ( type instanceof GenericArrayType )  {             return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType )   ( type )  ) .getGenericComponentType (  )  ) ;         }else {             throw new IllegalArgumentException (  (  (  ( "Type \'" + type )  + "\' is not a Class, " )  + "ParameterizedType, or GenericArrayType. Can't extract class." )  ) ;         }^46^^^^^43^54^[REMOVE] ^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^48^^^^^43^54^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  (  ( ParameterizedType ) type )  .getRawType (  )  [0];^47^^^^^43^54^[REPLACE] return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];^[METHOD] getActualTypeForFirstTypeVariable [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! type instanceof Class )  {^57^^^^^56^64^[REPLACE] if  ( type instanceof Class )  {^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! type instanceof GenericArrayType )  {^59^^^^^56^64^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return false;^59^60^61^62^63^56^64^[ADD] else if  ( type instanceof GenericArrayType )  { return true; } else { return false; }^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return true;^62^^^^^56^64^[REPLACE] return false;^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return false;^60^^^^^56^64^[REPLACE] return true;^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  (  ( ParameterizedType ) type ) .getActualTypeArguments (  ) [0];^58^^^^^56^64^[REPLACE] return  (  ( Class<?> ) type ) .isArray (  ) ;^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( ! type instanceof GenericArrayType )  {^59^^^^^56^64^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  (  ( Class<?> ) type )  .isArray ( type )  ;^58^^^^^56^64^[REPLACE] return  (  ( Class<?> ) type ) .isArray (  ) ;^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! type instanceof Class )  {^70^^^^^69^83^[REPLACE] if  ( type instanceof Class )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  else {^72^^^^^69^83^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  else {^75^^^^^69^83^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REMOVE]^if  ( type instanceof Class )  {     return class; }else     if  ( type instanceof ParameterizedType )  {         return  (  ( ParameterizedType )   ( type )  ) .getActualTypeArguments (  ) [0];     }else         if  ( type instanceof GenericArrayType )  {             return getActualTypeForFirstTypeVariable (  (  ( GenericArrayType )   ( type )  ) .getGenericComponentType (  )  ) ;         }else {             throw new IllegalArgumentException (  (  (  ( "Type \'" + type )  + "\' is not a Class, " )  + "ParameterizedType, or GenericArrayType. Can't extract class." )  ) ;         }^75^^^^^69^83^[REMOVE] ^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " ;^80^81^^^^69^83^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( false ) ;^78^^^^^69^83^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^ParameterizedType actualType =  ( ParameterizedType ) type;^76^^^^^69^83^[REPLACE] GenericArrayType actualType =  ( GenericArrayType )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^GenericArrayType actualType =  ( GenericArrayType )  type;^77^^^^^69^83^[REPLACE] Class<?> rawClass = toRawClass ( actualType.getGenericComponentType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^77^^^^^69^83^[ADD] Class<?> rawClass = toRawClass ( actualType.getGenericComponentType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( null ) ;^78^^^^^69^83^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return  (  ( Class<?> ) type ) .isArray (  ) ;^74^^^^^69^83^[REPLACE] return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^GenericArrayType actualType =  ( GenericArrayType )  type;^73^^^^^69^83^[REPLACE] ParameterizedType actualType =  ( ParameterizedType ) type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^} else if  ( ! type instanceof GenericArrayType )  {^75^^^^^69^83^[REPLACE] } else if  ( type instanceof GenericArrayType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[ADD]^^80^81^^^^69^83^[ADD] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return  (  ( Class<?> ) type ) .isArray (  ) ;^71^^^^^69^83^[REPLACE] return  ( Class<?> )  type;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^}  if  ( ! type instanceof ParameterizedType )  {^72^^^^^69^83^[REPLACE] } else if  ( type instanceof ParameterizedType )  {^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return wrapWithArray ( 1 ) ;^78^^^^^69^83^[REPLACE] return wrapWithArray ( rawClass ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return ;^80^81^^^^69^83^[REPLACE] throw new IllegalArgumentException ( "Type \'" + type + "\' is not a Class, " + "ParameterizedType, or GenericArrayType. Can't extract class." ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return toRawClass ( actualType .getActualTypeArguments (  )   ) ;^74^^^^^69^83^[REPLACE] return toRawClass ( actualType.getRawType (  )  ) ;^[METHOD] toRawClass [TYPE] Class [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  ParameterizedType actualType  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Class rawClass  [TYPE]  GenericArrayType actualType 
[REPLACE]^return Array.newInstance ( rawClass, 0 / 0 ) .getClass (  ) ;^86^^^^^85^87^[REPLACE] return Array.newInstance ( rawClass, 0 ) .getClass (  ) ;^[METHOD] wrapWithArray [TYPE] Class [PARAMETER] Class<?> rawClass [CLASS] TypeUtils   [TYPE]  boolean false  true  [TYPE]  Class rawClass 
