[REPLACE]^data   ;^21^^^^^20^28^[REPLACE] Validate.notNull ( data ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String data [CLASS] TokenQueue   [TYPE]  char c  [TYPE]  String data  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  char[] chars 
[REPLACE]^queue ;^23^^^^^20^28^[REPLACE] queue = new LinkedList<Character> (  ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String data [CLASS] TokenQueue   [TYPE]  char c  [TYPE]  String data  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  char[] chars 
[REPLACE]^char[] chars = seq.toCharArray (  ) ;^24^^^^^20^28^[REPLACE] char[] chars = data.toCharArray (  ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String data [CLASS] TokenQueue   [TYPE]  char c  [TYPE]  String data  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  char[] chars 
[REPLACE]^for  ( char c : chars )  { queue.add ( c ) ;^25^^^^^20^28^[REPLACE] for  ( char c : chars )  {^[METHOD] <init> [TYPE] String) [PARAMETER] String data [CLASS] TokenQueue   [TYPE]  char c  [TYPE]  String data  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  char[] chars 
[REPLACE]^return queue .toString (  )  ;^35^^^^^34^36^[REPLACE] return queue.isEmpty (  ) ;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return queue .removeFirst (  )  ;^43^^^^^42^44^[REPLACE] return queue.peek (  ) ;^[METHOD] peek [TYPE] Character [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^queue.add ( c ) ;^51^^^^^50^52^[REPLACE] queue.addFirst ( c ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] Character c [CLASS] TokenQueue   [TYPE]  Character c  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^char[] chars = seq.length (  ) ;^59^^^^^58^63^[REPLACE] char[] chars = seq.toCharArray (  ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  [TYPE]  char[] chars 
[REPLACE]^for  ( int i = chars.length %  2 - 1; i >= 0; i-- )  {^60^^^^^58^63^[REPLACE] for  ( int i = chars.length - 1; i >= 0; i-- )  {^[METHOD] addFirst [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  [TYPE]  char[] chars 
[REPLACE]^queue.addFirst ( c ) ;^61^^^^^58^63^[REPLACE] addFirst ( chars[i] ) ;^[METHOD] addFirst [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  [TYPE]  char[] chars 
[REPLACE]^for  ( int i = chars.length - 5 - 1; i >= 0; i-- )  {^60^^^^^58^63^[REPLACE] for  ( int i = chars.length - 1; i >= 0; i-- )  {^[METHOD] addFirst [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  [TYPE]  char[] chars 
[REPLACE]^int len = seq.toCharArray (  ) ;^71^^^^^70^83^[REPLACE] int len = seq.length (  ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^if  ( len > queue.size (  )  %  0.5  ) return false;^72^73^^^^70^83^[REPLACE] if  ( len > queue.size (  )  ) return false;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^return true;^73^^^^^70^83^[REPLACE] return false;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^List<Character> chars = queue.subList ( 0 - 1, len ) ;^74^^^^^70^83^[REPLACE] List<Character> chars = queue.subList ( 0, len ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[ADD]^^74^^^^^70^83^[ADD] List<Character> chars = queue.subList ( 0, len ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^char[] chars = seq.toCharArray (  ) ;^75^^^^^70^83^[REPLACE] char[] seqChars = seq.toCharArray (  ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^if  ( !found.equals ( check )  ) return true;^79^80^^^^70^83^[REPLACE] if  ( !found.equals ( check )  ) return false;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^return true;^80^^^^^70^83^[REPLACE] return false;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^for  ( int i = 0; i  >  len; i++ )  {^76^^^^^70^83^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^if  ( !found.toLowerCase ( check )  ) return true;^79^80^^^^70^83^[REPLACE] if  ( !found.equals ( check )  ) return false;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^Character found = Character.toLowerCase ( null.get ( i )  ) ;^77^^^^^70^83^[REPLACE] Character found = Character.toLowerCase ( chars.get ( i )  ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^Character check = Character .isWhitespace ( null )  ;^78^^^^^70^83^[REPLACE] Character check = Character.toLowerCase ( seqChars[i] ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^for  ( int i = 2; i < len; i++ )  {^76^^^^^70^83^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^Character found = Character.toLowerCase ( this.get ( i )  ) ;^77^^^^^70^83^[REPLACE] Character found = Character.toLowerCase ( chars.get ( i )  ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^Character check = Character .isWhitespace ( true )  ;^78^^^^^70^83^[REPLACE] Character check = Character.toLowerCase ( seqChars[i] ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^return false;^82^^^^^70^83^[REPLACE] return true;^[METHOD] matches [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  Character check  found  [TYPE]  List chars  [TYPE]  String seq  [TYPE]  LinkedList queue  [TYPE]  int i  len  [TYPE]  char[] seqChars 
[REPLACE]^if  ( matches ( s )  ) return false;^92^93^^^^90^96^[REPLACE] if  ( matches ( s )  ) return true;^[METHOD] matchesAny [TYPE] boolean [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  LinkedList queue 
[REPLACE]^return false;^93^^^^^90^96^[REPLACE] return true;^[METHOD] matchesAny [TYPE] boolean [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  LinkedList queue 
[REPLACE]^for  ( char c : chars )  { queue.add ( c ) ;^91^^^^^90^96^[REPLACE] for  ( String s : seq )  {^[METHOD] matchesAny [TYPE] boolean [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  LinkedList queue 
[REPLACE]^return true;^95^^^^^90^96^[REPLACE] return false;^[METHOD] matchesAny [TYPE] boolean [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  LinkedList queue 
[REPLACE]^if  ( !found.equals ( check )  ) return false;^105^^^^^104^111^[REPLACE] if  ( matches ( seq )  )  {^[METHOD] matchChomp [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String seq  [TYPE]  boolean false  true 
[REPLACE]^return true;^109^^^^^104^111^[REPLACE] return false;^[METHOD] matchChomp [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String seq  [TYPE]  boolean false  true 
[REPLACE]^return false;^107^^^^^104^111^[REPLACE] return true;^[METHOD] matchChomp [TYPE] boolean [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String seq  [TYPE]  boolean false  true 
[REPLACE]^return !queue.isEmpty (  )  &&   queue.peek (  )  ;^118^^^^^117^119^[REPLACE] return !queue.isEmpty (  )  && Character.isWhitespace ( queue.peek (  )  ) ;^[METHOD] matchesWhitespace [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^returntrue (  )  ;^126^^^^^125^127^[REPLACE] return !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  ) ;^[METHOD] matchesWord [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return queue.LinkedList (  ) ;^134^^^^^133^135^[REPLACE] return queue.removeFirst (  ) ;^[METHOD] consume [TYPE] Character [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^145^146^^^^144^153^[REPLACE] if  ( !matches ( seq )  ) throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REMOVE]^if  ( len >  ( queue.size (  )  )  )      throw new IllegalStateException ( "Queue not long enough to consume sequence" ) ;^145^^^^^144^153^[REMOVE] ^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^return ;^146^^^^^144^153^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[ADD]^^146^^^^^144^153^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^int len = seq.toCharArray (  ) ;^147^^^^^144^153^[REPLACE] int len = seq.length (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[ADD]^^147^^^^^144^153^[ADD] int len = seq.length (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^if  ( len > queue.size (  )  + 1 ) throw new IllegalStateException   ( " " )   ;^148^149^^^^144^153^[REPLACE] if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[ADD]^^148^149^150^151^152^144^153^[ADD] if  ( len > queue.size (  )  ) throw new IllegalStateException  (" ")  ; for  ( int i = 0; i < len; i++ )  { consume (  ) ; }^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^return ;^149^^^^^144^153^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[ADD]^^149^^^^^144^153^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 2; i  >=  len; i++ )  {^150^^^^^144^153^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[ADD]^^150^151^152^^^144^153^[ADD] for  ( int i = 0; i < len; i++ )  { consume (  ) ; }^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^consume ( seq ) ;^151^^^^^144^153^[REPLACE] consume (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^150^^^^^144^153^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] consume [TYPE] void [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  String seq  [TYPE]  boolean false  true  [TYPE]  LinkedList queue  [TYPE]  int i  len 
[REPLACE]^return data;^161^^^^^160^162^[REPLACE] return consumeToAny ( seq ) ;^[METHOD] consumeTo [TYPE] String [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String seq  [TYPE]  boolean false  true 
[REPLACE]^StringBuilder wordAccum = new StringBuilder (  ) ;^170^^^^^169^175^[REPLACE] StringBuilder accum = new StringBuilder (  ) ;^[METHOD] consumeToAny [TYPE] String [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue 
[REPLACE]^while  (true (  )  ;^171^172^^^^169^175^[REPLACE] while  ( !queue.isEmpty (  )  && !matchesAny ( seq )  ) accum.append ( consume (  )  ) ;^[METHOD] consumeToAny [TYPE] String [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue 
[ADD]^^171^172^^^^169^175^[ADD] while  ( !queue.isEmpty (  )  && !matchesAny ( seq )  ) accum.append ( consume (  )  ) ;^[METHOD] consumeToAny [TYPE] String [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue 
[REPLACE]^while  ( !queue.isEmpty (  )  )  { accum.append ( consume (  )  ) ;^172^^^^^169^175^[REPLACE] accum.append ( consume (  )  ) ;^[METHOD] consumeToAny [TYPE] String [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue 
[REPLACE]^return accum .StringBuilder (  )  ;^174^^^^^169^175^[REPLACE] return accum.toString (  ) ;^[METHOD] consumeToAny [TYPE] String [PARAMETER]  seq [CLASS] TokenQueue   [TYPE]  String[] seq  [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue 
[REPLACE]^List<Character> chars = queue.subList ( 0, len ) ;^186^^^^^185^189^[REPLACE] String data = consumeTo ( seq ) ;^[METHOD] chompTo [TYPE] String [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String data  seq  [TYPE]  boolean false  true 
[REPLACE]^consume ( seq ) ;^187^^^^^185^189^[REPLACE] matchChomp ( seq ) ;^[METHOD] chompTo [TYPE] String [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String data  seq  [TYPE]  boolean false  true 
[REPLACE]^return consumeToAny ( seq ) ;^188^^^^^185^189^[REPLACE] return data;^[METHOD] chompTo [TYPE] String [PARAMETER] String seq [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  String data  seq  [TYPE]  boolean false  true 
[REPLACE]^boolean seen = true;^195^^^^^194^201^[REPLACE] boolean seen = false;^[METHOD] consumeWhitespace [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  seen  true 
[REPLACE]^while  ( !queue.isEmpty (  )   ||  Character.isWhitespace ( queue.peek (  )  )  )  {^196^^^^^194^201^[REPLACE] while  ( !queue.isEmpty (  )  && Character.isWhitespace ( queue.peek (  )  )  )  {^[METHOD] consumeWhitespace [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  seen  true 
[REPLACE]^seen = false;^198^^^^^194^201^[REPLACE] seen = true;^[METHOD] consumeWhitespace [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  seen  true 
[REPLACE]^return data;^200^^^^^194^201^[REPLACE] return seen;^[METHOD] consumeWhitespace [TYPE] boolean [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  seen  true 
[REPLACE]^StringBuilder accum = new StringBuilder (  ) ;^208^^^^^207^213^[REPLACE] StringBuilder wordAccum = new StringBuilder (  ) ;^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^while  ( !queue.isEmpty (  )   ^  Character.isLetterOrDigit ( queue.peek (  )  )  )  {^209^^^^^207^213^[REPLACE] while  ( !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  )  )  {^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[ADD]^^209^210^^^^207^213^[ADD] while  ( !queue.isEmpty (  )  && Character.isLetterOrDigit ( queue.peek (  )  )  )  { wordAccum.append ( queue.removeFirst (  )  ) ;^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^wordAccum.append ( queue .addFirst ( 1 )   ) ;^210^^^^^207^213^[REPLACE] wordAccum.append ( queue.removeFirst (  )  ) ;^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^wordAccum.append ( queue .addFirst ( null )   ) ;^210^^^^^207^213^[REPLACE] wordAccum.append ( queue.removeFirst (  )  ) ;^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return wordAccum .StringBuilder (  )  ;^212^^^^^207^213^[REPLACE] return wordAccum.toString (  ) ;^[METHOD] consumeWord [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder wordAccum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^StringBuilder wordAccum = new StringBuilder (  ) ;^221^^^^^220^228^[REPLACE] StringBuilder accum = new StringBuilder (  ) ;^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[REPLACE]^Character c = queue.size (  ) ;^222^^^^^220^228^[REPLACE] Character c = queue.peek (  ) ;^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[REPLACE]^while  ( !queue.isEmpty (  )  ||  ( Character.isLetterOrDigit ( c )  || c.equals ( '-' )  || c.equals ( '_' )  )  )  {^223^^^^^220^228^[REPLACE] while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( c )  || c.equals ( '-' )  || c.equals ( '_' )  )  )  {^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[REPLACE]^c  =  c ;^225^^^^^220^228^[REPLACE] c = queue.peek (  ) ;^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[ADD]^^225^^^^^220^228^[ADD] c = queue.peek (  ) ;^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[REPLACE]^return accum .StringBuilder (  )  ;^227^^^^^220^228^[REPLACE] return accum.toString (  ) ;^[METHOD] consumeCssIdentifier [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  boolean false  true  [TYPE]  StringBuilder accum  [TYPE]  Character c  [TYPE]  LinkedList queue 
[REPLACE]^StringBuilder wordAccum = new StringBuilder (  ) ;^235^^^^^234^240^[REPLACE] StringBuilder accum = new StringBuilder (  ) ;^[METHOD] consumeAttributeKey [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^while  ( !queue.isEmpty (  )   !=   ( Character.isWhitespace ( queue.peek (  )  )  || matchesAny ( "-", "_", ":" )  )  )  {^236^^^^^234^240^[REPLACE] while  ( !queue.isEmpty (  )  &&  ( Character.isLetterOrDigit ( queue.peek (  )  )  || matchesAny ( "-", "_", ":" )  )  )  {^[METHOD] consumeAttributeKey [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^accum .StringBuilder (  )  ;^237^^^^^234^240^[REPLACE] accum.append ( queue.removeFirst (  )  ) ;^[METHOD] consumeAttributeKey [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^accum.append ( queue.LinkedList (  )  ) ;^237^^^^^234^240^[REPLACE] accum.append ( queue.removeFirst (  )  ) ;^[METHOD] consumeAttributeKey [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return accum.StringBuilder (  ) ;^239^^^^^234^240^[REPLACE] return accum.toString (  ) ;^[METHOD] consumeAttributeKey [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^StringBuilder wordAccum = new StringBuilder (  ) ;^247^^^^^246^252^[REPLACE] StringBuilder accum = new StringBuilder (  ) ;^[METHOD] remainder [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[ADD]^^247^^^^^246^252^[ADD] StringBuilder accum = new StringBuilder (  ) ;^[METHOD] remainder [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^while  ( !queue.isEmpty (  )  )  { accum.append ( consume (  )  ) ;^249^^^^^246^252^[REPLACE] accum.append ( consume (  )  ) ;^[METHOD] remainder [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REMOVE]^while  ( !queue.isEmpty (  )  )  { accum.append ( consume (  )  ) ;^249^^^^^246^252^[REMOVE] ^[METHOD] remainder [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return accum .StringBuilder (  )  ;^251^^^^^246^252^[REPLACE] return accum.toString (  ) ;^[METHOD] remainder [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  StringBuilder accum  [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
[REPLACE]^return queue.isEmpty (  ) ;^255^^^^^254^256^[REPLACE] return queue.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] TokenQueue   [TYPE]  LinkedList queue  [TYPE]  boolean false  true 
