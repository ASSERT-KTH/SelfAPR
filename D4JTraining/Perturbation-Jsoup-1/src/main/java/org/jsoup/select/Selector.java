[REPLACE]^private final  String[] combinators = {",", ">", "+", "~", " "};^48^^^^^^^[REPLACE] private final static String[] combinators = {",", ">", "+", "~", " "};^ [CLASS] Selector SelectorParseException  
[REPLACE]^private  String query;^51^^^^^^^[REPLACE] private final String query;^ [CLASS] Selector SelectorParseException  
[REPLACE]^private  TokenQueue tq;^52^^^^^^^[REPLACE] private final TokenQueue tq;^ [CLASS] Selector SelectorParseException  
[REPLACE]^tq.consumeWord (  ) ;^94^^^^^93^122^[REPLACE] tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^94^^^^^93^122^[ADD] tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^} else if   (  tq.matchesAny  (  combinators  )    )   {  ;^96^^^^^93^122^[REPLACE] if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^select ( query, root )  ;^100^^^^^96^101^[REPLACE] addElements ( findElements (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REMOVE]^root.getElementsByIndexEquals ( consumeIndex (  )  )  ;^100^^^^^96^101^[REMOVE] ^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^allElements (  )  ;^100^^^^^96^101^[REPLACE] addElements ( findElements (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^100^^^^^96^101^[ADD] addElements ( findElements (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^elements.addAll ( output )  ;^97^^^^^93^122^[REPLACE] elements.add ( root ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consumeWord (  ) .toString (  )  ) ;^98^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consume (  ) .toString (  )  )  ;^98^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^} else if   (  tq.matchChomp  (  "."  )    )   {  ;^107^^^^^93^122^[REPLACE] if  ( tq.matchChomp ( "," )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  if  ( tq.matchesAny ( combinators )  )  {^112^^^^^93^122^[REPLACE] } else if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  else {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Element found = root.getElementById ( id )  ;^117^^^^^114^119^[REPLACE] Elements candidates = findElements (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator.equals ( " " )  ;^115^^^^^93^122^[REPLACE] combinator ( " " ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^117^^^^^93^122^[ADD] Elements candidates = findElements (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consumeWord (  ) .toString (  )  ) ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^113^^^^^93^122^[ADD] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^}   combinator ( " " ) ;Elements candidates = findElements (  ) ;intersectElements ( filterForSelf ( elements, candidates )  ) ;^114^115^116^117^118^93^122^[ADD] else if  ( seenWhite )  { combinator ( " " ) ; } else { Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Element found = root.getElementById ( id )  ;^117^^^^^93^122^[REPLACE] Elements candidates = findElements (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^String indexS = tq.chompTo ( " ) " ) .trim (  )  ;^109^^^^^93^122^[REPLACE] String subQuery = tq.chompTo ( "," ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^if   (  tq.matchesAny  (  combinators  )    )   {  ;^112^^^^^93^122^[REPLACE] } else if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^tq.consume (  ) .toString (  )  ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consume (  ) .toString (  )  )  ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^tq.consumeWord (  )  ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  if  ( seenWhite )  {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^boolean seenWhite = tq.consumeWord (  ) ;^105^^^^^93^122^[REPLACE] boolean seenWhite = tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^return byTag  (    )  ;  ;^121^^^^^93^122^[REPLACE] return new Elements ( elements ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^tq.consumeWord (  ) ;^125^^^^^124^141^[REPLACE] tq.consumeWhitespace (  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^String subQuery = tq.matchesAny ( combinators ) ;^126^^^^^124^141^[REPLACE] String subQuery = tq.consumeToAny ( combinators ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^Element p  ;^128^^^^^124^141^[REPLACE] Elements output;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^else if   (  combinator.equals  (  "+"  )    )  output = filterForAdjacentSiblings  (  elements, select  (  subQuery, root  )    )  ;  ;^129^130^^^^124^141^[REPLACE] if  ( combinator.equals ( ">" )  ) output = filterForChildren ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  ( combinator.equals ( "" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^133^134^^^^124^141^[REPLACE] else if  ( combinator.equals ( "+" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^return ;^138^^^^^124^141^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForDescendants ( elements, select ( subQuery, elements )  )  ;^136^^^^^124^141^[REPLACE] output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^136^^^^^124^141^[ADD] output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^138^^^^^124^141^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  )  ;^134^^^^^124^141^[REPLACE] output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  )  ;^132^^^^^124^141^[REPLACE] output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^else if  ( s.equals ( "" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^133^134^^^^124^141^[REPLACE] else if  ( combinator.equals ( "+" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^else if   (  combinator.equals  (  "+"  )    )  output = filterForAdjacentSiblings  (  elements, select  (  subQuery, root  )    )  ;  ;^135^136^^^^124^141^[REPLACE] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  (subQuery.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^135^136^^^^124^141^[REPLACE] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  )  ;^130^^^^^124^141^[REPLACE] output = filterForChildren ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^135^136^137^138^^124^141^[ADD] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; else throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^132^^^^^124^141^[ADD] output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^elements.addAll (  ) ; elements.addAll ( output ) ;^140^^^^^124^141^[REPLACE] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^elements.addAll ( add )  ;^140^^^^^124^141^[REPLACE] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^140^^^^^124^141^[ADD] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if   (  tq.matchChomp  (  ","  )    )   {  ;^144^^^^^143^163^[REPLACE] if  ( tq.matchChomp ( "#" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "." )  )  {     return byClass (  ) ; }else     if  ( tq.matchesWord (  )  )  {         return byTag (  ) ;     }else         if  ( tq.matchChomp ( "[" )  )  {             return byAttribute (  ) ;         }else             if  ( tq.matchChomp ( "*" )  )  {                 return allElements (  ) ;             }else                 if  ( tq.matchChomp ( ":lt ( " )  )  {                     return indexLessThan (  ) ;                 }else                     if  ( tq.matchChomp ( ":gt ( " )  )  {                         return indexGreaterThan (  ) ;                     }else                         if  ( tq.matchChomp ( ":eq ( " )  )  {                             return indexEquals (  ) ;                         }else {                             throw new SelectorParseException (  ( "Could not parse query " +  ( query )  )  ) ;                         }^144^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchesWord  (    )    )   {  ;^146^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "." )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byTag (  ) ;^146^147^148^149^^143^163^[ADD] else if  ( tq.matchChomp ( "." )  )  { return byClass (  ) ; } else if  ( tq.matchesWord (  )  )  { return byTag (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesWord (  )  )  {^148^^^^^143^163^[REPLACE] } else if  ( tq.matchesWord (  )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byAttribute (  ) ;^148^149^150^151^^143^163^[ADD] else if  ( tq.matchesWord (  )  )  { return byTag (  ) ; } else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return allElements (  ) ;^150^151^152^153^^143^163^[ADD] else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ; } else if  ( tq.matchChomp ( "*" )  )  { return allElements (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^152^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":lt ( " )  )  {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchChomp  (  "."  )    )   {  ;^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexGreaterThan (  ) ;return indexEquals (  ) ;^156^157^158^159^^143^163^[ADD] else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ; } else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^^161^^^^^158^162^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return indexEquals  (    )  ;  ;^159^^^^^143^163^[REPLACE] return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return ;^161^^^^^143^163^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return indexGreaterThan  (    )  ;  ;^157^^^^^143^163^[REPLACE] return indexGreaterThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchChomp  (  "."  )    )   {  ;^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return ;^161^^^^^158^162^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  )  ;^161^^^^^143^163^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return indexLessThan  (    )  ;  ;^155^^^^^143^163^[REPLACE] return indexLessThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^^161^^^^^143^163^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return allElements  (    )  ;  ;^153^^^^^143^163^[REPLACE] return allElements (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexLessThan (  ) ;return indexGreaterThan (  ) ;^154^155^156^157^^143^163^[ADD] else if  ( tq.matchChomp ( ":lt ( " )  )  { return indexLessThan (  ) ; } else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesAny ( ":gt ( " )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexEquals (  ) ;^156^157^158^159^^143^163^[ADD] else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ; } else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexEquals (  ) ;^158^159^160^161^162^143^163^[ADD] else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ; } else { throw new SelectorParseException  (" ")  ; }^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^158^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byAttribute  (    )  ;  ;^151^^^^^143^163^[REPLACE] return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( "*" )  )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return allElements (  ) ;return indexLessThan (  ) ;^152^153^154^155^^143^163^[ADD] else if  ( tq.matchChomp ( "*" )  )  { return allElements (  ) ; } else if  ( tq.matchChomp ( ":lt ( " )  )  { return indexLessThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":lt ( " )  )  {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesAny ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  )  ;^161^^^^^158^162^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchChomp  (  "."  )    )   {  ;^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":gt ( " )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag  (    )  ;  ;^149^^^^^143^163^[REPLACE] return byTag (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}^158^159^160^161^162^143^163^[ADD] else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ; } else { throw new SelectorParseException  (" ")  ; }^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchesWord  (    )    )   {  ;^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byClass  (    )  ;  ;^147^^^^^143^163^[REPLACE] return byClass (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^148^^^^^143^163^[REPLACE] } else if  ( tq.matchesWord (  )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byTag (  ) ;return byAttribute (  ) ;^148^149^150^151^^143^163^[ADD] else if  ( tq.matchesWord (  )  )  { return byTag (  ) ; } else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( "[" )  )  {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexGreaterThan (  ) ;^154^155^156^157^^143^163^[ADD] else if  ( tq.matchChomp ( ":lt ( " )  )  { return indexLessThan (  ) ; } else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^154^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if   (  tq.matchesWord  (    )    )   {  ;^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexLessThan (  ) ;^152^153^154^155^^143^163^[ADD] else if  ( tq.matchChomp ( "*" )  )  { return allElements (  ) ; } else if  ( tq.matchChomp ( ":lt ( " )  )  { return indexLessThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^156^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byId  (    )  ;  ;^145^^^^^143^163^[REPLACE] return byId (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^146^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "." )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byClass (  ) ;return byTag (  ) ;^146^147^148^149^^143^163^[ADD] else if  ( tq.matchChomp ( "." )  )  { return byClass (  ) ; } else if  ( tq.matchesWord (  )  )  { return byTag (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":gt ( " )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^150^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq .matchesWord (  )   {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   )  {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( "*" )  )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^String key = tq .consumeToAny ( combinators )  ;^199^^^^^198^223^[REPLACE] String key = tq.consumeToAny ( "=", "!=", "^=", "$=", "*=", "]" ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^notEmpty ( className )  ;^200^^^^^198^223^[REPLACE] Validate.notEmpty ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^200^^^^^198^223^[ADD] Validate.notEmpty ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if   (  tq.matchChomp  (  ","  )    )   {  ;^202^^^^^198^223^[REPLACE] if  ( tq.matchChomp ( "]" )  )  {^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if   (  tq.matchChomp  (  "$="  )    )  return root.getElementsByAttributeValueEnding  (  key, tq.chompTo  (  "]"  )    )  ;  ;^205^206^^^^202^222^[REPLACE] if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if   (  tq.matchChomp  (  "$="  )    )  return root.getElementsByAttributeValueEnding  (  key, tq.chompTo  (  "]"  )    )  ;  ;^217^218^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^217^218^^220^221^202^222^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return ;^221^^^^^202^222^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^221^^^^^202^222^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^215^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq .isEmpty (  )   ) ;^217^218^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^215^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( combinator )  ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^throw new SelectorParseException (  ( "Could not parse query " +  ( query )  )  )  ;^221^^^^^202^222^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^212^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.matchChomp ( "]" )  ) ;^214^215^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^214^215^^217^218^202^222^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^220^221^202^222^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.matchChomp ( "]" )  ) ;^212^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq.matchChomp ( "]" )  ) ;^215^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^209^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^211^212^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if   (  tq.matchChomp  (  "="  )    )  return root.getElementsByAttributeValue  (  key, tq.chompTo  (  "]"  )    )  ;  ;^214^215^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( query )  ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( key, tq.matchChomp ( "]" )  ) ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "*=" )  ) return root .getElementsByAttributeValueStarting ( className )  ;^217^218^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^217^^^^^202^222^[REMOVE] ^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.matchChomp ( "]" )  ) ;^212^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^214^215^^217^218^202^222^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq .isEmpty (  )   ) ;^215^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueNot ( subQuery, tq.matchChomp ( "]" )  ) ;^209^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^206^^^^^202^222^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.matchChomp ( "]" )  ) ;^218^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^214^215^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( combinator )  ;^215^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^212^^^^^202^222^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^211^212^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^214^215^^^^202^222^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( subQuery, tq.chompTo ( "]" )  ) ;^206^^^^^202^222^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( key ) ;^203^^^^^198^223^[REPLACE] return root.getElementsByAttribute ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( subQuery, tq.chompTo ( "]" )  ) ;^205^206^^^^198^223^[REPLACE] if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchesAny ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^208^209^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^221^^^^^198^223^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.matchChomp ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return ;^221^^^^^198^223^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq .isEmpty (  )   ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( key, tq.matchChomp ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^throw new SelectorParseException (  ( "Could not parse query " +  ( query )  )  )  ;^221^^^^^198^223^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if   (  tq.matchChomp  (  "$="  )    )  return root.getElementsByAttributeValueEnding  (  key, tq.chompTo  (  "]"  )    )  ;  ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^217^218^^220^221^198^223^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting  (  key, tq.chompTo  (  "]"  )    )  ;  ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.matchChomp ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^214^215^^217^218^198^223^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchesAny ( "*=" )  ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^220^221^198^223^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueNot ( subQuery, tq.chompTo ( "]" )  ) ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( subQuery, tq.chompTo ( "]" )  ) ;^206^^^^^198^223^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^214^215^^217^218^198^223^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( s )  ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^217^^^^^198^223^[REMOVE] ^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.matchChomp ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( key, tq .isEmpty (  )   ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttribute ( subQuery ) ;^203^^^^^198^223^[REPLACE] return root.getElementsByAttribute ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
