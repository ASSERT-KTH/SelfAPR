[REPLACE]^private final static String[] combinators ;^48^^^^^^^[REPLACE] private final static String[] combinators = {",", ">", "+", "~", " "};^ [CLASS] Selector SelectorParseException  
[REPLACE]^private  LinkedHashSet<Element> elements;^50^^^^^^^[REPLACE] private final LinkedHashSet<Element> elements;^ [CLASS] Selector SelectorParseException  
[REPLACE]^private  TokenQueue tq;^52^^^^^^^[REPLACE] private final TokenQueue tq;^ [CLASS] Selector SelectorParseException  
[REPLACE]^Validate .notEmpty ( query )  ;^55^^^^^54^64^[REPLACE] Validate.notNull ( query ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^query =  null.trim (  ) ;^56^^^^^54^64^[REPLACE] query = query.trim (  ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^Validate.notEmpty ( query ) ;^56^57^^^^54^64^[ADD] query = query.trim (  ) ; Validate.notEmpty ( query ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^Validate.isTrue ( query ) ;^57^^^^^54^64^[REPLACE] Validate.notEmpty ( query ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^Validate.notNull ( roots ) ;^58^^^^^54^64^[REPLACE] Validate.notNull ( root ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^^58^^^^^54^64^[ADD] Validate.notNull ( root ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^this.elements  = null ;^60^^^^^54^64^[REPLACE] this.elements = new LinkedHashSet<Element> (  ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^this.query =  null;^61^^^^^54^64^[REPLACE] this.query = query;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^this.root =  null;^62^^^^^54^64^[REPLACE] this.root = root;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^this.tq =  new TokenQueue ( null ) ;^63^^^^^54^64^[REPLACE] this.tq = new TokenQueue ( query ) ;^[METHOD] <init> [TYPE] Element) [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^query = query.trim (  ) ;^333^^^^^332^334^[REPLACE] super ( s ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String s [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  s  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^^333^^^^^332^334^[ADD] super ( s ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String s [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  s  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^73^^^^^72^74^[REPLACE] return new Selector ( query, root ) .select (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] String query Element root [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String query  s  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^query   ;^83^^^^^82^91^[REPLACE] Validate.notEmpty ( query ) ;^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[REPLACE]^Validate.notEmpty ( this ) ;^84^^^^^82^91^[REPLACE] Validate.notNull ( roots ) ;^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[REPLACE]^Elements candidates = findElements (  ) ;^85^^^^^82^91^[REPLACE] LinkedHashSet<Element> elements = new LinkedHashSet<Element> (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[REPLACE]^for  ( Element root : roots )  { elements.addAll ( select ( query, root )  ) ;^87^^^^^82^91^[REPLACE] for  ( Element root : roots )  {^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[ADD]^^87^88^89^^^82^91^[ADD] for  ( Element root : roots )  { elements.addAll ( select ( query, root )  ) ; }^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[REPLACE]^return new Elements ( true ) ;^90^^^^^82^91^[REPLACE] return new Elements ( elements ) ;^[METHOD] select [TYPE] Elements [PARAMETER] String query Element> roots [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Iterable roots  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s 
[REPLACE]^tq.consumeWord (  ) ;^94^^^^^93^122^[REPLACE] tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^} else if  ( tq.matchesAny ( combinators )  )  {^96^^^^^93^122^[REPLACE] if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Elements candidates = findElements (  ) ;^100^^^^^96^101^[REPLACE] addElements ( findElements (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^100^^^^^96^101^[ADD] addElements ( findElements (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^elements.addAll ( root ) ;^97^^^^^93^122^[REPLACE] elements.add ( root ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consume (  ) .equals (  )  ) ;^98^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consumeWord (  ) .toString (  )  ) ;^98^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^while  ( !tq .chompTo ( s )   )  {^103^^^^^93^122^[REPLACE] while  ( !tq.isEmpty (  )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^while  ( !tq.chompTo (  )  )  {^108^^^^^93^122^[REPLACE] while  ( !tq.isEmpty (  )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^String subQuery = tq.consumeToAny ( combinators ) ;^109^^^^^93^122^[REPLACE] String subQuery = tq.chompTo ( "," ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^} else if  ( tq.matchChomp ( "." )  )  {^107^^^^^93^122^[REPLACE] if  ( tq.matchChomp ( "," )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  else {^112^^^^^93^122^[REPLACE] } else if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^}   combinator ( " " ) ;^112^113^114^115^^93^122^[ADD] else if  ( tq.matchesAny ( combinators )  )  { combinator ( tq.consume (  ) .toString (  )  ) ; } else if  ( seenWhite )  { combinator ( " " ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^} else if  ( true )  {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^}   combinator ( " " ) ;Elements candidates = findElements (  ) ;intersectElements ( filterForSelf ( elements, candidates )  ) ;^114^115^116^117^118^93^122^[ADD] else if  ( seenWhite )  { combinator ( " " ) ; } else { Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Elements output = new Elements (  ) ;^117^^^^^114^119^[REPLACE] Elements candidates = findElements (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Validate.notNull ( root ) ;^115^^^^^93^122^[REPLACE] combinator ( " " ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^Elements output = new Elements (  ) ;^117^^^^^93^122^[REPLACE] Elements candidates = findElements (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq .consumeWord (  )  .toString (  )  ) ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consume (  ) .equals (  )  ) ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  if  ( seenWhite )  {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^117^118^^^^114^119^[ADD] Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^while  ( !tq .chompTo ( s )   )  {^108^^^^^93^122^[REPLACE] while  ( !tq.isEmpty (  )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^String subQuery = tq .isEmpty (  )  ;^109^^^^^93^122^[REPLACE] String subQuery = tq.chompTo ( "," ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^109^110^^^^93^122^[ADD] String subQuery = tq.chompTo ( "," ) ; elements.addAll ( select ( subQuery, root )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  if  ( tq.matchesAny ( combinators )  )  {^112^^^^^93^122^[REPLACE] } else if  ( tq.matchesAny ( combinators )  )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^}   combinator ( tq.consume (  ) .toString (  )  ) ;combinator ( " " ) ;^112^113^114^115^^93^122^[ADD] else if  ( tq.matchesAny ( combinators )  )  { combinator ( tq.consume (  ) .toString (  )  ) ; } else if  ( seenWhite )  { combinator ( " " ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^117^118^^^^93^122^[ADD] Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^combinator ( tq.consumeWord (  ) .toString (  )  ) ;^113^^^^^93^122^[REPLACE] combinator ( tq.consume (  ) .toString (  )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  if  ( true )  {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^boolean seenWhite = tq.consumeWord (  ) ;^105^^^^^93^122^[REPLACE] boolean seenWhite = tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^105^^^^^93^122^[ADD] boolean seenWhite = tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^}  else {^114^^^^^93^122^[REPLACE] } else if  ( seenWhite )  {^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^}   Elements candidates = findElements (  ) ;intersectElements ( filterForSelf ( elements, candidates )  ) ;^114^115^116^117^118^93^122^[ADD] else if  ( seenWhite )  { combinator ( " " ) ; } else { Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^intersectElements ( filterForSelf ( elements, candidates )  ) ;^117^118^^^^114^119^[ADD] Elements candidates = findElements (  ) ; intersectElements ( filterForSelf ( elements, candidates )  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REMOVE]^Validate.notNull ( root ) ;^115^^^^^93^122^[REMOVE] ^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[ADD]^^115^^^^^93^122^[ADD] combinator ( " " ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^boolean seenWhite = tq .consumeToAny ( combinators )  ;^105^^^^^93^122^[REPLACE] boolean seenWhite = tq.consumeWhitespace (  ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^return byTag (  ) ;^121^^^^^93^122^[REPLACE] return new Elements ( elements ) ;^[METHOD] select [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  seenWhite  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String query  s  subQuery  [TYPE]  Elements candidates 
[REPLACE]^tq.consumeWord (  ) ;^125^^^^^124^141^[REPLACE] tq.consumeWhitespace (  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^String subQuery = tq.matchesAny ( combinators ) ;^126^^^^^124^141^[REPLACE] String subQuery = tq.consumeToAny ( combinators ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^126^^^^^124^141^[ADD] String subQuery = tq.consumeToAny ( combinators ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^Elements output = new Elements (  ) ;^128^^^^^124^141^[REPLACE] Elements output;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^else if  ( combinator.equals ( "+" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^129^130^^^^124^141^[REPLACE] if  ( combinator.equals ( ">" )  ) output = filterForChildren ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  ( combinator.equals ( " " )  ) output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;^131^132^^^^124^141^[REPLACE] else if  ( combinator.equals ( " " )  ) output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^131^132^133^134^135^124^141^[ADD] else if  ( combinator.equals ( " " )  ) output = filterForDescendants ( elements, select ( subQuery, elements )  ) ; else if  ( combinator.equals ( "+" )  ) output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ; else if  ( combinator.equals ( "~" )  )^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^135^136^^^^124^141^[REPLACE] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^return ;^138^^^^^124^141^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForDescendants ( elements, select ( subQuery, elements )  ) ; ;^136^^^^^124^141^[REPLACE] output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^136^^^^^124^141^[ADD] output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^throw new SelectorParseException  (" ")  ; ;^138^^^^^124^141^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^138^^^^^124^141^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; ;^134^^^^^124^141^[REPLACE] output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^134^^^^^124^141^[ADD] output = filterForAdjacentSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( s, root )  ) ;^135^136^^^^124^141^[REPLACE] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; ;^132^^^^^124^141^[REPLACE] output = filterForDescendants ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  (subQuery.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^135^136^^^^124^141^[REPLACE] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; ;^130^^^^^124^141^[REPLACE] output = filterForChildren ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^130^^^^^124^141^[ADD] output = filterForChildren ( elements, select ( subQuery, elements )  ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ;^135^136^137^138^^124^141^[ADD] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; else throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^135^136^137^138^^124^141^[ADD] else if  ( combinator.equals ( "~" )  ) output = filterForGeneralSiblings ( elements, select ( subQuery, root )  ) ; else throw new IllegalStateException  (" ")  ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^elements .addAll (  )  ; elements.addAll ( output ) ;^140^^^^^124^141^[REPLACE] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[ADD]^^140^^^^^124^141^[ADD] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^elements.clear (  ) ; elements.add ( output ) ;^140^^^^^124^141^[REPLACE] elements.clear (  ) ; elements.addAll ( output ) ;^[METHOD] combinator [TYPE] void [PARAMETER] String combinator [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  Elements output 
[REPLACE]^if  ( tq.matchChomp ( "," )  )  {^144^^^^^143^163^[REPLACE] if  ( tq.matchChomp ( "#" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesWord (  )  )  {^146^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "." )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^148^^^^^143^163^[REPLACE] } else if  ( tq.matchesWord (  )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byAttribute (  ) ;^148^149^150^151^^143^163^[ADD] else if  ( tq.matchesWord (  )  )  { return byTag (  ) ; } else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesWord (  )  )  {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return allElements (  ) ;^150^151^152^153^^143^163^[ADD] else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ; } else if  ( tq.matchChomp ( "*" )  )  { return allElements (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( "*" )  )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchChomp ( "." )  )  {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexEquals (  ) ;^156^157^158^159^^143^163^[ADD] else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ; } else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return ;^161^^^^^143^163^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^159^^^^^143^163^[REPLACE] return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^161^^^^^143^163^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^157^^^^^143^163^[REPLACE] return indexGreaterThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^158^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^155^^^^^143^163^[REPLACE] return indexLessThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchChomp ( "." )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexEquals (  ) ;^158^159^160^161^162^143^163^[ADD] else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ; } else { throw new SelectorParseException  (" ")  ; }^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^^161^^^^^143^163^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^153^^^^^143^163^[REPLACE] return allElements (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":lt ( " )  )  {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexLessThan (  ) ;return indexGreaterThan (  ) ;^154^155^156^157^^143^163^[ADD] else if  ( tq.matchChomp ( ":lt ( " )  )  { return indexLessThan (  ) ; } else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return indexGreaterThan (  ) ;return indexEquals (  ) ;^156^157^158^159^^143^163^[ADD] else if  ( tq.matchChomp ( ":gt ( " )  )  { return indexGreaterThan (  ) ; } else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}^158^159^160^161^162^143^163^[ADD] else if  ( tq.matchChomp ( ":eq ( " )  )  { return indexEquals (  ) ; } else { throw new SelectorParseException  (" ")  ; }^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^151^^^^^143^163^[REPLACE] return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesAny ( ":eq ( " )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( ":gt ( " )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchChomp ( "." )  )  {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byId (  ) ;^149^^^^^143^163^[REPLACE] return byTag (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( "[" )  )  {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( "*" )  )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^156^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   {^158^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":eq ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^147^^^^^143^163^[REPLACE] return byClass (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byTag (  ) ;return byAttribute (  ) ;^148^149^150^151^^143^163^[ADD] else if  ( tq.matchesWord (  )  )  { return byTag (  ) ; } else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":gt ( " )  )  {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  else {^150^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "[" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^152^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchesWord (  )  )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^return byTag (  ) ;^145^^^^^143^163^[REPLACE] return byId (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchChomp ( "." )  )  {^146^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "." )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   )  {^152^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( "*" )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq .matchesWord (  )   {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^154^^^^^143^163^[REMOVE] ^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq .matchesWord (  )   {^156^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":gt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^} else if  ( tq.matchChomp ( "." )  )  {^148^^^^^143^163^[REPLACE] } else if  ( tq.matchesWord (  )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^}  if  ( tq.matchesAny ( ":lt ( " )  )  {^154^^^^^143^163^[REPLACE] } else if  ( tq.matchChomp ( ":lt ( " )  )  {^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[ADD]^}   return byAttribute (  ) ;return allElements (  ) ;^150^151^152^153^^143^163^[ADD] else if  ( tq.matchChomp ( "[" )  )  { return byAttribute (  ) ; } else if  ( tq.matchChomp ( "*" )  )  { return allElements (  ) ;^[METHOD] findElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element root 
[REPLACE]^elements.addAll ( true ) ;^166^^^^^165^167^[REPLACE] elements.addAll ( add ) ;^[METHOD] addElements [TYPE] void [PARAMETER] Element> add [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  Collection add  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery 
[REPLACE]^elements .addAll (  )  ;^170^^^^^169^171^[REPLACE] elements.retainAll ( intersect ) ;^[METHOD] intersectElements [TYPE] void [PARAMETER] Element> intersect [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element root  [TYPE]  Collection intersect  [TYPE]  String[] combinators  [TYPE]  String combinator  query  s  subQuery 
[REPLACE]^String id = tq .consumeWhitespace (  )  ;^174^^^^^173^182^[REPLACE] String id = tq.consumeCssIdentifier (  ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^Validate.notEmpty ( combinator ) ;^175^^^^^173^182^[REPLACE] Validate.notEmpty ( id ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^Element found = root.getElementById ( combinator ) ;^177^^^^^173^182^[REPLACE] Element found = root.getElementById ( id ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^Elements candidates = findElements (  ) ;^178^^^^^173^182^[REPLACE] Elements byId = new Elements (  ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^if ( found == null ) byId.add ( found ) ;^179^180^^^^173^182^[REPLACE] if ( found != null ) byId.add ( found ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^byId .addAll (  )  ;^180^^^^^173^182^[REPLACE] byId.add ( found ) ;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REMOVE]^Validate.notNull ( root ) ;^180^^^^^173^182^[REMOVE] ^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^return byTag (  ) ;^181^^^^^173^182^[REPLACE] return byId;^[METHOD] byId [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String combinator  id  query  s  subQuery  [TYPE]  Elements byId 
[REPLACE]^String className = tq .consumeWhitespace (  )  ;^185^^^^^184^189^[REPLACE] String className = tq.consumeCssIdentifier (  ) ;^[METHOD] byClass [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^Validate.notEmpty ( s ) ;^186^^^^^184^189^[REPLACE] Validate.notEmpty ( className ) ;^[METHOD] byClass [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^186^^^^^184^189^[ADD] Validate.notEmpty ( className ) ;^[METHOD] byClass [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByTag ( s )  ;^188^^^^^184^189^[REPLACE] return root.getElementsByClass ( className ) ;^[METHOD] byClass [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^String tagName = tq.consume (  ) ;^192^^^^^191^196^[REPLACE] String tagName = tq.consumeWord (  ) ;^[METHOD] byTag [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^Validate.isTrue ( combinator ) ;^193^^^^^191^196^[REPLACE] Validate.notEmpty ( tagName ) ;^[METHOD] byTag [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByClass ( className ) ;^195^^^^^191^196^[REPLACE] return root.getElementsByTag ( tagName ) ;^[METHOD] byTag [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^String subQuery = tq.consumeToAny ( combinators ) ;^199^^^^^198^223^[REPLACE] String key = tq.consumeToAny ( "=", "!=", "^=", "$=", "*=", "]" ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^Validate.notEmpty ( subQuery ) ;^200^^^^^198^223^[REPLACE] Validate.notEmpty ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "," )  )  {^202^^^^^198^223^[REPLACE] if  ( tq.matchChomp ( "]" )  )  {^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttribute ( key ) ;return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^202^203^204^205^206^198^223^[ADD] if  ( tq.matchChomp ( "]" )  )  { return root.getElementsByAttribute ( key ) ; } else { if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^205^206^^^^198^223^[REPLACE] if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "!=" )  ) return root.getElementsByAttributeValueNot ( subQuery, tq.chompTo ( "]" )  ) ;^208^209^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchesAny ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchesAny ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^221^^^^^198^223^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.matchChomp ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( key, tq.matchChomp ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return ;^221^^^^^198^223^[REPLACE] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^221^^^^^198^223^[ADD] throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( key, tq .isEmpty (  )   ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( key, tq.matchChomp ( "]" )  ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( tagName )  ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^217^218^^220^221^198^223^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueNot ( subQuery, tq.chompTo ( "]" )  ) ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^^214^215^^217^218^198^223^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( key, tq .isEmpty (  )   ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^220^221^198^223^[ADD] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else throw new SelectorParseException  (" ")  ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.matchChomp ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueNot ( key )  ;^206^^^^^198^223^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchesAny ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^208^209^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( combinator )  ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq .matchesWord (  )   ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^206^^^^^198^223^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueNot ( key, tq.matchChomp ( "]" )  ) ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( id )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( key ) ;^203^^^^^198^223^[REPLACE] return root.getElementsByAttribute ( key ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^205^206^^208^209^198^223^[ADD] if  ( tq.matchChomp ( "=" )  ) return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "!=" )  ) return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REMOVE]^if  ( tq.matchChomp ( "*=" )  )      return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ; else     throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^211^^^^^198^223^[REMOVE] ^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchesAny ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( subQuery, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( className )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^214^215^^217^218^198^223^[ADD] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REMOVE]^if  ( tq.matchChomp ( "^=" )  )      return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else     if  ( tq.matchChomp ( "$=" )  )          return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;     else         if  ( tq.matchChomp ( "*=" )  )              return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;         else             throw new SelectorParseException (  ( "Could not parse attribute query " +  ( query )  )  ) ;^217^^^^^198^223^[REMOVE] ^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( subQuery )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq .matchesWord (  )   ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^217^218^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "*=" )  ) return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( tagName )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( s )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValue ( query )  ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( subQuery, tq.matchChomp ( "]" )  ) ;^212^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( subQuery, tq.chompTo ( "]" )  ) ;^206^^^^^198^223^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( subQuery, tq.chompTo ( "]" )  ) ;^211^212^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[ADD]^return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^211^212^^214^215^198^223^[ADD] else if  ( tq.matchChomp ( "^=" )  ) return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ; else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( query )  ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueEnding ( subQuery, tq.matchChomp ( "]" )  ) ;^215^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueNot ( subQuery, tq.matchChomp ( "]" )  ) ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementsByAttributeValueStarting ( subQuery )  ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueContaining ( subQuery, tq .isEmpty (  )   ) ;^218^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueContaining ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^else if  ( tq.matchesAny ( "$=" )  ) return root.getElementsByAttributeValueEnding ( subQuery, tq.chompTo ( "]" )  ) ;^214^215^^^^198^223^[REPLACE] else if  ( tq.matchChomp ( "$=" )  ) return root.getElementsByAttributeValueEnding ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValue ( key, tq.matchChomp ( "]" )  ) ;^206^^^^^198^223^[REPLACE] return root.getElementsByAttributeValue ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByAttributeValueStarting ( key, tq.chompTo ( "]" )  ) ;^209^^^^^198^223^[REPLACE] return root.getElementsByAttributeValueNot ( key, tq.chompTo ( "]" )  ) ;^[METHOD] byAttribute [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root .getElementById ( subQuery )  ;^226^^^^^225^227^[REPLACE] return root.getAllElements (  ) ;^[METHOD] allElements [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByIndexGreaterThan ( consumeIndex (  )  ) ;^231^^^^^230^232^[REPLACE] return root.getElementsByIndexLessThan ( consumeIndex (  )  ) ;^[METHOD] indexLessThan [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByIndexEquals ( consumeIndex (  )  ) ;^235^^^^^234^236^[REPLACE] return root.getElementsByIndexGreaterThan ( consumeIndex (  )  ) ;^[METHOD] indexGreaterThan [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^return root.getElementsByIndexGreaterThan ( consumeIndex (  )  ) ;^239^^^^^238^240^[REPLACE] return root.getElementsByIndexEquals ( consumeIndex (  )  ) ;^[METHOD] indexEquals [TYPE] Elements [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  key  query  s  subQuery  tagName  [TYPE]  boolean false  true  [TYPE]  Element found  root 
[REPLACE]^String indexS = tq.matchChomp ( " ) " ) .trim (  ) ;^243^^^^^242^248^[REPLACE] String indexS = tq.chompTo ( " ) " ) .trim (  ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[ADD]^^243^244^^^^242^248^[ADD] String indexS = tq.chompTo ( " ) " ) .trim (  ) ; Validate.isTrue ( StringUtils.isNumeric ( indexS ) , "Index must be numeric" ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[REPLACE]^Validate.isTrue ( StringUtils.isNumeric ( subQuery ) , "Index must be numeric" ) ;^244^^^^^242^248^[REPLACE] Validate.isTrue ( StringUtils.isNumeric ( indexS ) , "Index must be numeric" ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[ADD]^^244^245^^^^242^248^[ADD] Validate.isTrue ( StringUtils.isNumeric ( indexS ) , "Index must be numeric" ) ; int index = Integer.parseInt ( indexS ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[ADD]^int index = Integer.parseInt ( indexS ) ;^244^245^^^^242^248^[ADD] Validate.isTrue ( StringUtils.isNumeric ( indexS ) , "Index must be numeric" ) ; int index = Integer.parseInt ( indexS ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[REPLACE]^int index = Integer.parseInt ( subQuery ) ;^245^^^^^242^248^[REPLACE] int index = Integer.parseInt ( indexS ) ;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[REPLACE]^return byTag (  ) ;^247^^^^^242^248^[REPLACE] return index;^[METHOD] consumeIndex [TYPE] int [PARAMETER] [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element found  root  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  int index 
[REPLACE]^Elements candidates = findElements (  ) ;^252^^^^^251^262^[REPLACE] Elements children = new Elements (  ) ;^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^if  ( c.getAllElements (  )  == this ) {^255^^^^^251^262^[REPLACE] if  ( c.parent (  )  != null && c.parent (  ) .equals ( p )  )  {^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^children .addAll (  )  ;^256^^^^^251^262^[REPLACE] children.add ( c ) ;^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^253^^^^^251^262^[REPLACE] CHILD: for  ( Element c : candidates )  {^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^254^^^^^251^262^[REPLACE] for  ( Element p : parents )  {^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^return byTag (  ) ;^261^^^^^251^262^[REPLACE] return children;^[METHOD] filterForChildren [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^Elements candidates = findElements (  ) ;^267^^^^^266^280^[REPLACE] Elements children = new Elements (  ) ;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^267^^^^^266^280^[ADD] Elements children = new Elements (  ) ;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^if  ( c.getElementsByIndexEquals ( p )  )  {^271^^^^^266^280^[REPLACE] if  ( c.equals ( p )  )  {^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^found = false;^272^^^^^266^280^[REPLACE] found = true;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^if  ( found ) children.add ( c ) ;^276^277^^^^266^280^[REPLACE] if  ( !found ) children.add ( c ) ;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^Validate.notNull ( root ) ;^277^^^^^266^280^[REPLACE] children.add ( c ) ;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^272^^^^^266^280^[ADD] found = true;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^268^^^^^266^280^[REPLACE] CHILD: for  ( Element c : candidates )  {^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^268^269^270^271^272^266^280^[ADD] CHILD: for  ( Element c : candidates )  { boolean found = false; for  ( Element p : parents )  { if  ( c.equals ( p )  )  { found = true;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^boolean found = true;^269^^^^^266^280^[REPLACE] boolean found = false;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^269^^^^^266^280^[ADD] boolean found = false;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^270^^^^^266^280^[REPLACE] for  ( Element p : parents )  {^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^270^271^272^273^274^266^280^[ADD] for  ( Element p : parents )  { if  ( c.equals ( p )  )  { found = true; continue CHILD; }^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^return byTag (  ) ;^279^^^^^266^280^[REPLACE] return children;^[METHOD] filterForDescendants [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  found  true  [TYPE]  Element c  found  p  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^Elements candidates = findElements (  ) ;^284^^^^^283^297^[REPLACE] Elements siblings = new Elements (  ) ;^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^if  ( !e .getAllElements (  )  .equals ( c^287^288^^^^283^297^[REPLACE] if  ( !e.parent (  ) .equals ( c.parent (  )  )  ) continue;^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^if  ( previousSib == null ) {^290^^^^^283^297^[REPLACE] if  ( previousSib != null && previousSib.equals ( e )  )  {^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[ADD]^siblings.add ( c ) ;continue SIBLING;^290^291^292^293^^283^297^[ADD] if  ( previousSib != null && previousSib.equals ( e )  )  { siblings.add ( c ) ; continue SIBLING; }^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^siblings .addAll (  )  ;^291^^^^^283^297^[REPLACE] siblings.add ( c ) ;^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^285^^^^^283^297^[REPLACE] SIBLING: for  ( Element c: candidates )  {^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^for  ( Element e: elements )  { if  ( !e.parent (  ) .equals ( c.parent (  )  )  )^286^^^^^283^297^[REPLACE] for  ( Element e: elements )  {^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^Element previousSib = c.getAllElements (  ) ;^289^^^^^283^297^[REPLACE] Element previousSib = c.previousElementSibling (  ) ;^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^return byTag (  ) ;^296^^^^^283^297^[REPLACE] return siblings;^[METHOD] filterForAdjacentSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements siblings 
[REPLACE]^Elements candidates = findElements (  ) ;^301^^^^^300^315^[REPLACE] Elements output = new Elements (  ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^if  ( !e.getAllElements (  ) .equals ( c.parent (  )  )  ) continue;^304^305^^^^300^315^[REPLACE] if  ( !e.parent (  ) .equals ( c.parent (  )  )  ) continue;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[ADD]^^304^305^306^307^^300^315^[ADD] if  ( !e.parent (  ) .equals ( c.parent (  )  )  ) continue; int ePos = e.elementSiblingIndex (  ) ; int cPos = c.elementSiblingIndex (  ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^if  ( cPos  <  ePos )  {^308^^^^^300^315^[REPLACE] if  ( cPos > ePos )  {^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^query = query.trim (  ) ;^309^^^^^300^315^[REPLACE] output.add ( c ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^302^^^^^300^315^[REPLACE] SIBLING: for  ( Element c: candidates )  {^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^for  ( Element e: elements )  { if  ( !e.parent (  ) .equals ( c.parent (  )  )  )^303^^^^^300^315^[REPLACE] for  ( Element e: elements )  {^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^int previousSibPos = e.elementSiblingIndex (  ) ;^306^^^^^300^315^[REPLACE] int ePos = e.elementSiblingIndex (  ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^int cPos = c .getElementsByIndexLessThan ( cPos )  ;^307^^^^^300^315^[REPLACE] int cPos = c.elementSiblingIndex (  ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[ADD]^^307^^^^^300^315^[ADD] int cPos = c.elementSiblingIndex (  ) ;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^return byTag (  ) ;^314^^^^^300^315^[REPLACE] return output;^[METHOD] filterForGeneralSiblings [TYPE] Elements [PARAMETER] Element> elements Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  elements  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements output  [TYPE]  int cPos  ePos 
[REPLACE]^Elements candidates = findElements (  ) ;^319^^^^^318^329^[REPLACE] Elements children = new Elements (  ) ;^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^else if  ( combinator.equals ( "+" )  )^322^^^^^318^329^[REPLACE] if  ( c.equals ( p )  )  {^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^children.add ( c ) ;continue CHILD;^322^323^324^325^^318^329^[ADD] if  ( c.equals ( p )  )  { children.add ( c ) ; continue CHILD; }^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^children .addAll (  )  ;^323^^^^^318^329^[REPLACE] children.add ( c ) ;^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^320^^^^^318^329^[REPLACE] CHILD: for  ( Element c : candidates )  {^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^CHILD: for  ( Element c : candidates )  { boolean found = false;^321^^^^^318^329^[REPLACE] for  ( Element p : parents )  {^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[REPLACE]^return byTag (  ) ;^328^^^^^318^329^[REPLACE] return children;^[METHOD] filterForSelf [TYPE] Elements [PARAMETER] Element> parents Element> candidates [CLASS] Selector SelectorParseException   [TYPE]  LinkedHashSet elements  [TYPE]  TokenQueue tq  [TYPE]  boolean false  true  [TYPE]  Element c  e  found  p  previousSib  root  [TYPE]  Collection candidates  parents  [TYPE]  String[] combinators  [TYPE]  String className  combinator  id  indexS  key  query  s  subQuery  tagName  [TYPE]  Elements children 
[ADD]^^333^^^^^332^334^[ADD] super ( s ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String s [CLASS] SelectorParseException   [TYPE]  boolean false  true  [TYPE]  String s 
