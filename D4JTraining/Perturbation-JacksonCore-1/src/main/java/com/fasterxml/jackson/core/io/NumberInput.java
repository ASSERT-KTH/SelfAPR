[REPLACE]^public final static String NASTY_SMALL_DOUBLE  = null ;^11^^^^^^^[REPLACE] public final static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^ [CLASS] NumberInput  
[REPLACE]^final static long L_BILLION  = null ;^16^^^^^^^[REPLACE] final static long L_BILLION = 1000000000;^ [CLASS] NumberInput  
[REPLACE]^final  String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 0 ) ;^18^^^^^^^[REPLACE] final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^ [CLASS] NumberInput  
[REPLACE]^static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^19^^^^^^^[REPLACE] final static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^ [CLASS] NumberInput  
[REPLACE]^int num = digitChars[offset]  '0';^30^^^^^29^58^[REPLACE] int num = digitChars[offset] - '0';^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^len +=  null;^31^^^^^29^58^[REPLACE] len += offset;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^33^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^35^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^35^36^37^38^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             }         }     } }^43^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^47^48^49^^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^48^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^47^48^49^^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^46^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 11 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >> 4 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     } }^47^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^44^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^45^46^47^48^49^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 4 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^42^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^45^46^47^48^49^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^38^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >> 2 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^39^40^41^42^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^41^42^43^44^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^43^44^45^46^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 1 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 4 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 4 )    ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 3 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^36^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    (num ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 1 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 1 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^37^38^39^40^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  >=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 1 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  == offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 5 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    (num ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^40^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    ( digitChars[offset] - '0' ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                 if  (  ( ++offset )  < len )  {                     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                     if  (  ( ++offset )  < len )  {                         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                     }                 }             }         }     } }^41^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  >  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    (num ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 3 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 1 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    (num ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^34^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 2 )    ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^35^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             }         }     } }^39^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             }         }     } }^45^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 2 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^41^42^43^44^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  ==  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 2 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )    (num ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 4 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )    ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^39^40^41^42^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^43^44^45^46^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  == offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 2 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 4 )    (num ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if   (  offset < length  )   {  ;^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 2 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 2 )    (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )    ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 3 )    ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 1 )    (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 2 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 3 )    ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )    ( digitChars[offset] - '0' ) ;^34^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )    ( digitChars[offset] - '0' ) ;^36^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )    ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^return num;  ;^57^^^^^29^58^[REPLACE] return num;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^70^71^^^^65^115^[ADD] char c = str.charAt ( 0 ) ; int length = str.length (  ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int.trim = str.length (  ) ;^71^^^^^65^115^[REPLACE] int length = str.length (  ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^boolean negative =  ( c  ||  '-' ) ;^72^^^^^65^115^[REPLACE] boolean negative =  ( c == '-' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^73^^^^^65^115^[ADD] int offset = 1;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if   (  i < len  )   {  ;^76^^^^^65^115^[REPLACE] if  ( negative )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^76^77^78^79^^65^115^[ADD] if  ( negative )  { if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( num *  2 > 9 )  {^82^^^^^76^85^[REPLACE] if  ( length > 9 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^82^83^84^^^76^85^[ADD] if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^76^85^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( length (  )  == 1 || length (  )  > 10 )  {^77^^^^^65^115^[REPLACE] if  ( length == 1 || length > 10 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^78^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^80^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  length (  )  > 0 0 )  {^77^^^^^65^115^[REPLACE] if  ( length == 1 || length > 10 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^return Integer.parseInt ( str ) ;^77^78^79^^^65^115^[ADD] if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( length /  0.5  > 9 )  {^82^^^^^65^115^[REPLACE] if  ( length > 9 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^80^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^86^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^87^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int num = c  '0';^89^^^^^65^115^[REPLACE] int num = c - '0';^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if   (  ++offset < len  )   {  ;^90^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^c = str.charAt ( offset++ ) ;return Integer.parseInt ( str ) ;^90^91^92^93^94^65^115^[ADD] if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^92^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^93^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length - 1 )  {^96^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^c = str.charAt ( offset++ ) ;return Integer.parseInt ( str ) ;^96^97^98^99^100^65^115^[ADD] if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^98^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REMOVE]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^98^^^^^65^115^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length - 2 )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^106^107^108^^^65^115^[ADD] if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( null , num , num )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^105^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^} while  ( offset < length ) ;^109^110^^^^65^115^[ADD] num =  ( num * 10 )  +  ( c - '0' ) ; } while  ( offset < length ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' ) {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^97^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )    ( c - '0' ) ;^101^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^105^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 2 )    (num ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if   (  actualLen > cmpLen  )   return false;  ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' && c < '0' )  {^98^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^98^99^100^^^65^115^[ADD] if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length *  0.5  )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^103^104^105^106^107^65^115^[ADD] if  ( offset < length )  { do { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' && c < '0' )  {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )    ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^91^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )    (num ) ;^95^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' ) {^92^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REMOVE]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^92^^^^^65^115^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length + 3 )  {^96^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length /  2 )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( this , num , offset )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 4 )    ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( false , length , num )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^97^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^101^^^^^65^115^[ADD] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if   (  ++offset < len  )   {  ;^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 / 2 )    ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )    ( c - '0' ) ;^95^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )    (num ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return negative ? -num : length;^114^^^^^65^115^[REPLACE] return negative ? -num : num;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^String cmpStr = true ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^173^^^^^172^187^[REPLACE] String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int cmpLen = str.length (  ) ;^174^^^^^172^187^[REPLACE] int cmpLen = cmpStr.length (  ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[ADD]^^175^^^^^172^187^[ADD] int actualLen = numberStr.length (  ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen  !=  cmpLen )  return false;^176^^^^^172^187^[REPLACE] if  ( actualLen < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen < cmpLen )  return false;^176^^^^^172^187^[REPLACE] if  ( actualLen < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen  >=  cmpLen )  return false;^177^^^^^172^187^[REPLACE] if  ( actualLen > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[ADD]^^177^178^^180^181^172^187^[ADD] if  ( actualLen > cmpLen )  return false;  for  ( int i = 0; i < cmpLen; ++i )  { int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen > cmpLen )  return true;^177^^^^^172^187^[REPLACE] if  ( actualLen > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( diff  == i )  {^182^^^^^172^187^[REPLACE] if  ( diff != 0 )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return  (i  ;^183^^^^^172^187^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^for  ( int i = 2; i < cmpLen; ++i )  {^180^^^^^172^187^[REPLACE] for  ( int i = 0; i < cmpLen; ++i )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int diff = numberStr.charAt ( i )   str.charAt ( i ) ;^181^^^^^172^187^[REPLACE] int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return false;^186^^^^^172^187^[REPLACE] return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( input != null )  {^191^^^^^190^225^[REPLACE] if  ( input == null )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REMOVE]^if  ( c == '-' )  {     ++i; }^191^^^^^190^225^[REMOVE] ^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^192^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return defaultValue;  ;^192^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 1 )  ;^194^^^^^190^225^[REPLACE] input = input.trim (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^int len = cmpStr.length (  ) ;^195^^^^^190^225^[REPLACE] int len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( len  ||  3 )  {^196^^^^^190^225^[REPLACE] if  ( len == 0 )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return defaultValue;  ;^197^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^int i = 0 << 4;^200^^^^^190^225^[REPLACE] int i = 0;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( i  >=  len )  {^201^^^^^190^225^[REPLACE] if  ( i < len )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^201^202^203^204^205^190^225^[ADD] if  ( i < len )  { char c = input.charAt ( 0 ) ; if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c  ||  '+' )  {^203^^^^^190^225^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^} else if  ( c  !=  '-' )  {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REMOVE]^if  ( len == 0 )  {     return defaultValue; }^206^^^^^190^225^[REMOVE] ^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.trim (  )  ;^204^^^^^190^225^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^205^^^^^190^225^[ADD] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^}  else {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^len =  cmpStr.length (  ) ;^205^^^^^190^225^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^202^^^^^190^225^[ADD] char c = input.charAt ( 0 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c  &&  '+' )  {^203^^^^^190^225^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 0 ) ;^204^^^^^190^225^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^len =  null.length (  ) ;^205^^^^^190^225^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c > '9' ) {^213^^^^^190^225^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^return  ( int )  parseDouble ( input ) ;return defaultValue;^214^215^216^217^218^190^225^[ADD] try { return  ( int )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return  ( int )  parseDouble ( numberStr ) ;^215^^^^^190^225^[REPLACE] return  ( int )  parseDouble ( input ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^217^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^211^^^^^190^225^[ADD] char c = input.charAt ( i ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^return Integer.parseInt ( input ) ;^221^222^223^^^190^225^[ADD] try { return Integer.parseInt ( input ) ; } catch  ( NumberFormatException e )  { }^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return Integer.parseInt ( numberStr ) ;^222^^^^^190^225^[REPLACE] return Integer.parseInt ( input ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return defaultValue;  ;^224^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  (numberStr != false )  {^229^^^^^228^263^[REPLACE] if  ( input == null )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return defaultValue;  ;^230^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^230^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^232^^^^^228^263^[ADD] input = input.trim (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^233^^^^^228^263^[ADD] int len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( len  &&  0 )  {^234^^^^^228^263^[REPLACE] if  ( len == 0 )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^235^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return defaultValue;  ;^235^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^int i = 4;^238^^^^^228^263^[REPLACE] int i = 0;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( i  >  len )  {^239^^^^^228^263^[REPLACE] if  ( i < len )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^char c = input.charAt ( 0 ) ;input = input.substring ( 1 ) ;len = input.length (  ) ;^239^240^241^242^243^228^263^[ADD] if  ( i < len )  { char c = input.charAt ( 0 ) ; if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( c  !=  '+' )  {^241^^^^^228^263^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^}  if  ( c  ||  '-' )  {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.trim (  )  ;^242^^^^^228^263^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^len =  null.length (  ) ;^243^^^^^228^263^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^} else if  ( c  !=  '-' )  {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^len =  numberStr.length (  ) ;^243^^^^^228^263^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = str.charAt ( 0 )  ;^240^^^^^228^263^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( c  ||  '+' )  {^241^^^^^228^263^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^242^^^^^228^263^[ADD] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^243^^^^^228^263^[ADD] len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^}  if  ( c  ) {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.substring ( 1 - 1 ) ;^242^^^^^228^263^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = input.charAt ( 2 ) ;^240^^^^^228^263^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( c > '9' && c < '0' )  {^251^^^^^228^263^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^return  ( long )  parseDouble ( input ) ;return defaultValue;^252^253^254^255^256^228^263^[ADD] try { return  ( long )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return  ( long )  parseDouble ( numberStr ) ;^253^^^^^228^263^[REPLACE] return  ( long )  parseDouble ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^255^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = str.charAt ( 0 )  ;^249^^^^^228^263^[REPLACE] char c = input.charAt ( i ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^return Long.parseLong ( input ) ;^259^260^261^^^228^263^[ADD] try { return Long.parseLong ( input ) ; } catch  ( NumberFormatException e )  { }^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return Long.parseLong ( numberStr ) ;^260^^^^^228^263^[REPLACE] return Long.parseLong ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^262^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
