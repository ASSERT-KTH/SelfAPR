[REPLACE]^int[] mQuads;^10^^^^^^^[REPLACE] final int[] mQuads;^ [CLASS] NameN  
[REPLACE]^final  short  mQuadLen;^11^^^^^^^[REPLACE] final int mQuadLen;^ [CLASS] NameN  
[REPLACE]^if  (quadLen  ==  mQuadLen )  {^37^^^^^36^67^[REPLACE] if  ( qlen != mQuadLen )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return true;^38^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return false;  ;^38^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^if  ( quads[i]  ==  mQuads[i] )  {^62^^^^^36^67^[REPLACE] if  ( quads[i] != mQuads[i] )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REMOVE]^if  ( qlen !=  ( mQuadLen )  )  {     return false; }^62^^^^^36^67^[REMOVE] ^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return false;  ;^63^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return true;^63^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = 0 + 1; i < qlen; ++i )  {^61^^^^^36^67^[REPLACE] for  ( int i = 0; i < qlen; ++i )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return true;  ;^66^^^^^36^67^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
