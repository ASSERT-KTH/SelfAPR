[REPLACE]^protected  static int INT_TAB = '\t';^26^^^^^^^[REPLACE] protected final static int INT_TAB = '\t';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_LF  = null ;^27^^^^^^^[REPLACE] protected final static int INT_LF = '\n';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_CR ;^28^^^^^^^[REPLACE] protected final static int INT_CR = '\r';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_SPACE  = null ;^29^^^^^^^[REPLACE] protected final static int INT_SPACE = 0x0020;^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final  int INT_LBRACKET = '[';^32^^^^^^^[REPLACE] protected final static int INT_LBRACKET = '[';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_RBRACKET  = null ;^33^^^^^^^[REPLACE] protected final static int INT_RBRACKET = ']';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static int INT_LCURLY = '{';^34^^^^^^^[REPLACE] protected final static int INT_LCURLY = '{';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_RCURLY ;^35^^^^^^^[REPLACE] protected final static int INT_RCURLY = '}';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  long  INT_QUOTE = '"';^36^^^^^^^[REPLACE] protected final static int INT_QUOTE = '"';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  short  INT_BACKSLASH = '\\';^37^^^^^^^[REPLACE] protected final static int INT_BACKSLASH = '\\';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  long  INT_SLASH = '/';^38^^^^^^^[REPLACE] protected final static int INT_SLASH = '/';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static int INT_COLON = ':';^39^^^^^^^[REPLACE] protected final static int INT_COLON = ':';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_COMMA ;^40^^^^^^^[REPLACE] protected final static int INT_COMMA = ',';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_ASTERISK ;^41^^^^^^^[REPLACE] protected final static int INT_ASTERISK = '*';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_APOSTROPHE  = null ;^42^^^^^^^[REPLACE] protected final static int INT_APOSTROPHE = '\'';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_b  = null ;^45^^^^^^^[REPLACE] protected final static int INT_b = 'b';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_f ;^46^^^^^^^[REPLACE] protected final static int INT_f = 'f';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  short  INT_n = 'n';^47^^^^^^^[REPLACE] protected final static int INT_n = 'n';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_r ;^48^^^^^^^[REPLACE] protected final static int INT_r = 'r';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_t  = null ;^49^^^^^^^[REPLACE] protected final static int INT_t = 't';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static  long  INT_u = 'u';^50^^^^^^^[REPLACE] protected final static int INT_u = 'u';^ [CLASS] ParserMinimalBase  
[REPLACE]^super ( INT_u ) ;^80^^^^^79^81^[REPLACE] super ( features ) ;^[METHOD] <init> [TYPE] ParserMinimalBase(int) [PARAMETER] int features [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[ADD]^^80^^^^^79^81^[ADD] super ( features ) ;^[METHOD] <init> [TYPE] ParserMinimalBase(int) [PARAMETER] int features [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^return getLongValue (  ) ;^85^^^^^84^86^[REPLACE] return VersionUtil.versionFor ( getClass (  )  ) ;^[METHOD] version [TYPE] Version [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^return "'"+c+"'  ( code "+ch+" ) ";^112^^^^^111^113^[REPLACE] return _currToken;^[METHOD] getCurrentToken [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^return _currToken ;^117^^^^^116^118^[REPLACE] return _currToken != null;^[METHOD] hasCurrentToken [TYPE] boolean [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^String str = getText (  ) .trim (  ) ;^128^^^^^121^133^[REPLACE] JsonToken t = nextToken (  ) ;^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^if  (_lastClearedToken  &&  JsonToken.FIELD_NAME )  {^129^^^^^121^133^[REPLACE] if  ( t == JsonToken.FIELD_NAME )  {^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[ADD]^t = nextToken (  ) ;^129^130^131^^^121^133^[ADD] if  ( t == JsonToken.FIELD_NAME )  { t = nextToken (  ) ; }^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^t ;^130^^^^^121^133^[REPLACE] t = nextToken (  ) ;^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^t  = null ;^130^^^^^121^133^[REPLACE] t = nextToken (  ) ;^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^return _lastClearedToken;^132^^^^^121^133^[REPLACE] return t;^[METHOD] nextValue [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  [TYPE]  boolean false  true 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT ) {^139^140^^^^138^171^[REPLACE] if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^139^140^141^142^^138^171^[ADD] if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  { return this; }^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^141^^^^^139^142^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^141^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^int open = 4;^143^^^^^138^171^[REPLACE] int open = 1;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^143^^^^^138^171^[ADD] int open = 1;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^while  (_lastClearedTokenrue )  {^148^^^^^138^171^[REPLACE] while  ( true )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  (_lastClearedToken != this )  {^150^^^^^138^171^[REPLACE] if  ( t == null )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^156^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  (open  &&  0 )  {^165^^^^^138^171^[REPLACE] if  ( --open == 0 )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^165^166^167^^^138^171^[ADD] if  ( --open == 0 )  { return this; }^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^166^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^String str = getText (  ) .trim (  ) ;^149^^^^^138^171^[REPLACE] JsonToken t = nextToken (  ) ;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  ( _lastClearedToken != this )  {^150^^^^^138^171^[REPLACE] if  ( t == null )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  (open  !=  0 )  {^165^^^^^138^171^[REPLACE] if  ( --open == 0 )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^149^^^^^138^171^[ADD] JsonToken t = nextToken (  ) ;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  ( _currToken == null )  {^206^^^^^205^210^[REPLACE] if  ( _currToken != null )  {^[METHOD] clearCurrentToken [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^_lastClearedToken  =  _lastClearedToken ;^207^^^^^205^210^[REPLACE] _lastClearedToken = _currToken;^[METHOD] clearCurrentToken [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^_currToken = false;^208^^^^^205^210^[REPLACE] _currToken = null;^[METHOD] clearCurrentToken [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^_currToken = true;^208^^^^^205^210^[REPLACE] _currToken = null;^[METHOD] clearCurrentToken [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^208^^^^^205^210^[ADD] _currToken = null;^[METHOD] clearCurrentToken [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return getLongValue (  ) ;^214^^^^^213^215^[REPLACE] return _lastClearedToken;^[METHOD] getLastClearedToken [TYPE] JsonToken [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  ( _currToken == this  )  {^261^^^^^260^289^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[ADD]^^261^262^263^264^265^260^289^[ADD] if  ( _currToken != null )  { switch  ( _currToken )  { case VALUE_NUMBER_INT: return getIntValue (  )  != 0; case VALUE_TRUE:^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  ( ! value instanceof Boolean )  {^273^^^^^260^289^[REPLACE] if  ( value instanceof Boolean )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[ADD]^return  ( Boolean )  value;^273^274^275^^^260^289^[ADD] if  ( value instanceof Boolean )  { return  ( Boolean )  value; }^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return "'"+c+"'  ( code "+ch+" ) ";^274^^^^^260^289^[REPLACE] return  ( Boolean )  value;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  {^279^^^^^260^289^[REPLACE] if  ( "true".equals ( str )  )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;^280^^^^^260^289^[REPLACE] return true;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^282^^^^^260^289^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^283^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return getIntValue (  ) ;^264^^^^^260^289^[REPLACE] return getIntValue (  )  != 0;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;^266^^^^^260^289^[REPLACE] return true;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^269^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^272^^^^^260^289^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^278^^^^^260^289^[REPLACE] String str = getText (  ) .trim (  ) ;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[ADD]^^278^^^^^260^289^[ADD] String str = getText (  ) .trim (  ) ;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return getIntValue (  )   ;^264^^^^^260^289^[REPLACE] return getIntValue (  )  != 0;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^288^^^^^260^289^[REPLACE] return defaultValue;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  ( _currToken ==t )  {^295^^^^^294^321^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^307^^^^^294^321^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 1;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( ! value instanceof Number )  {^314^^^^^294^321^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return  (  ( Number )  value ) .longValue (  ) ;^315^^^^^294^321^[REPLACE] return  (  ( Number )  value ) .intValue (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return getLongValue (  ) ;^299^^^^^294^321^[REPLACE] return getIntValue (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 1 % 3;^301^^^^^294^321^[REPLACE] return 1;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 0L;^304^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 4;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return NumberInput.parseAsLong ( str, defaultValue ) ;^310^^^^^294^321^[REPLACE] return NumberInput.parseAsInt ( str, defaultValue ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return  (  ( Number )  value )  .longValue (  )  ;^315^^^^^294^321^[REPLACE] return  (  ( Number )  value ) .intValue (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^Object value = this.getEmbeddedObject (  ) ;^306^^^^^294^321^[REPLACE] String str = getText (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^313^^^^^294^321^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[ADD]^^313^^^^^294^321^[ADD] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 2;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REMOVE]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^314^^^^^294^321^[REMOVE] ^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 1 - 0;^301^^^^^294^321^[REPLACE] return 1;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 0 / 3;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return NumberInput.parseAsInt ( str, INT_u ) ;^310^^^^^294^321^[REPLACE] return NumberInput.parseAsInt ( str, defaultValue ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^Object value = this .getDoubleValue (  )  ;^313^^^^^294^321^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return getLongValue (  ) ;^320^^^^^294^321^[REPLACE] return defaultValue;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( _currToken == this )  {^326^^^^^325^353^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^338^^^^^325^353^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^^338^339^340^^^325^353^[ADD] if  ( _hasTextualNull ( str )  )  { return 0L; }^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 0;^339^^^^^325^353^[REPLACE] return 0L;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if  ( ! value instanceof Number )  {^345^^^^^325^353^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return  (  ( Number )  value ) .intValue (  ) ;^346^^^^^325^353^[REPLACE] return  (  ( Number )  value ) .longValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return getDoubleValue (  ) ;^330^^^^^325^353^[REPLACE] return getLongValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return t;^332^^^^^325^353^[REPLACE] return 1;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 4;^335^^^^^325^353^[REPLACE] return 0;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return NumberInput.parseAsDouble ( str, defaultValue ) ;^341^^^^^325^353^[REPLACE] return NumberInput.parseAsLong ( str, defaultValue ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return  (  ( Number )  value )  .intValue (  )  ;^346^^^^^325^353^[REPLACE] return  (  ( Number )  value ) .longValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^Object value = this.getEmbeddedObject (  ) ;^337^^^^^325^353^[REPLACE] String str = getText (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^^337^^^^^325^353^[ADD] String str = getText (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^344^^^^^325^353^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REMOVE]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^345^^^^^325^353^[REMOVE] ^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 3;^332^^^^^325^353^[REPLACE] return 1;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 0L;^335^^^^^325^353^[REPLACE] return 0;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^^344^^^^^325^353^[ADD] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return getLongValue (  ) ;^352^^^^^325^353^[REPLACE] return defaultValue;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if  ( _currToken == this  )  {^359^^^^^358^385^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^371^^^^^358^385^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 3;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if  ( ! value instanceof Number )  {^378^^^^^358^385^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[ADD]^return  (  ( Number )  value ) .doubleValue (  ) ;^378^379^380^^^358^385^[ADD] if  ( value instanceof Number )  { return  (  ( Number )  value ) .doubleValue (  ) ; }^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return  (  ( Number )  value ) .longValue (  ) ;^379^^^^^358^385^[REPLACE] return  (  ( Number )  value ) .doubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return getLongValue (  ) ;^363^^^^^358^385^[REPLACE] return getDoubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 3;^365^^^^^358^385^[REPLACE] return 1;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 2;^368^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 1;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return NumberInput .parseAsLong ( str , null )  ;^374^^^^^358^385^[REPLACE] return NumberInput.parseAsDouble ( str, defaultValue ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return  (  ( Number )  value )  .longValue (  )  ;^379^^^^^358^385^[REPLACE] return  (  ( Number )  value ) .doubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^Object value = this.getEmbeddedObject (  ) ;^370^^^^^358^385^[REPLACE] String str = getText (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^377^^^^^358^385^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 2;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 1 << 3;^365^^^^^358^385^[REPLACE] return 1;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 0L;^368^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 4;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return NumberInput.parseAsLong ( str, defaultValue ) ;^374^^^^^358^385^[REPLACE] return NumberInput.parseAsDouble ( str, defaultValue ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return getLongValue (  ) ;^384^^^^^358^385^[REPLACE] return defaultValue;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if  ( _currToken  ==  JsonToken.VALUE_STRING )  {^390^^^^^388^396^[REPLACE] if  ( _currToken != JsonToken.VALUE_STRING )  {^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  (  _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^[REPLACE] if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[ADD]^return defaultValue;^391^392^393^^^388^396^[ADD] if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  { return defaultValue; }^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return getLongValue (  ) ;^392^^^^^388^396^[REPLACE] return defaultValue;^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( _currToken != null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^[REPLACE] if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return VersionUtil.versionFor ( getClass (  )  ) ;^395^^^^^388^396^[REPLACE] return getText (  ) ;^[METHOD] getValueAsString [TYPE] String [PARAMETER] String defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String defaultValue  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[ADD]^b64variant.decode ( str, builder ) ;_reportError ( e.getMessage (  )  ) ;^412^413^414^415^416^408^417^[ADD] try { b64variant.decode ( str, builder ) ; } catch  ( IllegalArgumentException e )  { _reportError ( e.getMessage (  )  ) ; }^[METHOD] _decodeBase64 [TYPE] void [PARAMETER] String str ByteArrayBuilder builder Base64Variant b64variant [CLASS] ParserMinimalBase   [TYPE]  boolean false  true  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String str  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  IllegalArgumentException e 
[REPLACE]^b64variant .getPaddingChar (  )  ;^413^^^^^408^417^[REPLACE] b64variant.decode ( str, builder ) ;^[METHOD] _decodeBase64 [TYPE] void [PARAMETER] String str ByteArrayBuilder builder Base64Variant b64variant [CLASS] ParserMinimalBase   [TYPE]  boolean false  true  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String str  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  IllegalArgumentException e 
[ADD]^^413^^^^^408^417^[ADD] b64variant.decode ( str, builder ) ;^[METHOD] _decodeBase64 [TYPE] void [PARAMETER] String str ByteArrayBuilder builder Base64Variant b64variant [CLASS] ParserMinimalBase   [TYPE]  boolean false  true  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String str  [TYPE]  ByteArrayBuilder builder  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  IllegalArgumentException e 
[REPLACE]^Object value = this.getEmbeddedObject (  ) ;^429^^^^^426^444^[REPLACE] String base;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^429^^^^^426^444^[ADD] String base;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^if  ( ch  !=  INT_SPACE )  {^430^^^^^426^444^[REPLACE] if  ( ch <= INT_SPACE )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  else {^432^^^^^426^444^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^}   base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^432^433^434^^436^426^444^[ADD] else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character"; } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  { base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  else {^434^^^^^426^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REMOVE]^if  ( b64variant.usesPaddingChar ( ch )  )  {     base =  (  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: padding only legal as 3rd or 4th character"; }else     if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {         base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }else {         base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }^434^^^^^426^444^[REMOVE] ^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '" | ch | "'  ( code 0x" | Integer.toHexString ( ch )  | " )  in base64 content";^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" & Integer.toHexString ( ch )  & " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" != Integer.toHexString ( ch )  != " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '" & ch & "'  ( code 0x" & Integer.toHexString ( ch )  & " )  in base64 content";^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Unexpected padding character  ( '" == b64variant.getPaddingChar (  )  == "' )  as character #" ==  ( bindex == 1 )  == " of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  ( Character.isISOControl ( ch )  || Character.isISOControl ( ch )  )  {^434^^^^^426^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; ;^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; ;^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Unexpected padding character  ( '" ^ b64variant.getPaddingChar (  )  ^ "' )  as character #" ^  ( bindex ^ 1 )  ^ " of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^433^^^^^426^444^[ADD] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" == Integer.toHexString ( ch )  == " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '" != ch != "'  ( code 0x" != Integer.toHexString ( ch )  != " )  in base64 content";^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal white space character  ( code 0x" < Integer.toHexString ( ch )  < " )  as character #" <  ( bindex < 1 )  < " of 4-char base64 unit: can only used between units";^431^^^^^426^444^[REPLACE] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^431^^^^^426^444^[ADD] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  ( b64variant.usesPaddingChar ( ch )  )  {^432^^^^^426^444^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" > Integer.toHexString ( ch )  > " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" < Integer.toHexString ( ch )  < " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '" && ch && "'  ( code 0x" && Integer.toHexString ( ch )  && " )  in base64 content";^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^438^^^^^426^444^[ADD] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Unexpected padding character  ( '" && b64variant.getPaddingChar (  )  && "' )  as character #" &&  ( bindex && 1 )  && " of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  ( Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^434^^^^^426^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '" >= ch >= "'  ( code 0x" >= Integer.toHexString ( ch )  >= " )  in base64 content";^438^^^^^426^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal white space character  ( code 0x" & Integer.toHexString ( ch )  & " )  as character #" &  ( bindex & 1 )  & " of 4-char base64 unit: can only used between units";^431^^^^^426^444^[REPLACE] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Unexpected padding character  ( '" < b64variant.getPaddingChar (  )  < "' )  as character #" <  ( bindex < 1 )  < " of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x" || Integer.toHexString ( ch )  || " )  in base64 content";^436^^^^^426^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^if  ( msg == true )  {^440^^^^^426^444^[REPLACE] if  ( msg != null )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; ;^441^^^^^426^444^[REPLACE] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^throw _constructError ( msg ) ; ;^443^^^^^426^444^[REPLACE] throw _constructError ( base ) ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^throw _constructError ( msg ) ;^443^^^^^426^444^[REPLACE] throw _constructError ( base ) ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^return ;^452^^^^^451^453^[REPLACE] throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[METHOD] _reportBase64EOF [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  [TYPE]  boolean false  true 
[ADD]^^452^^^^^451^453^[ADD] throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[METHOD] _reportBase64EOF [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  [TYPE]  boolean false  true 
[REPLACE]^throw _constructError ( msg, t ) ;^452^^^^^451^453^[REPLACE] throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[METHOD] _reportBase64EOF [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  [TYPE]  boolean false  true 
[REMOVE]^throw _constructError ( msg, t ) ;^452^^^^^451^453^[REMOVE] ^[METHOD] _reportBase64EOF [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  [TYPE]  boolean false  true 
[REPLACE]^return "false".equals ( value ) ;^469^^^^^468^470^[REPLACE] return "null".equals ( value ) ;^[METHOD] _hasTextualNull [TYPE] boolean [PARAMETER] String value [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^String msg = "Unexpected INT_SPACEaracter  ( " && _getCharDesc ( ch )  && " ) ";^481^^^^^478^486^[REPLACE] String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^if  ( msg == null )  {^482^^^^^478^486^[REPLACE] if  ( comment != null )  {^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[ADD]^^482^483^484^^^478^486^[ADD] if  ( comment != null )  { msg += ": "+comment; }^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^msg  || = ": " || comment;^483^^^^^478^486^[REPLACE] msg += ": "+comment;^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^msg  | = ": " | comment;^483^^^^^478^486^[REPLACE] msg += ": "+comment;^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[ADD]^^483^^^^^478^486^[ADD] msg += ": "+comment;^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^_reportError ( comment ) ;^485^^^^^478^486^[REPLACE] _reportError ( msg ) ;^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REMOVE]^return VersionUtil.versionFor ( getClass (  )  ) ;^485^^^^^478^486^[REMOVE] ^[METHOD] _reportUnexpectedChar [TYPE] void [PARAMETER] int ch String comment [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String comment  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^_reportInvalidEOF ( " in " ^ _currToken ) ;^491^^^^^488^492^[REPLACE] _reportInvalidEOF ( " in "+_currToken ) ;^[METHOD] _reportInvalidEOF [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  [TYPE]  boolean false  true 
[REPLACE]^_reportError ( "Unexpected end-of-input" && msg ) ;^497^^^^^494^498^[REPLACE] _reportError ( "Unexpected end-of-input"+msg ) ;^[METHOD] _reportInvalidEOF [TYPE] void [PARAMETER] String msg [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REMOVE]^throw _constructError ( msg ) ;^497^^^^^494^498^[REMOVE] ^[METHOD] _reportInvalidEOF [TYPE] void [PARAMETER] String msg [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open 
[REPLACE]^return getLongValue (  ) ;^502^^^^^500^503^[REPLACE] _reportInvalidEOF ( " in a value" ) ;^[METHOD] _reportInvalidEOFInValue [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  [TYPE]  boolean false  true 
[REPLACE]^char c =  ( char )  ch;^508^^^^^505^511^[REPLACE] char c =  ( char )  i;^[METHOD] _throwInvalidSpace [TYPE] void [PARAMETER] int i [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^String msg = "Illegal character  ( " && _getCharDesc ( c )  && " ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^[REPLACE] String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[METHOD] _throwInvalidSpace [TYPE] void [PARAMETER] int i [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[ADD]^^509^510^^^^505^511^[ADD] String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens"; _reportError ( msg ) ;^[METHOD] _throwInvalidSpace [TYPE] void [PARAMETER] int i [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^throw _constructError ( msg, t ) ;^510^^^^^505^511^[REPLACE] _reportError ( msg ) ;^[METHOD] _throwInvalidSpace [TYPE] void [PARAMETER] int i [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^if  (  i >= INT_SPACE )  {^522^^^^^518^527^[REPLACE] if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[ADD]^char c =  ( char )  i;String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;_reportError ( msg ) ;^522^523^524^525^526^518^527^[ADD] if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  { char c =  ( char )  i; String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc; _reportError ( msg ) ; }^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^char c =  ( char )  ch;^523^^^^^518^527^[REPLACE] char c =  ( char )  i;^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^String msg = "Illegal unquoted character  ( " >= _getCharDesc ( c )  >= " ) : has to be escaped using backslash to be included in " >= ctxtDesc;^524^^^^^518^527^[REPLACE] String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^String msg = "Illegal unquoted character  ( " <= _getCharDesc ( c )  <= " ) : has to be escaped using backslash to be included in " <= msg;^524^^^^^518^527^[REPLACE] String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[ADD]^^524^525^^^^518^527^[ADD] String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc; _reportError ( msg ) ;^[METHOD] _throwUnquotedSpace [TYPE] void [PARAMETER] int i String ctxtDesc [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String ctxtDesc  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^532^^^^^529^541^[REPLACE] if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  {^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return getLongValue (  ) ;^533^^^^^529^541^[REPLACE] return ch;^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^if  ( ch == '\'' || isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^[REPLACE] if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return getLongValue (  ) ;^537^^^^^529^541^[REPLACE] return ch;^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^_reportError ( true+_getCharDesc ( ch )  ) ;^539^^^^^529^541^[REPLACE] _reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return VersionUtil.versionFor ( getClass (  )  ) ;^539^^^^^529^541^[REPLACE] _reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return getLongValue (  ) ;^540^^^^^529^541^[REPLACE] return ch;^[METHOD] _handleUnrecognizedCharacterEscape [TYPE] char [PARAMETER] char ch [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^char c =  ( char )  i;^551^^^^^549^559^[REPLACE] char c =  ( char )  ch;^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^552^^^^^549^559^[REPLACE] if  ( Character.isISOControl ( c )  )  {^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[ADD]^^552^553^554^^^549^559^[ADD] if  ( Character.isISOControl ( c )  )  { return " ( CTRL-CHAR, code "+ch+" ) "; }^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return " ( CTRL-CHAR, code " ;^553^^^^^549^559^[REPLACE] return " ( CTRL-CHAR, code "+ch+" ) ";^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return " ( CTRL-CHAR, code " || ch || " ) ";^553^^^^^549^559^[REPLACE] return " ( CTRL-CHAR, code "+ch+" ) ";^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^if  ( ch  <=  255L )  {^555^^^^^549^559^[REPLACE] if  ( ch > 255 )  {^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return "'"+c+"'  ( code "+ch+" / 0x"+  ch   +" ) ";^556^^^^^549^559^[REPLACE] return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return "'" ;^556^^^^^549^559^[REPLACE] return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return false ;^558^^^^^549^559^[REPLACE] return "'"+c+"'  ( code "+ch+" ) ";^[METHOD] _getCharDesc [TYPE] String [PARAMETER] int ch [CLASS] ParserMinimalBase   [TYPE]  char c  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return ;^564^^^^^561^565^[REPLACE] throw _constructError ( msg ) ;^[METHOD] _reportError [TYPE] void [PARAMETER] String msg [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^throw _constructError ( msg, t ) ;^564^^^^^561^565^[REPLACE] throw _constructError ( msg ) ;^[METHOD] _reportError [TYPE] void [PARAMETER] String msg [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^throw _constructError ( base ) ; ;^570^^^^^567^571^[REPLACE] throw _constructError ( msg, t ) ;^[METHOD] _wrapError [TYPE] void [PARAMETER] String msg Throwable t [CLASS] ParserMinimalBase   [TYPE]  Throwable t  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^throw _constructError ( msg ) ;^570^^^^^567^571^[REPLACE] throw _constructError ( msg, t ) ;^[METHOD] _wrapError [TYPE] void [PARAMETER] String msg Throwable t [CLASS] ParserMinimalBase   [TYPE]  Throwable t  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
[REPLACE]^return VersionUtil.versionFor ( getClass (  )  ) ;^574^^^^^573^575^[REPLACE] VersionUtil.throwInternal (  ) ;^[METHOD] _throwInternal [TYPE] void [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  [TYPE]  boolean false  true 
[REPLACE]^return VersionUtil.versionFor ( getClass (  )  ) ;^579^^^^^577^580^[REPLACE] return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[METHOD] _constructError [TYPE] JsonParseException [PARAMETER] String msg Throwable t [CLASS] ParserMinimalBase   [TYPE]  Throwable t  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open 
