[REPLACE]^protected final static int INT_TAB ;^26^^^^^^^[REPLACE] protected final static int INT_TAB = '\t';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_LF  = null ;^27^^^^^^^[REPLACE] protected final static int INT_LF = '\n';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_CR  = null ;^28^^^^^^^[REPLACE] protected final static int INT_CR = '\r';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final  int INT_SPACE = 0x0020;^29^^^^^^^[REPLACE] protected final static int INT_SPACE = 0x0020;^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_LBRACKET ;^32^^^^^^^[REPLACE] protected final static int INT_LBRACKET = '[';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_RBRACKET  = null ;^33^^^^^^^[REPLACE] protected final static int INT_RBRACKET = ']';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_LCURLY ;^34^^^^^^^[REPLACE] protected final static int INT_LCURLY = '{';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  short  INT_RCURLY = '}';^35^^^^^^^[REPLACE] protected final static int INT_RCURLY = '}';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  short  INT_QUOTE = '"';^36^^^^^^^[REPLACE] protected final static int INT_QUOTE = '"';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static int INT_BACKSLASH = '\\';^37^^^^^^^[REPLACE] protected final static int INT_BACKSLASH = '\\';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_SLASH  = null ;^38^^^^^^^[REPLACE] protected final static int INT_SLASH = '/';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static int INT_COLON = ':';^39^^^^^^^[REPLACE] protected final static int INT_COLON = ':';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  long  INT_COMMA = ',';^40^^^^^^^[REPLACE] protected final static int INT_COMMA = ',';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_ASTERISK ;^41^^^^^^^[REPLACE] protected final static int INT_ASTERISK = '*';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static  short  INT_APOSTROPHE = '\'';^42^^^^^^^[REPLACE] protected final static int INT_APOSTROPHE = '\'';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_b  = null ;^45^^^^^^^[REPLACE] protected final static int INT_b = 'b';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_f ;^46^^^^^^^[REPLACE] protected final static int INT_f = 'f';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_n  = null ;^47^^^^^^^[REPLACE] protected final static int INT_n = 'n';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected  static int INT_r = 'r';^48^^^^^^^[REPLACE] protected final static int INT_r = 'r';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_t ;^49^^^^^^^[REPLACE] protected final static int INT_t = 't';^ [CLASS] ParserMinimalBase  
[REPLACE]^protected final static int INT_u ;^50^^^^^^^[REPLACE] protected final static int INT_u = 'u';^ [CLASS] ParserMinimalBase  
[REPLACE]^if  ( _currToken != JsonToken.START_OBJECT ) {^139^140^^^^138^171^[REPLACE] if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return ch;  ;^141^^^^^139^142^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return ch;  ;^141^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[ADD]^^143^^^^^138^171^[ADD] int open = 1;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if   (  msg != null  )   {  ;^150^^^^^138^171^[REPLACE] if  ( t == null )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return ch;  ;^156^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  ( --open  !=  0 )  {^165^^^^^138^171^[REPLACE] if  ( --open == 0 )  {^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^166^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^return null;^156^^^^^138^171^[REPLACE] return this;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^String base  ;^149^^^^^138^171^[REPLACE] JsonToken t = nextToken (  ) ;^[METHOD] skipChildren [TYPE] JsonParser [PARAMETER] [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  [TYPE]  boolean false  true 
[REPLACE]^if  ( _currToken ==t )  {^261^^^^^260^289^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if   (  value instanceof Number  )   {  ;^273^^^^^260^289^[REPLACE] if  ( value instanceof Boolean )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return VersionUtil.versionFor  (  getClass  (    )    )  ;  ;^274^^^^^260^289^[REPLACE] return  ( Boolean )  value;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if   (  _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY  )   {  ;^279^^^^^260^289^[REPLACE] if  ( "true".equals ( str )  )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return t;  ;^280^^^^^260^289^[REPLACE] return true;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if   (  _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY  )   {  ;^282^^^^^260^289^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[ADD]^return false;^282^283^284^^^260^289^[ADD] if  ( _hasTextualNull ( str )  )  { return false; }^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^283^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false ;^264^^^^^260^289^[REPLACE] return getIntValue (  )  != 0;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;^266^^^^^260^289^[REPLACE] return true;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;  ;^269^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;^280^^^^^260^289^[REPLACE] return true;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^272^^^^^260^289^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[ADD]^^278^^^^^260^289^[ADD] String str = getText (  ) .trim (  ) ;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  ( ! value instanceof Boolean )  {^273^^^^^260^289^[REPLACE] if  ( value instanceof Boolean )  {^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return getIntValue  (    )   != 0;  ;^264^^^^^260^289^[REPLACE] return getIntValue (  )  != 0;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^269^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return false;  ;^283^^^^^260^289^[REPLACE] return false;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^return true;^288^^^^^260^289^[REPLACE] return defaultValue;^[METHOD] getValueAsBoolean [TYPE] boolean [PARAMETER] boolean defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  boolean defaultValue  false  true  [TYPE]  String str  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open 
[REPLACE]^if  (t == null )  {^295^^^^^294^321^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if   (  _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY  )   {  ;^307^^^^^294^321^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 0 - 0;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( ! value instanceof Number )  {^314^^^^^294^321^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[ADD]^return  (  ( Number )  value ) .intValue (  ) ;^314^315^316^^^294^321^[ADD] if  ( value instanceof Number )  { return  (  ( Number )  value ) .intValue (  ) ; }^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return  (  ( Number )  value ) .longValue (  ) ;^315^^^^^294^321^[REPLACE] return  (  ( Number )  value ) .intValue (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return getIntValue  (    )  ;  ;^299^^^^^294^321^[REPLACE] return getIntValue (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 1 - 2;^301^^^^^294^321^[REPLACE] return 1;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 0 - 3;^304^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 1;  ;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return NumberInput.parseAsLong ( str, defaultValue ) ;^310^^^^^294^321^[REPLACE] return NumberInput.parseAsInt ( str, defaultValue ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^String str = getText (  ) .trim (  )  ;^306^^^^^294^321^[REPLACE] String str = getText (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^313^^^^^294^321^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if   (  value instanceof Boolean  )   {  ;^314^^^^^294^321^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 3;^301^^^^^294^321^[REPLACE] return 1;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 0 - 2;^304^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return 3;^308^^^^^294^321^[REPLACE] return 0;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return NumberInput .parseAsLong ( str , null )  ;^310^^^^^294^321^[REPLACE] return NumberInput.parseAsInt ( str, defaultValue ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^Object value = this .getDoubleValue (  )  ;^313^^^^^294^321^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^return INT_n;^320^^^^^294^321^[REPLACE] return defaultValue;^[METHOD] getValueAsInt [TYPE] int [PARAMETER] int defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open 
[REPLACE]^if  ( _currToken ==t )  {^326^^^^^325^353^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if   (  _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY  )   {  ;^338^^^^^325^353^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^^338^339^340^^^325^353^[ADD] if  ( _hasTextualNull ( str )  )  { return 0L; }^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 0;^339^^^^^325^353^[REPLACE] return 0L;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if  ( ! value instanceof Number )  {^345^^^^^325^353^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^^345^346^347^^^325^353^[ADD] if  ( value instanceof Number )  { return  (  ( Number )  value ) .longValue (  ) ; }^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return  (  ( Number )  value ) .intValue (  ) ;^346^^^^^325^353^[REPLACE] return  (  ( Number )  value ) .longValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return getLongValue  (    )  ;  ;^330^^^^^325^353^[REPLACE] return getLongValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 0;^332^^^^^325^353^[REPLACE] return 1;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 3;^335^^^^^325^353^[REPLACE] return 0;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return NumberInput.parseAsDouble ( str, defaultValue ) ;^341^^^^^325^353^[REPLACE] return NumberInput.parseAsLong ( str, defaultValue ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return  (  ( Number )  value )  .intValue (  )  ;^346^^^^^325^353^[REPLACE] return  (  ( Number )  value ) .longValue (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^String str = getText (  ) .trim (  )  ;^337^^^^^325^353^[REPLACE] String str = getText (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^Object value = this .getDoubleValue (  )  ;^344^^^^^325^353^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 1;  ;^339^^^^^325^353^[REPLACE] return 0L;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[ADD]^return  (  ( Number )  value ) .longValue (  ) ;^345^346^347^^^325^353^[ADD] if  ( value instanceof Number )  { return  (  ( Number )  value ) .longValue (  ) ; }^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 2;^332^^^^^325^353^[REPLACE] return 1;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return 0 / 1;^335^^^^^325^353^[REPLACE] return 0;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^344^^^^^325^353^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^return defaultValue;  ;^352^^^^^325^353^[REPLACE] return defaultValue;^[METHOD] getValueAsLong [TYPE] long [PARAMETER] long defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  long defaultValue 
[REPLACE]^if  ( _currToken == null )  {^359^^^^^358^385^[REPLACE] if  ( _currToken != null )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[ADD]^^359^360^361^362^363^358^385^[ADD] if  ( _currToken != null )  { switch  ( _currToken )  { case VALUE_NUMBER_INT: case VALUE_NUMBER_FLOAT: return getDoubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if   (  _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY  )   {  ;^371^^^^^358^385^[REPLACE] if  ( _hasTextualNull ( str )  )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 2;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if  ( ! value instanceof Number )  {^378^^^^^358^385^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[ADD]^^378^379^380^^^358^385^[ADD] if  ( value instanceof Number )  { return  (  ( Number )  value ) .doubleValue (  ) ; }^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return  (  ( Number )  value ) .longValue (  ) ;^379^^^^^358^385^[REPLACE] return  (  ( Number )  value ) .doubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return getDoubleValue  (    )  ;  ;^363^^^^^358^385^[REPLACE] return getDoubleValue (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 1 << 3;^365^^^^^358^385^[REPLACE] return 1;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 0 + 3;^368^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 0 - 4;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return NumberInput.parseAsLong ( str, defaultValue ) ;^374^^^^^358^385^[REPLACE] return NumberInput.parseAsDouble ( str, defaultValue ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[ADD]^^370^^^^^358^385^[ADD] String str = getText (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^Object value = this.getDoubleValue (  ) ;^377^^^^^358^385^[REPLACE] Object value = this.getEmbeddedObject (  ) ;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 4;^372^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^if   (  value instanceof Boolean  )   {  ;^378^^^^^358^385^[REPLACE] if  ( value instanceof Number )  {^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 1 + 1;^365^^^^^358^385^[REPLACE] return 1;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return 0 % 0;^368^^^^^358^385^[REPLACE] return 0;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[REPLACE]^return defaultValue;  ;^384^^^^^358^385^[REPLACE] return defaultValue;^[METHOD] getValueAsDouble [TYPE] double [PARAMETER] double defaultValue [CLASS] ParserMinimalBase   [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  [TYPE]  double defaultValue 
[ADD]^^429^^^^^428^444^[ADD] String base;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^if  ( ch  <  INT_SPACE )  {^430^^^^^428^444^[REPLACE] if  ( ch <= INT_SPACE )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  else {^432^^^^^428^444^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  ( Character.isDefined ( ch )  ) {^434^^^^^428^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^438^^^^^434^439^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^436^^^^^428^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^436^^^^^428^444^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^438^^^^^428^444^[ADD] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Unexpected padding character  ( '"b64variant.getPaddingChar (  ) "' )  as character #" ( bindex1 ) " of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^428^444^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  ( Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^434^^^^^428^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^}   base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^434^435^436^437^438^428^444^[ADD] else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {  base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; } else { base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^431^^^^^428^444^[ADD] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^}   base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^432^433^434^^436^428^444^[ADD] else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character"; } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  { base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^}  if  (  Character.isISOControl ( ch )  )  {^434^^^^^428^444^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^438^^^^^428^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REMOVE]^if  ( b64variant.usesPaddingChar ( ch )  )  {     base =  (  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: padding only legal as 3rd or 4th character"; }else     if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {         base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }else {         base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }^434^^^^^428^444^[REMOVE] ^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal white space character  ( code 0x"Integer.toHexString ( ch ) " )  as character #" ( bindex1 ) " of 4-char base64 unit: can only used between units";^431^^^^^428^444^[REPLACE] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^^433^^^^^428^444^[ADD] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^438^^^^^428^444^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^if  (base == null )  {^440^^^^^428^444^[REPLACE] if  ( msg != null )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[ADD]^base = base + ": " + msg;^440^441^442^^^428^444^[ADD] if  ( msg != null )  { base = base + ": " + msg; }^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^base = base  ": " base;^441^^^^^428^444^[REPLACE] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^throw _constructError ( msg, t )  ;^443^^^^^428^444^[REPLACE] throw _constructError ( base ) ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
[REPLACE]^throw _constructError ( msg ) ;^443^^^^^428^444^[REPLACE] throw _constructError ( base ) ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] ParserMinimalBase   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  JsonToken _currToken  _lastClearedToken  t  [TYPE]  String base  msg  [TYPE]  boolean false  true  [TYPE]  int INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open 
