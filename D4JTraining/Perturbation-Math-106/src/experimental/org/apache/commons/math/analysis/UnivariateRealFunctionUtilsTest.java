[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils.backwardDifferenceDerivative ( function, 1.0e-5 ) ;^32^^^^^31^35^[REPLACE] UnivariateRealFunction function = new SinFunction (  ) ;^[METHOD] testLocalMaximumCentered [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils.centerDifferenceDerivative ( derivative, 1.0e-5 ) ;^33^^^^^31^35^[REPLACE] UnivariateRealFunction derivative = UnivariateRealFunctionUtils.centerDifferenceDerivative ( function, 1.0e-5 ) ;^[METHOD] testLocalMaximumCentered [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^testLocalMaximum ( function ) ;^34^^^^^31^35^[REPLACE] testLocalMaximum ( derivative ) ;^[METHOD] testLocalMaximumCentered [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[ADD]^^34^^^^^31^35^[ADD] testLocalMaximum ( derivative ) ;^[METHOD] testLocalMaximumCentered [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils.backwardDifferenceDerivative ( function, 1.0e-5 ) ;^41^^^^^40^44^[REPLACE] UnivariateRealFunction function = new SinFunction (  ) ;^[METHOD] testLocalMaximumForward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[ADD]^^41^^^^^40^44^[ADD] UnivariateRealFunction function = new SinFunction (  ) ;^[METHOD] testLocalMaximumForward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils.forwardDifferenceDerivative ( derivative, 1.0e-5 ) ;^42^^^^^40^44^[REPLACE] UnivariateRealFunction derivative = UnivariateRealFunctionUtils.forwardDifferenceDerivative ( function, 1.0e-5 ) ;^[METHOD] testLocalMaximumForward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^testLocalMaximum ( function ) ;^43^^^^^40^44^[REPLACE] testLocalMaximum ( derivative ) ;^[METHOD] testLocalMaximumForward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils.backwardDifferenceDerivative ( function, 1.0e-5 ) ;^50^^^^^49^53^[REPLACE] UnivariateRealFunction function = new SinFunction (  ) ;^[METHOD] testLocalMaximumBackward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^UnivariateRealFunction derivative = UnivariateRealFunctionUtils .forwardDifferenceDerivative ( function , null )  ;^51^^^^^49^53^[REPLACE] UnivariateRealFunction derivative = UnivariateRealFunctionUtils.backwardDifferenceDerivative ( function, 1.0e-5 ) ;^[METHOD] testLocalMaximumBackward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[REPLACE]^testLocalMaximum ( function ) ;^52^^^^^49^53^[REPLACE] testLocalMaximum ( derivative ) ;^[METHOD] testLocalMaximumBackward [TYPE] void [PARAMETER] [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  UnivariateRealFunction derivative  function 
[ADD]^double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI / 3.0, Math.PI * 2.0 / 3.0 ) ;assertEquals ( maximum, Math.PI / 2.0, 1.0e-5 ) ;fail ( ex.getMessage (  )  ) ;^59^60^61^62^63^58^65^[ADD] try { double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI / 3.0, Math.PI * 2.0 / 3.0 ) ; assertEquals ( maximum, Math.PI / 2.0, 1.0e-5 ) ; } catch  ( Exception ex )  { fail ( ex.getMessage (  )  ) ;^[METHOD] testLocalMaximum [TYPE] void [PARAMETER] UnivariateRealFunction derivative [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  double maximum  [TYPE]  UnivariateRealFunction derivative  [TYPE]  Exception ex 
[REPLACE]^double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI  |  3.0, Math.PI * 2.0  |  3.0 ) ;^60^^^^^58^65^[REPLACE] double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI / 3.0, Math.PI * 2.0 / 3.0 ) ;^[METHOD] testLocalMaximum [TYPE] void [PARAMETER] UnivariateRealFunction derivative [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  double maximum  [TYPE]  UnivariateRealFunction derivative  [TYPE]  Exception ex 
[REPLACE]^double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI  <=  3.0D, Math.PI * 2.0  <=  3.0D ) ;^60^^^^^58^65^[REPLACE] double maximum = UnivariateRealSolverUtils.solve ( derivative, Math.PI / 3.0, Math.PI * 2.0 / 3.0 ) ;^[METHOD] testLocalMaximum [TYPE] void [PARAMETER] UnivariateRealFunction derivative [CLASS] UnivariateRealFunctionUtilsTest   [TYPE]  boolean false  true  [TYPE]  double maximum  [TYPE]  UnivariateRealFunction derivative  [TYPE]  Exception ex 
