[REPLACE]^private double[][] m1 ;^34^^^^^^^[REPLACE] private double[][] m1 = {{1}};^ [CLASS] CholeskySolverTest  
[REPLACE]^private double m1Det  = null ;^35^^^^^^^[REPLACE] private double m1Det = 1.0d;^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m2 ;^37^38^^^^37^38^[REPLACE] private double[][] m2 = {{1, 0} , {0, 2}};^ [CLASS] CholeskySolverTest  
[REPLACE]^private double m2Det  = null ;^39^^^^^^^[REPLACE] private double m2Det = 2.0d;^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m3 = {{1 - 3, 0, 0}, {0, 2, 0}, {0, 0, 3}};^41^42^43^^^41^43^[REPLACE] private double[][] m3 = {{1, 0, 0}, {0, 2, 0}, {0, 0, 3}};^ [CLASS] CholeskySolverTest  
[REPLACE]^private double m3Det  = null ;^44^^^^^^^[REPLACE] private double m3Det = 6.0d;^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m4 = {{3, 0, 0}, {2, 3, 0}, {4, 5, 6}};^46^47^48^^^46^48^[REPLACE] private double[][] m4 = {{1, 0, 0}, {2, 3, 0}, {4, 5, 6}};^ [CLASS] CholeskySolverTest  
[REPLACE]^private double m4Det ;^49^^^^^^^[REPLACE] private double m4Det = 18.0d;^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m5  = null ;^51^52^53^54^^51^55^[REPLACE] private double[][] m5 = {{ 1,  0,  0,  0,  0}, {-2,  3,  0,  0,  0}, { 4, -5,  6,  0,  0}, { 7,  8, -9, 10,  0},^ [CLASS] CholeskySolverTest  
[REPLACE]^private float m5Det = 1.0f;^56^^^^^^^[REPLACE] private double m5Det = 2700.0d;^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m6  = null ;^59^60^61^^^59^61^[REPLACE] private double[][] m6 = {{1, 0,  0}, {2, 0,  0}, {4, 5,  6}};^ [CLASS] CholeskySolverTest  
[REPLACE]^private double[][] m7 ;^63^64^^^^63^64^[REPLACE] private double[][] m7 = {{1, 2, 3}, {4, 5, 6}};^ [CLASS] CholeskySolverTest  
[REPLACE]^suite.setName ( "CholeskySolver Tests" ) ;^70^^^^^69^71^[REPLACE] super ( nameOfTest ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String nameOfTest [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  String nameOfTest  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det 
[REPLACE]^super.tearDown (  ) ;^75^^^^^73^76^[REPLACE] super.setUp (  ) ;^[METHOD] setUp [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  [TYPE]  boolean false  true 
[REPLACE]^super ( nameOfTest ) ;^81^^^^^79^82^[REPLACE] super.tearDown (  ) ;^[METHOD] tearDown [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  [TYPE]  boolean false  true 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^85^^^^^84^88^[REPLACE] TestSuite suite = new TestSuite ( CholeskySolverTest.class ) ;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det 
[REPLACE]^suite .TestSuite ( null )  ;^86^^^^^84^88^[REPLACE] suite.setName ( "CholeskySolver Tests" ) ;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det 
[ADD]^^86^87^^^^84^88^[ADD] suite.setName ( "CholeskySolver Tests" ) ; return suite;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det 
[REPLACE]^return false;^87^^^^^84^88^[REPLACE] return suite;^[METHOD] suite [TYPE] Test [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  boolean false  true  [TYPE]  TestSuite suite  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^95^^^^^94^107^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^^95^^^^^94^107^[ADD] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^double numericalZero = 3.0f;^96^^^^^94^107^[REPLACE] double numericalZero = 77.77d;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^solver.solve ( numericalZero ) ;^97^^^^^94^107^[REPLACE] solver.setNumericalZero ( numericalZero ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^assertEquals ( solver.getNumericalZero (  ) , numericalZero, 4.0f ) ;^98^^^^^94^107^[REPLACE] assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^assertEquals ( solver.getDeterminant (  ) , numericalZero, 0.0d ) ;^98^^^^^94^107^[REPLACE] assertEquals ( solver.getNumericalZero (  ) , numericalZero, 0.0d ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^{0, numericalZero/2}} )  ) ;fail ( "testing numericalZero" ) ;^100^101^102^103^104^94^107^[ADD] try { solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ; fail ( "testing numericalZero" ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero >= 2 + 0, 0}, {0, m5Det >= 2 + 0}} )  ) ;^101^102^103^^^94^107^[REPLACE] solver.decompose ( new RealMatrixImpl ( new double[][]{{numericalZero/2, 0}, {0, numericalZero/2}} )  ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^fail ( "Solving matrix m6" ) ;^104^^^^^94^107^[REPLACE] fail ( "testing numericalZero" ) ;^[METHOD] testNumericalZero [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^116^^^^^113^135^[REPLACE] testDecompose ( m1, "Decomposing matrix m1" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REMOVE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^116^^^^^113^135^[REMOVE] ^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^117^^^^^113^135^[REPLACE] testDecompose ( m2, "Decomposing matrix m2" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REMOVE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^117^^^^^113^135^[REMOVE] ^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^118^^^^^113^135^[REPLACE] testDecompose ( m3, "Decomposing matrix m3" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^119^^^^^113^135^[REPLACE] testDecompose ( m4, "Decomposing matrix m4" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^^119^120^^^^113^135^[ADD] testDecompose ( m4, "Decomposing matrix m4" ) ; testDecompose ( m5, "Decomposing matrix m5" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^120^^^^^113^135^[REPLACE] testDecompose ( m5, "Decomposing matrix m5" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^testDecompose ( m6, "Decomposing matrix m6" ) ;fail ( "Decomposing matrix m6" ) ;^124^125^126^127^^113^135^[ADD] try { testDecompose ( m6, "Decomposing matrix m6" ) ; fail ( "Decomposing matrix m6" ) ; } catch  ( IllegalArgumentException e )  {}^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m3, "Decomposing matrix m3" ) ;^125^^^^^113^135^[REPLACE] testDecompose ( m6, "Decomposing matrix m6" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^fail ( "Decomposing matrix m7" ) ;^126^^^^^113^135^[REPLACE] fail ( "Decomposing matrix m6" ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^CholeskySolver solver = new CholeskySolver (  ) ;solver.decompose ( new RealMatrixImpl ( m7 )  ) ;fail ( "Decomposing matrix m7" ) ;^129^130^131^132^133^113^135^[ADD] try { CholeskySolver solver = new CholeskySolver (  ) ; solver.decompose ( new RealMatrixImpl ( m7 )  ) ; fail ( "Decomposing matrix m7" ) ; } catch  ( IllegalArgumentException e )  {}^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^130^^^^^113^135^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^^133^134^135^^^113^135^[ADD] catch  ( IllegalArgumentException e )  {}  }^[METHOD] testDecompose [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^CholeskySolver solver = new CholeskySolver (  ) ;solver.solve ( new double[] {1,2,3} ) ;fail ( "solving a liniar equitation with a missing matrix should fail" ) ;^144^145^146^147^148^141^170^[ADD] try { CholeskySolver solver = new CholeskySolver (  ) ; solver.solve ( new double[] {1,2,3} ) ; fail ( "solving a liniar equitation with a missing matrix should fail" ) ; } catch  ( IllegalStateException e )  {}^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^145^^^^^141^170^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^^145^^^^^141^170^[ADD] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m4, "Solving matrix m4" ) ;^151^^^^^141^170^[REPLACE] testSolve ( m1, "Solving matrix m1" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m4, "Solving matrix m4" ) ;^152^^^^^141^170^[REPLACE] testSolve ( m2, "Solving matrix m2" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^testSolve ( m3, "Solving matrix m3" ) ;^152^153^^^^141^170^[ADD] testSolve ( m2, "Solving matrix m2" ) ; testSolve ( m3, "Solving matrix m3" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m4, "Solving matrix m4" ) ;^153^^^^^141^170^[REPLACE] testSolve ( m3, "Solving matrix m3" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^^153^^^^^141^170^[ADD] testSolve ( m3, "Solving matrix m3" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m1, "Solving matrix m1" ) ;^154^^^^^141^170^[REPLACE] testSolve ( m4, "Solving matrix m4" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m4, "Solving matrix m4" ) ;^155^^^^^141^170^[REPLACE] testSolve ( m5, "Solving matrix m5" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^testSolve ( m6, "Solving matrix m6" ) ;fail ( "Solving matrix m6" ) ;^159^160^161^162^^141^170^[ADD] try { testSolve ( m6, "Solving matrix m6" ) ; fail ( "Solving matrix m6" ) ; } catch  ( IllegalArgumentException e )  {}^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testSolve ( m4, "Solving matrix m4" ) ;^160^^^^^141^170^[REPLACE] testSolve ( m6, "Solving matrix m6" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^161^^^^^141^170^[REPLACE] fail ( "Solving matrix m6" ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^CholeskySolver solver = new CholeskySolver (  ) ;solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ;fail ( "Solving matrix m3[3x3], v[4]" ) ;^164^165^166^167^168^141^170^[ADD] try { CholeskySolver solver = new CholeskySolver (  ) ; solver.solve ( new RealMatrixImpl ( m3 ) , new double[] {1, 2, 3, 4} ) ; fail ( "Solving matrix m3[3x3], v[4]" ) ; } catch  ( IllegalArgumentException e )  {}^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^165^^^^^141^170^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  IllegalArgumentException e 
[ADD]^CholeskySolver solver = new CholeskySolver (  ) ;solver.getDeterminant (  ) ;fail ( "Calculating determinant of missing matrix should fail" ) ;^179^180^181^182^183^176^191^[ADD] try { CholeskySolver solver = new CholeskySolver (  ) ; solver.getDeterminant (  ) ; fail ( "Calculating determinant of missing matrix should fail" ) ; } catch  ( IllegalStateException e )  {}^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^180^^^^^176^191^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^186^^^^^176^191^[REPLACE] testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[ADD]^^186^^^^^176^191^[ADD] testGetDeterminant ( m1, m1Det, "Calculating determinant of m1" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^187^^^^^176^191^[REPLACE] testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^188^^^^^176^191^[REPLACE] testGetDeterminant ( m3, m3Det, "Calculating determinant of m3" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^189^^^^^176^191^[REPLACE] testGetDeterminant ( m4, m4Det, "Calculating determinant of m4" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^testGetDeterminant ( m2, m2Det, "Calculating determinant of m2" ) ;^190^^^^^176^191^[REPLACE] testGetDeterminant ( m5, m5Det, "Calculating determinant of m5" ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] [CLASS] CholeskySolverTest   [TYPE]  double[][] m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^RealMatrix triangularMatrix = new RealMatrixImpl ( m5 ) ;^205^^^^^202^215^[REPLACE] RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^RealMatrix pdMatrix = pdMatrix.multiply ( triangularMatrix.multiply (  )  ) ;^206^207^^^^202^215^[REPLACE] RealMatrix pdMatrix = triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^209^^^^^202^215^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^solver.decompose ( triangularMatrix ) ;^210^^^^^202^215^[REPLACE] solver.decompose ( pdMatrix ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[ADD]^^210^^^^^202^215^[ADD] solver.decompose ( pdMatrix ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 0.0d )  ) ;^212^213^^^^202^215^[REPLACE] assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[ADD]^^212^213^^^^202^215^[ADD] assertTrue ( message, areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^areEqual ( triangularMatrix, solver.getDecomposition (  ) , 2.0d )  ) ;^213^^^^^202^215^[REPLACE] areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^areEqual ( triangularMatrix, solver.getDeterminant (  ) , 1.0E-10 )  ) ;^213^^^^^202^215^[REPLACE] areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[ADD]^^213^^^^^202^215^[ADD] areEqual ( triangularMatrix, solver.getDecomposition (  ) , 1.0E-10 )  ) ;^[METHOD] testDecompose [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero 
[REPLACE]^RealMatrix triangularMatrix = new RealMatrixImpl ( m5 ) ;^223^224^^^^221^240^[REPLACE] RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^RealMatrixImpl pdMatrix = ( RealMatrixImpl )  x.multiply ( triangularMatrix.transpose (  )  ) ;^225^226^^^^221^240^[REPLACE] RealMatrixImpl pdMatrix = ( RealMatrixImpl )  triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ )^230^^^^^221^240^[REPLACE] double[] c = new double[lowerTriangularMatrix.length];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int i=0; i<c.length *  2; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length *  2; j++ ) c[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^[REPLACE] for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[ADD]^^231^232^233^^235^221^240^[ADD] for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j]; solver.decompose ( pdMatrix ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0 ; j<lowerTriangularMatrix[0 ].length + 1; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^[REPLACE] for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^c[i] + =  c[i] +;^233^^^^^221^240^[REPLACE] c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0 ; j<lowerTriangularMatrix[0 ].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^[REPLACE] for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0; j<lowerTriangularMatrix[0].length - 1; j++ ) c[i] += lowerTriangularMatrix[i][j];^232^233^^^^221^240^[REPLACE] for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[ADD]^^233^^^^^221^240^[ADD] c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^c[i] + = null ;^233^^^^^221^240^[REPLACE] c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^for  ( int i=0 ; i<c.length; i++ ) for  ( int j=0 ; j<lowerTriangularMatrix[0 ].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^231^232^233^^^221^240^[REPLACE] for  ( int i=0; i<c.length; i++ ) for  ( int j=0; j<lowerTriangularMatrix[0].length; j++ ) c[i] += lowerTriangularMatrix[i][j];^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^235^^^^^221^240^[REPLACE] solver.decompose ( pdMatrix ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^RealMatrix x = new RealMatrixImpl (.setNumericalZeror.solve ( c )  ) ;^236^^^^^221^240^[REPLACE] RealMatrix x = new RealMatrixImpl ( solver.solve ( c )  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 2.0d )  ) ;^238^239^^^^221^240^[REPLACE] assertTrue ( message, areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^areEqual ( pdMatrix.RealMatrixImpl ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10D )  ) ;^239^^^^^221^240^[REPLACE] areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^areEqual ( pdMatrix .getData (  )  ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^239^^^^^221^240^[REPLACE] areEqual ( pdMatrix.multiply ( x ) ,  new RealMatrixImpl ( c ) , 1.0E-10 )  ) ;^[METHOD] testSolve [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix String message [CLASS] CholeskySolverTest   [TYPE]  CholeskySolver solver  [TYPE]  boolean false  true  [TYPE]  RealMatrix triangularMatrix  x  [TYPE]  double[] c  [TYPE]  double m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  RealMatrixImpl pdMatrix  [TYPE]  String message  [TYPE]  int i  j 
[REPLACE]^RealMatrix triangularMatrix = new RealMatrixImpl ( m5 ) ;^251^^^^^246^259^[REPLACE] RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[ADD]^^251^^^^^246^259^[ADD] RealMatrix triangularMatrix = new RealMatrixImpl ( lowerTriangularMatrix ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^RealMatrix pdMatrix = pdMatrix .getData (  )  ;^252^253^^^^246^259^[REPLACE] RealMatrix pdMatrix = triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[ADD]^^252^253^^^^246^259^[ADD] RealMatrix pdMatrix = triangularMatrix.multiply ( triangularMatrix.transpose (  )  ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^double pdDeterminant = pdDeterminant  ;^254^^^^^246^259^[REPLACE] double pdDeterminant = determinant * determinant;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^TestRunner runner = new TestRunner (  ) ;^256^^^^^246^259^[REPLACE] CholeskySolver solver = new CholeskySolver (  ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^testDecompose ( m6, "Decomposing matrix m6" ) ;^257^^^^^246^259^[REPLACE] solver.decompose ( pdMatrix ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^assertEquals ( message, solver.getDeterminant (  ) , pfeterminant, 4.0d ) ;^258^^^^^246^259^[REPLACE] assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^assertEquals ( message, solver .getNumericalZero (  )  , pdDeterminant, 1.0E-10 ) ;^258^^^^^246^259^[REPLACE] assertEquals ( message, solver.getDeterminant (  ) , pdDeterminant, 1.0E-10 ) ;^[METHOD] testGetDeterminant [TYPE] void [PARAMETER] double[][] lowerTriangularMatrix double determinant String message [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  [TYPE]  CholeskySolver solver  [TYPE]  String message  [TYPE]  boolean false  true  [TYPE]  RealMatrix pdMatrix  triangularMatrix  [TYPE]  double determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant 
[REPLACE]^double[][] mv1 = m1 .multiply (  )  ;^267^^^^^265^280^[REPLACE] double[][] mv1 = m1.getData (  ) ;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[ADD]^^267^^^^^265^280^[ADD] double[][] mv1 = m1.getData (  ) ;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^double[][] mv2 = m2.multiply (  ) ;^268^^^^^265^280^[REPLACE] double[][] mv2 = m2.getData (  ) ;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^if  ( mv1.length + 3 != mv1.length + 3  || mv1[0].length + 3 != mv2[0].length + 3 ) return false;^270^271^272^^^265^280^[REPLACE] if  ( mv1.length != mv1.length  || mv1[0].length != mv2[0].length ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^return true;^272^^^^^265^280^[REPLACE] return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )   != m4Det ) return false;^276^277^^^^265^280^[REPLACE] if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REMOVE]^if  (  (  ( mv1.length )  !=  ( mv1.length )  )  ||  (  ( mv1[0].length )  !=  ( mv2[0].length )  )  )      return false;^276^^^^^265^280^[REMOVE] ^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^return true;^277^^^^^265^280^[REPLACE] return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^for  ( int i=0; i<mv1.length (  ) ; i++ ) for  ( int j=0; j<mv1[0].length (  ) ; j++ ) if  (   mv1[i][j] -mv2[i][j]    > delta ) return false;^274^275^276^277^^265^280^[REPLACE] for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[ADD]^^274^275^276^277^^265^280^[ADD] for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^if  ( Math.abs ( m5[i][j] -mv2[i][j] )   <  pdDeterminant ) return true;^276^277^^^^265^280^[REPLACE] if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0; j<mv1[0].length /  0.5 ; j++ ) if  (   mv1[i][j] -mv2[i][j]    > delta ) return false;^275^276^277^^^265^280^[REPLACE] for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^if  ( Math.abs ( mv1[i][j] -mv2[i][j] )   ==  delta ) return false;^276^277^^^^265^280^[REPLACE] if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0 ; j<mv1[0 ].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^[REPLACE] for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^for  ( int j=0; j<mv1[0].length + 1; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^275^276^277^^^265^280^[REPLACE] for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^if  (   mv1[i][j] -mv2[i][j]     ==  delta ) return false;^276^277^^^^265^280^[REPLACE] if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^for  ( int i=0 ; i<mv1.length; i++ ) for  ( int j=0 ; j<mv1[0 ].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^274^275^276^277^^265^280^[REPLACE] for  ( int i=0; i<mv1.length; i++ ) for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[ADD]^^275^276^277^^279^265^280^[ADD] for  ( int j=0; j<mv1[0].length; j++ ) if  ( Math.abs ( mv1[i][j] -mv2[i][j] )  > delta ) return false; return true;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^return false;^279^^^^^265^280^[REPLACE] return true;^[METHOD] areEqual [TYPE] boolean [PARAMETER] RealMatrix m1 RealMatrix m2 double delta [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  boolean false  true  [TYPE]  RealMatrix m1  m2  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  int i  j 
[REPLACE]^super.setUp (  ) ;^287^^^^^286^291^[REPLACE] System.out.println ( "Start" ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
[REPLACE]^TestSuite suite = new TestSuite ( CholeskySolverTest.class ) ;^288^^^^^286^291^[REPLACE] TestRunner runner = new TestRunner (  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
[REPLACE]^suite.setName ( "CholeskySolver Tests" ) ;^289^^^^^286^291^[REPLACE] runner.doRun ( CholeskySolverTest.suite (  )  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
[REPLACE]^runner.doRun ( CholeskySolverTest .testSolve ( m2 , this )   ) ;^289^^^^^286^291^[REPLACE] runner.doRun ( CholeskySolverTest.suite (  )  ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
[REPLACE]^super.setUp (  ) ;^290^^^^^286^291^[REPLACE] System.out.println ( "End" ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
[ADD]^^290^^^^^286^291^[ADD] System.out.println ( "End" ) ;^[METHOD] main [TYPE] void [PARAMETER] String[] args [CLASS] CholeskySolverTest   [TYPE]  double[][] lowerTriangularMatrix  m1  m2  m3  m4  m5  m6  m7  mv1  mv2  [TYPE]  String[] args  [TYPE]  boolean false  true  [TYPE]  double delta  determinant  m1Det  m2Det  m3Det  m4Det  m5Det  numericalZero  pdDeterminant  [TYPE]  TestRunner runner 
