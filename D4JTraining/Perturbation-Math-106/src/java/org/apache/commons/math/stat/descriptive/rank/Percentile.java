[REPLACE]^private static final long serialVersionUID = -8091216485095130416;^68^^^^^^^[REPLACE] private static final long serialVersionUID = -8091216485095130416L;^ [CLASS] Percentile  
[REPLACE]^private double quantile ;^72^^^^^^^[REPLACE] private double quantile = 0.0;^ [CLASS] Percentile  
[REPLACE]^test ( values, begin, begin ) ;^184^^^^^182^213^[REPLACE] test ( values, begin, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^184^^^^^182^213^[ADD] test ( values, begin, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^if  (  ( p > 100L )  &&  ( p <= 0 )  )  {^186^^^^^182^213^[REPLACE] if  (  ( p > 100 )  ||  ( p <= 0 )  )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^186^187^188^^^182^213^[ADD] if  (  ( p > 100 )  ||  ( p <= 0 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^throw new IllegalArgumentException (  ( "Illegal quantile value: " + p )  )  ;^187^^^^^182^213^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^if  ( length + 4 == 0  )  {^189^^^^^182^213^[REPLACE] if  ( length == 0 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^189^190^191^^^182^213^[ADD] if  ( length == 0 )  { return Double.NaN; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return evaluate  (  values, start, length, quantile  )  ;  ;^190^^^^^182^213^[REPLACE] return Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^if  ( length - 5 == 1 )  {^192^^^^^182^213^[REPLACE] if  ( length == 1 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^return values[begin];^192^193^194^^^182^213^[ADD] if  ( length == 1 )  { return values[begin]; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return values[begin];  ;^193^^^^^182^213^[REPLACE] return values[begin];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^195^^^^^182^213^[ADD] double n =  ( double )  length;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^double pos = p *  ( n + 1 )   100;^196^^^^^182^213^[REPLACE] double pos = p *  ( n + 1 )  / 100;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^197^198^^^^182^213^[ADD] double fpos = Math.floor ( pos ) ; int intPos =  ( int )  fpos;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^double dif = pos - fpos  ;^198^^^^^182^213^[REPLACE] int intPos =  ( int )  fpos;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^199^200^201^202^^182^213^[ADD] double dif = pos - fpos; double[] sorted = new double[length]; System.arraycopy ( values, begin, sorted, 0, length ) ; Arrays.sort ( sorted ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^double dif = pos - fpos  ;^200^^^^^182^213^[REPLACE] double[] sorted = new double[length];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^System.arraycopy ( values, begin, sorted, 0 , length ) ;^201^^^^^182^213^[REPLACE] System.arraycopy ( values, begin, sorted, 0, length ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^Arrays.sort ( values ) ;^202^^^^^182^213^[REPLACE] Arrays.sort ( sorted ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^if  ( pos  ==  1 )  {^204^^^^^182^213^[REPLACE] if  ( pos < 1 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return values[0 * 4];^205^^^^^182^213^[REPLACE] return sorted[0];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return values[4];^205^^^^^182^213^[REPLACE] return sorted[0];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^if  ( pos  <=  n )  {^207^^^^^182^213^[REPLACE] if  ( pos >= n )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REMOVE]^if  ( pos < 1 )  {     return sorted[0]; }^207^^^^^182^213^[REMOVE] ^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return sorted[length - 1];  ;^208^^^^^182^213^[REPLACE] return sorted[length - 1];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return sorted[length *  0.5  - 1];^208^^^^^182^213^[REPLACE] return sorted[length - 1];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^double lower = sorted[intPos  1];^210^^^^^182^213^[REPLACE] double lower = sorted[intPos - 1];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[ADD]^^211^212^^^^182^213^[ADD] double upper = sorted[intPos]; return lower + dif *  ( upper - lower ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
[REPLACE]^return lower + dif *   (  upper - lower  )  ;  ;^212^^^^^182^213^[REPLACE] return lower + dif *  ( upper - lower ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length final double p [CLASS] Percentile   [TYPE]  boolean false  true  [TYPE]  double[] sorted  values  [TYPE]  double dif  fpos  lower  n  p  pos  quantile  upper  [TYPE]  long serialVersionUID  [TYPE]  int begin  intPos  length 
