[REPLACE]^private static final long serialVersionUID = -5852615386664158222;^34^^^^^^^[REPLACE] private static final long serialVersionUID = -5852615386664158222L;^ [CLASS] TDistributionImpl  
[REPLACE]^double t = regularizedBeta (  (  ( getDegreesOfFreedom (  )  )  /  (  ( getDegreesOfFreedom (  )  )  +  ( x * x )  )  ) ,  ( 0.5 *  ( getDegreesOfFreedom (  )  )  ) , 0.5 )  ;^75^^^^^74^92^[REPLACE] double ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  ||  0.0 )  {^76^^^^^74^92^[REPLACE] if  ( x == 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  >=  0.0 )  {^84^^^^^76^89^[REPLACE] if  ( x < 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^85^^^^^76^89^[ADD] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0D  0.5 * t;^87^^^^^76^89^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )    ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^76^89^[REPLACE] double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^77^^^^^74^92^[ADD] ret = 0.5;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  >  0.0 )  {^84^^^^^74^92^[REPLACE] if  ( x < 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0  0.5 * t;^87^^^^^84^88^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^85^^^^^74^92^[ADD] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0d;^77^^^^^74^92^[REPLACE] ret = 0.5;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 0.5  ;^85^^^^^74^92^[REPLACE] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0  0.5 * t;^87^^^^^74^92^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )    ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^[REPLACE] double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return t;^91^^^^^74^92^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
