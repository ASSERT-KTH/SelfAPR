[REPLACE]^private static final long serialVersionUID ;^34^^^^^^^[REPLACE] private static final long serialVersionUID = -5852615386664158222L;^ [CLASS] TDistributionImpl  
[REPLACE]^private float degreesOfFreedom;^37^^^^^^^[REPLACE] private double degreesOfFreedom;^ [CLASS] TDistributionImpl  
[REPLACE]^return super.inverseCumulativeProbability ( p ) ;^44^^^^^43^46^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] TDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) ,^45^^^^^43^46^[REPLACE] setDegreesOfFreedom ( degreesOfFreedom ) ;^[METHOD] <init> [TYPE] TDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( degreesOfFreedom  <  0.0 )  {^53^^^^^52^57^[REPLACE] if  ( degreesOfFreedom <= 0.0 )  {^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^54^^^^^52^57^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^54^^^^^52^57^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.degreesOfFreedom =  null;^56^^^^^52^57^[REPLACE] this.degreesOfFreedom = degreesOfFreedom;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^56^^^^^52^57^[ADD] this.degreesOfFreedom = degreesOfFreedom;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.MAX_VALUE;^64^^^^^63^65^[REPLACE] return degreesOfFreedom;^[METHOD] getDegreesOfFreedom [TYPE] double [PARAMETER] [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^double t = Beta.regularizedBeta (^75^^^^^74^92^[REPLACE] double ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  ||  0.0D )  {^76^^^^^74^92^[REPLACE] if  ( x == 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^76^77^78^79^80^74^92^[ADD] if  ( x == 0.0 )  { ret = 0.5; } else { double t = Beta.regularizedBeta (^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  >  0.0 )  {^84^^^^^74^92^[REPLACE] if  ( x < 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^84^85^86^87^88^74^92^[ADD] if  ( x < 0.0 )  { ret = 0.5 * t; } else { ret = 1.0 - 0.5 * t; }^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0  |  0.5 * t;^87^^^^^74^92^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^87^^^^^74^92^[ADD] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 0.5  ;^85^^^^^74^92^[REPLACE] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 0.5; ;^85^^^^^74^92^[REPLACE] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0  >  0.5 * t;^87^^^^^74^92^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^double t = Beta.regularizedBeta ( t (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^[REPLACE] double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 0.5D;^77^^^^^74^92^[REPLACE] ret = 0.5;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( x  !=  0.0 )  {^84^^^^^74^92^[REPLACE] if  ( x < 0.0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0d  <=  0.5 * t;^87^^^^^74^92^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^85^^^^^74^92^[ADD] ret = 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^ret = 1.0D  |  0.5 * t;^87^^^^^74^92^[REPLACE] ret = 1.0 - 0.5 * t;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.MAX_VALUE;^91^^^^^74^92^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  &&  0 )  {^110^^^^^108^117^[REPLACE] if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^110^111^112^^^108^117^[ADD] if  ( p == 0 )  { return Double.NEGATIVE_INFINITY; }^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.POSITIVE_INFINITY;^111^^^^^108^117^[REPLACE] return Double.NEGATIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  !=  2 )  {^113^^^^^108^117^[REPLACE] if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^return Double.POSITIVE_INFINITY;^113^114^115^^^108^117^[ADD] if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.NEGATIVE_INFINITY;^114^^^^^108^117^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return super .cumulativeProbability ( p )  ;^116^^^^^108^117^[REPLACE] return super.inverseCumulativeProbability ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Double.MAX_VALUE;^129^^^^^128^130^[REPLACE] return -Double.MAX_VALUE;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return -Double.MAX_VALUE;^142^^^^^141^143^[REPLACE] return Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return 2.0d;^154^^^^^153^155^[REPLACE] return 0.0;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] TDistributionImpl   [TYPE]  double degreesOfFreedom  p  ret  t  x  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
