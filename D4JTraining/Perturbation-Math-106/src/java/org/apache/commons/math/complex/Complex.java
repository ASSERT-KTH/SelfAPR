[REPLACE]^private static final long serialVersionUID  = null ;^42^^^^^^^[REPLACE] private static final long serialVersionUID = -6530173849413811929L;^ [CLASS] Complex  
[REPLACE]^public static  Complex I = new Complex ( 0.0, 1.0 ) ;^45^^^^^^^[REPLACE] public static final Complex I = new Complex ( 0.0, 1.0 ) ;^ [CLASS] Complex  
[REPLACE]^public static final Complex NaN  = null ;^48^^^^^^^[REPLACE] public static final Complex NaN = new Complex ( Double.NaN, Double.NaN ) ;^ [CLASS] Complex  
[REPLACE]^public static final Complex ONE  = null ;^51^^^^^^^[REPLACE] public static final Complex ONE = new Complex ( 1.0, 0.0 ) ;^ [CLASS] Complex  
[REPLACE]^public static final Complex ZERO ;^54^^^^^^^[REPLACE] public static final Complex ZERO = new Complex ( 0.0, 0.0 ) ;^ [CLASS] Complex  
[REPLACE]^protected float imaginary;^57^^^^^^^[REPLACE] protected double imaginary;^ [CLASS] Complex  
[REPLACE]^if   (  isInfinite  (    )    )   {  ;^85^^^^^84^106^[REPLACE] if  ( isNaN (  )  )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return new Complex  (  real + rhs.getReal  (    )  , imaginary + rhs.getImaginary  (    )    )  ;  ;^86^^^^^84^106^[REPLACE] return Double.NaN;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if   (  isNaN  (    )    )   {  ;^89^^^^^84^106^[REPLACE] if  ( isInfinite (  )  )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return Double.POSITIVE_INFINITY;  ;^90^^^^^84^106^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  ( Math.sqrt ( real )   >=  Math.abs ( imaginary )  )  {^93^^^^^84^106^[REPLACE] if  ( Math.abs ( real )  < Math.abs ( imaginary )  )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  ( real  &&  0.0 )  {^100^^^^^93^105^[REPLACE] if  ( real == 0.0 )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[ADD]^^100^101^102^^^93^105^[ADD] if  ( real == 0.0 )  { return Math.abs ( imaginary ) ; }^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return Math.sqrt ( imaginary ) ;^101^^^^^93^105^[REPLACE] return Math.abs ( imaginary ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return  ( Math.abs ( real )   Math.sqrt ( 1 + qq )  ) ;^104^^^^^93^105^[REPLACE] return  ( Math.abs ( real )  * Math.sqrt ( 1 + q*q )  ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^double q = imaginary  real;^103^^^^^93^105^[REPLACE] double q = imaginary / real;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  ( imaginary  &&  0.0 )  {^94^^^^^84^106^[REPLACE] if  ( imaginary == 0.0 )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return Math.sqrt ( real ) ;^95^^^^^84^106^[REPLACE] return Math.abs ( real ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return  ( Math.abs ( imaginary )   Math.sqrt ( 1 + qq )  ) ;^98^^^^^84^106^[REPLACE] return  ( Math.abs ( imaginary )  * Math.sqrt ( 1 + q*q )  ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^double q = real  imaginary;^97^^^^^84^106^[REPLACE] double q = real / imaginary;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  (   0.0 )  {^94^^^^^84^106^[REPLACE] if  ( imaginary == 0.0 )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return Math .abs (  )  ;^95^^^^^84^106^[REPLACE] return Math.abs ( real ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  ( imaginary  ) {^100^^^^^84^106^[REPLACE] if  ( real == 0.0 )  {^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return Math.sqrt ( imaginary ) ;^101^^^^^84^106^[REPLACE] return Math.abs ( imaginary ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return  ( Math.abs ( imaginary )   Math.abs ( 1 + qq )  ) ;^98^^^^^84^106^[REPLACE] return  ( Math.abs ( imaginary )  * Math.sqrt ( 1 + q*q )  ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^return  ( Math.abs ( real )   Math.sqrt ( 4 + qq )  ) ;^104^^^^^84^106^[REPLACE] return  ( Math.abs ( real )  * Math.sqrt ( 1 + q*q )  ) ;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^double q = imaginary  real;^103^^^^^84^106^[REPLACE] double q = imaginary / real;^[METHOD] abs [TYPE] double [PARAMETER] [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO 
[REPLACE]^if  ( isNaN (  )  && rhs.isNaN (  )  )  {^187^^^^^186^218^[REPLACE] if  ( isNaN (  )  || rhs.isNaN (  )  )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex  (  real + rhs.getReal  (    )  , imaginary + rhs.getImaginary  (    )    )  ;  ;^188^^^^^186^218^[REPLACE] return NaN;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double d = rhs.getImaginary (  )  ;^191^^^^^186^218^[REPLACE] double c = rhs.getReal (  ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^^192^^^^^186^218^[ADD] double d = rhs.getImaginary (  ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  ( c == 0.0D || d == 0.0D )  {^193^^^^^186^218^[REPLACE] if  ( c == 0.0 && d == 0.0 )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^return NaN;^193^194^195^^^186^218^[ADD] if  ( c == 0.0 && d == 0.0 )  { return NaN; }^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex  (  real + rhs.getReal  (    )  , imaginary + rhs.getImaginary  (    )    )  ;  ;^194^^^^^186^218^[REPLACE] return NaN;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  (  isInfinite (  )  )  {^197^^^^^186^218^[REPLACE] if  ( rhs.isInfinite (  )  && !isInfinite (  )  )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REMOVE]^if  ( isNaN (  )  )  {     return NaN; }^197^^^^^186^218^[REMOVE] ^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex  (  real + rhs.getReal  (    )  , imaginary + rhs.getImaginary  (    )    )  ;  ;^198^^^^^186^218^[REPLACE] return ZERO;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  ( Math.abs ( c )   >=  Math.abs ( d )  )  {^201^^^^^186^218^[REPLACE] if  ( Math.abs ( c )  < Math.abs ( d )  )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  ( c  &&  0.0 )  {^210^^^^^201^217^[REPLACE] if  ( c == 0.0 )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return  new Complex (  ( - ( real )  ) ,  ( - ( imaginary )  )  )  ;^211^^^^^201^217^[REPLACE] return new Complex ( imaginary/d, -real/c ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex ( imaginaryd, -realc ) ;^211^^^^^201^217^[REPLACE] return new Complex ( imaginary/d, -real/c ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return  new Complex (  (  (  (  ( real )  * q )  +  ( imaginary )  )  / real ) ,  (  (  (  ( imaginary )  * q )  -  ( real )  )  / denominator )  )    denominator, ( imaginary - real * q )   denominator ) ;^215^216^^^^201^217^[REPLACE] return new Complex (  ( imaginary * q + real )  / denominator, ( imaginary - real * q )  / denominator ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double q = c / d  ;^213^^^^^201^217^[REPLACE] double q = d / c;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^^214^^^^^201^217^[ADD] double denominator = d * q + c;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  (   0.0 )  {^202^^^^^186^218^[REPLACE] if  ( d == 0.0 )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^return new Complex ( real/c, imaginary/c ) ;^202^203^204^^^186^218^[ADD] if  ( d == 0.0 )  { return new Complex ( real/c, imaginary/c ) ; }^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return  new Complex (  (  ( real )  -  ( rhs.getReal (  )  )  ) ,  (  ( imaginary )  -  ( rhs.getImaginary (  )  )  )  )  ;^203^^^^^186^218^[REPLACE] return new Complex ( real/c, imaginary/c ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex (  ( real * q + imaginary )   real, ( imaginary * q - real )   denominator ) ;^207^208^^^^186^218^[REPLACE] return new Complex (  ( real * q + imaginary )  / denominator, ( imaginary * q - real )  / denominator ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double q = c  d;^205^^^^^186^218^[REPLACE] double q = c / d;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double denominator =  ( d * q )  + c  ;^206^^^^^186^218^[REPLACE] double denominator = c * q + d;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  (denominator  !=  0.0 )  {^202^^^^^186^218^[REPLACE] if  ( d == 0.0 )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REMOVE]^if  ( isNaN (  )  )  {     return NaN; }^202^^^^^186^218^[REMOVE] ^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex ( imaginaryc, imaginaryc ) ;^203^^^^^186^218^[REPLACE] return new Complex ( real/c, imaginary/c ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^if  ( c  &&  0.0 )  {^210^^^^^186^218^[REPLACE] if  ( c == 0.0 )  {^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^^210^211^212^^^186^218^[ADD] if  ( c == 0.0 )  { return new Complex ( imaginary/d, -real/c ) ; }^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex ( imaginaryd, -realc ) ;^211^^^^^186^218^[REPLACE] return new Complex ( imaginary/d, -real/c ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return  new Complex (  (  (  (  ( imaginary )  * q )  +  ( real )  )  / denominator ) ,  (  (  ( imaginary )  -  (  ( real )  * q )  )  / denominator )  )    real, ( imaginary * q - real )   denominator ) ;^207^208^^^^186^218^[REPLACE] return new Complex (  ( real * q + imaginary )  / denominator, ( imaginary * q - real )  / denominator ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^return new Complex (  ( imaginary * q + real )   denominator, ( imaginary - real * q )   denominator ) ;^215^216^^^^186^218^[REPLACE] return new Complex (  ( imaginary * q + real )  / denominator, ( imaginary - real * q )  / denominator ) ;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double q = d / c  ;^205^^^^^186^218^[REPLACE] double q = c / d;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double q = d denominator;^213^^^^^186^218^[REPLACE] double q = d / c;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[REPLACE]^double denominator =  ( c * q )  + d  ;^214^^^^^186^218^[REPLACE] double denominator = d * q + c;^[METHOD] divide [TYPE] Complex [PARAMETER] Complex rhs [CLASS] Complex   [TYPE]  boolean false  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs 
[ADD]^^239^^^^^238^263^[ADD] boolean ret;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^if  (rhs  !=  other )  {^241^^^^^238^263^[REPLACE] if  ( this == other )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^}  else {^243^^^^^238^263^[REPLACE] } else if  ( other == null )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REMOVE]^if  (  ( this )  == other )  {     ret = true; }else     if  ( other == null )  {         ret = false;     }else {         try {             Complex rhs =  (  ( Complex )   ( other )  ) ;             if  ( rhs.isNaN (  )  )  {                 ret = this.isNaN (  ) ;             }else {                 ret =  (  ( doubleToRawLongBits ( real )  )  ==  ( doubleToRawLongBits ( rhs.getReal (  )  )  )  )  &&  (  ( doubleToRawLongBits ( imaginary )  )  ==  ( doubleToRawLongBits ( rhs.getImaginary (  )  )  )  ) ;             }         } catch  ( ClassCastException ex )  {             ret = false;         }     }^243^^^^^238^263^[REMOVE] ^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^if   (  isNaN  (    )    )   {  ;^248^^^^^243^260^[REPLACE] if  ( rhs.isNaN (  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^ret = this.isNaN (  ) ;^248^249^250^251^252^243^260^[ADD] if  ( rhs.isNaN (  )  )  { ret = this.isNaN (  ) ; } else { ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  &&^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  ;^251^252^253^254^^248^255^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^249^^^^^243^260^[ADD] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^Complex rhs =  ( Complex ) other;ret = this.isNaN (  ) ;^246^247^248^249^250^243^260^[ADD] try { Complex rhs =  ( Complex ) other; if  ( rhs.isNaN (  )  )  { ret = this.isNaN (  ) ; } else {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^248^249^250^251^252^243^260^[ADD] if  ( rhs.isNaN (  )  )  { ret = this.isNaN (  ) ; } else { ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  &&^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret ;^249^^^^^243^260^[REPLACE] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  ;^251^252^253^254^^243^260^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^247^^^^^243^260^[ADD] Complex rhs =  ( Complex ) other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )   >  ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^251^252^253^254^^243^260^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret = true;^258^^^^^243^260^[REPLACE] ret = false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^boolean ret  ;^247^^^^^243^260^[REPLACE] Complex rhs =  ( Complex ) other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^256^257^258^^^243^260^[ADD] catch  ( ClassCastException ex )  {  ret = false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^244^^^^^238^263^[ADD] ret = false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^if   (  isNaN  (    )    )   {  ;^248^^^^^238^263^[REPLACE] if  ( rhs.isNaN (  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^251^252^253^^^248^255^[ADD] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  ==^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret ;^249^^^^^238^263^[REPLACE] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^Complex rhs =  ( Complex ) other;ret = this.isNaN (  ) ;^246^247^248^249^250^238^263^[ADD] try { Complex rhs =  ( Complex ) other; if  ( rhs.isNaN (  )  )  { ret = this.isNaN (  ) ; } else {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  ;^251^252^253^254^^238^263^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^247^^^^^238^263^[ADD] Complex rhs =  ( Complex ) other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^249^^^^^238^263^[ADD] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  || ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^251^252^253^254^^238^263^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret = true;^258^^^^^238^263^[REPLACE] ret = false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^boolean ret  ;^247^^^^^238^263^[REPLACE] Complex rhs =  ( Complex ) other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret = false;^242^^^^^238^263^[REPLACE] ret = true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )   <=  ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^251^252^253^254^^248^255^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret  =  ret ;^249^^^^^243^260^[REPLACE] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^251^252^253^^^243^260^[ADD] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  ==^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^258^^^^^243^260^[ADD] ret = false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  || ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^251^252^253^254^^248^255^[REPLACE] ret =  ( Double.doubleToRawLongBits ( real )  == Double.doubleToRawLongBits ( rhs.getReal (  )  )  )  && ( Double.doubleToRawLongBits ( imaginary )  == Double.doubleToRawLongBits ( rhs.getImaginary (  )  )  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^ret  =  ret ;^249^^^^^238^263^[REPLACE] ret = this.isNaN (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REMOVE]^if  (  ( this )  == other )  {     ret = true; }else     if  ( other == null )  {         ret = false;     }else {         try {             Complex rhs =  (  ( Complex )   ( other )  ) ;             if  ( rhs.isNaN (  )  )  {                 ret = this.isNaN (  ) ;             }else {                 ret =  (  ( doubleToRawLongBits ( real )  )  ==  ( doubleToRawLongBits ( rhs.getReal (  )  )  )  )  &&  (  ( doubleToRawLongBits ( imaginary )  )  ==  ( doubleToRawLongBits ( rhs.getImaginary (  )  )  )  ) ;             }         } catch  ( ClassCastException ex )  {             ret = false;         }     }^248^^^^^238^263^[REMOVE] ^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[ADD]^^242^^^^^238^263^[ADD] ret = true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
[REPLACE]^return true;^262^^^^^238^263^[REPLACE] return ret;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Complex   [TYPE]  Object other  [TYPE]  boolean false  ret  true  [TYPE]  double c  d  denominator  imaginary  q  real  [TYPE]  long serialVersionUID  [TYPE]  Complex I  NaN  ONE  ZERO  rhs  [TYPE]  ClassCastException ex 
