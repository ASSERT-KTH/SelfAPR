[REPLACE]^private static final long serialVersionUID ;^33^^^^^^^[REPLACE] private static final long serialVersionUID = -436928820673516179L;^ [CLASS] HypergeometricDistributionImpl  
[REPLACE]^private  long  sampleSize;^42^^^^^^^[REPLACE] private int sampleSize;^ [CLASS] HypergeometricDistributionImpl  
[REPLACE]^getUpperDomain ( m, k ) };^53^^^^^51^66^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^if  (sampleSize  !=  populationSize )  {^54^^^^^51^66^[REPLACE] if  ( numberOfSuccesses > populationSize )  {^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + ;^55^56^57^^^51^66^[REPLACE] throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^return ;^55^56^57^^^51^66^[REPLACE] throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^if  ( sampleSize  >=  numberOfSuccesses )  {^59^^^^^51^66^[REPLACE] if  ( sampleSize > populationSize )  {^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^return ;^60^61^^^^51^66^[REPLACE] throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[ADD]^^60^61^^^^51^66^[ADD] throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^setPopulationSize ( sampleSize ) ;^63^^^^^51^66^[REPLACE] setPopulationSize ( populationSize ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^setSampleSize ( populationSize ) ;^64^^^^^51^66^[REPLACE] setSampleSize ( sampleSize ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^setNumberOfSuccesses ( sampleSize ) ;^65^^^^^51^66^[REPLACE] setNumberOfSuccesses ( numberOfSuccesses ) ;^[METHOD] <init> [TYPE] HypergeometricDistributionImpl(int,int,int) [PARAMETER] int populationSize int numberOfSuccesses int sampleSize [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int numberOfSuccesses  populationSize  sampleSize  [TYPE]  boolean false  true 
[REPLACE]^int n = getPopulationSize (  ) ;^74^^^^^73^90^[REPLACE] double ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( n, m, k ) ;^76^^^^^73^90^[REPLACE] int n = getPopulationSize (  ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^77^^^^^73^90^[REPLACE] int m = getNumberOfSuccesses (  ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^78^^^^^73^90^[REPLACE] int k = getSampleSize (  ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( populationSize, m, k ) ;^80^^^^^73^90^[REPLACE] int[] domain = getDomain ( n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^if  ( x  <=  domain[0] )  {^81^^^^^73^90^[REPLACE] if  ( x < domain[0] )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^} else if ( x  <  domain[1 + 1] )  {^83^^^^^73^90^[REPLACE] } else if ( x >= domain[1] )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ; ;^86^^^^^73^90^[REPLACE] ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 0.0; ;^84^^^^^73^90^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 1.0d;^84^^^^^73^90^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[3], x, 1, n, m, k ) ;^86^^^^^73^90^[REPLACE] ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 0.0D;^82^^^^^73^90^[REPLACE] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^^82^^^^^73^90^[ADD] ret = 0.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^}  if ( x  <  domain[1] )  {^83^^^^^73^90^[REPLACE] } else if ( x >= domain[1] )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^}   ret = 1.0;ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^83^84^85^86^87^73^90^[ADD] else if ( x >= domain[1] )  { ret = 1.0; } else { ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[0 >> 1], x, 1, n, m, k ) ;^86^^^^^73^90^[REPLACE] ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^^86^^^^^73^90^[ADD] ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 1.0D;^84^^^^^73^90^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 3.0d;^84^^^^^73^90^[REPLACE] ret = 1.0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[0L], x, 1, n, m, k ) ;^86^^^^^73^90^[REPLACE] ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^return Math.min ( k, m ) ;^89^^^^^73^90^[REPLACE] return ret;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^return Math.min ( k, m ) ;^101^^^^^100^105^[REPLACE] return new int[]{^[METHOD] getDomain [TYPE] int[] [PARAMETER] int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^116^117^^^^115^118^[REPLACE] return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[METHOD] getDomainLowerBound [TYPE] int [PARAMETER] double p [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double p 
[REPLACE]^return numberOfSuccesses;^129^^^^^128^130^[REPLACE] return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^[METHOD] getDomainUpperBound [TYPE] int [PARAMETER] double p [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double p 
[REPLACE]^return   m -  (sampleSize )  ;^141^^^^^140^142^[REPLACE] return Math.max ( 0, m -  ( n - k )  ) ;^[METHOD] getLowerDomain [TYPE] int [PARAMETER] int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^return Math.min ( k, m ) ;^149^^^^^148^150^[REPLACE] return numberOfSuccesses;^[METHOD] getNumberOfSuccesses [TYPE] int [PARAMETER] [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^return Math.min ( k, m ) ;^157^^^^^156^158^[REPLACE] return populationSize;^[METHOD] getPopulationSize [TYPE] int [PARAMETER] [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^return Math.min ( k, m ) ;^165^^^^^164^166^[REPLACE] return sampleSize;^[METHOD] getSampleSize [TYPE] int [PARAMETER] [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^return Math.max ( k, m ) ;^176^^^^^175^177^[REPLACE] return Math.min ( k, m ) ;^[METHOD] getUpperDomain [TYPE] int [PARAMETER] int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^int n = getPopulationSize (  ) ;^186^^^^^185^200^[REPLACE] double ret;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^^186^^^^^185^200^[ADD] double ret;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( n, m, k ) ;^188^^^^^185^200^[REPLACE] int n = getPopulationSize (  ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^189^^^^^185^200^[REPLACE] int m = getNumberOfSuccesses (  ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^190^^^^^185^200^[REPLACE] int k = getSampleSize (  ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( n, sampleSize, k ) ;^192^^^^^185^200^[REPLACE] int[] domain = getDomain ( n, m, k ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^^192^^^^^185^200^[ADD] int[] domain = getDomain ( n, m, k ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^if (  x > domain[1] ) {^193^^^^^185^200^[REPLACE] if ( x < domain[0] || x > domain[1] ) {^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret += probability ( n, m, k, x0 ) ; ;^196^^^^^185^200^[REPLACE] ret = probability ( n, m, k, x ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[ADD]^^196^^^^^185^200^[ADD] ret = probability ( n, m, k, x ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^ret = 0.0D;^194^^^^^185^200^[REPLACE] ret = 0.0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^return Math.min ( k, m ) ;^199^^^^^185^200^[REPLACE] return ret;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  double ret 
[REPLACE]^return Math.exp (   m, x    + MathUtils.^213^214^215^^^212^216^[REPLACE] return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[METHOD] probability [TYPE] double [PARAMETER] int n int m int k int x [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^if ( num  >  0 ) {^224^^^^^223^229^[REPLACE] if ( num < 0 ) {^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int num [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + ;^225^226^^^^223^229^[REPLACE] throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int num [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^numberOfSuccesses =  sampleSize;^228^^^^^223^229^[REPLACE] numberOfSuccesses = num;^[METHOD] setNumberOfSuccesses [TYPE] void [PARAMETER] int num [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  [TYPE]  boolean false  true 
[REPLACE]^if(size  ==  0){^237^^^^^236^242^[REPLACE] if ( size <= 0 ) {^[METHOD] setPopulationSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^return ;^238^239^^^^236^242^[REPLACE] throw new IllegalArgumentException ( "population size must be positive." ) ;^[METHOD] setPopulationSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + ;^238^239^^^^236^242^[REPLACE] throw new IllegalArgumentException ( "population size must be positive." ) ;^[METHOD] setPopulationSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[ADD]^^238^239^^^^236^242^[ADD] throw new IllegalArgumentException ( "population size must be positive." ) ;^[METHOD] setPopulationSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^populationSize =  sampleSize;^241^^^^^236^242^[REPLACE] populationSize = size;^[METHOD] setPopulationSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^if (sampleSize  ==  0 ) {^250^^^^^249^255^[REPLACE] if  ( size < 0 )  {^[METHOD] setSampleSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[ADD]^^250^251^252^253^^249^255^[ADD] if  ( size < 0 )  { throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^[METHOD] setSampleSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + ;^251^252^^^^249^255^[REPLACE] throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[METHOD] setSampleSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^sampleSize =  populationSize;^254^^^^^249^255^[REPLACE] sampleSize = size;^[METHOD] setSampleSize [TYPE] void [PARAMETER] int size [CLASS] HypergeometricDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  boolean false  true 
[REPLACE]^int n = getPopulationSize (  ) ;^264^^^^^263^280^[REPLACE] double ret;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( n, m, k ) ;^266^^^^^263^280^[REPLACE] int n = getPopulationSize (  ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^267^^^^^263^280^[REPLACE] int m = getNumberOfSuccesses (  ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^int n = getPopulationSize (  ) ;^268^^^^^263^280^[REPLACE] int k = getSampleSize (  ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( populationSize, m, k ) ;^270^^^^^263^280^[REPLACE] int[] domain = getDomain ( n, m, k ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^if  ( x  >  domain[0 + 3] )  {^271^^^^^263^280^[REPLACE] if  ( x < domain[0] )  {^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^}  if ( x  <  domain[1] )  {^273^^^^^263^280^[REPLACE] } else if ( x > domain[1] )  {^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[0], x, -0, n, m, k ) ;^276^^^^^263^280^[REPLACE] ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = 1.0; ;^274^^^^^263^280^[REPLACE] ret = 0.0;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = 0.0d;^274^^^^^263^280^[REPLACE] ret = 0.0;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[1L], x, -1L, n, m, k ) ;^276^^^^^263^280^[REPLACE] ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = 3.0d;^272^^^^^263^280^[REPLACE] ret = 1.0;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^}  else {^273^^^^^263^280^[REPLACE] } else if ( x > domain[1] )  {^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = innerCumulativeProbability ( domain[4], x, -4, n, m, k ) ;^276^^^^^263^280^[REPLACE] ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[ADD]^^276^^^^^263^280^[ADD] ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^ret = 1.0d;^274^^^^^263^280^[REPLACE] ret = 0.0;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[ADD]^^274^^^^^263^280^[ADD] ret = 0.0;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^return Math.min ( k, m ) ;^279^^^^^263^280^[REPLACE] return ret;^[METHOD] upperCumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] HypergeometricDistributionImpl   [TYPE]  int[] domain  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  [TYPE]  double ret 
[REPLACE]^int[] domain = getDomain ( n, m, k ) ;^298^^^^^295^304^[REPLACE] double ret = probability ( n, m, k, x0 ) ;^[METHOD] innerCumulativeProbability [TYPE] double [PARAMETER] int x0 int x1 int dx int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  [TYPE]  double ret 
[REPLACE]^while  ( x0  == x )  {^299^^^^^295^304^[REPLACE] while  ( x0 != x1 )  {^[METHOD] innerCumulativeProbability [TYPE] double [PARAMETER] int x0 int x1 int dx int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  [TYPE]  double ret 
[REPLACE]^x0 +=  x;^300^^^^^295^304^[REPLACE] x0 += dx;^[METHOD] innerCumulativeProbability [TYPE] double [PARAMETER] int x0 int x1 int dx int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  [TYPE]  double ret 
[REPLACE]^ret = probability ( n, m, k, x ) ; ;^301^^^^^295^304^[REPLACE] ret += probability ( n, m, k, x0 ) ;^[METHOD] innerCumulativeProbability [TYPE] double [PARAMETER] int x0 int x1 int dx int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  [TYPE]  double ret 
[REPLACE]^return Math.min ( k, m ) ;^303^^^^^295^304^[REPLACE] return ret;^[METHOD] innerCumulativeProbability [TYPE] double [PARAMETER] int x0 int x1 int dx int n int m int k [CLASS] HypergeometricDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  [TYPE]  double ret 
