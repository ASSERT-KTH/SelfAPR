[REPLACE]^static final  short  serialVersionUID = 2619993603551148137L;^37^^^^^^^[REPLACE] static final long serialVersionUID = 2619993603551148137L;^ [CLASS] MullerSolver  
[REPLACE]^double d01  ;^111^^^^^105^181^[REPLACE] double x0, x1, x2, x, oldx, y0, y1, y2, y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^111^112^^^^105^181^[ADD] double x0, x1, x2, x, oldx, y0, y1, y2, y; double d01, d12, d012, c1, delta, xplus, xminus, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double xplus  ;^111^^^^^105^181^[REPLACE] double x0, x1, x2, x, oldx, y0, y1, y2, y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^112^^^^^105^181^[ADD] double d01, d12, d012, c1, delta, xplus, xminus, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double d01  ;^112^^^^^105^181^[REPLACE] double d01, d12, d012, c1, delta, xplus, xminus, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double x0  ;^112^^^^^105^181^[REPLACE] double d01, d12, d012, c1, delta, xplus, xminus, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double xplus  ;^112^^^^^105^181^[REPLACE] double d01, d12, d012, c1, delta, xplus, xminus, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x0 =  xminus; y0^114^^^^^105^181^[REPLACE] x0 = min; y0 = f.value ( x0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^114^^^^^105^181^[REPLACE] x0 = min; y0 = f.value ( x0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^115^^^^^105^181^[ADD] x2 = max; y2 = f.value ( x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y0 = f.value ( x0 )  ;^115^^^^^105^181^[REPLACE] x2 = max; y2 = f.value ( x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^116^^^^^105^181^[ADD] x1 = 0.5 *  ( x0 + x2 ) ; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^116^^^^^105^181^[REPLACE] x1 = 0.5 *  ( x0 + x2 ) ; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( y0  &&  0.0 )  { return min; }^119^^^^^105^181^[REPLACE] if  ( y0 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( y0 == 0.0 )  { return xminus; }^119^^^^^105^181^[REPLACE] if  ( y0 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( ym  !=  y0 )  { return max; }^120^^^^^105^181^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( y2 == 0.0 )  { return xminus; }^120^^^^^105^181^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^verifyBracketing ( min, xminus, f ) ;^121^^^^^105^181^[REPLACE] verifyBracketing ( min, max, f ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^int i = 1L;^123^^^^^105^181^[REPLACE] int i = 1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^oldx ;^124^^^^^105^181^[REPLACE] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( x - oldx )   ==  tolerance )  {^144^^^^^105^181^[REPLACE] if  ( Math.abs ( x - oldx )  <= tolerance )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^return result;  ;^146^^^^^105^181^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( y )   < y )  {^148^^^^^105^181^[REPLACE] if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REMOVE]^if  (  ( abs (  ( x - oldx )  )  )  <= tolerance )  {     setResult ( x, i ) ;     return result; }^148^^^^^105^181^[REMOVE] ^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^return result;  ;^150^^^^^105^181^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( bisect )  {^159^^^^^105^181^[REPLACE] if  ( !bisect )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^x0 = x < x1 ? x0 : x1;y0 = x < x1 ? y0 : y1;x2 = x > x1 ? x2 : x1;y2 = x > x1 ? y2 : y1;^159^160^161^162^163^105^181^[ADD] if  ( !bisect )  { x0 = x < x1 ? x0 : x1; y0 = x < x1 ? y0 : y1; x2 = x > x1 ? x2 : x1; y2 = x > x1 ? y2 : y1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  (   0.0 )  {^169^^^^^159^177^[REPLACE] if  ( MathUtils.sign ( y0 )  + MathUtils.sign ( ym )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^169^170^171^172^173^159^177^[ADD] if  ( MathUtils.sign ( y0 )  + MathUtils.sign ( ym )  == 0.0 )  { x2 = xm; y2 = ym; } else { x0 = xm; y0 = ym; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^172^^^^^169^173^[ADD] x0 = xm; y0 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x0 = xm  ;^170^^^^^159^177^[REPLACE] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^170^^^^^159^177^[REPLACE] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^170^^^^^159^177^[ADD] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^172^^^^^159^177^[REPLACE] x0 = xm; y0 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = y  ;^172^^^^^159^177^[REPLACE] x0 = xm; y0 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^174^^^^^159^177^[ADD] x1 = 0.5 *  ( x0 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^175^^^^^159^177^[REPLACE] y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^176^^^^^159^177^[ADD] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double xm = 0.5   ( x0 + x2 ) ;^167^^^^^159^177^[REPLACE] double xm = 0.5 *  ( x0 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double ym = f.value ( ym ) ;^168^^^^^159^177^[REPLACE] double ym = f.value ( xm ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 =  ( x > x1 )  ? y2 : y1  ;^160^^^^^105^181^[REPLACE] x0 = x < x1 ? x0 : x1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y0  =  y1;^161^^^^^105^181^[REPLACE] y0 = x < x1 ? y0 : y1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^162^^^^^105^181^[ADD] x2 = x > x1 ? x2 : x1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2  =  y2 ;^163^^^^^105^181^[REPLACE] y2 = x > x1 ? y2 : y1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^164^^^^^105^181^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = y  ;^164^^^^^105^181^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^oldx =  xplus;^165^^^^^105^181^[REPLACE] oldx = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y0 )  + MathUtils.sign ( ym )   &&  0.0 )  {^169^^^^^105^181^[REPLACE] if  ( MathUtils.sign ( y0 )  + MathUtils.sign ( ym )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = y  ;^172^^^^^169^173^[REPLACE] x0 = xm; y0 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x0 = xm  ;^170^^^^^105^181^[REPLACE] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^170^^^^^105^181^[REPLACE] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^d01 =  (ym )    ( x1 - x0 ) ;^130^^^^^105^181^[REPLACE] d01 =  ( y1 - y0 )  /  ( x1 - x0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^d12 =  ( y2 - y1 )    ( x2 - x1 ) ;^131^^^^^105^181^[REPLACE] d12 =  ( y2 - y1 )  /  ( x2 - x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^d012 =  ( d12 - d01 )    ( x2 - x0 ) ;^132^^^^^105^181^[REPLACE] d012 =  ( d12 - d01 )  /  ( x2 - x0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^c1 = d01   ( x1 - x0 )  * d012;^133^^^^^105^181^[REPLACE] c1 = d01 +  ( x1 - x0 )  * d012;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^134^^^^^105^181^[ADD] delta = c1 * c1 - 4 * y1 * d012;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^xplus = x1   ( -2.0 * y1 )  /  ( c1  Math.sqrt ( delta )  ) ;^135^^^^^105^181^[REPLACE] xplus = x1 +  ( -2.0 * y1 )  /  ( c1 + Math.sqrt ( delta )  ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^xminus = y1   ( -2.0 * y1 )  /  ( c1 - Math.sqrt ( delta )  ) ;^136^^^^^105^181^[REPLACE] xminus = x1 +  ( -2.0 * y1 )  /  ( c1 - Math.sqrt ( delta )  ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x =  isSequence ( y0, xplus, x2 )  ? xplus : xminus;^139^^^^^105^181^[REPLACE] x = isSequence ( x0, xplus, x2 )  ? xplus : xminus;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^140^^^^^105^181^[ADD] y = f.value ( x ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^tolerance = Math.max ( relativeAccuracy  Math.abs ( x ) , absoluteAccuracy ) ;^143^^^^^105^181^[REPLACE] tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^160^^^^^105^181^[ADD] x0 = x < x1 ? x0 : x1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x0 =  ( x < x1 )  ? x0 : x1  ;^161^^^^^105^181^[REPLACE] y0 = x < x1 ? y0 : y1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2  =  x1;^162^^^^^105^181^[REPLACE] x2 = x > x1 ? x2 : x1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x0 =  ( x < x1 )  ? x0 : x1  ;^163^^^^^105^181^[REPLACE] y2 = x > x1 ? y2 : y1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^164^^^^^105^181^[ADD] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^165^^^^^105^181^[ADD] oldx = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^170^^^^^105^181^[ADD] x2 = xm; y2 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^172^^^^^105^181^[ADD] x0 = xm; y0 = ym;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^x2 = 0.5 *  ( x0 + x1 )  ;^174^^^^^105^181^[REPLACE] x1 = 0.5 *  ( x0 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^175^^^^^105^181^[REPLACE] y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^oldx  =  oldx ;^176^^^^^105^181^[REPLACE] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^boolean bisect =  ( x < x1 ;^155^156^157^^^105^181^[REPLACE] boolean bisect =  ( x < x1 &&  ( x1 - x0 )  > 0.95 *  ( x2 - x0 )  )  || ( x > x1 &&  ( x2 - x1 )  > 0.95 *  ( x2 - x0 )  )  || ( x == x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double xm =d012   ( x0 + x2 ) ;^167^^^^^105^181^[REPLACE] double xm = 0.5 *  ( x0 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^168^^^^^105^181^[ADD] double ym = f.value ( xm ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[ADD]^^180^^^^^105^181^[ADD] throw new ConvergenceException  (" ")  ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean bisect  false  true  [TYPE]  long serialVersionUID  [TYPE]  double c1  d01  d012  d12  delta  max  min  oldx  tolerance  x  x0  x1  x2  xm  xminus  xplus  y  y0  y1  y2  ym  [TYPE]  int i 
[REPLACE]^double d01  ;^214^^^^^209^276^[REPLACE] double x0, x1, x2, x, oldx, y0, y1, y2, y;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^double xplus  ;^214^^^^^209^276^[REPLACE] double x0, x1, x2, x, oldx, y0, y1, y2, y;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^214^^^^^209^276^[ADD] double x0, x1, x2, x, oldx, y0, y1, y2, y;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^215^^^^^209^276^[ADD] double q, A, B, C, delta, denominator, tolerance;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^double d01  ;^215^^^^^209^276^[REPLACE] double q, A, B, C, delta, denominator, tolerance;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^217^218^^^^209^276^[ADD] x0 = min; y0 = f.value ( x0 ) ; x1 = max; y1 = f.value ( x1 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^217^^^^^209^276^[REPLACE] x0 = min; y0 = f.value ( x0 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x2 = max  ;^218^^^^^209^276^[REPLACE] x1 = max; y1 = f.value ( x1 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^218^219^^^^209^276^[ADD] x1 = max; y1 = f.value ( x1 ) ; x2 = 0.5 *  ( x0 + x1 ) ; y2 = f.value ( x2 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x2 = 0.5   ( x0 + x1 ) ; y2 = f.value ( x2 ) ;^219^^^^^209^276^[REPLACE] x2 = 0.5 *  ( x0 + x1 ) ; y2 = f.value ( x2 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^y0 = f.value ( x0 )  ;^219^^^^^209^276^[REPLACE] x2 = 0.5 *  ( x0 + x1 ) ; y2 = f.value ( x2 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( y0  &&  4.0d )  { return tolerance; }^222^^^^^209^276^[REPLACE] if  ( y0 == 0.0 )  { return min; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( y0 == 0.0 )  { return tolerance; }^222^^^^^209^276^[REPLACE] if  ( y0 == 0.0 )  { return min; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^return solve  (  initial, max  )  ;  ;^222^^^^^209^276^[REPLACE] if  ( y0 == 0.0 )  { return min; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( y1  ||  0.0 )  { return max; }^223^^^^^209^276^[REPLACE] if  ( y1 == 0.0 )  { return max; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^verifyBracketing ( min, max, f ) ;int i = 1;oldx = Double.POSITIVE_INFINITY;^223^224^^226^227^209^276^[ADD] if  ( y1 == 0.0 )  { return max; } verifyBracketing ( min, max, f ) ; int i = 1; oldx = Double.POSITIVE_INFINITY;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( y1 == 0.0 )  { return x; }^223^^^^^209^276^[REPLACE] if  ( y1 == 0.0 )  { return max; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^verifyBracketing ( min, x, f ) ;^224^^^^^209^276^[REPLACE] verifyBracketing ( min, max, f ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^int i = 4;^226^^^^^209^276^[REPLACE] int i = 1;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^oldx  =  oldx ;^227^^^^^209^276^[REPLACE] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( delta  <=  0.0 )  {^235^^^^^209^276^[REPLACE] if  ( delta >= 0.0 )  {^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^denominator = Math.sqrt ( B * B  delta ) ;^242^^^^^235^243^[REPLACE] denominator = Math.sqrt ( B * B - delta ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^denominator = Math.abs ( dplus )   >=  Math.abs ( dminus )  ? dplus : dminus;^239^^^^^209^276^[REPLACE] denominator = Math.abs ( dplus )  > Math.abs ( dminus )  ? dplus : dminus;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^237^238^^^^209^276^[ADD] double dplus = B + Math.sqrt ( delta ) ; double dminus = B - Math.sqrt ( delta ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^238^239^^^^209^276^[ADD] double dminus = B - Math.sqrt ( delta ) ; denominator = Math.abs ( dplus )  > Math.abs ( dminus )  ? dplus : dminus;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( denominator  == tolerance )  {^244^^^^^209^276^[REPLACE] if  ( denominator != 0 )  {^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^252^^^^^244^254^[ADD] x = min + Math.random (  )  *  ( max - min ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^oldx  =  oldx ;^253^^^^^244^254^[REPLACE] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^245^^^^^209^276^[ADD] x = x2 - 2.0 * C *  ( x2 - x1 )  / denominator;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^248^^^^^209^276^[ADD] x += absoluteAccuracy;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( x - oldx )   >  tolerance )  {^259^^^^^209^276^[REPLACE] if  ( Math.abs ( x - oldx )  <= tolerance )  {^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^setResult ( x, i ) ;return result;^259^260^261^262^^209^276^[ADD] if  ( Math.abs ( x - oldx )  <= tolerance )  { setResult ( x, i ) ; return result; }^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^return result;  ;^261^^^^^209^276^[REPLACE] return result;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( y )   >  functionValueAccuracy )  {^263^^^^^209^276^[REPLACE] if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^return result;  ;^265^^^^^209^276^[REPLACE] return result;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^q =  ( x2 - x1 )    ( x1 - x0 ) ;^230^^^^^209^276^[REPLACE] q =  ( x2 - x1 )  /  ( x1 - x0 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^A = q   ( y2 -  ( 1 + q )   y1 + q  y0 ) ;^231^^^^^209^276^[REPLACE] A = q *  ( y2 -  ( 1 + q )  * y1 + q * y0 ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^B =  ( 2*q  1 )  * y2 -  ( 1  q )  *  ( 1  q )  * y1  q * q * y0;^232^^^^^209^276^[REPLACE] B =  ( 2*q + 1 )  * y2 -  ( 1 + q )  *  ( 1 + q )  * y1 + q * q * y0;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^C =  ( 1 + q )   y2;^233^^^^^209^276^[REPLACE] C =  ( 1 + q )  * y2;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^delta = B * B  4 * A * C;^234^^^^^209^276^[REPLACE] delta = B * B - 4 * A * C;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^denominator  =  dminus;^239^^^^^209^276^[REPLACE] denominator = Math.abs ( dplus )  > Math.abs ( dminus )  ? dplus : dminus;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^242^^^^^209^276^[ADD] denominator = Math.sqrt ( B * B - delta ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x = x2  2.0D * C *  ( x2  x1 )  / denominator;^245^^^^^209^276^[REPLACE] x = x2 - 2.0 * C *  ( x2 - x1 )  / denominator;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x + =  x +;^248^^^^^209^276^[REPLACE] x += absoluteAccuracy;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x = min  Math.random (  )  *  ( max - min ) ;^252^^^^^209^276^[REPLACE] x = min + Math.random (  )  *  ( max - min ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^253^^^^^209^276^[ADD] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^255^^^^^209^276^[REPLACE] y = f.value ( x ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^tolerance = Math.max ( relativeAccuracy  Math.abs ( x ) , absoluteAccuracy ) ;^258^^^^^209^276^[REPLACE] tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^269^^^^^209^276^[ADD] x0 = x1; y0 = y1;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^y2 = y  ;^269^^^^^209^276^[REPLACE] x0 = x1; y0 = y1;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^270^^^^^209^276^[REPLACE] x1 = x2; y1 = y2;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^y2 = y  ;^270^^^^^209^276^[REPLACE] x1 = x2; y1 = y2;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^x2 = xm  ;^271^^^^^209^276^[REPLACE] x2 = x; y2 = y;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^271^272^^^^209^276^[ADD] x2 = x; y2 = y; oldx = x;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^oldx =  x2;^272^^^^^209^276^[REPLACE] oldx = x;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^double dplus = B  Math.sqrt ( delta ) ;^237^^^^^209^276^[REPLACE] double dplus = B + Math.sqrt ( delta ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[REPLACE]^double dminus = B  Math.abs ( delta ) ;^238^^^^^209^276^[REPLACE] double dminus = B - Math.sqrt ( delta ) ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
[ADD]^^275^^^^^209^276^[ADD] throw new ConvergenceException  (" ")  ;^[METHOD] solve2 [TYPE] double [PARAMETER] double min double max [CLASS] MullerSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double A  B  C  delta  denominator  dminus  dplus  max  min  oldx  q  tolerance  x  x0  x1  x2  y  y0  y1  y2  [TYPE]  int i 
