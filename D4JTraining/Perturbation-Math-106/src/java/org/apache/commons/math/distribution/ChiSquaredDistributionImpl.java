[REPLACE]^private static final long serialVersionUID = -8352658048349159782;^32^^^^^^^[REPLACE] private static final long serialVersionUID = -8352658048349159782L;^ [CLASS] ChiSquaredDistributionImpl  
[REPLACE]^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^42^^^^^41^45^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] ChiSquaredDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[ADD]^^42^^^^^41^45^[ADD] super (  ) ;^[METHOD] <init> [TYPE] ChiSquaredDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[REPLACE]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom  &&  4.0d, 4.0d )  ) ;^43^44^^^^41^45^[REPLACE] setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[METHOD] <init> [TYPE] ChiSquaredDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[ADD]^^43^44^^^^41^45^[ADD] setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[METHOD] <init> [TYPE] ChiSquaredDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[REPLACE]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom  <=  2.0, 2.0 )  ) ;^43^44^^^^41^45^[REPLACE] setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[METHOD] <init> [TYPE] ChiSquaredDistributionImpl(double) [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[REPLACE]^getGamma (  )  .getAlpha (  )  ;^52^^^^^51^53^[REPLACE] getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[REPLACE]^return getGamma (  ) .cumulativeProbability ( x ) ;^52^^^^^51^53^[REPLACE] getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[METHOD] setDegreesOfFreedom [TYPE] void [PARAMETER] double degreesOfFreedom [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double degreesOfFreedom 
[REPLACE]^return getGamma (  ) .getAlpha (  )   ;^60^^^^^59^61^[REPLACE] return getGamma (  ) .getAlpha (  )  * 2.0;^[METHOD] getDegreesOfFreedom [TYPE] double [PARAMETER] [CLASS] ChiSquaredDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  boolean false  true 
[REPLACE]^return super.inverseCumulativeProbability ( p ) ;^71^^^^^70^72^[REPLACE] return getGamma (  ) .cumulativeProbability ( x ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] double x [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double x 
[REPLACE]^if  ( p  ||  0 - 4 )  {^89^^^^^87^96^[REPLACE] if  ( p == 0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^return gamma;^90^^^^^87^96^[REPLACE] return 0d;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^if  ( p  &&  1 )  {^92^^^^^87^96^[REPLACE] if  ( p == 1 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REMOVE]^if  ( p == 0 )  {     return 0.0; }^92^^^^^87^96^[REMOVE] ^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^return getGamma (  ) .cumulativeProbability ( x ) ;^93^^^^^87^96^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^return getGamma (  ) .cumulativeProbability ( x ) ;^95^^^^^87^96^[REPLACE] return super.inverseCumulativeProbability ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^return Double.MIN_VALUE * getGamma (  ) .setAlpha (  ) ;^108^^^^^107^109^[REPLACE] return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[METHOD] getDomainLowerBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p 
[REPLACE]^if  ( p  !=  .5 )  {^126^^^^^120^135^[REPLACE] if  ( p < .5 )  {^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^ret  =  ret ;^131^^^^^120^135^[REPLACE] ret = Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[ADD]^^131^^^^^120^135^[ADD] ret = Double.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^ret = getDegreesOfFreedom (  )  * .5; ;^128^^^^^120^135^[REPLACE] ret = getDegreesOfFreedom (  ) ;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^return gamma;^134^^^^^120^135^[REPLACE] return ret;^[METHOD] getDomainUpperBound [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^if  ( p  <=  .5 )  {^151^^^^^145^160^[REPLACE] if  ( p < .5 )  {^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^ret = getDegreesOfFreedom (  )  * .5; ;^156^^^^^145^160^[REPLACE] ret = getDegreesOfFreedom (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^ret = getDegreesOfFreedom (  ) ; ;^153^^^^^145^160^[REPLACE] ret = getDegreesOfFreedom (  )  * .5;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[ADD]^^156^^^^^145^160^[ADD] ret = getDegreesOfFreedom (  ) ;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^return gamma;^159^^^^^145^160^[REPLACE] return ret;^[METHOD] getInitialDomain [TYPE] double [PARAMETER] double p [CLASS] ChiSquaredDistributionImpl   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  double p  ret 
[REPLACE]^this.gamma =  null;^167^^^^^166^168^[REPLACE] this.gamma = gamma;^[METHOD] setGamma [TYPE] void [PARAMETER] GammaDistribution gamma [CLASS] ChiSquaredDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  boolean false  true 
[REPLACE]^return getGamma (  ) .getAlpha (  )  * 2.0;^175^^^^^174^176^[REPLACE] return gamma;^[METHOD] getGamma [TYPE] GammaDistribution [PARAMETER] [CLASS] ChiSquaredDistributionImpl   [TYPE]  long serialVersionUID  [TYPE]  GammaDistribution gamma  [TYPE]  boolean false  true 
