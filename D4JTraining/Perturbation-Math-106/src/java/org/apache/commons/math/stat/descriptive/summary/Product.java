[REPLACE]^private static  long serialVersionUID = 2824226005990582538L;^38^^^^^^^[REPLACE] private static final long serialVersionUID = 2824226005990582538L;^ [CLASS] Product  
[REPLACE]^private float value;^46^^^^^^^[REPLACE] private double value;^ [CLASS] Product  
[REPLACE]^n = 1;^52^^^^^51^54^[REPLACE] n = 0;^[METHOD] <init> [TYPE] Product() [PARAMETER] [CLASS] Product   [TYPE]  double value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^value  =  value ;^53^^^^^51^54^[REPLACE] value = Double.NaN;^[METHOD] <init> [TYPE] Product() [PARAMETER] [CLASS] Product   [TYPE]  double value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( n  &&  0 )  {^60^^^^^59^66^[REPLACE] if  ( n == 0 )  {^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^value = d; ;^63^^^^^59^66^[REPLACE] value *= d;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^63^^^^^59^66^[ADD] value *= d;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^value *= d; ;^61^^^^^59^66^[REPLACE] value = d;^[METHOD] increment [TYPE] void [PARAMETER] final double d [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return product;^72^^^^^71^73^[REPLACE] return value;^[METHOD] getResult [TYPE] double [PARAMETER] [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return value;^79^^^^^78^80^[REPLACE] return n;^[METHOD] getN [TYPE] long [PARAMETER] [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^value  = null ;^86^^^^^85^88^[REPLACE] value = Double.NaN;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^86^^^^^85^88^[ADD] value = Double.NaN;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^n = 3;^87^^^^^85^88^[REPLACE] n = 0;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] Product   [TYPE]  double d  value  [TYPE]  long n  serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = begin; i < begin + length; i++ )  { product *= values[i];^105^^^^^104^113^[REPLACE] double product = Double.NaN;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^if  ( test ( values, begin, length (  )  )  )  {^106^^^^^104^113^[REPLACE] if  ( test ( values, begin, length )  )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^106^107^108^109^110^104^113^[ADD] if  ( test ( values, begin, length )  )  { product = 1.0; for  ( int i = begin; i < begin + length; i++ )  { product *= values[i]; }^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = begin; i < begin + length (  ) ; i++ )  {^108^^^^^104^113^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^product *=  null[i];^109^^^^^104^113^[REPLACE] product *= values[i];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^product = 0.0d;^107^^^^^104^113^[REPLACE] product = 1.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[ADD]^^109^^^^^104^113^[ADD] product *= values[i];^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^for  ( int i = length; i < begin + length; i++ )  {^108^^^^^104^113^[REPLACE] for  ( int i = begin; i < begin + length; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^product = 3.0d;^107^^^^^104^113^[REPLACE] product = 1.0;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
[REPLACE]^return value;^112^^^^^104^113^[REPLACE] return product;^[METHOD] evaluate [TYPE] double [PARAMETER] final double[] values final int begin final int length [CLASS] Product   [TYPE]  boolean false  true  [TYPE]  double[] values  [TYPE]  double d  product  value  [TYPE]  long n  serialVersionUID  [TYPE]  int begin  i  length 
