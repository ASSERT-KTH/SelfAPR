[REPLACE]^private DistributionFactory distributionFactory  = null ;^30^^^^^^^[REPLACE] private DistributionFactory distributionFactory = null;^ [CLASS] ChiSquareTestImpl  
[REPLACE]^chiSquare ( expected, observed )  ) ;^36^^^^^35^37^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] ChiSquareTestImpl() [PARAMETER] [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^double sumSq = 0.0f;^48^^^^^46^63^[REPLACE] double sumSq = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^double dev = 4.0f;^49^^^^^46^63^[REPLACE] double dev = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^49^^^^^46^63^[ADD] double dev = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^if  (  ( expected.length /  0  < 0  )  ||  ( expected.length /  0  != observed.length /  0  )  )  {^50^^^^^46^63^[REPLACE] if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^50^51^52^53^^46^63^[ADD] if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  { throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; }^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; ;^51^52^^^^46^63^[REPLACE] throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^if  (  !isNonNegative ( observed )  )  {^54^^^^^46^63^[REPLACE] if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; ;^55^56^^^^46^63^[REPLACE] throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < observed.length (  ) ; i++ )  {^58^^^^^46^63^[REPLACE] for  ( int i = 0; i < observed.length; i++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^58^59^60^61^^46^63^[ADD] for  ( int i = 0; i < observed.length; i++ )  { dev =  (  ( double )  observed[i] - expected[i] ) ; sumSq += dev * dev / expected[i]; }^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^dev =  (  ( double )  observed[i]  >  expected[i] ) ;^59^^^^^46^63^[REPLACE] dev =  (  ( double )  observed[i] - expected[i] ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^59^^^^^46^63^[ADD] dev =  (  ( double )  observed[i] - expected[i] ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^sumSq += dev * dev  ;^60^^^^^46^63^[REPLACE] sumSq += dev * dev / expected[i];^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^dev =  (  ( double )  observed[i] -false ) ;^59^^^^^46^63^[REPLACE] dev =  (  ( double )  observed[i] - expected[i] ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^60^^^^^46^63^[ADD] sumSq += dev * dev / expected[i];^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < observed.length; i++ )  {^58^^^^^46^63^[REPLACE] for  ( int i = 0; i < observed.length; i++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^return distributionFactory;^62^^^^^46^63^[REPLACE] return sumSq;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution (  (  double )  expected.length + 1 - 1 ) ;^74^75^76^^^72^79^[REPLACE] ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed 
[REPLACE]^return 0  ;^77^78^^^^72^79^[REPLACE] return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed 
[REPLACE]^if  (  ( alpha <= 0 )  ) {^92^^^^^90^97^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] double[] expected long[] observed double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double alpha 
[REPLACE]^return ;^93^94^^^^90^97^[REPLACE] throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] double[] expected long[] observed double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double alpha 
[ADD]^^93^94^^^^90^97^[ADD] throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] double[] expected long[] observed double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double alpha 
[REPLACE]^return  ( chiSquareTest ( expected, observed )   !=  alpha ) ;;^96^^^^^90^97^[REPLACE] return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] double[] expected long[] observed double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double alpha 
[REPLACE]^return  ( chiSquareTest ( counts )  < alpha ) ;^106^^^^^104^133^[REPLACE] checkArray ( counts ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^int nCols = counts[0].length;^107^^^^^104^133^[REPLACE] int nRows = counts.length;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^int nCols = counts[0 ].length;^108^^^^^104^133^[REPLACE] int nCols = counts[0].length;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double[] colSum = new double[nCols];^111^^^^^104^133^[REPLACE] double[] rowSum = new double[nRows];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double[] rowSum = new double[nRows];^112^^^^^104^133^[REPLACE] double[] colSum = new double[nCols];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^112^113^^^^104^133^[ADD] double[] colSum = new double[nCols]; double total = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double total = 0.0f;^113^^^^^104^133^[REPLACE] double total = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^113^^^^^104^133^[ADD] double total = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int row = 0; row  <=  nRows; row++ )  {^114^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 1; col  ==  nCols; col++ )  {^115^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^115^116^117^118^119^104^133^[ADD] for  ( int col = 0; col < nCols; col++ )  { rowSum[row] +=  ( double )  counts[row][col]; colSum[col] +=  ( double )  counts[row][col]; total +=  ( double )  counts[row][col]; }^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^colSum[col] +=  ( double )  counts[row][col]; ;^116^^^^^104^133^[REPLACE] rowSum[row] +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^rowSum[row] +=  ( double )  counts[row][col]; ;^117^^^^^104^133^[REPLACE] colSum[col] +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^117^118^^^^104^133^[ADD] colSum[col] +=  ( double )  counts[row][col]; total +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^colSum[col] +=  ( double )  counts[row][col]; ;^118^^^^^104^133^[REPLACE] total +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^116^^^^^104^133^[ADD] rowSum[row] +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 1; col < nCols; col++ )  {^115^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 0; col  >=  nCols; col++ )  {^115^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int row = 0 + 1; row < nRows; row++ )  {^114^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 2; col < nCols; col++ )  {^115^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double sumSq = 0.0f;^123^^^^^104^133^[REPLACE] double sumSq = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^123^124^^^^104^133^[ADD] double sumSq = 0.0d; double expected = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double expected = 0.0f;^124^^^^^104^133^[REPLACE] double expected = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( intnCols = 0; row  <=  nRows; row++ )  {^125^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 0; col  <=  nCols; col++ )  {^126^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^expected =  ( rowSum[row] * colSum[col] )   ;^127^^^^^104^133^[REPLACE] expected =  ( rowSum[row] * colSum[col] )  / total;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )   ;^128^129^^^^104^133^[REPLACE] sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^128^129^^^^104^133^[ADD] sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 3; col < nCols; col++ )  {^126^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int nRows = 3; col  <=  row; col++ )  {^126^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^126^127^128^129^130^104^133^[ADD] for  ( int col = 0; col < nCols; col++ )  { expected =  ( rowSum[row] * colSum[col] )  / total; sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected; }^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^127^^^^^104^133^[ADD] expected =  ( rowSum[row] * colSum[col] )  / total;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^sumSq +=  (  (  ( double )  counts[row][col] - total )  * (  ( double )  counts[row][col] - expected )  )   ;^128^129^^^^104^133^[REPLACE] sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int row = 4; row < nRows; row++ )  {^125^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 0 + 2; col < nCols; col++ )  {^126^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^return distributionFactory;^132^^^^^104^133^[REPLACE] return sumSq;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^return  ( chiSquareTest ( counts )  < alpha ) ;^143^^^^^141^148^[REPLACE] checkArray ( counts ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[REMOVE]^super (  ) ;^143^^^^^141^148^[REMOVE] ^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[REPLACE]^double df =  (  ( double )  counts.length + 1 -1 )  *  (  ( double )  counts[0].length + 1 - 1 ) ;^144^^^^^141^148^[REPLACE] double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[REPLACE]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  )  .newInstance (  )  ;^145^146^^^^141^148^[REPLACE] ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[ADD]^^145^146^^^^141^148^[ADD] ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[REPLACE]^return 1  &  chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^[REPLACE] return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[METHOD] chiSquareTest [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  ChiSquaredDistribution chiSquaredDistribution  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double df 
[REPLACE]^if  (   ( alpha > 4.5 )  )  {^160^^^^^158^164^[REPLACE] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[ADD]^^160^161^162^^^158^164^[ADD] if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[REPLACE]^return ;^161^^^^^158^164^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[REPLACE]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; ;^161^^^^^158^164^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[ADD]^^161^^^^^158^164^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[REPLACE]^return  ( chiSquareTest ( counts )   ;^163^^^^^158^164^[REPLACE] return  ( chiSquareTest ( counts )  < alpha ) ;^[METHOD] chiSquareTest [TYPE] boolean [PARAMETER] long[][] counts double alpha [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] counts  [TYPE]  double alpha 
[REPLACE]^if  ( in.length + 2 < 2 )  {^176^^^^^174^192^[REPLACE] if  ( in.length < 2 )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; ;^177^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[ADD]^^177^^^^^174^192^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( in[0].length (  )  < 2 )  {^180^^^^^174^192^[REPLACE] if  ( in[0].length < 2 )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; ;^181^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( isRectangular ( in )  )  {^184^^^^^174^192^[REPLACE] if  ( !isRectangular ( in )  )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[ADD]^^184^185^186^^^174^192^[ADD] if  ( !isRectangular ( in )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^return ;^185^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( isNonNegative ( in )  )  {^188^^^^^174^192^[REPLACE] if  ( !isNonNegative ( in )  )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; ;^189^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[ADD]^^189^^^^^174^192^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( distributionFactory != null )  {^201^^^^^200^205^[REPLACE] if  ( distributionFactory == null )  {^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^distributionFactory ;^202^^^^^200^205^[REPLACE] distributionFactory = DistributionFactory.newInstance (  ) ;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^distributionFactory  =  distributionFactory ;^202^^^^^200^205^[REPLACE] distributionFactory = DistributionFactory.newInstance (  ) ;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^return sumSq;^204^^^^^200^205^[REPLACE] return distributionFactory;^[METHOD] getDistributionFactory [TYPE] DistributionFactory [PARAMETER] [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true 
[REPLACE]^if  ( in[i].length %  0.5  != in[0].length %  0.5  )  {^219^^^^^217^224^[REPLACE] if  ( in[i].length != in[0].length )  {^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^return true;^220^^^^^217^224^[REPLACE] return false;^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 1; i < in.length (  ) ; i++ )  {^218^^^^^217^224^[REPLACE] for  ( int i = 1; i < in.length; i++ )  {^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[ADD]^^218^219^220^221^^217^224^[ADD] for  ( int i = 1; i < in.length; i++ )  { if  ( in[i].length != in[0].length )  { return false; }^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^if  ( in[i].length *  0.5  != in[0].length *  0.5  )  {^219^^^^^217^224^[REPLACE] if  ( in[i].length != in[0].length )  {^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < in.length; i++ )  {^218^^^^^217^224^[REPLACE] for  ( int i = 1; i < in.length; i++ )  {^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^return false;^223^^^^^217^224^[REPLACE] return true;^[METHOD] isRectangular [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i 
[REPLACE]^if  ( in[i]  ==  0 )  {^236^^^^^234^241^[REPLACE] if  ( in[i] <= 0 )  {^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[ADD]^^236^237^238^^^234^241^[ADD] if  ( in[i] <= 0 )  { return false; }^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^return true;^237^^^^^234^241^[REPLACE] return false;^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < in.length - 5; i ++ )  {^235^^^^^234^241^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^if  ( in[i]  ==  0 >>> 4 )  {^236^^^^^234^241^[REPLACE] if  ( in[i] <= 0 )  {^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < in.length; i ++ )  {^235^^^^^234^241^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^return false;^240^^^^^234^241^[REPLACE] return true;^[METHOD] isPositive [TYPE] boolean [PARAMETER] double[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] in  [TYPE]  int i 
[REPLACE]^if  ( in[i]  <=  0 )  {^253^^^^^251^258^[REPLACE] if  ( in[i] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^return true;^254^^^^^251^258^[REPLACE] return false;^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < in.length - 1; i ++ )  {^252^^^^^251^258^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^if  ( in[i]  >  0 )  {^253^^^^^251^258^[REPLACE] if  ( in[i] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < in.length; i ++ )  {^252^^^^^251^258^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^return false;^257^^^^^251^258^[REPLACE] return true;^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[] in  [TYPE]  int i 
[REPLACE]^if  ( in[i][j]  == this )  {^271^^^^^268^277^[REPLACE] if  ( in[i][j] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^return true;^272^^^^^268^277^[REPLACE] return false;^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^for  ( int i = 0; i < in.length + 2; i ++ )  {^269^^^^^268^277^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[ADD]^^269^270^271^272^273^268^277^[ADD] for  ( int i = 0; i < in.length; i ++ )  { for  ( int j = 0; j < in[i].length; j++ )  { if  ( in[i][j] < 0 )  { return false; }^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^if  ( in[i][j]  !=  0 )  {^271^^^^^268^277^[REPLACE] if  ( in[i][j] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0 ; j < in[i].length + 3; j++ )  {^270^^^^^268^277^[REPLACE] for  ( int j = 0; j < in[i].length; j++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^if  ( in[i][j]  >=  2 )  {^271^^^^^268^277^[REPLACE] if  ( in[i][j] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[ADD]^^271^272^273^^^268^277^[ADD] if  ( in[i][j] < 0 )  { return false; }^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0 ; j < in[i].length; j++ )  {^270^^^^^268^277^[REPLACE] for  ( int j = 0; j < in[i].length; j++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0 ; j < in[i].length /  2; j++ )  {^270^^^^^268^277^[REPLACE] for  ( int j = 0; j < in[i].length; j++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^if  ( in[i][j]  >=  0 )  {^271^^^^^268^277^[REPLACE] if  ( in[i][j] < 0 )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^for  ( int i = 0 ; i < in.length; i ++ )  {^269^^^^^268^277^[REPLACE] for  ( int i = 0; i < in.length; i ++ )  {^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[ADD]^^270^271^272^273^^268^277^[ADD] for  ( int j = 0; j < in[i].length; j++ )  { if  ( in[i][j] < 0 )  { return false; }^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
[REPLACE]^return false;^276^^^^^268^277^[REPLACE] return true;^[METHOD] isNonNegative [TYPE] boolean [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  long[][] in  [TYPE]  int i  j 
