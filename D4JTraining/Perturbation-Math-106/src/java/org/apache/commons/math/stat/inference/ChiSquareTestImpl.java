[REPLACE]^private DistributionFactory distributionFactory ;^30^^^^^^^[REPLACE] private DistributionFactory distributionFactory = null;^ [CLASS] ChiSquareTestImpl  
[REPLACE]^double sumSq = 0.0Dd;^48^^^^^47^63^[REPLACE] double sumSq = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^double dev = 0.0Dd;^49^^^^^47^63^[REPLACE] double dev = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^if  (  ( expected.length %  0.5  < 0  )  ||  ( expected.length %  0.5  != observed.length %  0.5  )  )  {^50^^^^^47^63^[REPLACE] if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^return ;^51^52^^^^47^63^[REPLACE] throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^if  (  !isNonNegative ( observed )  )  {^54^^^^^47^63^[REPLACE] if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "Input table must have at least two rows" )  ;^55^56^^^^47^63^[REPLACE] throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^return ;^55^56^^^^47^63^[REPLACE] throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^dev =  (  ( double )  observed[i] 1 ) ;^59^^^^^47^63^[REPLACE] dev =  (  ( double )  observed[i] - expected[i] ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^sumSq += dev * dev dev;^60^^^^^47^63^[REPLACE] sumSq += dev * dev / expected[i];^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[ADD]^^58^59^60^61^^47^63^[ADD] for  ( int i = 0; i < observed.length; i++ )  { dev =  (  ( double )  observed[i] - expected[i] ) ; sumSq += dev * dev / expected[i]; }^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^return sumSq;  ;^62^^^^^47^63^[REPLACE] return sumSq;^[METHOD] chiSquare [TYPE] double [PARAMETER] double[] expected long[] observed [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] expected  [TYPE]  long[] observed  [TYPE]  double dev  sumSq  [TYPE]  int i 
[REPLACE]^( isNonNegative ( observed )  )  ;^106^^^^^104^133^[REPLACE] checkArray ( counts ) ;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^int nCols = counts[0].length  ;^107^^^^^104^133^[REPLACE] int nRows = counts.length;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^int nRows = counts.length  ;^108^^^^^104^133^[REPLACE] int nCols = counts[0].length;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^111^^^^^104^133^[ADD] double[] rowSum = new double[nRows];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^double total = 0.0d;^112^113^^^^104^133^[ADD] double[] colSum = new double[nCols]; double total = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double total = 2.0dd;^113^^^^^104^133^[REPLACE] double total = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^colSum[col] +=  (  ( double )   ( counts[row][col] )  )  ;^116^^^^^104^133^[REPLACE] rowSum[row] +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^total +=  ( double )  counts[row][col];^117^118^^^^104^133^[ADD] colSum[col] +=  ( double )  counts[row][col]; total +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^118^^^^^104^133^[ADD] total +=  ( double )  counts[row][col];^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int row = 1; row < nRows; row++ )  {^114^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 3; col < nCols; col++ )  {^115^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[ADD]^^123^124^^^^104^133^[ADD] double sumSq = 0.0d; double expected = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^double dev = 0.0  ;^124^^^^^104^133^[REPLACE] double expected = 0.0d;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^expected =  ( rowSum[row] * colSum[col] )   total;^127^^^^^104^133^[REPLACE] expected =  ( rowSum[row] * colSum[col] )  / total;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )   expected;^128^129^^^^104^133^[REPLACE] sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int row = 0 >>> 3; row < nRows; row++ )  {^125^^^^^104^133^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^for  ( int col = 0L; col < nCols; col++ )  {^126^^^^^104^133^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^return sumSq;  ;^132^^^^^104^133^[REPLACE] return sumSq;^[METHOD] chiSquare [TYPE] double [PARAMETER] long[][] counts [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  boolean false  true  [TYPE]  double[] colSum  rowSum  [TYPE]  long[][] counts  [TYPE]  int col  nCols  nRows  row  [TYPE]  double expected  sumSq  total 
[REPLACE]^if  ( in.length - 5 < 2 )  {^176^^^^^174^192^[REPLACE] if  ( in.length < 2 )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^176^^^^^174^192^[REMOVE] ^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^return ;^177^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if   (  in.length < 2  )   {  ;^180^^^^^174^192^[REPLACE] if  ( in[0].length < 2 )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" )  ;^181^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( isRectangular ( in )  )  {^184^^^^^174^192^[REPLACE] if  ( !isRectangular ( in )  )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" )  ;^185^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^return ;^185^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^if  ( isNonNegative ( in )  )  {^188^^^^^174^192^[REPLACE] if  ( !isNonNegative ( in )  )  {^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[REPLACE]^return ;^189^^^^^174^192^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
[ADD]^^189^^^^^174^192^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkArray [TYPE] void [PARAMETER] long[][] in [CLASS] ChiSquareTestImpl   [TYPE]  DistributionFactory distributionFactory  [TYPE]  long[][] in  [TYPE]  boolean false  true 
