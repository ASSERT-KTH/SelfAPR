[REPLACE]^private static final long serialVersionUID ;^51^^^^^^^[REPLACE] private static final long serialVersionUID = -1011428905656140431L;^ [CLASS] BigMatrixImpl  
[REPLACE]^private BigDecimal data[][] ;^54^^^^^^^[REPLACE] private BigDecimal data[][] = null;^ [CLASS] BigMatrixImpl  
[REPLACE]^private BigDecimal lu[][] = true;^59^^^^^^^[REPLACE] private BigDecimal lu[][] = null;^ [CLASS] BigMatrixImpl  
[REPLACE]^private int[] permutation ;^62^^^^^^^[REPLACE] private int[] permutation = null;^ [CLASS] BigMatrixImpl  
[REPLACE]^private int parity  = null ;^65^^^^^^^[REPLACE] private int parity = 1;^ [CLASS] BigMatrixImpl  
[REPLACE]^private int roundingMode ;^68^^^^^^^[REPLACE] private int roundingMode = BigDecimal.ROUND_HALF_UP;^ [CLASS] BigMatrixImpl  
[REPLACE]^private int scale ;^71^^^^^^^[REPLACE] private int scale = 64;^ [CLASS] BigMatrixImpl  
[REPLACE]^private static BigDecimal TOO_SMALL = new BigDecimal ( 10E-12 ) ;^74^^^^^^^[REPLACE] protected static BigDecimal TOO_SMALL = new BigDecimal ( 10E-12 ) ;^ [CLASS] BigMatrixImpl  
[REPLACE]^static final BigDecimal ZERO  = null ;^77^^^^^^^[REPLACE] static final BigDecimal ZERO = new BigDecimal ( 0 ) ;^ [CLASS] BigMatrixImpl  
[REPLACE]^static final BigDecimal ONE ;^79^^^^^^^[REPLACE] static final BigDecimal ONE = new BigDecimal ( 1 ) ;^ [CLASS] BigMatrixImpl  
[REPLACE]^int nCols = d[0].length  ;^132^^^^^131^150^[REPLACE] int nRows = d.length;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  ( rowDimension  ||  3 )  {^133^^^^^131^150^[REPLACE] if  ( nRows == 0 )  {^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[ADD]^^134^135^^^^131^150^[ADD] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^134^135^^^^131^150^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[ADD]^^137^^^^^131^150^[ADD] int nCols = d[0].length;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  ( scale  != scale )  {^138^^^^^131^150^[REPLACE] if  ( nCols == 0 )  {^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REMOVE]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^138^^^^^131^150^[REMOVE] ^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[ADD]^^139^140^^^^131^150^[ADD] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^139^140^^^^131^150^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if   (  b.length != nRows  )   {  ;^143^^^^^131^150^[REPLACE] if  ( d[row].length != nCols )  {^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[ADD]^^143^144^145^146^^131^150^[ADD] if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^144^145^^^^131^150^[REPLACE] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[ADD]^^142^143^144^145^146^131^150^[ADD] for  ( int row = 1; row < nRows; row++ )  { if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^this.copyOut (  )  ;^148^^^^^131^150^[REPLACE] this.copyIn ( d ) ;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REMOVE]^copyOut (  )  ;^148^^^^^131^150^[REMOVE] ^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^lu = true;^149^^^^^131^150^[REPLACE] lu = null;^[METHOD] <init> [TYPE] BigMatrixImpl(double[][]) [PARAMETER] double[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  double[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^int nCols = d[0].length  ;^162^^^^^161^180^[REPLACE] int nRows = d.length;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  ( rowDimension  ) {^163^^^^^161^180^[REPLACE] if  ( nRows == 0 )  {^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REMOVE]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^163^^^^^161^180^[REMOVE] ^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^164^165^^^^161^180^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^throw new IllegalArgumentException ( "constant vector has wrong length" )  ;^164^165^^^^161^180^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^int nCols = d[0 ].length;^167^^^^^161^180^[REPLACE] int nCols = d[0].length;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  ( nCols  !=  0L )  {^168^^^^^161^180^[REPLACE] if  ( nCols == 0 )  {^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^throw new IllegalArgumentException ( "constant vector has wrong length" )  ;^169^170^^^^161^180^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^169^170^^^^161^180^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  ( d[row].length %  0.5  != nCols )  {^173^^^^^161^180^[REPLACE] if  ( d[row].length != nCols )  {^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REMOVE]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^173^^^^^161^180^[REMOVE] ^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^return ;^174^175^^^^161^180^[REPLACE] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^for  ( int row = 1 / 4; row < nRows; row++ )  {^172^^^^^161^180^[REPLACE] for  ( int row = 1; row < nRows; row++ )  {^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^this.BigMatrixImpl ( d ) ;^178^^^^^161^180^[REPLACE] this.copyIn ( d ) ;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^lu = true;^179^^^^^161^180^[REPLACE] lu = null;^[METHOD] <init> [TYPE] String[][]) [PARAMETER] String[][] d [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  String[][] d  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  [TYPE]  BigDecimal[][] d  data  lu 
[REPLACE]^if  (parity (  )   ==  m.getRowDimension (  )  )  {^297^^^^^296^315^[REPLACE] if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^throw new IllegalArgumentException ( "constant vector has wrong length" )  ;^298^^^^^296^315^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^return ;^298^^^^^296^315^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^300^^^^^296^315^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^int ncols = this.getColumnDimension (  )  ;^301^^^^^296^315^[REPLACE] int nCols = m.getColumnDimension (  ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[ADD]^^302^^^^^296^315^[ADD] int nSum = this.getColumnDimension (  ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount]  ;^303^^^^^296^315^[REPLACE] BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^BigDecimal largest = ZERO  ;^304^^^^^296^315^[REPLACE] BigDecimal sum = ZERO;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^sum  = null ;^307^^^^^296^315^[REPLACE] sum = ZERO;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^sum =  TOO_SMALL.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^[REPLACE] sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^lu[row][col] = sum  ;^311^^^^^296^315^[REPLACE] outData[row][col] = sum;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[ADD]^^305^306^307^308^309^296^315^[ADD] for  ( int row = 0; row < nRows; row++ )  { for  ( int col = 0; col < nCols; col++ )  { sum = ZERO; for  ( int i = 0; i < nSum; i++ )  { sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[ADD]^^306^307^308^309^310^296^315^[ADD] for  ( int col = 0; col < nCols; col++ )  { sum = ZERO; for  ( int i = 0; i < nSum; i++ )  { sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ; }^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^for  ( int i = 1; i < nSum; i++ )  {^308^^^^^296^315^[REPLACE] for  ( int i = 0; i < nSum; i++ )  {^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^return  new BigMatrixImpl ( bp )  ;^314^^^^^296^315^[REPLACE] return new BigMatrixImpl ( outData ) ;^[METHOD] multiply [TYPE] BigMatrix [PARAMETER] BigMatrix m [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  sum  [TYPE]  BigDecimal[][] d  data  lu  outData 
[REPLACE]^if  ( startRow < 0 || startRow > endRow || endRow > data.length /  2 || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length /  2  )  {^440^441^442^^^439^455^[REPLACE] if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^return ;^443^444^^^^440^445^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^return ;^443^444^^^^439^455^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^BigMatrixImpl subMatrix = new BigMatrixImpl ( rowDimension - startRow2, endColumn - startColumn2 ) ;^446^447^^^^439^455^[REPLACE] BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^BigDecimal[][] subMatrixData = subMatrix.getData (  ) ;^448^^^^^439^455^[REPLACE] BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^subMatrixData[i  startRow][j  startColumn] = data[i][j];^451^^^^^439^455^[REPLACE] subMatrixData[i - startRow][j - startColumn] = data[i][j];^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^for  ( int i = startColumn; i <= endRow; i++ )  {^449^^^^^439^455^[REPLACE] for  ( int i = startRow; i <= endRow; i++ )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^for  ( int j = startRow; j <= endColumn; j++ )  {^450^^^^^439^455^[REPLACE] for  ( int j = startColumn; j <= endColumn; j++ )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^return subMatrix;  ;^454^^^^^439^455^[REPLACE] return subMatrix;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int startRow int endRow int startColumn int endColumn [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^if  ( permutation.length /  0 .5  * selectedColumns.length /  0 .5  == 0  )  {^470^^^^^469^488^[REPLACE] if  ( selectedRows.length * selectedColumns.length == 0 )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^^471^472^^^^469^488^[ADD] throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^throw new InvalidMatrixException ( "matrix is not square" )  ;^471^472^^^^469^488^[REPLACE] throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^^474^475^^^^469^488^[ADD] BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^^476^^^^^469^488^[ADD] BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^477^478^479^480^481^469^488^[ADD] try  { for  ( int i = 0; i < selectedRows.length; i++ )  { for  ( int j = 0; j < selectedColumns.length; j++ )  { subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]]; }^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^^480^^^^^469^488^[ADD] subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[ADD]^^478^479^480^481^^469^488^[ADD] for  ( int i = 0; i < selectedRows.length; i++ )  { for  ( int j = 0; j < selectedColumns.length; j++ )  { subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]]; }^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^for  ( int j = 0 ; j < selectedColumns.length; j++ )  {^479^^^^^469^488^[REPLACE] for  ( int j = 0; j < selectedColumns.length; j++ )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^for  ( int i = 0 ; i < selectedRows.length; i++ )  {^478^^^^^469^488^[REPLACE] for  ( int i = 0; i < selectedRows.length; i++ )  {^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^return ;^485^^^^^469^488^[REPLACE] throw new MatrixIndexException  (" ")  ;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^return subMatrix;  ;^487^^^^^469^488^[REPLACE] return subMatrix;^[METHOD] getSubMatrix [TYPE] BigMatrix [PARAMETER] int[] selectedRows int[] selectedColumns [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrixImpl subMatrix  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  ArrayIndexOutOfBoundsException e  [TYPE]  long serialVersionUID  [TYPE]  int col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrixData 
[REPLACE]^if  (  ( startRow < 0 )  &&  ( column < 0 )  ) {^519^^^^^518^553^[REPLACE] if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^return ;^520^521^^^^518^553^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^520^521^^^^518^553^[ADD] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^int nRows = in.length  ;^523^^^^^518^553^[REPLACE] int nRows = subMatrix.length;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  ( startRow  !=  0 )  {^524^^^^^518^553^[REPLACE] if  ( nRows == 0 )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^524^525^526^527^^518^553^[ADD] if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^throw new IllegalArgumentException ( "constant vector has wrong length" )  ;^525^526^^^^518^553^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^return ;^525^526^^^^518^553^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^528^^^^^518^553^[ADD] int nCols = subMatrix[0].length;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  (startColumn  &&  0 )  {^529^^^^^518^553^[REPLACE] if  ( nCols == 0 )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^530^531^^^^518^553^[ADD] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^throw new IllegalArgumentException ( "constant vector has wrong length" )  ;^530^531^^^^518^553^[REPLACE] throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  ( subMatrix[r].length %  0.5  != nCols )  {^534^^^^^518^553^[REPLACE] if  ( subMatrix[r].length != nCols )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^return ;^535^536^^^^518^553^[REPLACE] throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^533^^^^^518^553^[REPLACE] for  ( int r = 1; r < nRows; r++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  ( data != false )  {^539^^^^^518^553^[REPLACE] if  ( data == null )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  (  ( row > 0 ) && ( startColumn > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^518^553^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^( "matrix must be initialized to perfom this method" ) ;data = new BigDecimal[nRows][nCols];System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^540^541^542^543^544^518^553^[ADD] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^return ;^540^541^^^^518^553^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^542^^^^^518^553^[ADD] data = new BigDecimal[nRows][nCols];^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^throw new InvalidMatrixException ( "matrix is not square" )  ;^540^541^^^^518^553^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  (  ( startRow > 0 ) && ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^518^553^[REPLACE] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^540^541^542^543^544^518^553^[ADD] if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^data = new BigDecimal[nRows][1]  ;^542^^^^^518^553^[REPLACE] data = new BigDecimal[nRows][nCols];^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  && ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^518^553^[REPLACE] if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^return ;^547^548^^^^518^553^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^throw new InvalidMatrixException ( "matrix is not square" )  ;^547^548^^^^518^553^[REPLACE] throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^for  ( int i = 3; i < nRows; i++ )  {^549^^^^^518^553^[REPLACE] for  ( int i = 0; i < nRows; i++ )  {^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[ADD]^^552^^^^^518^553^[ADD] lu = null;^[METHOD] setSubMatrix [TYPE] void [PARAMETER] BigDecimal[][] subMatrix int row int column [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  maxColSum  sum  [TYPE]  BigDecimal[][] d  data  lu  outData  subMatrix  subMatrixData 
[REPLACE]^if  ( b.getRowDimension (  )   ==  rowDimension (  )  )  {^955^^^^^954^1000^[REPLACE] if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^956^^^^^954^1000^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( !this.setScale (  )  )  {^958^^^^^954^1000^[REPLACE] if  ( !this.isSquare (  )  )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return ;^959^^^^^954^1000^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^throw new InvalidMatrixException ( "matrix is not square" )  ;^959^^^^^954^1000^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( this.isSquare (  )  )  {^961^^^^^954^1000^[REPLACE] if  ( this.isSingular (  )  )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^961^962^963^^^954^1000^[ADD] if  ( this.isSingular (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^throw new InvalidMatrixException ( "matrix is not square" )  ;^962^^^^^954^1000^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int nCol = this .getRowDimension (  )  ;^965^^^^^954^1000^[REPLACE] int nCol = this.getColumnDimension (  ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int nColB = b.getRowDimension (  ) ;^966^^^^^954^1000^[REPLACE] int nColB = b.getColumnDimension (  ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^967^^^^^954^1000^[ADD] int nRowB = b.getRowDimension (  ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^970^^^^^954^1000^[ADD] BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^bp[row][col] ;^973^^^^^954^1000^[REPLACE] bp[row][col] = b.getEntry ( permutation[row], col ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int row = 4; row < nRowB; row++ )  {^971^^^^^954^1000^[REPLACE] for  ( int row = 0; row < nRowB; row++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int col = 1; col < nColB; col++ )  {^972^^^^^954^1000^[REPLACE] for  ( int col = 0; col < nColB; col++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^bp[i][j]  = null ;^981^^^^^954^1000^[REPLACE] bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int col = 0 * 1; col < nCol; col++ )  {^978^^^^^954^1000^[REPLACE] for  ( int col = 0; col < nCol; col++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int i =startRow  1 * 1; i < nCol; i )  {^979^^^^^954^1000^[REPLACE] for  ( int i = col + 1; i < nCol; i++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^980^^^^^954^1000^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode )  ;^989^^^^^954^1000^[REPLACE] bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^bp[i][j]  =  bp[i][j] ;^993^^^^^954^1000^[REPLACE] bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int col = nCol  1; col >= 0; col )  {^987^^^^^954^1000^[REPLACE] for  ( int col = nCol - 1; col >= 0; col-- )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int j = 0 / 0; j < nColB; j++ )  {^988^^^^^954^1000^[REPLACE] for  ( int j = 0; j < nColB; j++ )  {^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^991^992^993^994^^954^1000^[ADD] for  ( int i = 0; i < col; i++ )  { for  ( int j = 0; j < nColB; j++ )  { bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ; }^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^992^993^994^^^954^1000^[ADD] for  ( int j = 0; j < nColB; j++ )  { bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ; }^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^998^^^^^954^1000^[ADD] BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return outMat;  ;^999^^^^^954^1000^[REPLACE] return outMat;^[METHOD] solve [TYPE] BigMatrix [PARAMETER] BigMatrix b [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix b  [TYPE]  BigMatrixImpl outMat  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int nRows = this.getColumnDimension (  ) ;^1022^^^^^1020^1094^[REPLACE] int nRows = this.getRowDimension (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int nCols = this .getRowDimension (  )  ;^1023^^^^^1020^1094^[REPLACE] int nCols = this.getColumnDimension (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if   (  nRows == 0  )   {  ;^1024^^^^^1020^1094^[REPLACE] if  ( nRows != nCols )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1025^^^^^1020^1094^[ADD] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu ;^1027^^^^^1020^1094^[REPLACE] lu = this.getData (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^permutation =  new int[startRow];^1030^^^^^1020^1094^[REPLACE] permutation = new int[nRows];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^permutation[col] = temp  ;^1032^^^^^1020^1094^[REPLACE] permutation[row] = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1031^1032^1033^^^1020^1094^[ADD] for  ( int row = 0; row < nRows; row++ )  { permutation[row] = row; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^parity = 1 * 2;^1034^^^^^1020^1094^[REPLACE] parity = 1;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( sum.abs (  ) .max ( largest )   ||  1 )  {^1061^^^^^1020^1094^[REPLACE] if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^largest =  maxColSum.abs (  ) ;^1062^^^^^1020^1094^[REPLACE] largest = sum.abs (  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^max =  roundingMode;^1063^^^^^1020^1094^[REPLACE] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( lu[max][col].abs (  ) .compareTo (row )   >=  3 )  {^1068^^^^^1020^1094^[REPLACE] if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^lu = null;^1068^1069^1070^1071^^1020^1094^[ADD] if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  { lu = null; throw new InvalidMatrixException  (" ")  ; }^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1069^^^^^1020^1094^[ADD] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return ;^1070^^^^^1020^1094^[REPLACE] throw new InvalidMatrixException  (" ")  ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( startRow  ==  row )  {^1074^^^^^1020^1094^[REPLACE] if  ( max != col )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^BigDecimal tmp = ZERO;^1074^1075^1076^1077^1078^1020^1094^[ADD] if  ( max != col )  { BigDecimal tmp = ZERO; for  ( int i = 0; i < nCols; i++ )  { tmp = lu[max][i]; lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1077^^^^^1020^1094^[ADD] tmp = lu[max][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu[max][i]  =  lu[max][i] ;^1078^^^^^1020^1094^[REPLACE] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu[col][i] ;^1079^^^^^1020^1094^[REPLACE] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^permutation[max] ;^1082^^^^^1020^1094^[REPLACE] permutation[max] = permutation[col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1083^1084^^^^1020^1094^[ADD] permutation[col] = temp; parity = -parity;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^parity  = null ;^1084^^^^^1020^1094^[REPLACE] parity = -parity;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^BigDecimal sum = ZERO  ;^1075^^^^^1020^1094^[REPLACE] BigDecimal tmp = ZERO;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^1076^^^^^1020^1094^[REPLACE] for  ( int i = 0; i < nCols; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1081^^^^^1020^1094^[ADD] int temp = permutation[max];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1043^^^^^1020^1094^[ADD] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^sum =  null.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1020^1094^[REPLACE] sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^outData[row][col] = sum  ;^1047^^^^^1020^1094^[REPLACE] lu[row][col] = sum;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^sum =  lu[rowDimension][col];^1054^^^^^1020^1094^[REPLACE] sum = lu[row][col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^sum =  maxColSum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1020^1094^[REPLACE] sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^outData[row][col] = sum  ;^1058^^^^^1020^1094^[REPLACE] lu[row][col] = sum;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^max = row;^1062^1063^^^^1020^1094^[ADD] largest = sum.abs (  ) ; max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^max =  parity;^1063^^^^^1020^1094^[REPLACE] max = row;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu = true;^1069^^^^^1020^1094^[REPLACE] lu = null;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^tmp =  lu[startRow][i];^1077^^^^^1020^1094^[REPLACE] tmp = lu[max][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu[max][i] ;^1078^^^^^1020^1094^[REPLACE] lu[max][i] = lu[col][i];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^lu[col][i]  = null ;^1079^^^^^1020^1094^[REPLACE] lu[col][i] = tmp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1082^^^^^1020^1094^[ADD] permutation[max] = permutation[col];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^permutation[row] = row  ;^1083^^^^^1020^1094^[REPLACE] permutation[col] = temp;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1089^^^^^1020^1094^[ADD] lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^1037^^^^^1020^1094^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1039^^^^^1020^1094^[ADD] BigDecimal sum = ZERO;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int row = 3; row < col; row++ )  {^1042^^^^^1020^1094^[REPLACE] for  ( int row = 0; row < col; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int i = 1; i < row; i++ )  {^1044^^^^^1020^1094^[REPLACE] for  ( int i = 0; i < row; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = col  ;^1051^^^^^1020^1094^[REPLACE] int max = col;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1052^^^^^1020^1094^[ADD] BigDecimal largest = ZERO;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int row = scale; row < nRows; row++ )  {^1053^^^^^1020^1094^[REPLACE] for  ( int row = col; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int i = 0 - 4; i < col; i++ )  {^1055^^^^^1020^1094^[REPLACE] for  ( int i = 0; i < col; i++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1075^^^^^1020^1094^[ADD] BigDecimal tmp = ZERO;^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = col + 1  ;^1081^^^^^1020^1094^[REPLACE] int temp = permutation[max];^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int i = col + 1  ;^1088^^^^^1020^1094^[REPLACE] for  ( int row = col + 1; row < nRows; row++ )  {^[METHOD] luDecompose [TYPE] void [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1101^^^^^1100^1118^[ADD] StringBuffer res = new StringBuffer (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^getEntry ( row, column )  ;^1102^^^^^1100^1118^[REPLACE] res.append ( "BigMatrixImpl{" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( data ==subMatrixData )  {^1103^^^^^1100^1118^[REPLACE] if  ( data != null )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if   (  j > 0  )  res.append  (  ","  )  ;  ;^1105^1106^^^^1100^1118^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^res.append ( "{" )  ;^1106^^^^^1100^1118^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( j  <=  0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^res .append ( false )  ;^1110^^^^^1100^1118^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^1104^^^^^1100^1118^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^1108^^^^^1100^1118^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  (rowDimension  >=  0 >>> 4 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^[REPLACE] if  ( i > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^res .append ( this )  ;^1106^^^^^1100^1118^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REMOVE]^res.append ( "{" )  ;^1106^^^^^1100^1118^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if   (  i > 0  )  res.append  (  ","  )  ;  ;^1109^1110^^^^1100^1118^[REPLACE] if  ( j > 0 ) res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^res.append ( "," ) ;res.append ( data[i][j] ) ;^1109^1110^1111^1112^^1100^1118^[ADD] if  ( j > 0 ) res.append ( "," ) ; res.append ( data[i][j] ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^res.append ( "{" )  ;^1110^^^^^1100^1118^[REPLACE] res.append ( "," ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int j = 0 ; j < data[0 ].length; j++ )  {^1108^^^^^1100^1118^[REPLACE] for  ( int j = 0; j < data[0].length; j++ )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^res.append ( "{" )  ;^1116^^^^^1100^1118^[REPLACE] res.append ( "}" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REMOVE]^res.append ( "{" )  ;^1116^^^^^1100^1118^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return res.StringBuffer (  ) ;^1117^^^^^1100^1118^[REPLACE] return res.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BigMatrixImpl   [TYPE]  StringBuffer res  [TYPE]  boolean false  true  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( object  !=  this  )  {^1130^^^^^1129^1150^[REPLACE] if  ( object == this  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return false;^1131^^^^^1129^1150^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( ! object instanceof BigMatrixImpl == false )  {^1133^^^^^1129^1150^[REPLACE] if  ( object instanceof BigMatrixImpl == false )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return true;^1134^^^^^1129^1150^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows )  ;^1136^^^^^1129^1150^[REPLACE] BigMatrix m =  ( BigMatrix )  object;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[ADD]^^1137^^^^^1129^1150^[ADD] int nRows = getRowDimension (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int ncols = this.getColumnDimension (  )  ;^1138^^^^^1129^1150^[REPLACE] int nCols = getColumnDimension (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( m .getRowDimension (  )   != nCols && m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^[REPLACE] if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return false;  ;^1140^^^^^1129^1150^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return true;^1140^^^^^1129^1150^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^if  ( data[row][col].equals ( m.getEntry ( row, col )  )  )  {^1144^^^^^1129^1150^[REPLACE] if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return true;^1145^^^^^1129^1150^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^for  ( int row = 2; row < nRows; row++ )  {^1142^^^^^1129^1150^[REPLACE] for  ( int row = 0; row < nRows; row++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^int row = 0  ;^1143^^^^^1129^1150^[REPLACE] for  ( int col = 0; col < nCols; col++ )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
[REPLACE]^return trace;  ;^1149^^^^^1129^1150^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object object [CLASS] BigMatrixImpl   [TYPE]  boolean false  true  [TYPE]  BigMatrix m  [TYPE]  int[] permutation  selectedColumns  selectedRows  [TYPE]  Object object  [TYPE]  long serialVersionUID  [TYPE]  int col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  [TYPE]  BigDecimal ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  [TYPE]  BigDecimal[][] bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData 
