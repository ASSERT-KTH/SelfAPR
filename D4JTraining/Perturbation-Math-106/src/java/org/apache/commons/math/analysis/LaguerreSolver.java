[REPLACE]^private static final long serialVersionUID = 5287689975005870178;^37^^^^^^^[REPLACE] private static final long serialVersionUID = 5287689975005870178L;^ [CLASS] LaguerreSolver  
[REPLACE]^super ( f, 100L, 1E-6 ) ;^51^^^^^48^57^[REPLACE] super ( f, 100, 1E-6 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( ! f instanceof PolynomialFunction )  {^52^^^^^48^57^[REPLACE] if  ( f instanceof PolynomialFunction )  {^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^p =  ( PolynomialFunction ) f;^52^53^54^55^56^48^57^[ADD] if  ( f instanceof PolynomialFunction )  { p =  ( PolynomialFunction ) f; } else { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^throw new ConvergenceException  (" ")  ; ;^55^^^^^48^57^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^p =   ( PolynomialFunction ) f;^53^^^^^48^57^[REPLACE] p =  ( PolynomialFunction ) f;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^53^^^^^48^57^[ADD] p =  ( PolynomialFunction ) f;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return solve ( initial, max ) ;^65^^^^^64^66^[REPLACE] return new PolynomialFunction ( p.getCoefficients (  )  ) ;^[METHOD] getPolynomialFunction [TYPE] PolynomialFunction [PARAMETER] [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p.value ( min )   !=  0.0 )  { return min; }^87^^^^^83^98^[REPLACE] if  ( p.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REMOVE]^if  (  ( p.value ( initial )  )  == 0.0 )  {     return initial; }^87^^^^^83^98^[REMOVE] ^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( max )  == 0.0 )  { return min; }^87^^^^^83^98^[REPLACE] if  ( p.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( max )   !=  0.0 )  { return max; }^88^^^^^83^98^[REPLACE] if  ( p.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( min )  == 0.0 )  { return max; }^88^^^^^83^98^[REPLACE] if  ( p.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( initial )   ||  1.0d )  { return initial; }^89^^^^^83^98^[REPLACE] if  ( p.value ( initial )  == 0.0 )  { return initial; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[ADD]^^89^90^91^92^^83^98^[ADD] if  ( p.value ( initial )  == 0.0 )  { return initial; }  verifyBracketing ( min, max, p ) ; verifySequence ( min, initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( min )  == 0.0 )  { return initial; }^89^^^^^83^98^[REPLACE] if  ( p.value ( initial )  == 0.0 )  { return initial; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^verifyBracketing ( min, initial, p ) ;^91^^^^^83^98^[REPLACE] verifyBracketing ( min, max, p ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[ADD]^^91^92^93^94^^83^98^[ADD] verifyBracketing ( min, max, p ) ; verifySequence ( min, initial, max ) ; if  ( isBracketing ( min, initial, p )  )  { return solve ( min, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^verifySequence ( max, initial, max ) ;^92^^^^^83^98^[REPLACE] verifySequence ( min, initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[ADD]^^92^93^94^95^96^83^98^[ADD] verifySequence ( min, initial, max ) ; if  ( isBracketing ( min, initial, p )  )  { return solve ( min, initial ) ; } else { return solve ( initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^93^^^^^83^98^[REPLACE] if  ( isBracketing ( min, initial, p )  )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^return solve ( initial, min ) ;^96^^^^^83^98^[REPLACE] return solve ( initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^return solve ( max, initial ) ;^94^^^^^83^98^[REPLACE] return solve ( min, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^return solve ( min, max ) ;^94^^^^^83^98^[REPLACE] return solve ( min, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^return solve ( min, max ) ;^96^^^^^83^98^[REPLACE] return solve ( initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min 
[REPLACE]^if  ( p.value ( min )   &&  2.0d )  { return min; }^122^^^^^119^149^[REPLACE] if  ( p.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REMOVE]^if  (  ( p.value ( initial )  )  == 0.0 )  {     return initial; }^122^^^^^119^149^[REMOVE] ^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^if  ( p.value ( max )  == 0.0 )  { return min; }^122^^^^^119^149^[REPLACE] if  ( p.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^if  ( p.value ( max )   !=  0.0 )  { return max; }^123^^^^^119^149^[REPLACE] if  ( p.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[ADD]^^123^124^^126^127^119^149^[ADD] if  ( p.value ( max )  == 0.0 )  { return max; } verifyBracketing ( min, max, p ) ; double coefficients[] = p.getCoefficients (  ) ; Complex c[] = new Complex[coefficients.length];^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^if  ( p.value ( min )  == 0.0 )  { return max; }^123^^^^^119^149^[REPLACE] if  ( p.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^double coefficients[] = p .value ( max )  ;^126^^^^^119^149^[REPLACE] double coefficients[] = p.getCoefficients (  ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0 ) ;^127^^^^^119^149^[REPLACE] Complex c[] = new Complex[coefficients.length];^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[ADD]^^127^^^^^119^149^[ADD] Complex c[] = new Complex[coefficients.length];^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^for  ( int i = 0; i < coefficients.length + 3; i++ )  {^128^^^^^119^149^[REPLACE] for  ( int i = 0; i < coefficients.length; i++ )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^c[i] = new Complex ( coefficients[i], 0.0D ) ;^129^^^^^119^149^[REPLACE] c[i] = new Complex ( coefficients[i], 0.0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^c[i] = new Complex ( coefficients[i], 1.0d ) ;^129^^^^^119^149^[REPLACE] c[i] = new Complex ( coefficients[i], 0.0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^for  ( int i = 0 ; i < coefficients.length; i++ )  {^128^^^^^119^149^[REPLACE] for  ( int i = 0; i < coefficients.length; i++ )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^Complex initial = new Complex ( 0.5D  |   ( min + max ) , 0.0 ) ;^131^^^^^119^149^[REPLACE] Complex initial = new Complex ( 0.5 *  ( min + max ) , 0.0 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0 ) ;^132^^^^^119^149^[REPLACE] Complex z = solve ( c, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^if  ( isRootOK ( min, max, root[i] )  )  {^133^^^^^119^149^[REPLACE] if  ( isRootOK ( min, max, z )  )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^return solve ( initial, max ) ;^135^^^^^119^149^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0 ) ;^139^^^^^119^149^[REPLACE] Complex[] root = solveAll ( c, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^if  ( isRootOK ( min, max, z )  )  {^141^^^^^119^149^[REPLACE] if  ( isRootOK ( min, max, root[i] )  )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^return solve ( initial, max ) ;^143^^^^^119^149^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^for  ( int i = 0; i < root.length (  ) ; i++ )  {^140^^^^^119^149^[REPLACE] for  ( int i = 0; i < root.length; i++ )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[ADD]^setResult ( root[i].getReal (  ) , iterationCount ) ;return result;^141^142^143^144^^119^149^[ADD] if  ( isRootOK ( min, max, root[i] )  )  { setResult ( root[i].getReal (  ) , iterationCount ) ; return result; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^for  ( int i = 0 ; i < root.length; i++ )  {^140^^^^^119^149^[REPLACE] for  ( int i = 0; i < root.length; i++ )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^148^^^^^119^149^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] LaguerreSolver   [TYPE]  Complex[] c  root  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double max  min  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex initial  z 
[REPLACE]^double tolerance = Math.max ( relativeAccuracy *1 (  ) , absoluteAccuracy ) ;^161^^^^^160^165^[REPLACE] double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[METHOD] isRootOK [TYPE] boolean [PARAMETER] double min double max Complex z [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  tolerance  [TYPE]  Complex z 
[REPLACE]^return  ( isSequence ( min, z.getReal (  ) , max )  )  ;^162^163^164^^^160^165^[REPLACE] return  ( isSequence ( min, z.getReal (  ) , max )  )  && ( Math.abs ( z.getImaginary (  )  )  <= tolerance || z.abs (  )  <= functionValueAccuracy ) ;^[METHOD] isRootOK [TYPE] boolean [PARAMETER] double min double max Complex z [CLASS] LaguerreSolver   [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  tolerance  [TYPE]  Complex z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0 ) ;^183^^^^^180^189^[REPLACE] Complex c[] = new Complex[coefficients.length];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^Complex z = new Complex ( initial, 0.0D ) ;^184^^^^^180^189^[REPLACE] Complex z = new Complex ( initial, 0.0 ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^for  ( int i = 0 ; i < c.length (  ) ; i++ )  {^185^^^^^180^189^[REPLACE] for  ( int i = 0; i < c.length; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^c[i] =  new Complex (  (  ( double )   ( n - 1 )  ) , 0.0 )  ;^186^^^^^180^189^[REPLACE] c[i] = new Complex ( coefficients[i], 0.0 ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^c[i] = new Complex ( coefficients[i], 0.0d ) ;^186^^^^^180^189^[REPLACE] c[i] = new Complex ( coefficients[i], 0.0 ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^for  ( int i = 0 ; i < c.length; i++ )  {^185^^^^^180^189^[REPLACE] for  ( int i = 0; i < c.length; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^return solve ( initial, max ) ;^188^^^^^180^189^[REPLACE] return solveAll ( c, z ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] double[] coefficients double initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  [TYPE]  boolean false  true  [TYPE]  double[] coefficients  [TYPE]  double initial  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  [TYPE]  Complex z 
[REPLACE]^int n = coefficients.length (  )  - 1;^207^^^^^205^238^[REPLACE] int n = coefficients.length - 1;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^int iterationCount = 4;^208^^^^^205^238^[REPLACE] int iterationCount = 0;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^if  ( n  >=  2 )  {^209^^^^^205^238^[REPLACE] if  ( n < 1 )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^209^210^211^212^^205^238^[ADD] if  ( n < 1 )  { throw new IllegalArgumentException ( "Polynomial degree must be positive: degree=" + n ) ; }^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^return ;^210^211^^^^205^238^[REPLACE] throw new IllegalArgumentException ( "Polynomial degree must be positive: degree=" + n ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex c[] = iterationCountew Complex[n+1];^213^^^^^205^238^[REPLACE] Complex c[] = new Complex[n+1];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  (iterationCountnt i = 0L; i  >  n; i++ )  {^214^^^^^205^238^[REPLACE] for  ( int i = 0; i <= n; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^pv = coefficients[n]; ;^215^^^^^205^238^[REPLACE] c[i] = coefficients[i];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^215^^^^^205^238^[ADD] c[i] = coefficients[i];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int i = 2; i <= n; i++ )  {^214^^^^^205^238^[REPLACE] for  ( int i = 0; i <= n; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex root[] = iterationCountew Complex[n];^219^^^^^205^238^[REPLACE] Complex root[] = new Complex[n];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int i = 0L; i  !=  n; i++ )  {^220^^^^^205^238^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int j = n || i || 1; j >= 0; j ||  ||  )  {^227^^^^^205^238^[REPLACE] for  ( int j = n-i-1; j >= 0; j-- )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^oldc =  coefficients[j];^228^^^^^205^238^[REPLACE] oldc = c[j];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^c[j]  =  c[j] ;^229^^^^^205^238^[REPLACE] c[j] = newc;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^newc =  null.add ( newc.multiply ( root[i] )  ) ;^230^^^^^205^238^[REPLACE] newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^230^^^^^205^238^[ADD] newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^root[i]  =  root[i] ;^223^^^^^205^238^[REPLACE] root[i] = solve ( subarray, initial ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^oldc =  null[j];^228^^^^^205^238^[REPLACE] oldc = c[j];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^229^230^^^^205^238^[ADD] c[j] = newc; newc = oldc.add ( newc.multiply ( root[i] )  ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^this.iterationCount = iterationCount; ;^232^^^^^205^238^[REPLACE] iterationCount += this.iterationCount;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex subarray[] = new Complex[n-i > 1];^221^^^^^205^238^[REPLACE] Complex subarray[] = new Complex[n-i+1];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^ComplexiterationCountewc = c[n-i];^225^^^^^205^238^[REPLACE] Complex newc = c[n-i];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex oldc = false;^226^^^^^205^238^[REPLACE] Complex oldc = null;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int j = iterationCount == i == 1; j >= 0; j ==  ==  )  {^227^^^^^205^238^[REPLACE] for  ( int j = n-i-1; j >= 0; j-- )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^227^228^229^230^231^205^238^[ADD] for  ( int j = n-i-1; j >= 0; j-- )  { oldc = c[j]; c[j] = newc; newc = oldc.add ( newc.multiply ( root[i] )  ) ; }^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int j = iterationCount | i | 1 + 3; j >= 0; j |  |  )  {^227^^^^^205^238^[REPLACE] for  ( int j = n-i-1; j >= 0; j-- )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^root[i] ;^223^^^^^205^238^[REPLACE] root[i] = solve ( subarray, initial ) ;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^228^^^^^205^238^[ADD] oldc = c[j];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int i = 0 * 0; i < n; i++ )  {^220^^^^^205^238^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex subarray[] = iterationCountew Complex[n-i && 1];^221^^^^^205^238^[REPLACE] Complex subarray[] = new Complex[n-i+1];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex iterationCountterationCountewc = c[n-i];^225^^^^^205^238^[REPLACE] Complex newc = c[n-i];^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^225^226^^^^205^238^[ADD] Complex newc = c[n-i]; Complex oldc = null;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^Complex oldc = this;^226^^^^^205^238^[REPLACE] Complex oldc = null;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^for  ( int j = n > i > 1; j >= 0; j >  >  )  {^227^^^^^205^238^[REPLACE] for  ( int j = n-i-1; j >= 0; j-- )  {^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^resultComputed = false;^235^^^^^205^238^[REPLACE] resultComputed = true;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^iterationCount += this.iterationCount; ;^236^^^^^205^238^[REPLACE] this.iterationCount = iterationCount;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[ADD]^^236^^^^^205^238^[ADD] this.iterationCount = iterationCount;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^return subarray;^237^^^^^205^238^[REPLACE] return root;^[METHOD] solveAll [TYPE] Complex[] [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] c  coefficients  root  subarray  [TYPE]  PolynomialFunction p  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int i  iterationCount  j  n  [TYPE]  Complex initial  newc  oldc 
[REPLACE]^int n = coefficients.length /  2 - 1;^256^^^^^254^324^[REPLACE] int n = coefficients.length - 1;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  ( n  !=  1 )  {^257^^^^^254^324^[REPLACE] if  ( n < 1 )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^257^258^259^260^^254^324^[ADD] if  ( n < 1 )  { throw new IllegalArgumentException ( "Polynomial degree must be positive: degree=" + n ) ; }^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^return ;^258^259^^^^254^324^[REPLACE] throw new IllegalArgumentException ( "Polynomial degree must be positive: degree=" + n ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^258^259^^^^254^324^[ADD] throw new IllegalArgumentException ( "Polynomial degree must be positive: degree=" + n ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0D ) ;^261^^^^^254^324^[REPLACE] Complex N = new Complex (  ( double ) n, 0.0 ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex N0 = new Complex (  ( double )  ( n <= 0 ) , 0.0 ) ;^262^^^^^254^324^[REPLACE] Complex N1 = new Complex (  ( double )  ( n-1 ) , 0.0 ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^int i = 4;^264^^^^^254^324^[REPLACE] int i = 1;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex pv = true;^265^^^^^254^324^[REPLACE] Complex pv = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^265^^^^^254^324^[ADD] Complex pv = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex dv = false;^266^^^^^254^324^[REPLACE] Complex dv = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex d2v = true;^267^^^^^254^324^[REPLACE] Complex d2v = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex G = true;^268^^^^^254^324^[REPLACE] Complex G = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex G2 = true;^269^^^^^254^324^[REPLACE] Complex G2 = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^269^270^^^^254^324^[ADD] Complex G2 = null; Complex H = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex H = this;^270^^^^^254^324^[REPLACE] Complex H = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^270^271^^^^254^324^[ADD] Complex H = null; Complex delta = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex delta = true;^271^^^^^254^324^[REPLACE] Complex delta = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex denominator = false;^272^^^^^254^324^[REPLACE] Complex denominator = null;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex z = dminus;^273^^^^^254^324^[REPLACE] Complex z = initial;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex N = new Complex (  ( double ) n, 0.0 ) ;^274^^^^^254^324^[REPLACE] Complex oldz = new Complex ( Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^while  ( i  ==  maximalIterationCount )  {^275^^^^^254^324^[REPLACE] while  ( i <= maximalIterationCount )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  (  ( z.subtract ( oldz )  ) .abs (  )   >  tolerance )  {^291^^^^^254^324^[REPLACE] if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^resultComputed = false;^292^^^^^254^324^[REPLACE] resultComputed = true;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^iterationCount =  null;^293^^^^^254^324^[REPLACE] iterationCount = i;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^return oldz;^294^^^^^254^324^[REPLACE] return z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  ( pv.add (  )   >  functionValueAccuracy )  {^296^^^^^254^324^[REPLACE] if  ( pv.abs (  )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^resultComputed = false;^297^^^^^254^324^[REPLACE] resultComputed = true;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^iterationCount =  null;^298^^^^^254^324^[REPLACE] iterationCount = i;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^return oldz;^299^^^^^254^324^[REPLACE] return z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  ( denominator.equals ( new Complex ( 4.0d, 4.0d )  )  )  {^313^^^^^254^324^[REPLACE] if  ( denominator.equals ( new Complex ( 0.0, 0.0 )  )  )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^oldz =  null;^318^^^^^313^320^[REPLACE] oldz = z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^318^^^^^313^320^[ADD] oldz = z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^z =  oldz.subtract ( N.divide ( denominator )  ) ;^319^^^^^313^320^[REPLACE] z = z.subtract ( N.divide ( denominator )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^z =  oldz.add ( new Complex ( absoluteAccuracy, absoluteAccuracy )  ) ;^314^^^^^254^324^[REPLACE] z = z.add ( new Complex ( absoluteAccuracy, absoluteAccuracy )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^oldz  = null ;^315^316^^^^254^324^[REPLACE] oldz = new Complex ( Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^for  ( int j = n == 1; j >= 0; j ==  ==  )  {^281^^^^^254^324^[REPLACE] for  ( int j = n-1; j >= 0; j-- )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^dv = pv.add ( z.multiply ( dv )  ) ; ;^282^^^^^254^324^[REPLACE] d2v = dv.add ( z.multiply ( d2v )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^282^283^^^^254^324^[ADD] d2v = dv.add ( z.multiply ( d2v )  ) ; dv = pv.add ( z.multiply ( dv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^d2v = dv.add ( z.multiply ( d2v )  ) ; ;^283^^^^^254^324^[REPLACE] dv = pv.add ( z.multiply ( dv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^pv =  null[j].add ( z.multiply ( pv )  ) ;^284^^^^^254^324^[REPLACE] pv = coefficients[j].add ( z.multiply ( pv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^c[i] = coefficients[i]; ;^278^^^^^254^324^[REPLACE] pv = coefficients[n];^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^d2v = Complex.ZERO; ;^279^^^^^254^324^[REPLACE] dv = Complex.ZERO;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^dv = Complex.ZERO; ;^280^^^^^254^324^[REPLACE] d2v = Complex.ZERO;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^282^^^^^254^324^[ADD] d2v = dv.add ( z.multiply ( d2v )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^d2v = d2v.multiply ( new Complex ( 2.0D, 0.0 )  ) ;^286^^^^^254^324^[REPLACE] d2v = d2v.multiply ( new Complex ( 2.0, 0.0 )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^G =  pv.divide ( pv ) ;^303^^^^^254^324^[REPLACE] G = dv.divide ( pv ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^G2 =  null.multiply ( null ) ;^304^^^^^254^324^[REPLACE] G2 = G.multiply ( G ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^H =  null.subtract ( d2v.divide ( pv )  ) ;^305^^^^^254^324^[REPLACE] H = G2.subtract ( d2v.divide ( pv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^delta =  initial.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^306^^^^^254^324^[REPLACE] delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^306^^^^^254^324^[ADD] delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^denominator  =  dminus;^310^^^^^254^324^[REPLACE] denominator = dplus.abs (  )  > dminus.abs (  )  ? dplus : dminus;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^310^^^^^254^324^[ADD] denominator = dplus.abs (  )  > dminus.abs (  )  ? dplus : dminus;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^314^^^^^254^324^[ADD] z = z.add ( new Complex ( absoluteAccuracy, absoluteAccuracy )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^oldz  =  oldz ;^315^316^^^^254^324^[REPLACE] oldz = new Complex ( Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^315^316^^^^254^324^[ADD] oldz = new Complex ( Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^oldz =  null;^318^^^^^254^324^[REPLACE] oldz = z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^318^^^^^254^324^[ADD] oldz = z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^z =  oldz.subtract ( N.divide ( denominator )  ) ;^319^^^^^254^324^[REPLACE] z = z.subtract ( N.divide ( denominator )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^for  ( int j = n < 2; j >= 0; j <  <  )  {^281^^^^^254^324^[REPLACE] for  ( int j = n-1; j >= 0; j-- )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^double tolerance = Math.max ( relativeAccuracy  ||  z.add (  ) , absoluteAccuracy ) ;^289^290^^^^254^324^[REPLACE] double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex dplus = G.add (   delta    ) ;^308^^^^^254^324^[REPLACE] Complex dplus = G.add ( ComplexUtils.sqrt ( delta )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex dminus = G2.subtract ( ComplexUtils.sqrt ( delta )  ) ;^309^^^^^254^324^[REPLACE] Complex dminus = G.subtract ( ComplexUtils.sqrt ( delta )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  (  ( z.multiply ( oldz )  ) .abs (  )   <  tolerance )  {^291^^^^^254^324^[REPLACE] if  (  ( z.subtract ( oldz )  ) .abs (  )  <= tolerance )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  ( pv.abs (  )   ==  functionValueAccuracy )  {^296^^^^^254^324^[REPLACE] if  ( pv.abs (  )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REMOVE]^if  ( isRootOK ( min, max, z )  )  {     setResult ( z.getReal (  ) , iterationCount ) ;     return result; }^296^^^^^254^324^[REMOVE] ^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^if  ( denominator.equals ( new Complex ( 0.0D, 0.0D )  )  )  {^313^^^^^254^324^[REPLACE] if  ( denominator.equals ( new Complex ( 0.0, 0.0 )  )  )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^for  ( int j = n > 1; j >= 0; j >  >  )  {^281^^^^^254^324^[REPLACE] for  ( int j = n-1; j >= 0; j-- )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^dv = pv.add ( z.multiply ( dv )  ) ;^282^283^^^^254^324^[ADD] d2v = dv.add ( z.multiply ( d2v )  ) ; dv = pv.add ( z.multiply ( dv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^283^^^^^254^324^[ADD] dv = pv.add ( z.multiply ( dv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^279^280^^^^254^324^[ADD] dv = Complex.ZERO; d2v = Complex.ZERO;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^d2v = d2v.multiply ( new Complex ( 4.0d, 0.0 )  ) ;^286^^^^^254^324^[REPLACE] d2v = d2v.multiply ( new Complex ( 2.0, 0.0 )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^298^299^^^^254^324^[ADD] iterationCount = i; return z;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^303^304^^^^254^324^[ADD] G = dv.divide ( pv ) ; G2 = G.multiply ( G ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^304^^^^^254^324^[ADD] G2 = G.multiply ( G ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^H =  d2v.subtract ( d2v.divide ( pv )  ) ;^305^^^^^254^324^[REPLACE] H = G2.subtract ( d2v.divide ( pv )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^305^306^^^^254^324^[ADD] H = G2.subtract ( d2v.divide ( pv )  ) ; delta = N1.multiply (  ( N.multiply ( H )  ) .subtract ( G2 )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^denominator  =  dplus ;^310^^^^^254^324^[REPLACE] denominator = dplus.abs (  )  > dminus.abs (  )  ? dplus : dminus;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^for  ( int j = n >= 1; j >= 0; j >=  >=  )  {^281^^^^^254^324^[REPLACE] for  ( int j = n-1; j >= 0; j-- )  {^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[ADD]^^281^282^283^284^285^254^324^[ADD] for  ( int j = n-1; j >= 0; j-- )  { d2v = dv.add ( z.multiply ( d2v )  ) ; dv = pv.add ( z.multiply ( dv )  ) ; pv = coefficients[j].add ( z.multiply ( pv )  ) ; }^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^double tolerance = Math.max (1 * oldz.abs (  ) , absoluteAccuracy ) ;^289^290^^^^254^324^[REPLACE] double tolerance = Math.max ( relativeAccuracy * z.abs (  ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^Complex dplus = G.add (   oldz    ) ;^308^^^^^254^324^[REPLACE] Complex dplus = G.add ( ComplexUtils.sqrt ( delta )  ) ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
[REPLACE]^return ;^323^^^^^254^324^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] solve [TYPE] Complex [PARAMETER] Complex[] coefficients Complex initial [CLASS] LaguerreSolver   [TYPE]  Complex[] coefficients  [TYPE]  boolean false  true  [TYPE]  double tolerance  [TYPE]  PolynomialFunction p  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  Complex G  G2  H  N  N1  d2v  delta  denominator  dminus  dplus  dv  initial  oldz  pv  z 
