[REPLACE]^static final long serialVersionUID ;^36^^^^^^^[REPLACE] static final long serialVersionUID = -3965199246151093920L;^ [CLASS] PolynomialFunctionLagrangeForm  
[REPLACE]^this.y = new double[y.length]; ;^69^^^^^65^74^[REPLACE] this.x = new double[x.length];^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^this.x = new double[x.length]; ;^70^^^^^65^74^[REPLACE] this.y = new double[y.length];^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[ADD]^^70^71^^^^65^74^[ADD] this.y = new double[y.length]; System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( x, 0 , this.x, 0 , x.length ) ;^71^^^^^65^74^[REPLACE] System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( y, 0 , this.y, 0 , y.length ) ;^72^^^^^65^74^[REPLACE] System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[ADD]^^72^^^^^65^74^[ADD] System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^coefficientsComputed = true; ;^73^^^^^65^74^[REPLACE] coefficientsComputed = false;^[METHOD] <init> [TYPE] PolynomialFunctionLagrangeForm(double[],double[]) [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return out;^85^^^^^84^86^[REPLACE] return evaluate ( x, y, z ) ;^[METHOD] value [TYPE] double [PARAMETER] double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID  [TYPE]  double z 
[REPLACE]^return x.length (  )  - 0 ;^94^^^^^93^95^[REPLACE] return x.length - 1;^[METHOD] degree [TYPE] int [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[y.length];^105^^^^^104^108^[REPLACE] double[] out = new double[x.length];^[METHOD] getInterpolatingPoints [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( x, 0 , out, 0 , x.length ) ;^106^^^^^104^108^[REPLACE] System.arraycopy ( x, 0, out, 0, x.length ) ;^[METHOD] getInterpolatingPoints [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REMOVE]^return evaluate ( x, y, z ) ;^106^^^^^104^108^[REMOVE] ^[METHOD] getInterpolatingPoints [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^107^^^^^104^108^[REPLACE] return out;^[METHOD] getInterpolatingPoints [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[x.length];^118^^^^^117^121^[REPLACE] double[] out = new double[y.length];^[METHOD] getInterpolatingValues [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( y, 0 , out, 0 , y.length ) ;^119^^^^^117^121^[REPLACE] System.arraycopy ( y, 0, out, 0, y.length ) ;^[METHOD] getInterpolatingValues [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^120^^^^^117^121^[REPLACE] return out;^[METHOD] getInterpolatingValues [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( divider == 0.0 )  {^131^^^^^130^137^[REPLACE] if  ( !coefficientsComputed )  {^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[ADD]^computeCoefficients (  ) ;^131^132^133^^^130^137^[ADD] if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return evaluate ( x, y, z ) ;^132^^^^^130^137^[REPLACE] computeCoefficients (  ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^double[] out = new double[x.length];^134^^^^^130^137^[REPLACE] double[] out = new double[coefficients.length];^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^System.arraycopy ( coefficients, 0 , out, 0 , coefficients.length ) ;^135^^^^^130^137^[REPLACE] System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return coefficients;^136^^^^^130^137^[REPLACE] return out;^[METHOD] getCoefficients [TYPE] double[] [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] coefficients  out  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^int i, j, n;^157^^^^^155^207^[REPLACE] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^157^^^^^155^207^[ADD] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^int i, j, n, nearest = 3;^157^^^^^155^207^[REPLACE] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^double c[], tc[], d, t;^158^^^^^155^207^[REPLACE] double value, c[], d[], tc, td, divider, w, dist, min_dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^158^^^^^155^207^[ADD] double value, c[], d[], tc, td, divider, w, dist, min_dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^n =  null.length;^162^^^^^155^207^[REPLACE] n = x.length;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^162^^^^^155^207^[ADD] n = x.length;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c = new double[n+1]; ;^163^^^^^155^207^[REPLACE] c = new double[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c = new double[n]; ;^164^^^^^155^207^[REPLACE] d = new double[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^min_dist  =  min_dist ;^165^^^^^155^207^[REPLACE] min_dist = Double.POSITIVE_INFINITY;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( dist  >=  min_dist )  {^172^^^^^155^207^[REPLACE] if  ( dist < min_dist )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^nearest = i;min_dist = dist;^172^173^174^175^^155^207^[ADD] if  ( dist < min_dist )  { nearest = i; min_dist = dist; }^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^nearest =  null;^173^^^^^155^207^[REPLACE] nearest = i;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^min_dist =  divider;^174^^^^^155^207^[REPLACE] min_dist = dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( i = 0; i  <=  n; i++ )  {^166^^^^^155^207^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( dist  == divider )  {^172^^^^^155^207^[REPLACE] if  ( dist < min_dist )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^172^173^174^175^^155^207^[ADD] if  ( dist < min_dist )  { nearest = i; min_dist = dist; }^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^min_dist =  null;^174^^^^^155^207^[REPLACE] min_dist = dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[i] = y[i]; ;^168^^^^^155^207^[REPLACE] c[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^d[i] = y[i];^168^169^^^^155^207^[ADD] c[i] = y[i]; d[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c[i] = y[i]; ;^169^^^^^155^207^[REPLACE] d[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^dist = Math.abs ( z  ==  x[i] ) ;^171^^^^^155^207^[REPLACE] dist = Math.abs ( z - x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( i = 0L; i < n; i++ )  {^166^^^^^155^207^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^169^^^^^155^207^[ADD] d[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^dist = Math.abs ( z  &  x[i] ) ;^171^^^^^155^207^[REPLACE] dist = Math.abs ( z - x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value += d[nearest]; ;^179^^^^^155^207^[REPLACE] value = y[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^179^^^^^155^207^[ADD] value = y[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( divider  || value )  {^186^^^^^155^207^[REPLACE] if  ( divider == 0.0 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; ;^188^189^190^^^155^207^[REPLACE] throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( nearest  !=  0.5* ( n-i+1 )  )  {^198^^^^^155^207^[REPLACE] if  ( nearest < 0.5* ( n-i+1 )  )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value = y[nearest]; ;^202^^^^^198^203^[REPLACE] value += d[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value += d[nearest]; ;^199^^^^^155^207^[REPLACE] value += c[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( i = 1 - 4; i  >  n; i++ )  {^181^^^^^155^207^[REPLACE] for  ( i = 1; i < n; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^181^182^183^184^185^155^207^[ADD] for  ( i = 1; i < n; i++ )  { for  ( j = 0; j < n-i; j++ )  { tc = x[j] - z; td = x[i+j] - z; divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( divider  ||  0.0 )  {^186^^^^^155^207^[REPLACE] if  ( divider == 0.0 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^return ;^188^189^190^^^155^207^[REPLACE] throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^188^189^190^^^155^207^[ADD] throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( nearest  ==  0.5* ( n-i+1 )  )  {^198^^^^^155^207^[REPLACE] if  ( nearest < 0.5* ( n-i+1 )  )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^value += c[nearest];nearest--;value += d[nearest];^198^199^200^201^202^155^207^[ADD] if  ( nearest < 0.5* ( n-i+1 )  )  { value += c[nearest]; } else { nearest--; value += d[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( j = 0; j  >  n-i; j++ )  {^182^^^^^155^207^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( value  !=  0.0 )  {^186^^^^^155^207^[REPLACE] if  ( divider == 0.0 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^td = x[i+j] - z; ;^183^^^^^155^207^[REPLACE] tc = x[j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = x[j] - z; ;^184^^^^^155^207^[REPLACE] td = x[i+j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^184^^^^^155^207^[ADD] td = x[i+j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^divider = x[j]  <  x[i+j];^185^^^^^155^207^[REPLACE] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^w =  ( c[j+1] - d[j] )   ;^193^^^^^155^207^[REPLACE] w =  ( c[j+1] - d[j] )  / divider;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c[j] = tc  ;^194^^^^^155^207^[REPLACE] c[j] = tc * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^d[j] = td * w;^194^195^^^^155^207^[ADD] c[j] = tc * w; d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[j] = td  ;^195^^^^^155^207^[REPLACE] d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( j = 3; j < n-i; j++ )  {^182^^^^^155^207^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = x[j]  >  z;^183^^^^^155^207^[REPLACE] tc = x[j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^td = x[i+j]  &&  z;^184^^^^^155^207^[REPLACE] td = x[i+j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^divider = x[j]  ^  x[i+j];^185^^^^^155^207^[REPLACE] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^185^^^^^155^207^[ADD] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[j] = td * w; ;^194^^^^^155^207^[REPLACE] c[j] = tc * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^194^195^^^^155^207^[ADD] c[j] = tc * w; d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^195^^^^^155^207^[ADD] d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value = y[nearest]; ;^202^^^^^155^207^[REPLACE] value += d[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( j = 0; j  <=  n-i; j++ )  {^182^^^^^155^207^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^186^187^188^189^190^155^207^[ADD] if  ( divider == 0.0 )  {  throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = x[j]  ^  z;^183^^^^^155^207^[REPLACE] tc = x[j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^divider = x[j]  >=  x[i+j];^185^^^^^155^207^[REPLACE] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( i = 0; i < n; i++ )  {  ;^181^^^^^155^207^[REPLACE] for  ( i = 1; i < n; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^for  ( j = 4; j < n-i; j++ )  {^182^^^^^155^207^[REPLACE] for  ( j = 0; j < n-i; j++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = x[j]  &&  z;^183^^^^^155^207^[REPLACE] tc = x[j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^td = x[i+j]  >=  z;^184^^^^^155^207^[REPLACE] td = x[i+j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^184^185^^^^155^207^[ADD] td = x[i+j] - z; divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^divider = x[j]  ==  x[i+j];^185^^^^^155^207^[REPLACE] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c[j] =td  ;^194^^^^^155^207^[REPLACE] c[j] = tc * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[j] = tc  ;^195^^^^^155^207^[REPLACE] d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^return divider;^206^^^^^155^207^[REPLACE] return value;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^int i, j, n, nearest = 0;^219^^^^^218^266^[REPLACE] int i, j, n;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^double value, c[], d[], tc, td, divider, w, dist, min_dist;^220^^^^^218^266^[REPLACE] double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^220^^^^^218^266^[ADD] double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^n = degree (  )   !=  1;^222^^^^^218^266^[REPLACE] n = degree (  )  + 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients =  nullew double[null];^223^^^^^218^266^[REPLACE] coefficients = new double[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 0; i  ==  n; i++ )  {^224^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[i] = 0.0d;^225^^^^^218^266^[REPLACE] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^225^^^^^218^266^[ADD] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 4; i < n; i++ )  {^224^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[i] = 3.0d;^225^^^^^218^266^[REPLACE] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c = new double[n]; ;^229^^^^^218^266^[REPLACE] c = new double[n+1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[2] = 1.2;^230^^^^^218^266^[REPLACE] c[0] = 1.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 0; i  ==  n; i++ )  {^231^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = i; j  !=  0; j-- )  {^232^^^^^218^266^[REPLACE] for  ( j = i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^232^233^234^^^218^266^[ADD] for  ( j = i; j > 0; j-- )  { c[j] = c[j-1] - c[j] * x[i]; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[j] = c[j && 1]  &&  c[j] * x[i];^233^^^^^218^266^[REPLACE] c[j] = c[j-1] - c[j] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j =  null; j > 0; j-- )  {^232^^^^^218^266^[REPLACE] for  ( j = i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j+1] + tc[j+1] * x[i]; ;^233^^^^^218^266^[REPLACE] c[j] = c[j-1] - c[j] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[2] *=  ( -x[i] ) ;^235^^^^^218^266^[REPLACE] c[0] *=  ( -x[i] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[i <= 1] = 1;^236^^^^^218^266^[REPLACE] c[i+1] = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = i; j  <  0; j-- )  {^232^^^^^218^266^[REPLACE] for  ( j = i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[j] = c[j <= 1]  <=  c[j] * x[i];^233^^^^^218^266^[REPLACE] c[j] = c[j-1] - c[j] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 0 * 4; i < n; i++ )  {^231^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^231^232^233^234^^218^266^[ADD] for  ( i = 0; i < n; i++ )  { for  ( j = i; j > 0; j-- )  { c[j] = c[j-1] - c[j] * x[i]; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[j] = c[j && 2]  &&  c[j] * x[i];^233^^^^^218^266^[REPLACE] c[j] = c[j-1] - c[j] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[0 + 4] *=  ( -x[i] ) ;^235^^^^^218^266^[REPLACE] c[0] *=  ( -x[i] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[i ^ 1] = 1;^236^^^^^218^266^[REPLACE] c[i+1] = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c = new double[n]; ;^239^^^^^218^266^[REPLACE] tc = new double[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^239^^^^^218^266^[ADD] tc = new double[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^if  ( i  ==  j )  {^244^^^^^218^266^[REPLACE] if  ( i != j )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^244^245^246^^^218^266^[ADD] if  ( i != j )  { d *=  ( x[i] - x[j] ) ; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  |  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^if  ( d  ||  0.0D )  {^248^^^^^218^266^[REPLACE] if  ( d == 0.0 )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^248^249^250^251^252^218^266^[ADD] if  ( d == 0.0 )  {  throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^return ;^250^251^^^^218^266^[REPLACE] throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 0; i  <=  n; i++ )  {^240^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  !=  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^250^251^^^^218^266^[ADD] throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = 3; j  ==  n; j++ )  {^243^^^^^218^266^[REPLACE] for  ( j = 0; j < n; j++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  &  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  ==  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = n ^ 2; j >= 0; j ^  ^  )  {^259^^^^^218^266^[REPLACE] for  ( j = n-2; j >= 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j > 1]  >  tc[j > 1] * x[i];^260^^^^^218^266^[REPLACE] tc[j] = c[j+1] + tc[j+1] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[j] += t  ;^261^^^^^218^266^[REPLACE] coefficients[j] += t * tc[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^261^^^^^218^266^[ADD] coefficients[j] += t * tc[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d = 1 * 2;^242^^^^^218^266^[REPLACE] d = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = 0 - 1; j < n; j++ )  {^243^^^^^218^266^[REPLACE] for  ( j = 0; j < n; j++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  ||  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^t = y[i]  ;^253^^^^^218^266^[REPLACE] t = y[i] / d;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^253^^^^^218^266^[ADD] t = y[i] / d;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[n == 1] = c[n];^257^^^^^218^266^[REPLACE] tc[n-1] = c[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[n | 2] += t * tc[n | 2];^258^^^^^218^266^[REPLACE] coefficients[n-1] += t * tc[n-1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = n < 2; j >= 0; j <  <  )  {^259^^^^^218^266^[REPLACE] for  ( j = n-2; j >= 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j != 0]  !=  tc[j != 0] * x[i];^260^^^^^218^266^[REPLACE] tc[j] = c[j+1] + tc[j+1] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^245^^^^^218^266^[ADD] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  &&  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = n == 1; j >= 0; j ==  ==  )  {^259^^^^^218^266^[REPLACE] for  ( j = n-2; j >= 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j && 1]  &&  tc[j && 1] * x[i];^260^^^^^218^266^[REPLACE] tc[j] = c[j+1] + tc[j+1] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 1; i < n; i++ )  {^240^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d = 1 >>> 1;^242^^^^^218^266^[REPLACE] d = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^242^^^^^218^266^[ADD] d = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = 0 * 3; j < n; j++ )  {^243^^^^^218^266^[REPLACE] for  ( j = 0; j < n; j++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^243^244^245^246^^218^266^[ADD] for  ( j = 0; j < n; j++ )  { if  ( i != j )  { d *=  ( x[i] - x[j] ) ; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  ^  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^257^^^^^218^266^[ADD] tc[n-1] = c[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[n >= 1] += t * tc[n >= 1];^258^^^^^218^266^[REPLACE] coefficients[n-1] += t * tc[n-1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = n || 2; j >= 0; j ||  ||  )  {^259^^^^^218^266^[REPLACE] for  ( j = n-2; j >= 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^259^260^261^262^^218^266^[ADD] for  ( j = n-2; j >= 0; j-- )  { tc[j] = c[j+1] + tc[j+1] * x[i]; coefficients[j] += t * tc[j]; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j >= 4]  >=  tc[j >= 4] * x[i];^260^^^^^218^266^[REPLACE] tc[j] = c[j+1] + tc[j+1] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^coefficients[j] += t * tc[j];^260^261^^^^218^266^[ADD] tc[j] = c[j+1] + tc[j+1] * x[i]; coefficients[j] += t * tc[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + ;^250^251^^^^218^266^[REPLACE] throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficientsComputed = false; ;^265^^^^^218^266^[REPLACE] coefficientsComputed = true;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^265^^^^^218^266^[ADD] coefficientsComputed = true;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^if  (  y.length + 4 < 0  )  {^281^^^^^278^289^[REPLACE] if  ( x.length < 2 || y.length < 2 )  {^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; ;^282^283^^^^278^289^[REPLACE] throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^282^283^^^^278^289^[REPLACE] throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( x.length (  )  != y.length (  )  )  {^285^^^^^278^289^[REPLACE] if  ( x.length != y.length )  {^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ; ;^286^287^^^^278^289^[REPLACE] throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^286^287^^^^278^289^[REPLACE] throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
[ADD]^^286^287^^^^278^289^[ADD] throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[METHOD] verifyInterpolationArray [TYPE] void [PARAMETER] double[] x double[] y [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID 
