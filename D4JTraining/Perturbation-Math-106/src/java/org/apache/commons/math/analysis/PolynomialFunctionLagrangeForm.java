[REPLACE]^static final long serialVersionUID = -3965199246151093920;^36^^^^^^^[REPLACE] static final long serialVersionUID = -3965199246151093920L;^ [CLASS] PolynomialFunctionLagrangeForm  
[REPLACE]^int j  ;^157^^^^^155^207^[REPLACE] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^int i  ;^157^^^^^155^207^[REPLACE] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^int i, j, n, nearest = 1;^157^^^^^155^207^[REPLACE] int i, j, n, nearest = 0;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^double dist  ;^158^^^^^155^207^[REPLACE] double value, c[], d[], tc, td, divider, w, dist, min_dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^double t  ;^158^^^^^155^207^[REPLACE] double value, c[], d[], tc, td, divider, w, dist, min_dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^158^^^^^155^207^[ADD] double value, c[], d[], tc, td, divider, w, dist, min_dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^160^161^162^163^164^155^207^[ADD] verifyInterpolationArray ( x, y ) ;  n = x.length; c = new double[n]; d = new double[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^n =  null.length;^162^^^^^155^207^[REPLACE] n = x.length;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d = new double[n]  ;^163^^^^^155^207^[REPLACE] c = new double[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = new double[n]  ;^164^^^^^155^207^[REPLACE] d = new double[n];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^min_dist  =  min_dist ;^165^^^^^155^207^[REPLACE] min_dist = Double.POSITIVE_INFINITY;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( dist  >  min_dist )  {^172^^^^^155^207^[REPLACE] if  ( dist < min_dist )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^nearest =  null;^173^^^^^155^207^[REPLACE] nearest = i;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^174^^^^^155^207^[ADD] min_dist = dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^i = 1  ;^166^^^^^155^207^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[i] = y[i]  ;^168^^^^^155^207^[REPLACE] c[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^c[i] = y[i]  ;^169^^^^^155^207^[REPLACE] d[i] = y[i];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^dist = Math.abs ( z  x[i] ) ;^171^^^^^155^207^[REPLACE] dist = Math.abs ( z - x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^min_dist =  divider;^174^^^^^155^207^[REPLACE] min_dist = dist;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value += d[nearest]  ;^179^^^^^155^207^[REPLACE] value = y[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( value  &&  0.0 )  {^186^^^^^155^207^[REPLACE] if  ( divider == 0.0 )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^return ;^188^189^190^^^155^207^[REPLACE] throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^if  ( nearest  >=  0.5D* ( n-i+1 )  )  {^198^^^^^155^207^[REPLACE] if  ( nearest < 0.5* ( n-i+1 )  )  {^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^202^^^^^198^203^[ADD] value += d[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value += d[nearest]  ;^199^^^^^155^207^[REPLACE] value += c[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^181^182^183^184^185^155^207^[ADD] for  ( i = 1; i < n; i++ )  { for  ( j = 0; j < n-i; j++ )  { tc = x[j] - z; td = x[i+j] - z; divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^182^183^184^185^^155^207^[ADD] for  ( j = 0; j < n-i; j++ )  { tc = x[j] - z; td = x[i+j] - z; divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^tc = x[j]  z;^183^^^^^155^207^[REPLACE] tc = x[j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^td = x[i+j]  z;^184^^^^^155^207^[REPLACE] td = x[i+j] - z;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^divider = x[j]  x[i+j];^185^^^^^155^207^[REPLACE] divider = x[j] - x[i+j];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^w =  ( c[j+1 - 4] - d[j] )   divider;^193^^^^^155^207^[REPLACE] w =  ( c[j+1] - d[j] )  / divider;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[ADD]^^194^^^^^155^207^[ADD] c[j] = tc * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^d[j] = td  w;^195^^^^^155^207^[REPLACE] d[j] = td * w;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^value = y[nearest]  ;^202^^^^^155^207^[REPLACE] value += d[nearest];^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^return divider;^206^^^^^155^207^[REPLACE] return value;^[METHOD] evaluate [TYPE] double [PARAMETER] double[] x double[] y double z [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  x  y  [TYPE]  long serialVersionUID  [TYPE]  double dist  divider  min_dist  tc  td  value  w  z  [TYPE]  int i  j  n  nearest 
[REPLACE]^int j  ;^219^^^^^218^266^[REPLACE] int i, j, n;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^219^220^^^^218^266^[ADD] int i, j, n; double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^double t  ;^220^^^^^218^266^[REPLACE] double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^220^^^^^218^266^[ADD] double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^double dist  ;^220^^^^^218^266^[REPLACE] double c[], tc[], d, t;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^n = degree (  )   1 + 2;^222^^^^^218^266^[REPLACE] n = degree (  )  + 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients =  nullew double[null];^223^^^^^218^266^[REPLACE] coefficients = new double[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^224^225^226^^^218^266^[ADD] for  ( i = 0; i < n; i++ )  { coefficients[i] = 0.0; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[i] = 0.0D;^225^^^^^218^266^[REPLACE] coefficients[i] = 0.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d = new double[n]  ;^229^^^^^218^266^[REPLACE] c = new double[n+1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[3] = 1.3;^230^^^^^218^266^[REPLACE] c[0] = 1.0;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^i = 1  ;^231^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^j = 0  ;^232^^^^^218^266^[REPLACE] for  ( j = i; j > 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^233^^^^^218^266^[ADD] c[j] = c[j-1] - c[j] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[0 + 1] *=  ( -x[i] ) ;^235^^^^^218^266^[REPLACE] c[0] *=  ( -x[i] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^c[i1] = 1;^236^^^^^218^266^[REPLACE] c[i+1] = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d = new double[n]  ;^239^^^^^218^266^[REPLACE] tc = new double[n];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^if  ( i  ==  j )  {^244^^^^^218^266^[REPLACE] if  ( i != j )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^d *=  ( x[i]  x[j] ) ;^245^^^^^218^266^[REPLACE] d *=  ( x[i] - x[j] ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^if   (  divider == 0.0  )   {  ;^248^^^^^218^266^[REPLACE] if  ( d == 0.0 )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^250^251^^^^218^266^[ADD] throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( i = 4; i < n; i++ )  {^240^^^^^218^266^[REPLACE] for  ( i = 0; i < n; i++ )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^242^^^^^218^266^[ADD] d = 1;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^243^244^245^246^^218^266^[ADD] for  ( j = 0; j < n; j++ )  { if  ( i != j )  { d *=  ( x[i] - x[j] ) ; }^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^t = y[i]  d;^253^^^^^218^266^[REPLACE] t = y[i] / d;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[ADD]^^257^258^^^^218^266^[ADD] tc[n-1] = c[n]; coefficients[n-1] += t * tc[n-1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[n1 >> 1] += t * tc[n1 >> 1];^258^^^^^218^266^[REPLACE] coefficients[n-1] += t * tc[n-1];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^for  ( j = n2; j >= 0; j )  {^259^^^^^218^266^[REPLACE] for  ( j = n-2; j >= 0; j-- )  {^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^tc[j] = c[j1]  tc[j1] * x[i];^260^^^^^218^266^[REPLACE] tc[j] = c[j+1] + tc[j+1] * x[i];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficients[j] += t  tc[j];^261^^^^^218^266^[REPLACE] coefficients[j] += t * tc[j];^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^return ;^250^251^^^^218^266^[REPLACE] throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
[REPLACE]^coefficientsComputed = false;^265^^^^^218^266^[REPLACE] coefficientsComputed = true;^[METHOD] computeCoefficients [TYPE] void [PARAMETER] [CLASS] PolynomialFunctionLagrangeForm   [TYPE]  boolean coefficientsComputed  false  true  [TYPE]  double[] c  coefficients  d  out  tc  x  y  [TYPE]  long serialVersionUID  [TYPE]  int i  j  n  [TYPE]  double d  t 
