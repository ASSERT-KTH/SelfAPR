[REPLACE]^private double cachedNormalDeviate ;^41^^^^^^^[REPLACE] private double cachedNormalDeviate = Double.NaN;^ [CLASS] AbstractRandomGenerator  
[REPLACE]^if  ( Double.isNaN ( cachedNormalDeviate )  )  {^232^^^^^231^250^[REPLACE] if  ( !Double.isNaN ( cachedNormalDeviate )  )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate  =  cachedNormalDeviate ;^234^^^^^231^250^[REPLACE] cachedNormalDeviate = Double.NaN;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return dev;  ;^235^^^^^231^250^[REPLACE] return dev;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^int i = 0  ;^233^^^^^231^250^[REPLACE] double dev = cachedNormalDeviate;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double v1 = 2;^237^^^^^231^250^[REPLACE] double v1 = 0;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^238^^^^^231^250^[ADD] double v2 = 0;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double s = 1 * 0;^239^^^^^231^250^[REPLACE] double s = 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^v2 =  ( 2 *  ( nextDouble (  )  )  )  - 1  ;^241^^^^^231^250^[REPLACE] v1 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^v1 =  ( 2 *  ( nextDouble (  )  )  )  - 1  ;^242^^^^^231^250^[REPLACE] v2 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^s = v1 * v1  v2 * v2;^243^^^^^231^250^[REPLACE] s = v1 * v1 + v2 * v2;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^if   (   i > 0  )   {  ;^245^^^^^231^250^[REPLACE] if  ( s != 0 )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^s = Math.sqrt ( -2 * Math.log ( s )   s ) ;^246^^^^^231^250^[REPLACE] s = Math.sqrt ( -2 * Math.log ( s )  / s ) ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate = v2  s;^248^^^^^231^250^[REPLACE] cachedNormalDeviate = v2 * s;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return v1  s;^249^^^^^231^250^[REPLACE] return v1 * s;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
