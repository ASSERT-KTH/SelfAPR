[REPLACE]^private float cachedNormalDeviate = Double.NaN;^41^^^^^^^[REPLACE] private double cachedNormalDeviate = Double.NaN;^ [CLASS] AbstractRandomGenerator  
[REPLACE]^int randInt = nextInt (  ) ;^47^^^^^46^49^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] AbstractRandomGenerator() [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate  =  cachedNormalDeviate ;^58^^^^^57^59^[REPLACE] cachedNormalDeviate = Double.NaN;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^int bytesOut = 0 >> 3;^86^^^^^85^99^[REPLACE] int bytesOut = 0;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^while  ( bytesOut < bytes.length - 1 )  {^87^^^^^85^99^[REPLACE] while  ( bytesOut < bytes.length )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^87^88^^^^85^99^[ADD] while  ( bytesOut < bytes.length )  { int randInt = nextInt (  ) ;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randIntf  (  i  !=  0 + 1 )  {^90^^^^^85^99^[REPLACE] if  (  i > 0 )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^90^91^92^^^85^99^[ADD] if  (  i > 0 )  { randInt = randInt >> 8; }^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt =i  !=  8;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  ( bytesOut == bytes.length /  2 )  {^94^^^^^85^99^[REPLACE] if  ( bytesOut == bytes.length )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^94^95^96^^^85^99^[ADD] if  ( bytesOut == bytes.length )  { return; }^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^return dev;^95^^^^^85^99^[REPLACE] return;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^for  ( int i = 1; i  <=  3; i++ )  {^89^^^^^85^99^[REPLACE] for  ( int i = 0; i < 3; i++ )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randIntf  (  i  <  0 )  {^90^^^^^85^99^[REPLACE] if  (  i > 0 )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt = randInt  ==  8;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^91^^^^^85^99^[ADD] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  ( bytesOut == bytes.length *  2 )  {^94^^^^^85^99^[REPLACE] if  ( bytesOut == bytes.length )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt = randInt  <  8;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^bytes[bytesOut++] =   ( byte )  randInt;^93^^^^^85^99^[REPLACE] bytes[bytesOut++] =  ( byte )  randInt;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^93^^^^^85^99^[ADD] bytes[bytesOut++] =  ( byte )  randInt;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt = randInt  <=  8;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^int bytesOut = 0;^88^^^^^85^99^[REPLACE] int randInt = nextInt (  ) ;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^for  ( int i = 3; i < 3; i++ )  {^89^^^^^85^99^[REPLACE] for  ( int i = 0; i < 3; i++ )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  ( randInt  <  0 % 0 )  {^90^^^^^85^99^[REPLACE] if  (  i > 0 )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt = randInt  ==  4;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  ( bytesOut == bytes.length (  )  )  {^94^^^^^85^99^[REPLACE] if  ( bytesOut == bytes.length )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^for  ( int i = 0 << 0; i  >  3; i++ )  {^89^^^^^85^99^[REPLACE] for  ( int i = 0; i < 3; i++ )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[ADD]^^89^90^91^92^^85^99^[ADD] for  ( int i = 0; i < 3; i++ )  { if  (  i > 0 )  { randInt = randInt >> 8; }^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  (  i  <=  0 )  {^90^^^^^85^99^[REPLACE] if  (  i > 0 )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^i = randInt  >=  4;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^if  ( bytesOut == bytes.length *  0.5  )  {^94^^^^^85^99^[REPLACE] if  ( bytesOut == bytes.length )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^randInt = randInt  >=  4;^91^^^^^85^99^[REPLACE] randInt = randInt >> 8;^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^for  ( int i = 0L; i < 3; i++ )  {^89^^^^^85^99^[REPLACE] for  ( int i = 0; i < 3; i++ )  {^[METHOD] nextBytes [TYPE] void [PARAMETER] byte[] bytes [CLASS] AbstractRandomGenerator   [TYPE]  byte[] bytes  [TYPE]  boolean false  true  [TYPE]  double cachedNormalDeviate  [TYPE]  int bytesOut  i  randInt 
[REPLACE]^return  ( int )   ( cachedNormalDeviate (  )  * Integer.MAX_VALUE ) ;^116^^^^^115^117^[REPLACE] return  ( int )   ( nextDouble (  )  * Integer.MAX_VALUE ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^if  ( n  ==  0  )  {^136^^^^^135^141^[REPLACE] if  ( n <= 0  )  {^[METHOD] nextInt [TYPE] int [PARAMETER] int n [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  int n  result  [TYPE]  boolean false  true 
[REPLACE]^return ;^137^^^^^135^141^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextInt [TYPE] int [PARAMETER] int n [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  int n  result  [TYPE]  boolean false  true 
[REPLACE]^int result =  ( int )   (cachedNormalDeviateextDouble (  )  *cachedNormalDeviate ) ;^139^^^^^135^141^[REPLACE] int result =  ( int )   ( nextDouble (  )  * n ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int n [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  int n  result  [TYPE]  boolean false  true 
[ADD]^^139^^^^^135^141^[ADD] int result =  ( int )   ( nextDouble (  )  * n ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int n [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  int n  result  [TYPE]  boolean false  true 
[REPLACE]^return result  !=  n ? result : n - 1;;^140^^^^^135^141^[REPLACE] return result < n ? result : n - 1;^[METHOD] nextInt [TYPE] int [PARAMETER] int n [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  int n  result  [TYPE]  boolean false  true 
[REPLACE]^return  ( long )   ( nextDouble (  )   ;^158^^^^^157^159^[REPLACE] return  ( long )   ( nextDouble (  )  * Long.MAX_VALUE ) ;^[METHOD] nextLong [TYPE] long [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^return false ;^176^^^^^175^177^[REPLACE] return nextDouble (  )  <= 0.5;^[METHOD] nextBoolean [TYPE] boolean [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^return result < n ? result : n - 1;^194^^^^^193^195^[REPLACE] return  ( float )  nextDouble (  ) ;^[METHOD] nextFloat [TYPE] float [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  [TYPE]  boolean false  true 
[REPLACE]^if  ( !  cachedNormalDeviate    )  {^232^^^^^231^250^[REPLACE] if  ( !Double.isNaN ( cachedNormalDeviate )  )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate ;^234^^^^^231^250^[REPLACE] cachedNormalDeviate = Double.NaN;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^234^235^^^^231^250^[ADD] cachedNormalDeviate = Double.NaN; return dev;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return cachedNormalDeviate;^235^^^^^231^250^[REPLACE] return dev;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^int randInt = nextInt (  ) ;^233^^^^^231^250^[REPLACE] double dev = cachedNormalDeviate;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate  =  cachedNormalDeviate ;^234^^^^^231^250^[REPLACE] cachedNormalDeviate = Double.NaN;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double v1 = 0L;^237^^^^^231^250^[REPLACE] double v1 = 0;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double v2 = 4;^238^^^^^231^250^[REPLACE] double v2 = 0;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^double s = 1 << 1;^239^^^^^231^250^[REPLACE] double s = 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^239^^^^^231^250^[ADD] double s = 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^while  ( s  <= 1  )  {^240^^^^^231^250^[REPLACE] while  ( s >=1  )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^240^241^^^^231^250^[ADD] while  ( s >=1  )  { v1 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^v1 = 2 / 4 * nextDouble (  )  - 1;^241^^^^^231^250^[REPLACE] v1 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^241^^^^^231^250^[ADD] v1 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^v1 = 2 * nextDouble (  )  - 1; ;^242^^^^^231^250^[REPLACE] v2 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^242^243^^^^231^250^[ADD] v2 = 2 * nextDouble (  )  - 1; s = v1 * v1 + v2 * v2;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^s = v1 * v1  >  v2 * v2;^243^^^^^231^250^[REPLACE] s = v1 * v1 + v2 * v2;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^v2 = 2 * nextDouble (  )  - 1; ;^241^^^^^231^250^[REPLACE] v1 = 2 * nextDouble (  )  - 1;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^s = v1 * v1 +v2;^243^^^^^231^250^[REPLACE] s = v1 * v1 + v2 * v2;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^if  ( s  ==  0 )  {^245^^^^^231^250^[REPLACE] if  ( s != 0 )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^s = Math.sqrt ( -2 * Math.log (cachedNormalDeviate )  /cachedNormalDeviate ) ;^246^^^^^231^250^[REPLACE] s = Math.sqrt ( -2 * Math.log ( s )  / s ) ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[ADD]^^246^^^^^231^250^[ADD] s = Math.sqrt ( -2 * Math.log ( s )  / s ) ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^cachedNormalDeviate = v2  ;^248^^^^^231^250^[REPLACE] cachedNormalDeviate = v2 * s;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
[REPLACE]^return v1  ;^249^^^^^231^250^[REPLACE] return v1 * s;^[METHOD] nextGaussian [TYPE] double [PARAMETER] [CLASS] AbstractRandomGenerator   [TYPE]  double cachedNormalDeviate  dev  s  v1  v2  [TYPE]  boolean false  true 
