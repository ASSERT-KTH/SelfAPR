[REPLACE]^private static final long serialVersionUID ;^33^^^^^^^[REPLACE] private static final long serialVersionUID = -3349935121172596109L;^ [CLASS] PoissonDistributionImpl  
[REPLACE]^private float mean;^38^^^^^^^[REPLACE] private double mean;^ [CLASS] PoissonDistributionImpl  
[REPLACE]^setMean ( p ) ;^49^^^^^48^51^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] PoissonDistributionImpl(double) [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^super (  ) ;^50^^^^^48^51^[REPLACE] setMean ( p ) ;^[METHOD] <init> [TYPE] PoissonDistributionImpl(double) [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^50^^^^^48^51^[ADD] setMean ( p ) ;^[METHOD] <init> [TYPE] PoissonDistributionImpl(double) [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return Integer.MAX_VALUE;^59^^^^^58^60^[REPLACE] return this.mean;^[METHOD] getMean [TYPE] double [PARAMETER] [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p  >=  0 )  {^71^^^^^70^76^[REPLACE] if  ( p <= 0 )  {^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^71^72^73^74^^70^76^[ADD] if  ( p <= 0 )  { throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ; }^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^72^73^^^^70^76^[REPLACE] throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^72^73^^^^70^76^[ADD] throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^this.mean =  null;^75^^^^^70^76^[REPLACE] this.mean = p;^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^75^^^^^70^76^[ADD] this.mean = p;^[METHOD] setMean [TYPE] void [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  (  x == Integer.MAX_VALUE )  {^85^^^^^84^90^[REPLACE] if  ( x < 0 || x == Integer.MAX_VALUE )  {^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[ADD]^return 0;^85^86^87^^^84^90^[ADD] if  ( x < 0 || x == Integer.MAX_VALUE )  { return 0; }^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 4;^86^^^^^84^90^[REPLACE] return 0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 0 % 3;^86^^^^^84^90^[REPLACE] return 0;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return   -mean   ;^88^89^^^^84^90^[REPLACE] return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[METHOD] probability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^if  ( x  <=  0 )  {^101^^^^^100^109^[REPLACE] if  ( x < 0 )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 0 / 4;^102^^^^^100^109^[REPLACE] return 0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 1;^102^^^^^100^109^[REPLACE] return 0;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^if  ( x  !=  Integer.MAX_VALUE )  {^104^^^^^100^109^[REPLACE] if  ( x == Integer.MAX_VALUE )  {^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[ADD]^return 1;^104^105^106^^^100^109^[ADD] if  ( x == Integer.MAX_VALUE )  { return 1; }^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 2;^105^^^^^100^109^[REPLACE] return 1;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 0;^105^^^^^100^109^[REPLACE] return 1;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return false ;^107^108^^^^100^109^[REPLACE] return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[METHOD] cumulativeProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^NormalDistribution normal = DistributionFactory.newInstance (  ) .createNormalDistribution ( getMean (  ) ,   getMean (  )   ) ;^124^125^126^^^123^130^[REPLACE] NormalDistribution normal = DistributionFactory.newInstance (  ) .createNormalDistribution ( getMean (  ) , Math.sqrt ( getMean (  )  )  ) ;^[METHOD] normalApproximateProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  NormalDistribution normal  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return normal .cumulativeProbability ( x )  ;^129^^^^^123^130^[REPLACE] return normal.cumulativeProbability ( x + 0.5 ) ;^[METHOD] normalApproximateProbability [TYPE] double [PARAMETER] int x [CLASS] PoissonDistributionImpl   [TYPE]  boolean false  true  [TYPE]  NormalDistribution normal  [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  int x 
[REPLACE]^return 0L;^141^^^^^140^142^[REPLACE] return 0;^[METHOD] getDomainLowerBound [TYPE] int [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return 1;^153^^^^^152^154^[REPLACE] return Integer.MAX_VALUE;^[METHOD] getDomainUpperBound [TYPE] int [PARAMETER] double p [CLASS] PoissonDistributionImpl   [TYPE]  double mean  p  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
