[REPLACE]^private static  float DEFAULT_EPSILON = 10e-9;^33^^^^^^^[REPLACE] private static final double DEFAULT_EPSILON = 10e-9;^ [CLASS] Gamma 1  
[REPLACE]^private static double[] lanczos ;^36^37^^^^36^53^[REPLACE] private static double[] lanczos = {^ [CLASS] Gamma 1  
[REPLACE]^private static final float HALF_LOG_2_PI = 0.5 * Math.log ( 2.0 * Math.PI ) ;^56^^^^^^^[REPLACE] private static final double HALF_LOG_2_PI = 0.5 * Math.log ( 2.0 * Math.PI ) ;^ [CLASS] Gamma 1  
[ADD]^^84^^^^^83^103^[ADD] double ret;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^if  ( Double.isNaN ( x )  &&  ( x <= 0.0 )  )  {^86^^^^^83^103^[REPLACE] if  ( Double.isNaN ( x )  ||  ( x <= 0.0 )  )  {^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^sum = sum   ( lanczos[i] /  ( x  i )  ) ;^93^^^^^86^100^[REPLACE] sum = sum +  ( lanczos[i] /  ( x + i )  ) ;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^sum = sum +  (  ( lanczos[i] )  /  ( x + i )  )  ;^95^^^^^86^100^[REPLACE] sum = sum + lanczos[0];^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^ret =  (  ( x  .5 )  * Math.log ( tmp )  )  - tmp  HALF_LOG_2_PI  Math.log ( sum / x ) ;^98^99^^^^86^100^[REPLACE] ret =  (  ( x + .5 )  * Math.log ( tmp )  )  - tmp + HALF_LOG_2_PI + Math.log ( sum / x ) ;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^double g = 607.0  128.0;^89^^^^^86^100^[REPLACE] double g = 607.0 / 128.0;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^double sum = 1.0d;^91^^^^^86^100^[REPLACE] double sum = 0.0;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^for  ( int i = lanczos.length - 1 - 1; i > 0; --i )  {^92^^^^^86^100^[REPLACE] for  ( int i = lanczos.length - 1; i > 0; --i )  {^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[ADD]^^97^^^^^86^100^[ADD] double tmp = x + g + .5;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^ret  = null ;^87^^^^^83^103^[REPLACE] ret = Double.NaN;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^sum = sum   ( lanczos[i] /  ( x  i )  ) ;^93^^^^^83^103^[REPLACE] sum = sum +  ( lanczos[i] /  ( x + i )  ) ;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^sum = sum +  (  ( lanczos[i] )  /  ( x + i )  )  ;^95^^^^^83^103^[REPLACE] sum = sum + lanczos[0];^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^ret =  (  ( x  .5 )  * Math.log ( tmp )  )  - tmp  HALF_LOG_2_PI  Math.log ( sum / x ) ;^98^99^^^^83^103^[REPLACE] ret =  (  ( x + .5 )  * Math.log ( tmp )  )  - tmp + HALF_LOG_2_PI + Math.log ( sum / x ) ;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[ADD]^^89^^^^^83^103^[ADD] double g = 607.0 / 128.0;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^double sum = an  ;^91^^^^^83^103^[REPLACE] double sum = 0.0;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^for  ( int i = lanczos.length - 5 - 1; i > 0; --i )  {^92^^^^^83^103^[REPLACE] for  ( int i = lanczos.length - 1; i > 0; --i )  {^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^double tmp = x  g  .5;^97^^^^^83^103^[REPLACE] double tmp = x + g + .5;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^return ret;  ;^102^^^^^83^103^[REPLACE] return ret;^[METHOD] logGamma [TYPE] double [PARAMETER] double x [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  g  ret  sum  tmp  x  [TYPE]  int i 
[REPLACE]^double sum = an  ;^152^^^^^151^184^[REPLACE] double ret;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  ( Double.isNaN ( a )  && Double.isNaN ( x )  &&  ( a <= 0.0 )  &&  ( x < 0.0 )  )  {^154^^^^^151^184^[REPLACE] if  ( Double.isNaN ( a )  || Double.isNaN ( x )  ||  ( a <= 0.0 )  ||  ( x < 0.0 )  )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^154^155^156^157^^151^184^[ADD] if  ( Double.isNaN ( a )  || Double.isNaN ( x )  ||  ( a <= 0.0 )  ||  ( x < 0.0 )  )  { ret = Double.NaN; } else if  ( x == 0.0 )  { ret = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^}  else {^156^^^^^151^184^[REPLACE] } else if  ( x == 0.0 )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^}  else {^158^^^^^151^184^[REPLACE] } else if  ( a >= 1.0 && x > a )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  (epsilon  <=  maxIterations )  {^175^^^^^158^181^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^179^^^^^175^180^[ADD] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^176^177^^^^158^181^[ADD] throw new ConvergenceException ( "maximum number of iterations reached" ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n = n epsilon;^169^^^^^158^181^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^an = an   ( x /  ( a + n )  ) ;^170^^^^^158^181^[REPLACE] an = an *  ( x /  ( a + n )  ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^sum =epsilon  an;^173^^^^^158^181^[REPLACE] sum = sum + an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^179^^^^^158^181^[ADD] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = 0.0  ;^164^^^^^158^181^[REPLACE] double n = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double ann = 1.0D  a;^165^^^^^158^181^[REPLACE] double an = 1.0 / a;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = 0.0  ;^166^^^^^158^181^[REPLACE] double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^return ;^176^177^^^^158^181^[REPLACE] throw new ConvergenceException ( "maximum number of iterations reached" ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^161^^^^^151^184^[ADD] ret = 1.0 - regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  (epsilon  <  maxIterations )  {^175^^^^^151^184^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^return ;^176^177^^^^151^184^[REPLACE] throw new ConvergenceException ( "maximum number of iterations reached" ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = 1.0  regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^161^^^^^151^184^[REPLACE] ret = 1.0 - regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^169^170^^^^151^184^[ADD] n = n + 1.0; an = an *  ( x /  ( a + n )  ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^an = an   ( x /  ( a + n )  ) ;^170^^^^^151^184^[REPLACE] an = an *  ( x /  ( a + n )  ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^sum =epsilon  an;^173^^^^^151^184^[REPLACE] sum = sum + an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = Math.exp ( -x +  ( a  Math.log ( x )  )  - logGamma ( a )  )   sum;^179^^^^^151^184^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double n = 0.0D;^164^^^^^151^184^[REPLACE] double n = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^double sum = an;^165^166^^^^151^184^[ADD] double an = 1.0 / a; double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = n;^166^^^^^151^184^[REPLACE] double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^157^^^^^151^184^[ADD] ret = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^}  if  ( a >= 1.0 || x > a )  {^158^^^^^151^184^[REPLACE] } else if  ( a >= 1.0 && x > a )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  ( n  == epsilon )  {^175^^^^^158^181^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * ret  ;^179^^^^^175^180^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n =epsilon  1.0;^169^^^^^158^181^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^epsilon = sum  n;^173^^^^^158^181^[REPLACE] sum = sum + an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^165^166^^^^158^181^[ADD] double an = 1.0 / a; double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  ( n  !=  maxIterations )  {^175^^^^^151^184^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = Math.exp ( -x +  ( a  Math.log ( x )  )  - logGamma ( a )  )   sum;^179^^^^^175^180^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = 0.0D;^157^^^^^151^184^[REPLACE] ret = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n = n epsilon;^169^^^^^151^184^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^179^^^^^151^184^[ADD] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = 0.0  ;^164^^^^^151^184^[REPLACE] double n = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double an = 1.0  a;^165^^^^^151^184^[REPLACE] double an = 1.0 / a;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^155^^^^^151^184^[ADD] ret = Double.NaN;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^}  if  ( x  !=  0.0 )  {^156^^^^^151^184^[REPLACE] } else if  ( x == 0.0 )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  (epsilon  !=  maxIterations )  {^175^^^^^158^181^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^175^176^177^178^179^158^181^[ADD] if  ( n >= maxIterations )  { throw new ConvergenceException ( "maximum number of iterations reached" ) ; } else { ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n = n  1.0;^169^^^^^158^181^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^sum = sum  an;^173^^^^^158^181^[REPLACE] sum = sum + an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^164^^^^^158^181^[ADD] double n = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double annn = 1.0  a;^165^^^^^158^181^[REPLACE] double an = 1.0 / a;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = n;^166^^^^^158^181^[REPLACE] double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = 2.0d  regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^161^^^^^151^184^[REPLACE] ret = 1.0 - regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = 1.0 -  ( regularizedGammaP ( a, x, epsilon, maxIterations )  )  ;^161^^^^^151^184^[REPLACE] ret = 1.0 - regularizedGammaQ ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n = n  1.0;^169^^^^^151^184^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^173^^^^^151^184^[ADD] sum = sum + an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * ret  ;^179^^^^^151^184^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^165^166^^^^151^184^[ADD] double an = 1.0 / a; double sum = an;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^176^177^^^^151^184^[ADD] throw new ConvergenceException ( "maximum number of iterations reached" ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret = 1.0  ;^157^^^^^151^184^[REPLACE] ret = 0.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REMOVE]^if  (  (  (  ( isNaN ( a )  )  ||  ( isNaN ( x )  )  )  ||  ( a <= 0.0 )  )  ||  ( x < 0.0 )  )  {     ret = NaN; }else     if  ( x == 0.0 )  {         ret = 0.0;     }else         if  (  ( a >= 1.0 )  &&  ( x > a )  )  {             ret = 1.0 -  ( regularizedGammaQ ( a, x, epsilon, maxIterations )  ) ;         }else {             double n = 0.0;             double an = 1.0 / a;             double sum = an;             while  (  (  ( abs ( an )  )  > epsilon )  &&  ( n < maxIterations )  )  {                 n = n + 1.0;                 an = an *  ( x /  ( a + n )  ) ;                 sum = sum + an;             }              if  ( n >= maxIterations )  {                 throw new ConvergenceException ( "maximum number of iterations reached" ) ;             }else {                 ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * sum;             }         }^158^^^^^151^184^[REMOVE] ^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  ( n  <= epsilon )  {^175^^^^^158^181^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^170^^^^^158^181^[ADD] an = an *  ( x /  ( a + n )  ) ;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * ret  ;^179^^^^^158^181^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * sum;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double ann = 1.0  a;^165^^^^^158^181^[REPLACE] double an = 1.0 / a;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^if  (epsilon  >  maxIterations )  {^175^^^^^151^184^[REPLACE] if  ( n >= maxIterations )  {^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REMOVE]^if  (  ( a >= 1.0 )  &&  ( x > a )  )  {     ret = 1.0 -  ( regularizedGammaQ ( a, x, epsilon, maxIterations )  ) ; }else {     double n = 0.0;     double an = 1.0 / a;     double sum = an;     while  (  (  ( abs ( an )  )  > epsilon )  &&  ( n < maxIterations )  )  {         n = n + 1.0;         an = an *  ( x /  ( a + n )  ) ;         sum = sum + an;     }      if  ( n >= maxIterations )  {         throw new ConvergenceException ( "maximum number of iterations reached" ) ;     }else {         ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * sum;     } }^175^^^^^151^184^[REMOVE] ^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^ret  =  ret ;^155^^^^^151^184^[REPLACE] ret = Double.NaN;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^n = n  1.0D;^169^^^^^151^184^[REPLACE] n = n + 1.0;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[ADD]^^165^^^^^151^184^[ADD] double an = 1.0 / a;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^return DEFAULT_EPSILON;^183^^^^^151^184^[REPLACE] return ret;^[METHOD] regularizedGammaP [TYPE] double [PARAMETER] double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations 
[REPLACE]^double sum = an  ;^228^^^^^227^255^[REPLACE] double ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^if  ( Double.isNaN ( a )  && Double.isNaN ( x )  &&  ( a <= 4.0d )  &&  ( x < 4.0d )  )  {^230^^^^^227^255^[REPLACE] if  ( Double.isNaN ( a )  || Double.isNaN ( x )  ||  ( a <= 0.0 )  ||  ( x < 0.0 )  )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^230^231^232^233^^227^255^[ADD] if  ( Double.isNaN ( a )  || Double.isNaN ( x )  ||  ( a <= 0.0 )  ||  ( x < 0.0 )  )  { ret = Double.NaN; } else if  ( x == 0.0 )  { ret = 1.0;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^}  else {^232^^^^^227^255^[REPLACE] } else if  ( x == 0.0 )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^}  else {^234^^^^^227^255^[REPLACE] } else if  ( x < a || a < 1.0 )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REMOVE]^if  (  (  (  ( isNaN ( a )  )  ||  ( isNaN ( x )  )  )  ||  ( a <= 0.0 )  )  ||  ( x < 0.0 )  )  {     ret = NaN; }else     if  ( x == 0.0 )  {         ret = 0.0;     }else         if  (  ( a >= 1.0 )  &&  ( x > a )  )  {             ret = 1.0 -  ( regularizedGammaQ ( a, x, epsilon, maxIterations )  ) ;         }else {             double n = 0.0;             double an = 1.0 / a;             double sum = an;             while  (  (  ( abs ( an )  )  > epsilon )  &&  ( n < maxIterations )  )  {                 n = n + 1.0;                 an = an *  ( x /  ( a + n )  ) ;                 sum = sum + an;             }              if  ( n >= maxIterations )  {                 throw new ConvergenceException ( "maximum number of iterations reached" ) ;             }else {                 ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * sum;             }         }^234^^^^^227^255^[REMOVE] ^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^250^251^^^^234^252^[ADD] ret = 1.0 / cf.evaluate ( x, epsilon, maxIterations ) ; ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret =  ( exp (  (  (  ( -x )  +  ( a *  ( log ( x )  )  )  )  -  ( logGamma ( a )  )  )  )  )  * sum  ;^251^^^^^234^252^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return  (  ( 2.0 * n )   1.0 )  - a  x;^242^^^^^234^252^[REPLACE] return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^returnmaxIterations   ( a - n ) ;^246^^^^^234^252^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^double ret  ;^240^^^^^234^252^[REPLACE] ContinuedFraction cf = new ContinuedFraction (  )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 3.0d  regularizedGammaP ( a, x, epsilon, maxIterations ) ;^237^^^^^227^255^[REPLACE] ret = 1.0 - regularizedGammaP ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^237^^^^^227^255^[ADD] ret = 1.0 - regularizedGammaP ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0  cf.evaluate ( x, epsilon, maxIterations ) ;^250^^^^^227^255^[REPLACE] ret = 1.0 / cf.evaluate ( x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = Math.exp ( -x +  ( a  Math.log ( x )  )  - logGamma ( a )  )   ret;^251^^^^^227^255^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return  (  ( 2.0 * n )   1.0 )  - a  x;^242^^^^^227^255^[REPLACE] return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return n   ( a - n ) ;^246^^^^^227^255^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^240^241^242^^^227^255^[ADD] ContinuedFraction cf = new ContinuedFraction (  )  { protected double getA ( int n, double x )  { return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^233^^^^^227^255^[ADD] ret = 1.0;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0  cf.evaluate ( x, epsilon, maxIterations ) ;^250^^^^^234^252^[REPLACE] ret = 1.0 / cf.evaluate ( x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^251^^^^^234^252^[ADD] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return  (  ( 2.0 * maxIterations )   1.0 )  - a  x;^242^^^^^234^252^[REPLACE] return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^returmaxIterations maxIterations   ( n ) ;^246^^^^^234^252^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0D  regularizedGammaP ( a, x, epsilon, maxIterations ) ;^237^^^^^227^255^[REPLACE] ret = 1.0 - regularizedGammaP ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^250^251^^^^227^255^[ADD] ret = 1.0 / cf.evaluate ( x, epsilon, maxIterations ) ; ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[ADD]^^251^^^^^227^255^[ADD] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret  = null ;^231^^^^^227^255^[REPLACE] ret = Double.NaN;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^}  if  ( x  &&  0.0 )  {^232^^^^^227^255^[REPLACE] } else if  ( x == 0.0 )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^}  if  ( x < a && a < 1.0 )  {^234^^^^^227^255^[REPLACE] } else if  ( x < a || a < 1.0 )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^DEFAULT_EPSILON = Math.exp ( -x +  ( a  Math.log ( x )  )  - logGamma ( a )  )   ret;^251^^^^^234^252^[REPLACE] ret = Math.exp ( -x +  ( a * Math.log ( x )  )  - logGamma ( a )  )  * ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return  (  ( 0.0d * n )   1.0 )  - a  x;^242^^^^^234^252^[REPLACE] return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return maxIterations   (maxIterations ) ;^246^^^^^234^252^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0 -  ( regularizedGammaQ ( a, x, epsilon, maxIterations )  )  ;^237^^^^^227^255^[REPLACE] ret = 1.0 - regularizedGammaP ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return n *   (  a - n  )  ;  ;^246^^^^^227^255^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^double ret  ;^240^^^^^227^255^[REPLACE] ContinuedFraction cf = new ContinuedFraction (  )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^}  if  ( x < a ) {^234^^^^^227^255^[REPLACE] } else if  ( x < a || a < 1.0 )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0D  cf.evaluate ( x, epsilon, maxIterations ) ;^250^^^^^234^252^[REPLACE] ret = 1.0 / cf.evaluate ( x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return   (    (  2.0 * n  )   + 1.0  )   - a + x;  ;^242^^^^^234^252^[REPLACE] return  (  ( 2.0 * n )  + 1.0 )  - a + x;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return n *   (  a - n  )  ;  ;^246^^^^^234^252^[REPLACE] return n *  ( a - n ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ContinuedFraction cf = maxIterationsew ContinuedFraction (  )  {^240^^^^^234^252^[REPLACE] ContinuedFraction cf = new ContinuedFraction (  )  {^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret  =  ret ;^231^^^^^227^255^[REPLACE] ret = Double.NaN;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0d;^233^^^^^227^255^[REPLACE] ret = 1.0;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^ret = 1.0  regularizedGammaP ( a, x, epsilon, maxIterations ) ;^237^^^^^227^255^[REPLACE] ret = 1.0 - regularizedGammaP ( a, x, epsilon, maxIterations ) ;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
[REPLACE]^return DEFAULT_EPSILON;^254^^^^^227^255^[REPLACE] return ret;^[METHOD] regularizedGammaQ [TYPE] double [PARAMETER] final double a double x double epsilon int maxIterations [CLASS] Gamma 1   [TYPE]  boolean false  true  [TYPE]  double[] lanczos  [TYPE]  double DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  [TYPE]  int maxIterations  n  [TYPE]  ContinuedFraction cf 
