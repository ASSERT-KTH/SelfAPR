[REPLACE]^private static final  short  serialVersionUID = -626730818244969716L;^84^^^^^^^[REPLACE] private static final long serialVersionUID = -626730818244969716L;^ [CLASS] RandomDataImpl  
[REPLACE]^private RandomGenerator rand  = null ;^87^^^^^^^[REPLACE] private RandomGenerator rand = null;^ [CLASS] RandomDataImpl  
[REPLACE]^private SecureRandom secRand = false;^90^^^^^^^[REPLACE] private SecureRandom secRand = null;^ [CLASS] RandomDataImpl  
[REPLACE]^outBuffer.append ( hex ) ;^106^^^^^105^108^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] RandomGenerator) [PARAMETER] RandomGenerator rand [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator rand 
[REPLACE]^this.rand =  null;^107^^^^^105^108^[REPLACE] this.rand = rand;^[METHOD] <init> [TYPE] RandomGenerator) [PARAMETER] RandomGenerator rand [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator rand 
[REPLACE]^if  ( len  !=  4 )  {^121^^^^^120^153^[REPLACE] if  ( len <= 0 )  {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; ;^122^^^^^120^153^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^^122^^^^^120^153^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^RandomGenerator rand = getRan (  ) ;^126^^^^^120^153^[REPLACE] RandomGenerator ran = getRan (  ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^int[] index = getNatural ( n ) ;^129^^^^^120^153^[REPLACE] StringBuffer outBuffer = new StringBuffer (  ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^^129^^^^^120^153^[ADD] StringBuffer outBuffer = new StringBuffer (  ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^byte[] randomBytes = new byte[ ( len )  + 1];^132^^^^^120^153^[REPLACE] byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^ran.setSeed ( randdomBytes ) ;^133^^^^^120^153^[REPLACE] ran.nextBytes ( randomBytes ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^if  ( hex.length (  )  %  2 == 1 )   {^147^^^^^120^153^[REPLACE] if  ( hex.length (  )  == 1 )   {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^hex = "0"  &&  hex;^148^^^^^120^153^[REPLACE] hex = "0" + hex;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^^148^^^^^120^153^[ADD] hex = "0" + hex;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 ; i < randomBytes.length *  0 .5 ; i++ )  {^136^^^^^120^153^[REPLACE] for  ( int i = 0; i < randomBytes.length; i++ )  {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^if  ( hex.length (  )  *  0.5  == 1 )   {^147^^^^^120^153^[REPLACE] if  ( hex.length (  )  == 1 )   {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^hex = "0"  <=  hex;^148^^^^^120^153^[REPLACE] hex = "0" + hex;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0; i < randomBytes.length; i++ )  { Integer c = new Integer ( randomBytes[i] ) ;^137^^^^^120^153^[REPLACE] Integer c = new Integer ( randomBytes[i] ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^String hex = Integer.toHexString ( c.Integer (  )   ^  128 ) ;^144^^^^^120^153^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^hex = "0"  >=  hex;^148^^^^^120^153^[REPLACE] hex = "0" + hex;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 ; i < randomBytes.length; i++ )  {^136^^^^^120^153^[REPLACE] for  ( int i = 0; i < randomBytes.length; i++ )  {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^String hex = Integer.intValue (len (  )  + 128 ) ;^144^^^^^120^153^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^return outBuffer.StringBuffer (  ) .substring ( 0, len ) ;^152^^^^^120^153^[REPLACE] return outBuffer.toString (  ) .substring ( 0, len ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^if  ( lower  !=  upper )  {^164^^^^^163^170^[REPLACE] if  ( lower >= upper )  {^[METHOD] nextInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^165^166^^^^163^170^[REPLACE] throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[ADD]^^165^166^^^^163^170^[ADD] throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^168^^^^^163^170^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^return lower +  ( int )   ( rand.nextBytes (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^[REPLACE] return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[METHOD] nextInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^if  ( serialVersionUID  <=  serialVersionUID )  {^181^^^^^180^187^[REPLACE] if  ( lower >= upper )  {^[METHOD] nextLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^182^183^^^^180^187^[REPLACE] throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[METHOD] nextLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^182^183^^^^180^187^[ADD] throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[METHOD] nextLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^185^^^^^180^187^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^[REPLACE] return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[METHOD] nextLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( len  <  0 )  {^204^^^^^203^249^[REPLACE] if  ( len <= 0 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^204^205^206^^^203^249^[ADD] if  ( len <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; ;^205^^^^^203^249^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^return ;^205^^^^^203^249^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^SecureRandom sec = getSecRan (  ) ;^209^^^^^203^249^[REPLACE] SecureRandom secRan = getSecRan (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^MessageDigest alg = true;^210^^^^^203^249^[REPLACE] MessageDigest alg = null;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^alg = MessageDigest.getInstance ( "SHA-1" ) ;return null;^211^212^213^214^215^203^249^[ADD] try { alg = MessageDigest.getInstance ( "SHA-1" ) ; } catch  ( NoSuchAlgorithmException ex )  { return null; }^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^alg ;^212^^^^^203^249^[REPLACE] alg = MessageDigest.getInstance ( "SHA-1" ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^212^^^^^203^249^[ADD] alg = MessageDigest.getInstance ( "SHA-1" ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^alg  =  alg ;^212^^^^^203^249^[REPLACE] alg = MessageDigest.getInstance ( "SHA-1" ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^return false;^214^^^^^203^249^[REPLACE] return null;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^alg.digest (  ) ;^216^^^^^203^249^[REPLACE] alg.reset (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^216^^^^^203^249^[ADD] alg.reset (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^int numIter =  ( numIter / 40 )  +len;^219^^^^^203^249^[REPLACE] int numIter =  ( len / 40 )  + 1;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^int[] index = getNatural ( n ) ;^221^^^^^203^249^[REPLACE] StringBuffer outBuffer = new StringBuffer (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( hex.length (  )  + 3 == 1 )  {^242^^^^^203^249^[REPLACE] if  ( hex.length (  )  == 1 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^hex = "0" + hex;^242^243^244^^^203^249^[ADD] if  ( hex.length (  )  == 1 )  { hex = "0" + hex; }^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  |  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int iter = 2; iter  >  numIter + 2; iter++ )  {^222^^^^^203^249^[REPLACE] for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( hex.length (  )  %  2 == 0  )  {^242^^^^^203^249^[REPLACE] if  ( hex.length (  )  == 1 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  <  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int i = 0; i < hash.length *  2; i++ )  {^231^^^^^203^249^[REPLACE] for  ( int i = 0; i < hash.length; i++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( hex.length (  )  *  2 == 1 )  {^242^^^^^203^249^[REPLACE] if  ( hex.length (  )  == 1 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  >=  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^243^^^^^203^249^[ADD] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  <=  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^Integer c = new Integer ( randomBytes[i] ) ;^232^^^^^203^249^[REPLACE] Integer c = new Integer ( hash[i] ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^String hex = Integer.toHexString ( c.intValue (  )  +numIter ) ;^239^^^^^203^249^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte[] randomBytes = new byte[5];^223^^^^^203^249^[REPLACE] byte[] randomBytes = new byte[40];^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte hash[] = alg .reset (  )  ;^228^^^^^203^249^[REPLACE] byte hash[] = alg.digest (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^228^^^^^203^249^[ADD] byte hash[] = alg.digest (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int i = 0 ; i < hash.length; i++ )  {^231^^^^^203^249^[REPLACE] for  ( int i = 0; i < hash.length; i++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^int[] result = new int[k];^232^^^^^203^249^[REPLACE] Integer c = new Integer ( hash[i] ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^String hex = Integer.toHexString ( c.intValue (  )  +len ) ;^239^^^^^203^249^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int i = 0; i < hash.length - 2; i++ )  {^231^^^^^203^249^[REPLACE] for  ( int i = 0; i < hash.length; i++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^231^232^^^^203^249^[ADD] for  ( int i = 0; i < hash.length; i++ )  { Integer c = new Integer ( hash[i] ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( hex.length (  )  %  2 == 1 )  {^242^^^^^203^249^[REPLACE] if  ( hex.length (  )  == 1 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^242^243^244^^^203^249^[ADD] if  ( hex.length (  )  == 1 )  { hex = "0" + hex; }^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  ^  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^String hex = Integer.toHexString (len (  )  + 128 ) ;^239^^^^^203^249^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  &&  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int iter = 0; iter < numIter + 0; iter++ )  {^222^^^^^203^249^[REPLACE] for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte[] randomBytes = new byte[3];^223^^^^^203^249^[REPLACE] byte[] randomBytes = new byte[40];^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte hash[] = alg.reset (  ) ;^228^^^^^203^249^[REPLACE] byte hash[] = alg.digest (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^String hex = Integer.toHexString ( c.Integer (  )  +numIter ) ;^239^^^^^203^249^[REPLACE] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^return outBuffer.StringBuffer (  ) .substring ( 0, len ) ;^248^^^^^203^249^[REPLACE] return outBuffer.toString (  ) .substring ( 0, len ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( lower  >  upper )  {^261^^^^^260^267^[REPLACE] if  ( lower >= upper )  {^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^return ;^262^263^^^^260^267^[REPLACE] throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[ADD]^^262^263^^^^260^267^[ADD] throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^262^263^^^^260^267^[REPLACE] throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^SecureRandom secRan = getSecRan (  ) ;^265^^^^^260^267^[REPLACE] SecureRandom sec = getSecRan (  ) ;^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^returnupper +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^[REPLACE] return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[METHOD] nextSecureInt [TYPE] int [PARAMETER] int lower int upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int lower  upper 
[REPLACE]^if  ( lower  <=  upper )  {^279^^^^^278^285^[REPLACE] if  ( lower >= upper )  {^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^279^280^281^282^^278^285^[ADD] if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^return ;^280^281^^^^278^285^[REPLACE] throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^280^281^^^^278^285^[REPLACE] throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^SecureRandom secRan = getSecRan (  ) ;^283^^^^^278^285^[REPLACE] SecureRandom sec = getSecRan (  ) ;^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^return lower  &   ( long )   ( sec.nextDouble (  )  *  ( upper - lower  &  1 )  ) ;^284^^^^^278^285^[REPLACE] return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[METHOD] nextSecureLong [TYPE] long [PARAMETER] long lower long upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( mean  >=  0 - 4 )  {^304^^^^^303^322^[REPLACE] if  ( mean <= 0 )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return ;^305^^^^^303^322^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^305^^^^^303^322^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; ;^305^^^^^303^322^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^double p =   -mean   ;^307^^^^^303^322^[REPLACE] double p = Math.exp ( -mean ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^long n = 3;^308^^^^^303^322^[REPLACE] long n = 0;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^double r = 1.0f;^309^^^^^303^322^[REPLACE] double r = 1.0d;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^309^310^^^^303^322^[ADD] double r = 1.0d; double rnd = 1.0d;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^double rnd = 1.0f;^310^^^^^303^322^[REPLACE] double rnd = 1.0d;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^310^^^^^303^322^[ADD] double rnd = 1.0d;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^311^^^^^303^322^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^while  (serialVersionUID  >  1000 * mean )  {^312^^^^^303^322^[REPLACE] while  ( n < 1000 * mean )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^312^313^^^^303^322^[ADD] while  ( n < 1000 * mean )  { rnd = rand.nextDouble (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^if  ( r  <= rnd )  {^315^^^^^303^322^[REPLACE] if  ( r >= p )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^n++;return n;^315^316^317^318^319^303^322^[ADD] if  ( r >= p )  { n++; } else { return n; }^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return serialVersionUID;^318^^^^^303^322^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^u = rand.nextDouble (  ) ; ;^313^^^^^303^322^[REPLACE] rnd = rand.nextDouble (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^313^^^^^303^322^[ADD] rnd = rand.nextDouble (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^r = r  ;^314^^^^^303^322^[REPLACE] r = r * rnd;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return rand;^318^^^^^303^322^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^if  ( r  ==  p )  {^315^^^^^303^322^[REPLACE] if  ( r >= p )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^315^316^317^318^319^303^322^[ADD] if  ( r >= p )  { n++; } else { return n; }^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return serialVersionUID;^321^^^^^303^322^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^if  ( sigma  !=  0 )  {^334^^^^^333^339^[REPLACE] if  ( sigma <= 0 )  {^[METHOD] nextGaussian [TYPE] double [PARAMETER] double mu double sigma [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mu  sigma 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; ;^335^^^^^333^339^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] double mu double sigma [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mu  sigma 
[ADD]^^335^^^^^333^339^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] double mu double sigma [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mu  sigma 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^337^^^^^333^339^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextGaussian [TYPE] double [PARAMETER] double mu double sigma [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mu  sigma 
[REPLACE]^return sigma * rand.setSeed (  )  + mu;^338^^^^^333^339^[REPLACE] return sigma * rand.nextGaussian (  )  + mu;^[METHOD] nextGaussian [TYPE] double [PARAMETER] double mu double sigma [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mu  sigma 
[REPLACE]^if  ( mean  >  0.0 )   {^354^^^^^353^364^[REPLACE] if  ( mean < 0.0 )   {^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^355^356^^^^353^364^[REPLACE] throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[ADD]^^355^356^^^^353^364^[ADD] throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^358^^^^^353^364^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^double unif = ran.nextDouble (  ) ;^359^^^^^353^364^[REPLACE] double unif = rand.nextDouble (  ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[ADD]^^359^360^361^362^^353^364^[ADD] double unif = rand.nextDouble (  ) ; while  ( unif == 0.0d )  { unif = rand.nextDouble (  ) ; }^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^while  ( unif  !=  1.0f )  {^360^^^^^353^364^[REPLACE] while  ( unif == 0.0d )  {^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^rnd = rand.nextDouble (  ) ; ;^361^^^^^353^364^[REPLACE] unif = rand.nextDouble (  ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[ADD]^^361^362^^^^353^364^[ADD] unif = rand.nextDouble (  ) ; }^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^return -mean *   unif   ;^363^^^^^353^364^[REPLACE] return -mean * Math.log ( unif ) ;^[METHOD] nextExponential [TYPE] double [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  unif 
[REPLACE]^if  ( lower  !=  u )  {^378^^^^^377^391^[REPLACE] if  ( lower >= upper )  {^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[ADD]^^378^379^380^381^^377^391^[ADD] if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^return ;^379^380^^^^377^391^[REPLACE] throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^379^380^^^^377^391^[REPLACE] throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[ADD]^^379^380^^^^377^391^[ADD] throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^RandomGenerator ran = getRan (  ) ;^382^^^^^377^391^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^double u = rand.nextGaussian (  ) ;^385^^^^^377^391^[REPLACE] double u = rand.nextDouble (  ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^while ( u  !=  0.0 ) {^386^^^^^377^391^[REPLACE] while ( u <= 0.0 ) {^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^rnd = rand.nextDouble (  ) ; ;^387^^^^^377^391^[REPLACE] u = rand.nextDouble (  ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^return upper + u *  ( upper - lower ) ;^390^^^^^377^391^[REPLACE] return lower + u *  ( upper - lower ) ;^[METHOD] nextUniform [TYPE] double [PARAMETER] double lower double upper [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double lower  u  upper 
[REPLACE]^if  ( rand != false )  {^403^^^^^402^408^[REPLACE] if  ( rand == null )  {^[METHOD] getRan [TYPE] RandomGenerator [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand ;^404^^^^^402^408^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] getRan [TYPE] RandomGenerator [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand  =  rand ;^404^^^^^402^408^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] getRan [TYPE] RandomGenerator [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^return secRand;^407^^^^^402^408^[REPLACE] return rand;^[METHOD] getRan [TYPE] RandomGenerator [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( secRan != null )  {^418^^^^^417^423^[REPLACE] if  ( secRand == null )  {^[METHOD] getSecRan [TYPE] SecureRandom [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^418^419^420^421^^417^423^[ADD] if  ( secRand == null )  { secRand = new SecureRandom (  ) ; secRand.setSeed ( System.currentTimeMillis (  )  ) ; }^[METHOD] getSecRan [TYPE] SecureRandom [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand  =  secRand ;^419^^^^^417^423^[REPLACE] secRand = new SecureRandom (  ) ;^[METHOD] getSecRan [TYPE] SecureRandom [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^419^420^^^^417^423^[ADD] secRand = new SecureRandom (  ) ; secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[METHOD] getSecRan [TYPE] SecureRandom [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^return rand;^422^^^^^417^423^[REPLACE] return secRand;^[METHOD] getSecRan [TYPE] SecureRandom [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( rand != null )  {^433^^^^^432^437^[REPLACE] if  ( rand == null )  {^[METHOD] reSeed [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand ;^434^^^^^432^437^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand  =  rand ;^434^^^^^432^437^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^434^^^^^432^437^[ADD] rand = new JDKRandomGenerator (  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand.nextBytes ( upper ) ;^436^^^^^432^437^[REPLACE] rand.setSeed ( seed ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( secRand != null )  {^446^^^^^445^450^[REPLACE] if  ( secRand == null )  {^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^secRand = new SecureRandom (  ) ;^446^447^448^^^445^450^[ADD] if  ( secRand == null )  { secRand = new SecureRandom (  ) ; }^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand  =  secRand ;^447^^^^^445^450^[REPLACE] secRand = new SecureRandom (  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^447^^^^^445^450^[ADD] secRand = new SecureRandom (  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand.setSeed ( System.currentTimeMillis (  )  ) ;^449^^^^^445^450^[REPLACE] secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^449^^^^^445^450^[ADD] secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REMOVE]^secRan.nextBytes ( randomBytes ) ;^449^^^^^445^450^[REMOVE] ^[METHOD] reSeedSecure [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( secRand != this  )  {^460^^^^^459^464^[REPLACE] if  ( secRand == null )  {^[METHOD] reSeedSecure [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand  =  secRand ;^461^^^^^459^464^[REPLACE] secRand = new SecureRandom (  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand  = null ;^461^^^^^459^464^[REPLACE] secRand = new SecureRandom (  ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand.setSeed ( upper ) ;^463^^^^^459^464^[REPLACE] secRand.setSeed ( seed ) ;^[METHOD] reSeedSecure [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REMOVE]^secRan.nextBytes ( randomBytes ) ;^463^^^^^459^464^[REMOVE] ^[METHOD] reSeedSecure [TYPE] void [PARAMETER] long seed [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( ran != null )  {^471^^^^^470^475^[REPLACE] if  ( rand == null )  {^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[ADD]^^471^472^473^^^470^475^[ADD] if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; }^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand ;^472^^^^^470^475^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand  = null ;^472^^^^^470^475^[REPLACE] rand = new JDKRandomGenerator (  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^rand.nextBytes ( System.currentTimeMillis (  )  ) ;^474^^^^^470^475^[REPLACE] rand.setSeed ( System.currentTimeMillis (  )  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^474^^^^^470^475^[REPLACE] rand.setSeed ( System.currentTimeMillis (  )  ) ;^[METHOD] reSeed [TYPE] void [PARAMETER] [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^secRand =  SecureRandom.getInstance ( provider, provider ) ;^496^^^^^494^497^[REPLACE] secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[METHOD] setSecureAlgorithm [TYPE] void [PARAMETER] String algorithm String provider [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  String algorithm  provider  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand 
[REPLACE]^if  ( k  <=  n )  {^509^^^^^508^526^[REPLACE] if  ( k > n )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REMOVE]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^509^^^^^508^526^[REMOVE] ^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^510^511^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^if  ( k  &&  1 )  {^513^^^^^508^526^[REPLACE] if  ( k == 0 )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[ADD]^^513^514^515^516^^508^526^[ADD] if  ( k == 0 )  { throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^return ;^514^515^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[ADD]^^514^515^^^^508^526^[ADD] throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^514^515^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^Object[] objects = c.toArray (  ) ;^518^^^^^508^526^[REPLACE] int[] index = getNatural ( n ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^shuffle ( index, n  ^  k ) ;^519^^^^^508^526^[REPLACE] shuffle ( index, n - k ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^Object[] result = new Object[k];^520^^^^^508^526^[REPLACE] int[] result = new int[k];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^for  ( int i = 1; i  >=  k; i++ )  {^521^^^^^508^526^[REPLACE] for  ( int i = 0; i < k; i++ )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^result[i] = index[n  |  i  |  1 - 0];^522^^^^^508^526^[REPLACE] result[i] = index[n - i - 1];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[ADD]^^522^^^^^508^526^[ADD] result[i] = index[n - i - 1];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^result[i] = index[n  >=  i  >=  0];^522^^^^^508^526^[REPLACE] result[i] = index[n - i - 1];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^for  ( int i = 3; i < k; i++ )  {^521^^^^^508^526^[REPLACE] for  ( int i = 0; i < k; i++ )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^return rand;^525^^^^^508^526^[REPLACE] return result;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^int len = c.toArray (  ) ;^542^^^^^541^559^[REPLACE] int len = c.size (  ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^542^^^^^541^559^[ADD] int len = c.size (  ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^if  ( k  ==  len )  {^543^^^^^541^559^[REPLACE] if  ( k > len )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^return ;^544^545^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^544^545^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^if  ( k  !=  0 )  {^547^^^^^541^559^[REPLACE] if  ( k == 0 )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^548^549^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^return ;^548^549^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^548^549^^^^541^559^[ADD] throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^Object[] objects = c.size (  ) ;^552^^^^^541^559^[REPLACE] Object[] objects = c.toArray (  ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^int[] index = getNatural ( n ) ;^553^^^^^541^559^[REPLACE] int[] index = nextPermutation ( len, k ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^int[] result = new int[k];^554^^^^^541^559^[REPLACE] Object[] result = new Object[k];^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^for  ( int i = 0; i  !=  k; i++ )  {^555^^^^^541^559^[REPLACE] for  ( int i = 0; i < k; i++ )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^555^556^557^^^541^559^[ADD] for  ( int i = 0; i < k; i++ )  { result[i] = objects[index[i]]; }^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^result[i]  =  result[i] ;^556^^^^^541^559^[REPLACE] result[i] = objects[index[i]];^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^result[i]  = null ;^556^^^^^541^559^[REPLACE] result[i] = objects[index[i]];^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^for  ( int i = 4; i < k; i++ )  {^555^^^^^541^559^[REPLACE] for  ( int i = 0; i < k; i++ )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^return objects;^558^^^^^541^559^[REPLACE] return result;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^int target = 2;^571^^^^^570^582^[REPLACE] int target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[ADD]^^571^^^^^570^582^[ADD] int target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^if  ( i  &&  0 )  {^573^^^^^570^582^[REPLACE] if  ( i == 0 )  {^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = nextInt ( 3, i ) ;^576^^^^^570^582^[REPLACE] target = nextInt ( 0, i ) ;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = 0 % 0;^574^^^^^570^582^[REPLACE] target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^for  ( int i = list.length (  )  - 1 ; i >= end; i-- )  {^572^^^^^570^582^[REPLACE] for  ( int i = list.length - 1 ; i >= end; i-- )  {^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^if  ( i  !=  1 )  {^573^^^^^570^582^[REPLACE] if  ( i == 0 )  {^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = 0 - 2;^574^^^^^570^582^[REPLACE] target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = 0 / 2;^574^^^^^570^582^[REPLACE] target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = nextInt ( 4, i ) ;^576^^^^^570^582^[REPLACE] target = nextInt ( 0, i ) ;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^list[target]  =  list[target] ;^579^^^^^570^582^[REPLACE] list[target] = list[i];^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^list[i] ;^580^^^^^570^582^[REPLACE] list[i] = temp;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^int len = c.size (  ) ;^578^^^^^570^582^[REPLACE] int temp = list[target];^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^target = 0L;^574^^^^^570^582^[REPLACE] target = 0;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^list[i]  =  list[i] ;^580^^^^^570^582^[REPLACE] list[i] = temp;^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^for  ( int i = list.length + 5 - 1 ; i >= end; i-- )  {^572^^^^^570^582^[REPLACE] for  ( int i = list.length - 1 ; i >= end; i-- )  {^[METHOD] shuffle [TYPE] void [PARAMETER] int[] list int end [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] list  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int end  i  target  temp 
[REPLACE]^Object[] result = new Object[k];^591^^^^^590^596^[REPLACE] int[] natural = new int[n];^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 4; i  >  n; i++ )  {^592^^^^^590^596^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[REPLACE]^natural[i]  =  natural[i] ;^593^^^^^590^596^[REPLACE] natural[i] = i;^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[REPLACE]^natural[i] ;^593^^^^^590^596^[REPLACE] natural[i] = i;^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0 * 4; i < n; i++ )  {^592^^^^^590^596^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[ADD]^^592^593^594^^^590^596^[ADD] for  ( int i = 0; i < n; i++ )  { natural[i] = i; }^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
[REPLACE]^return rand;^595^^^^^590^596^[REPLACE] return natural;^[METHOD] getNatural [TYPE] int[] [PARAMETER] int n [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] natural  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  n 
