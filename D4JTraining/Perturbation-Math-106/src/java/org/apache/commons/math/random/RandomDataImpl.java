[REPLACE]^private static  long serialVersionUID = -626730818244969716L;^84^^^^^^^[REPLACE] private static final long serialVersionUID = -626730818244969716L;^ [CLASS] RandomDataImpl  
[REPLACE]^private RandomGenerator rand  = null ;^87^^^^^^^[REPLACE] private RandomGenerator rand = null;^ [CLASS] RandomDataImpl  
[REPLACE]^private SecureRandom secRand = false;^90^^^^^^^[REPLACE] private SecureRandom secRand = null;^ [CLASS] RandomDataImpl  
[REPLACE]^if  ( len  >  0 >> 1 )  {^121^^^^^120^153^[REPLACE] if  ( len <= 0 )  {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^return ;^122^^^^^120^153^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^122^^^^^120^153^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^RandomGenerator rand = getRan (  )  ;^126^^^^^120^153^[REPLACE] RandomGenerator ran = getRan (  ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^Integer c = new Integer ( hash[i] )  ;^129^^^^^120^153^[REPLACE] StringBuffer outBuffer = new StringBuffer (  ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^byte[] randomBytes = new byte[ ( len / 2 )   1];^132^^^^^120^153^[REPLACE] byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^secRan.nextBytes ( randomBytes )  ;^133^^^^^120^153^[REPLACE] ran.nextBytes ( randomBytes ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^if  ( hex.size (  )  == 1 )   {^147^^^^^120^153^[REPLACE] if  ( hex.length (  )  == 1 )   {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^hex = "0" + hex;^147^148^149^^^120^153^[ADD] if  ( hex.length (  )  == 1 )   { hex = "0" + hex; }^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^hex = "0"  hex;^148^^^^^120^153^[REPLACE] hex = "0" + hex;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 ; i < randomBytes.length; i++ )  {^136^^^^^120^153^[REPLACE] for  ( int i = 0; i < randomBytes.length; i++ )  {^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^^137^^^^^120^153^[ADD] Integer c = new Integer ( randomBytes[i] ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[ADD]^^144^^^^^120^153^[ADD] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^return outBuffer.StringBuffer (  ) .substring ( 3, len ) ;^152^^^^^120^153^[REPLACE] return outBuffer.toString (  ) .substring ( 0, len ) ;^[METHOD] nextHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRand  [TYPE]  String hex  [TYPE]  long serialVersionUID  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  len 
[REPLACE]^if  (numIter  <  0 )  {^204^^^^^203^249^[REPLACE] if  ( len <= 0 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^205^^^^^203^249^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^205^^^^^203^249^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^SecureRandom sec = getSecRan (  )  ;^209^^^^^203^249^[REPLACE] SecureRandom secRan = getSecRan (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^MessageDigest alg = true;^210^^^^^203^249^[REPLACE] MessageDigest alg = null;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^alg = MessageDigest.getInstance ( "SHA-1" ) ;return null;^211^212^213^214^215^203^249^[ADD] try { alg = MessageDigest.getInstance ( "SHA-1" ) ; } catch  ( NoSuchAlgorithmException ex )  { return null; }^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^alg ;^212^^^^^203^249^[REPLACE] alg = MessageDigest.getInstance ( "SHA-1" ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^return this;^214^^^^^203^249^[REPLACE] return null;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^alg.digest (  ) ;^216^^^^^203^249^[REPLACE] alg.reset (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^216^^^^^203^249^[ADD] alg.reset (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^int numIter =  ( len / 40 )   1;^219^^^^^203^249^[REPLACE] int numIter =  ( len / 40 )  + 1;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^Integer c = new Integer ( hash[i] )  ;^221^^^^^203^249^[REPLACE] StringBuffer outBuffer = new StringBuffer (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( hex.length (  )  *  2 == 0  )  {^242^^^^^203^249^[REPLACE] if  ( hex.length (  )  == 1 )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^hex = "0"  hex;^243^^^^^203^249^[REPLACE] hex = "0" + hex;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int iter = 0; iter < numIter + 0; iter++ )  {^222^^^^^203^249^[REPLACE] for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte[] randomBytes = new byte[40 << 0];^223^^^^^203^249^[REPLACE] byte[] randomBytes = new byte[40];^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^byte hash[] = alg .reset (  )  ;^228^^^^^203^249^[REPLACE] byte hash[] = alg.digest (  ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^for  ( int i = 0 ; i < hash.length; i++ )  {^231^^^^^203^249^[REPLACE] for  ( int i = 0; i < hash.length; i++ )  {^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^232^^^^^203^249^[ADD] Integer c = new Integer ( hash[i] ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[ADD]^^239^^^^^203^249^[ADD] String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^return outBuffer.StringBuffer (  ) .substring ( 0 * 3, len ) ;^248^^^^^203^249^[REPLACE] return outBuffer.toString (  ) .substring ( 0, len ) ;^[METHOD] nextSecureHexString [TYPE] String [PARAMETER] int len [CLASS] RandomDataImpl   [TYPE]  byte[] hash  randomBytes  [TYPE]  Integer c  [TYPE]  StringBuffer outBuffer  [TYPE]  boolean false  true  [TYPE]  SecureRandom secRan  secRand  [TYPE]  NoSuchAlgorithmException ex  [TYPE]  String hex  [TYPE]  MessageDigest alg  [TYPE]  long lower  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  iter  len  numIter 
[REPLACE]^if  ( mean  >=  3 )  {^304^^^^^303^322^[REPLACE] if  ( mean <= 0 )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^305^^^^^303^322^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return ;^305^^^^^303^322^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^Integer c = new Integer ( hash[i] )  ;^307^^^^^303^322^[REPLACE] double p = Math.exp ( -mean ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^long n = 2;^308^^^^^303^322^[REPLACE] long n = 0;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^double r = 1.0Dd;^309^^^^^303^322^[REPLACE] double r = 1.0d;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^310^311^^^^303^322^[ADD] double rnd = 1.0d; RandomGenerator rand = getRan (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^RandomGenerator ran = getRan (  )  ;^311^^^^^303^322^[REPLACE] RandomGenerator rand = getRan (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^if  (rnd  <=  p )  {^315^^^^^303^322^[REPLACE] if  ( r >= p )  {^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^315^316^317^318^319^303^322^[ADD] if  ( r >= p )  { n++; } else { return n; }^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return serialVersionUID;^318^^^^^315^319^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[ADD]^^313^^^^^303^322^[ADD] rnd = rand.nextDouble (  ) ;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^r = r  rnd;^314^^^^^303^322^[REPLACE] r = r * rnd;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return serialVersionUID;^318^^^^^303^322^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^return serialVersionUID;^321^^^^^303^322^[REPLACE] return n;^[METHOD] nextPoisson [TYPE] long [PARAMETER] double mean [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  boolean false  true  [TYPE]  long lower  n  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  double mean  p  r  rnd 
[REPLACE]^if  ( k  ==  n )  {^509^^^^^508^526^[REPLACE] if  ( k > n )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^510^511^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[ADD]^^510^511^^^^508^526^[ADD] throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^if  ( k  !=  4 )  {^513^^^^^508^526^[REPLACE] if  ( k == 0 )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^return ;^514^515^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^514^515^^^^508^526^[REPLACE] throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[ADD]^shuffle ( index, n - k ) ;^518^519^^^^508^526^[ADD] int[] index = getNatural ( n ) ; shuffle ( index, n - k ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^shuffle ( index, n  k ) ;^519^^^^^508^526^[REPLACE] shuffle ( index, n - k ) ;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^int[] natural = new int[n]  ;^520^^^^^508^526^[REPLACE] int[] result = new int[k];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^result[i] = index[n  i  1];^522^^^^^508^526^[REPLACE] result[i] = index[n - i - 1];^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^int iter = 1  ;^521^^^^^508^526^[REPLACE] for  ( int i = 0; i < k; i++ )  {^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^return result;  ;^525^^^^^508^526^[REPLACE] return result;^[METHOD] nextPermutation [TYPE] int[] [PARAMETER] int n int k [CLASS] RandomDataImpl   [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  int[] index  result  [TYPE]  boolean false  true  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  n 
[REPLACE]^int len = c.toArray (  ) ;^542^^^^^541^559^[REPLACE] int len = c.size (  ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^if   (  k > n  )   {  ;^543^^^^^541^559^[REPLACE] if  ( k > len )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^544^545^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^if  ( k  ||  0 )  {^547^^^^^541^559^[REPLACE] if  ( k == 0 )  {^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^548^549^^^^541^559^[ADD] throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^throw new IllegalArgumentException ( "upper bound must be > lower bound" )  ;^548^549^^^^541^559^[REPLACE] throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^Object[] objects = c.size (  ) ;^552^^^^^541^559^[REPLACE] Object[] objects = c.toArray (  ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^553^^^^^541^559^[ADD] int[] index = nextPermutation ( len, k ) ;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^Integer c = new Integer ( hash[i] )  ;^554^^^^^541^559^[REPLACE] Object[] result = new Object[k];^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^result[i]  =  result[i] ;^556^^^^^541^559^[REPLACE] result[i] = objects[index[i]];^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[ADD]^^555^556^557^^^541^559^[ADD] for  ( int i = 0; i < k; i++ )  { result[i] = objects[index[i]]; }^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
[REPLACE]^return result;  ;^558^^^^^541^559^[REPLACE] return result;^[METHOD] nextSample [TYPE] Object[] [PARAMETER] Collection c int k [CLASS] RandomDataImpl   [TYPE]  boolean false  true  [TYPE]  SecureRandom sec  secRan  secRand  [TYPE]  Collection c  [TYPE]  int[] index  [TYPE]  long lower  n  seed  serialVersionUID  upper  [TYPE]  RandomGenerator ran  rand  [TYPE]  int i  k  len  [TYPE]  Object[] objects  result 
