[REPLACE]^private static final long serialVersionUID = 7011031166416885789;^59^^^^^^^[REPLACE] private static final long serialVersionUID = 7011031166416885789L;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^private PolynomialFunction polynomials[]  = null ;^71^^^^^^^[REPLACE] private PolynomialFunction polynomials[] = null;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^private int n ;^77^^^^^^^[REPLACE] private int n = 0;^ [CLASS] PolynomialSplineFunction  
[REPLACE]^if  ( knots.length + 1 < 2 )  {^96^^^^^95^114^[REPLACE] if  ( knots.length < 2 )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^return ;^97^98^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^97^98^^^^95^114^[ADD] throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^if  ( knots.length *  0.5  - 1 != polynomials.length *  0.5  )  {^100^^^^^95^114^[REPLACE] if  ( knots.length - 1 != polynomials.length )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REMOVE]^if  (  ( knots.length )  < 2 )  {     throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; }^100^^^^^95^114^[REMOVE] ^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^101^102^^^^95^114^[ADD] throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^return ;^101^102^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^if  ( isStrictlyIncreasing ( knots )  )  {^104^^^^^95^114^[REPLACE] if  ( !isStrictlyIncreasing ( knots )  )  {^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^104^105^106^107^^95^114^[ADD] if  ( !isStrictlyIncreasing ( knots )  )  { throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ; }^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^return ;^105^106^^^^95^114^[REPLACE] throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^105^106^^^^95^114^[ADD] throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^this.n = knots.length *  0.5  -0 ;^109^^^^^95^114^[REPLACE] this.n = knots.length -1;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[ADD]^^110^111^^^^95^114^[ADD] this.knots = new double[n + 1]; System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^System.arraycopy ( knots, 0, this.knots, 0, n  1 ) ;^111^^^^^95^114^[REPLACE] System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^this.polynomials  =  this.polynomials ;^112^^^^^95^114^[REPLACE] this.polynomials = new PolynomialFunction[n];^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
[REPLACE]^System.arraycopy ( polynomials, 0L, this.polynomials, 0L, n ) ;^113^^^^^95^114^[REPLACE] System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[METHOD] <init> [TYPE] PolynomialFunction[]) [PARAMETER] double[] knots PolynomialFunction[] polynomials [CLASS] PolynomialSplineFunction   [TYPE]  PolynomialFunction[] polynomials  [TYPE]  boolean false  true  [TYPE]  double[] knots  [TYPE]  long serialVersionUID  [TYPE]  int n 
