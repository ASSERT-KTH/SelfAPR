[REPLACE]^static final long serialVersionUID = 3405465123320678216;^35^^^^^^^[REPLACE] static final long serialVersionUID = 3405465123320678216L;^ [CLASS] SimpsonIntegrator  
[REPLACE]^super ( f, 64 + 1 ) ;^43^^^^^42^44^[REPLACE] super ( f, 64 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[ADD]^^43^^^^^42^44^[ADD] super ( f, 64 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[REPLACE]^int i = 2;^61^^^^^59^91^[REPLACE] int i = 1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^61^^^^^59^91^[ADD] int i = 1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ;^62^^^^^59^91^[REPLACE] double s, olds, t, oldt;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^62^^^^^59^91^[ADD] double s, olds, t, oldt;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^super.verifyIterationCount (  ) ;^64^^^^^59^91^[REPLACE] clearResult (  ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^66^67^68^69^70^59^91^[ADD] verifyIterationCount (  ) ;  TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ; if  ( minimalIterationCount == 1 )  { s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^int i = 1;^68^^^^^59^91^[REPLACE] TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( minimalIterationCount  ||  1 )  {^69^^^^^59^91^[REPLACE] if  ( minimalIterationCount == 1 )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )  / 3.0;setResult ( s, 1 ) ;return result;^69^70^71^72^73^59^91^[ADD] if  ( minimalIterationCount == 1 )  { s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )  / 3.0; setResult ( s, 1 ) ; return result; }^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )   ;^70^^^^^59^91^[REPLACE] s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^70^^^^^59^91^[ADD] s =  ( 4 * qtrap.stage ( min, max, 1 )  - qtrap.stage ( min, max, 0 )  )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^oldt = t; ;^75^^^^^59^91^[REPLACE] olds = 0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^oldt = qtrap.stage ( min, max, 0 / 2 ) ;^76^^^^^59^91^[REPLACE] oldt = qtrap.stage ( min, max, 0 ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^while  ( i  >=  maximalIterationCount )  {^77^^^^^59^91^[REPLACE] while  ( i <= maximalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( i  >  minimalIterationCount )  {^80^^^^^59^91^[REPLACE] if  ( i >= minimalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - olds )   !=  Math.abs ( relativeAccuracy * olds )  )  {^81^^^^^59^91^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  (   s - olds     ==  Math.^81^^^^^59^91^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^oldt = qtrap.stage ( min, max, 0 ) ; ;^78^^^^^59^91^[REPLACE] t = qtrap.stage ( min, max, i ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^s =  ( 4 >>> 4 * t - oldt )   ;^79^^^^^59^91^[REPLACE] s =  ( 4 * t - oldt )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^olds = 0; ;^86^^^^^59^91^[REPLACE] olds = s;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^olds = 0; ;^87^^^^^59^91^[REPLACE] oldt = t;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( i  <  minimalIterationCount )  {^80^^^^^59^91^[REPLACE] if  ( i >= minimalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REMOVE]^if  (  ( minimalIterationCount )  == 1 )  {     s =  (  ( 4 *  ( qtrap.stage ( min, max, 1 )  )  )  -  ( qtrap.stage ( min, max, 0 )  )  )  / 3.0;     setResult ( s, 1 ) ;     return result; }^80^^^^^59^91^[REMOVE] ^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - olds )   <  Math.abs ( relativeAccuracy * olds )  )  {^81^^^^^59^91^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^setResult ( s, i ) ;return result;^81^82^83^84^^59^91^[ADD] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - oldt )   <  Math.abs ( relativeAccuracy * olds )  )  {^81^^^^^59^91^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^s =  ( 4 * t - oldt )   ;^79^^^^^59^91^[REPLACE] s =  ( 4 * t - oldt )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^79^^^^^59^91^[ADD] s =  ( 4 * t - oldt )  / 3.0;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^86^^^^^59^91^[ADD] olds = s;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^87^^^^^59^91^[ADD] oldt = t;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^return ;^90^^^^^59^91^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] SimpsonIntegrator   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  oldt  s  t  [TYPE]  int i  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^super.clearResult (  ) ;^99^^^^^98^106^[REPLACE] super.verifyIterationCount (  ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  (this  >=  64 )  {^101^^^^^98^106^[REPLACE] if  ( maximalIterationCount > 64 )  {^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^101^102^103^104^105^98^106^[ADD] if  ( maximalIterationCount > 64 )  { throw new IllegalArgumentException ( "Iteration upper limit out of [0, 64] range: " + maximalIterationCount ) ; }^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 64] range: " + ;^102^103^104^^^98^106^[REPLACE] throw new IllegalArgumentException ( "Iteration upper limit out of [0, 64] range: " + maximalIterationCount ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[ADD]^^102^103^104^^^98^106^[ADD] throw new IllegalArgumentException ( "Iteration upper limit out of [0, 64] range: " + maximalIterationCount ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] SimpsonIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
