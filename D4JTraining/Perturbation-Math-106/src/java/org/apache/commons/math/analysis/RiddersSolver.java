[REPLACE]^static final long serialVersionUID ;^36^^^^^^^[REPLACE] static final long serialVersionUID = -4703139035737911735L;^ [CLASS] RiddersSolver  
[ADD]^^99^^^^^94^157^[ADD] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^double y  ;^99^^^^^94^157^[REPLACE] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^double x  ;^99^^^^^94^157^[REPLACE] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^double oldx  ;^99^^^^^94^157^[REPLACE] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 =  tolerance; y1^101^^^^^94^157^[REPLACE] x1 = min; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^101^^^^^94^157^[ADD] x1 = min; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^102^^^^^94^157^[ADD] x2 = max; y2 = f.value ( x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y3 = f.value ( x3 )  ;^102^^^^^94^157^[REPLACE] x2 = max; y2 = f.value ( x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y1  ||  0.0 )  { return tolerance; }^105^^^^^94^157^[REPLACE] if  ( y1 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y1 == 0.0 )  { return tolerance; }^105^^^^^94^157^[REPLACE] if  ( y1 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y2  !=  0.0 )  { return max; }^106^^^^^94^157^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y2 == 0.0 )  { return x; }^106^^^^^94^157^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^verifyBracketing ( tolerance, max, f ) ;^107^^^^^94^157^[REPLACE] verifyBracketing ( min, max, f ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^int i = 1L;^109^^^^^94^157^[REPLACE] int i = 1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^110^^^^^94^157^[ADD] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( y3 )   !=  functionValueAccuracy )  {^115^^^^^94^157^[REPLACE] if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return result;  ;^117^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( x3 - oldx )   >  tolerance )  {^127^^^^^94^157^[REPLACE] if  ( Math.abs ( x - oldx )  <= tolerance )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return result;  ;^129^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if   (  Math.abs  (  y3  )   <= functionValueAccuracy  )   {  ;^131^^^^^94^157^[REPLACE] if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^setResult ( x, i ) ;return result;^131^132^133^134^^94^157^[ADD] if  ( Math.abs ( y )  <= functionValueAccuracy )  { setResult ( x, i ) ; return result; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return result;  ;^133^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( tolerance  <=  4.0d )  {^138^^^^^94^157^[REPLACE] if  ( correction > 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )   ) {^146^^^^^138^152^[REPLACE] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3  ;^147^^^^^138^152^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^147^^^^^138^152^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x  ;^149^^^^^138^152^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^150^^^^^138^152^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^150^^^^^138^152^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if   (  MathUtils.sign  (  y2  )   + MathUtils.sign  (  y  )   == 0.0  )   {  ;^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^x2 = x; y2 = y;x1 = x; x2 = x3;y1 = y; y2 = y3;^139^140^141^142^143^94^157^[ADD] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  { x2 = x; y2 = y; } else { x1 = x; x2 = x3; y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3  ;^142^^^^^139^144^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^142^^^^^139^144^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^143^^^^^139^144^[REPLACE] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^143^^^^^139^144^[ADD] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x  ;^140^^^^^94^157^[REPLACE] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^140^^^^^94^157^[REPLACE] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^140^^^^^94^157^[REPLACE] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^140^^^^^94^157^[ADD] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3  ;^142^^^^^94^157^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^142^^^^^94^157^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^143^^^^^94^157^[REPLACE] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^143^^^^^94^157^[ADD] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )   !=  0.0 )  {^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^142^^^^^139^144^[ADD] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   0.0 )  {^146^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x  ;^149^^^^^146^151^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^149^150^^^^146^151^[ADD] x1 = x3; x2 = x; y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^150^^^^^146^151^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^150^^^^^146^151^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3  ;^147^^^^^94^157^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^147^^^^^94^157^[ADD] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x3 = 1.0d   ( x1 + x2 ) ;^113^^^^^94^157^[REPLACE] x3 = 0.5 *  ( x1 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^114^^^^^94^157^[REPLACE] y3 = f.value ( x3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^delta = 1 * 4   ( y1 * 4 * y2 )  /  ( y3 * y3 ) ;^119^^^^^94^157^[REPLACE] delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )   Math.sqrt ( delta ) ;^120^121^^^^94^157^[REPLACE] correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x = x3  correction;^122^^^^^94^157^[REPLACE] x = x3 - correction;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = f.value ( x2 )  ;^123^^^^^94^157^[REPLACE] y = f.value ( x ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^tolerance = Math.max ( relativeAccuracy  Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^94^157^[REPLACE] tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^147^^^^^94^157^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x  ;^149^^^^^94^157^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^149^^^^^94^157^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y  ;^150^^^^^94^157^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y2 = y3  ;^150^^^^^94^157^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^oldx =  x3;^153^^^^^94^157^[REPLACE] oldx = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return ;^156^^^^^94^157^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
