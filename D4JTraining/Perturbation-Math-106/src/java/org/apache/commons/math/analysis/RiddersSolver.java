[REPLACE]^static final long serialVersionUID ;^36^^^^^^^[REPLACE] static final long serialVersionUID = -4703139035737911735L;^ [CLASS] RiddersSolver  
[REPLACE]^super ( f, 45, 1E-6 ) ;^44^^^^^43^45^[REPLACE] super ( f, 100, 1E-6 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( min )   ||  0.0 )  { return min; }^66^^^^^62^77^[REPLACE] if  ( f.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[ADD]^^66^67^^^^62^77^[ADD] if  ( f.value ( min )  == 0.0 )  { return min; } if  ( f.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( max )  == 0.0 )  { return min; }^66^^^^^62^77^[REPLACE] if  ( f.value ( min )  == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( max )   &&  0.0D )  { return max; }^67^^^^^62^77^[REPLACE] if  ( f.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( min )  == 0.0 )  { return max; }^67^^^^^62^77^[REPLACE] if  ( f.value ( max )  == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( min )   !=  0.0 )  { return initial; }^68^^^^^62^77^[REPLACE] if  ( f.value ( initial )  == 0.0 )  { return initial; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( f.value ( min )  == 0.0 )  { return initial; }^68^^^^^62^77^[REPLACE] if  ( f.value ( initial )  == 0.0 )  { return initial; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^verifyBracketing ( initial, max, f ) ;^70^^^^^62^77^[REPLACE] verifyBracketing ( min, max, f ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[ADD]^^70^71^72^73^^62^77^[ADD] verifyBracketing ( min, max, f ) ; verifySequence ( min, initial, max ) ; if  ( isBracketing ( min, initial, f )  )  { return solve ( min, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^verifySequence ( initial, initial, max ) ;^71^^^^^62^77^[REPLACE] verifySequence ( min, initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^if  ( isBracketing ( initial, initial, f )  )  {^72^^^^^62^77^[REPLACE] if  ( isBracketing ( min, initial, f )  )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^return solve ( initial, min ) ;^75^^^^^62^77^[REPLACE] return solve ( initial, max ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^return solve ( min, max ) ;^73^^^^^62^77^[REPLACE] return solve ( min, initial ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max double initial [CLASS] RiddersSolver   [TYPE]  long serialVersionUID  [TYPE]  double initial  max  min  [TYPE]  boolean false  true 
[REPLACE]^int i = 1;^99^^^^^94^157^[REPLACE] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^99^^^^^94^157^[ADD] double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x2 = max; y2 = f.value ( x2 ) ; ;^101^^^^^94^157^[REPLACE] x1 = min; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^101^^^^^94^157^[ADD] x1 = min; y1 = f.value ( x1 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = min; y1 = f.value ( x1 ) ; ;^102^^^^^94^157^[REPLACE] x2 = max; y2 = f.value ( x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (y3  ||  0.0 )  { return min; }^105^^^^^94^157^[REPLACE] if  ( y1 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^105^106^^^^94^157^[ADD] if  ( y1 == 0.0 )  { return min; } if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y1 == 0.0 )  { return tolerance; }^105^^^^^94^157^[REPLACE] if  ( y1 == 0.0 )  { return min; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y2  ||  0.0 )  { return x; }^106^^^^^94^157^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^106^107^^109^110^94^157^[ADD] if  ( y2 == 0.0 )  { return max; } verifyBracketing ( min, max, f ) ; int i = 1; oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( y2 == 0.0 )  { return x; }^106^^^^^94^157^[REPLACE] if  ( y2 == 0.0 )  { return max; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^verifyBracketing ( tolerance, max, f ) ;^107^^^^^94^157^[REPLACE] verifyBracketing ( min, max, f ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^int i = 1 + 3;^109^^^^^94^157^[REPLACE] int i = 1;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^oldx  =  oldx ;^110^^^^^94^157^[REPLACE] oldx = Double.POSITIVE_INFINITY;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^while  ( i  ==  maximalIterationCount )  {^111^^^^^94^157^[REPLACE] while  ( i <= maximalIterationCount )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   y3     !=  functionValueAccuracy )  {^115^^^^^94^157^[REPLACE] if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return solve ( initial, max ) ;^117^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( x - oldx )   >  tolerance )  {^127^^^^^94^157^[REPLACE] if  ( Math.abs ( x - oldx )  <= tolerance )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^setResult ( x, i ) ;return result;^127^128^129^130^^94^157^[ADD] if  ( Math.abs ( x - oldx )  <= tolerance )  { setResult ( x, i ) ; return result; }^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return solve ( initial, max ) ;^129^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( y )   >=  functionValueAccuracy )  {^131^^^^^94^157^[REPLACE] if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return solve ( initial, max ) ;^133^^^^^94^157^[REPLACE] return result;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( correction  !=  0.0 )  {^138^^^^^94^157^[REPLACE] if  ( correction > 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   y2    + MathUtils.^146^^^^^138^152^[REPLACE] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y1 = y3; y2 = y; ;^149^^^^^138^152^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^150^^^^^138^152^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^150^^^^^138^152^[ADD] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^147^^^^^138^152^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^147^^^^^138^152^[ADD] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^149^^^^^138^152^[ADD] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y31 )  + MathUtils.sign ( y )   ||  0.0D )  {^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^142^^^^^139^144^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y1 = y3; y2 = y; ;^143^^^^^139^144^[REPLACE] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^143^^^^^139^144^[ADD] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^140^^^^^94^157^[REPLACE] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^140^^^^^94^157^[ADD] x2 = x; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^142^^^^^94^157^[REPLACE] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y1 = y3; y2 = y; ;^143^^^^^94^157^[REPLACE] y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )   ||  4.0d )  {^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^x2 = x; y2 = y;x1 = x; x2 = x3;y1 = y; y2 = y3;^139^140^141^142^143^94^157^[ADD] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  { x2 = x; y2 = y; } else { x1 = x; x2 = x3; y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^142^143^^^^139^144^[ADD] x1 = x; x2 = x3; y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   y3    + MathUtils.^146^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REMOVE]^if  (  (  ( sign ( y1 )  )  +  ( sign ( y )  )  )  == 0.0 )  {     x2 = x;     y2 = y; }else {     x1 = x;     x2 = x3;     y1 = y;     y2 = y3; }^146^^^^^94^157^[REMOVE] ^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y1 = y3; y2 = y; ;^149^^^^^146^151^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^150^^^^^146^151^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^147^^^^^94^157^[REPLACE] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^147^^^^^94^157^[ADD] x1 = x; y1 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x3 = 0.5  ;^113^^^^^94^157^[REPLACE] x3 = 0.5 *  ( x1 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^113^114^^^^94^157^[ADD] x3 = 0.5 *  ( x1 + x2 ) ; y3 = f.value ( x3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y = f.value ( x ) ; ;^114^^^^^94^157^[REPLACE] y3 = f.value ( x3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^114^^^^^94^157^[ADD] y3 = f.value ( x3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^delta = 1  &&   ( y1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^94^157^[REPLACE] delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )   ;^120^121^^^^94^157^[REPLACE] correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x =y3 - correction;^122^^^^^94^157^[REPLACE] x = x3 - correction;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^122^123^^^^94^157^[ADD] x = x3 - correction; y = f.value ( x ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y3 = f.value ( x3 ) ; ;^123^^^^^94^157^[REPLACE] y = f.value ( x ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^tolerance = Math.max ( relativeAccuracy  ^  Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^94^157^[REPLACE] tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^y1 = y3; y2 = y; ;^149^^^^^94^157^[REPLACE] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x1 = x3; x2 = x; ;^150^^^^^94^157^[REPLACE] y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^oldx =  x3;^153^^^^^94^157^[REPLACE] oldx = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   y3     < y3 )  {^115^^^^^94^157^[REPLACE] if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REMOVE]^if  (  ( abs ( y )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x, i ) ;     return result; }^115^^^^^94^157^[REMOVE] ^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   x - oldx     <  tolerance )  {^127^^^^^94^157^[REPLACE] if  ( Math.abs ( x - oldx )  <= tolerance )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( Math.abs ( y )   !=  functionValueAccuracy )  {^131^^^^^94^157^[REPLACE] if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( correction  <=  0.0 )  {^138^^^^^94^157^[REPLACE] if  ( correction > 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^x1 = x; y1 = y;x1 = x3; x2 = x;y1 = y3; y2 = y;^146^147^148^149^150^138^152^[ADD] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  { x1 = x; y1 = y; } else { x1 = x3; x2 = x; y1 = y3; y2 = y;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )   &&  0.0 )  {^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^y1 = y; y2 = y3;^142^143^^^^139^144^[ADD] x1 = x; x2 = x3; y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^142^143^^^^94^157^[ADD] x1 = x; x2 = x3; y1 = y; y2 = y3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^142^^^^^94^157^[ADD] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  (   y1    + MathUtils.^139^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^142^^^^^139^144^[ADD] x1 = x; x2 = x3;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )   &&  0.0 )  {^146^^^^^94^157^[REPLACE] if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^113^^^^^94^157^[ADD] x3 = 0.5 *  ( x1 + x2 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^delta = 0  <   ( y0 * y2 )  /  ( y3 * y3 ) ;^119^^^^^94^157^[REPLACE] delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^x = x3  &  correction;^122^^^^^94^157^[REPLACE] x = x3 - correction;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^123^^^^^94^157^[ADD] y = f.value ( x ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^tolerance = Math.max ( relativeAccuracy  <=  Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^94^157^[REPLACE] tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^149^^^^^94^157^[ADD] x1 = x3; x2 = x;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[ADD]^^153^154^^^^94^157^[ADD] oldx = x; i++;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
[REPLACE]^return ;^156^^^^^94^157^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] solve [TYPE] double [PARAMETER] double min double max [CLASS] RiddersSolver   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  [TYPE]  int i 
