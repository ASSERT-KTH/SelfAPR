[REPLACE]^private static final long serialVersionUID = -38038050983108802;^38^^^^^^^[REPLACE] private static final long serialVersionUID = -38038050983108802L;^ [CLASS] AbstractContinuousDistribution 1  
[REPLACE]^double upperBound = getDomainUpperBound ( p ) ;^44^^^^^43^45^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] AbstractContinuousDistribution() [PARAMETER] [CLASS] AbstractContinuousDistribution 1   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( p < 0.0D ) {^60^^^^^59^110^[REPLACE] if  ( p < 0.0 || p > 1.0 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^throw new MathException  (" ")  ; ;^61^^^^^59^110^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^61^^^^^59^110^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^return cumulativeProbability ( x )  - p;( x, "Error computing cdf", ex ) ;^70^71^72^73^74^59^110^[ADD] try { return cumulativeProbability ( x )  - p; } catch  ( MathException ex )  { throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return cumulativeProbability ( x )   ;^71^^^^^59^110^[REPLACE] return cumulativeProbability ( x )  - p;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^^66^67^68^^^59^110^[ADD] UnivariateRealFunction rootFindingFunction = new UnivariateRealFunction (  )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return ;^73^74^^^^59^110^[REPLACE] throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^double lowerBound = getDomainLowerBound ( upperBound ) ;^80^^^^^59^110^[REPLACE] double lowerBound = getDomainLowerBound ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^double upperBound = getDomainUpperBound ( upperBound ) ;^81^^^^^59^110^[REPLACE] double upperBound = getDomainUpperBound ( p ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^double[] bracket = this;^82^^^^^59^110^[REPLACE] double[] bracket = null;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^if  (   rootFindingFunction.value ( lowerBound )    >=  1E-6 )  {^96^^^^^59^110^[REPLACE] if  ( Math.abs ( rootFindingFunction.value ( lowerBound )  )  < 1E-6 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return upperBound;^97^^^^^59^110^[REPLACE] return lowerBound;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( Math.abs ( rootFindingFunction.value ( upperBound )  )   ==  1E-6 )  {^99^^^^^59^110^[REPLACE] if  ( Math.abs ( rootFindingFunction.value ( upperBound )  )  < 1E-6 )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return root;^100^^^^^59^110^[REPLACE] return upperBound;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^lowerBound, upperBound ) ;^83^84^85^86^87^59^110^[ADD] try { bracket = UnivariateRealSolverUtils.bracket ( rootFindingFunction, getInitialDomain ( p ) , lowerBound, upperBound ) ; }  catch  ( ConvergenceException ex )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^bracket =  UnivariateRealSolverUtils.bracket ( null, getInitialDomain ( p ) , lowerBound, upperBound ) ;^84^85^86^^^59^110^[REPLACE] bracket = UnivariateRealSolverUtils.bracket ( rootFindingFunction, getInitialDomain ( p ) , lowerBound, upperBound ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^^84^85^86^^^59^110^[ADD] bracket = UnivariateRealSolverUtils.bracket ( rootFindingFunction, getInitialDomain ( p ) , lowerBound, upperBound ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^103^^^^^59^110^[REPLACE] throw new MathException  (" ")  ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^^87^88^89^^^59^110^[ADD] catch  ( ConvergenceException ex )  {^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^double root = UnivariateRealSolverUtils.solve ( rootFindingFunction, bracket[0L],bracket[1] ) ;^107^108^^^^59^110^[REPLACE] double root = UnivariateRealSolverUtils.solve ( rootFindingFunction, bracket[0],bracket[1] ) ;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[REPLACE]^return upperBound;^109^^^^^59^110^[REPLACE] return root;^[METHOD] inverseCumulativeProbability [TYPE] double [PARAMETER] final double p [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  double[] bracket  [TYPE]  double lowerBound  p  root  upperBound  x  [TYPE]  MathException ex  [TYPE]  ConvergenceException ex  [TYPE]  UnivariateRealFunction rootFindingFunction  [TYPE]  long serialVersionUID 
[ADD]^return cumulativeProbability ( x )  - p;( x, "Error computing cdf", ex ) ;^70^71^72^73^74^69^76^[ADD] try { return cumulativeProbability ( x )  - p; } catch  ( MathException ex )  { throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double x  [TYPE]  MathException ex 
[REPLACE]^return true ;^71^^^^^69^76^[REPLACE] return cumulativeProbability ( x )  - p;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double x  [TYPE]  MathException ex 
[REPLACE]^return cumulativeProbability ( x )   ;^71^^^^^69^76^[REPLACE] return cumulativeProbability ( x )  - p;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double x  [TYPE]  MathException ex 
[REPLACE]^return ;^73^74^^^^69^76^[REPLACE] throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] AbstractContinuousDistribution 1   [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double x  [TYPE]  MathException ex 
[ADD]^return cumulativeProbability ( x )  - p;( x, "Error computing cdf", ex ) ;^70^71^72^73^74^69^76^[ADD] try { return cumulativeProbability ( x )  - p; } catch  ( MathException ex )  { throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  double x  [TYPE]  MathException ex 
[REPLACE]^return false ;^71^^^^^69^76^[REPLACE] return cumulativeProbability ( x )  - p;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  double x  [TYPE]  MathException ex 
[REPLACE]^return ;^73^74^^^^69^76^[REPLACE] throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  double x  [TYPE]  MathException ex 
[ADD]^^73^74^^^^69^76^[ADD] throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  double x  [TYPE]  MathException ex 
[ADD]^^72^73^74^^^69^76^[ADD] catch  ( MathException ex )  { throw new FunctionEvaluationException ( x, "Error computing cdf", ex ) ;^[METHOD] value [TYPE] double [PARAMETER] double x [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  double x  [TYPE]  MathException ex 
