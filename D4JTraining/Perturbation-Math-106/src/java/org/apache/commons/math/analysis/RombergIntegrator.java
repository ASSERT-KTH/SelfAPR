[REPLACE]^static final long serialVersionUID ;^36^^^^^^^[REPLACE] static final long serialVersionUID = -1058849527738180243L;^ [CLASS] RombergIntegrator  
[REPLACE]^super ( f, 0 ) ;^44^^^^^43^45^[REPLACE] super ( f, 32 ) ;^[METHOD] <init> [TYPE] UnivariateRealFunction) [PARAMETER] UnivariateRealFunction f [CLASS] RombergIntegrator   [TYPE]  long serialVersionUID  [TYPE]  UnivariateRealFunction f  [TYPE]  boolean false  true 
[REPLACE]^int i = 4, j, m = maximalIterationCount + 4;^62^^^^^60^92^[REPLACE] int i = 1, j, m = maximalIterationCount + 1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ;^62^^^^^60^92^[REPLACE] int i = 1, j, m = maximalIterationCount + 1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^int i = 1, j, m =this + 1;^62^^^^^60^92^[REPLACE] int i = 1, j, m = maximalIterationCount + 1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ;^65^^^^^60^92^[REPLACE] double r, t[][] = new double[m][m], s, olds;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^super.verifyIterationCount (  ) ;^67^^^^^60^92^[REPLACE] clearResult (  ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^int i = 1, j, m = maximalIterationCount + 1;^71^^^^^60^92^[REPLACE] TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^71^72^^^^60^92^[ADD] TrapezoidIntegrator qtrap = new TrapezoidIntegrator ( this.f ) ; t[0][0] = qtrap.stage ( min, max, 0 ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[3][3] = qtrap.stage ( min, max, 3 ) ;^72^^^^^60^92^[REPLACE] t[0][0] = qtrap.stage ( min, max, 0 ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^olds = t[3][3];^73^^^^^60^92^[REPLACE] olds = t[0][0];^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^while  ( i  >=  maximalIterationCount )  {^74^^^^^60^92^[REPLACE] while  ( i <= maximalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( i  ==  minimalIterationCount )  {^82^^^^^60^92^[REPLACE] if  ( i >= minimalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^82^83^84^85^86^60^92^[ADD] if  ( i >= minimalIterationCount )  { if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - olds )   >  Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^60^92^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - olds )   ==  Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^60^92^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^for  ( j = 4; j  <  i; j++ )  {^76^^^^^60^92^[REPLACE] for  ( j = 1; j <= i; j++ )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^r =  (serialVersionUIDL <<  ( 2 * j )  )  -1;^78^^^^^60^92^[REPLACE] r =  ( 1L <<  ( 2 * j )  )  -1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^78^^^^^60^92^[ADD] r =  ( 1L <<  ( 2 * j )  )  -1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[i][j] = t[i][j-1]  &   ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^60^92^[REPLACE] t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^79^^^^^60^92^[ADD] t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[i][0 % 0] = qtrap.stage ( min, max, i ) ;^75^^^^^60^92^[REPLACE] t[i][0] = qtrap.stage ( min, max, i ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^for  ( j = 3; j <= i; j++ )  {^76^^^^^60^92^[REPLACE] for  ( j = 1; j <= i; j++ )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[i][j] = t[i][j-1 >>> 1]  !=   ( t[i][j-1 >>> 1] - t[i-1 >>> 1][j-1 >>> 1] )  / r;^79^^^^^60^92^[REPLACE] t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^s =  null[i][i];^81^^^^^60^92^[REPLACE] s = t[i][i];^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^olds =  null;^88^^^^^60^92^[REPLACE] olds = s;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( i  !=  minimalIterationCount )  {^82^^^^^60^92^[REPLACE] if  ( i >= minimalIterationCount )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  ( Math.abs ( s - olds )   !=  Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^60^92^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^if  (   s - olds     !=  Math.^83^^^^^60^92^[REPLACE] if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^for  ( j = 1; j  <  i; j++ )  {^76^^^^^60^92^[REPLACE] for  ( j = 1; j <= i; j++ )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^r =  ( 1L <<  ( 2 * j )  )   >= 1;^78^^^^^60^92^[REPLACE] r =  ( 1L <<  ( 2 * j )  )  -1;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[ADD]^^78^79^^^^60^92^[ADD] r =  ( 1L <<  ( 2 * j )  )  -1; t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[i][j] = t[i][j-1]  !=   ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^60^92^[REPLACE] t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[0][0] = qtrap.stage ( min, max, 0 ) ; ;^75^^^^^60^92^[REPLACE] t[i][0] = qtrap.stage ( min, max, i ) ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^for  ( j = 0; j <= i; j++ )  {^76^^^^^60^92^[REPLACE] for  ( j = 1; j <= i; j++ )  {^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^t[i][j] = t[i][j-1]  >   ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^60^92^[REPLACE] t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^return ;^91^^^^^60^92^[REPLACE] throw new ConvergenceException  (" ")  ;^[METHOD] integrate [TYPE] double [PARAMETER] double min double max [CLASS] RombergIntegrator   [TYPE]  double[][] t  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  double max  min  olds  r  s  [TYPE]  int i  j  m  [TYPE]  TrapezoidIntegrator qtrap 
[REPLACE]^super .integrate ( null , null )  ;^100^^^^^99^107^[REPLACE] super.verifyIterationCount (  ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] RombergIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^if  ( null  ==  32 )  {^102^^^^^99^107^[REPLACE] if  ( maximalIterationCount > 32 )  {^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] RombergIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + ;^103^104^105^^^99^107^[REPLACE] throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] RombergIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return ;^103^104^105^^^99^107^[REPLACE] throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[METHOD] verifyIterationCount [TYPE] void [PARAMETER] [CLASS] RombergIntegrator   [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
