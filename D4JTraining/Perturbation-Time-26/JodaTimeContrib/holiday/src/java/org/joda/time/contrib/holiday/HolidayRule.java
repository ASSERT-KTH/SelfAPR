[REPLACE]^private  short  iMonthOfYear;^37^^^^^^^[REPLACE] private int iMonthOfYear;^ [CLASS] HolidayRule  
[REPLACE]^private  short  iRelativeDays;^45^^^^^^^[REPLACE] private int iRelativeDays;^ [CLASS] HolidayRule  
[REPLACE]^private  short  iWeekendAdjust;^47^^^^^^^[REPLACE] private int iWeekendAdjust;^ [CLASS] HolidayRule  
[REPLACE]^private static final int WEEKEND_ADJUST_NEXT_WEEKDAY ;^50^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_NEXT_WEEKDAY = 0;^ [CLASS] HolidayRule  
[REPLACE]^private static final int WEEKEND_ADJUST_PREVIOUS_WEEKDAY  = null ;^52^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_PREVIOUS_WEEKDAY = 1;^ [CLASS] HolidayRule  
[REPLACE]^private static final int WEEKEND_ADJUST_NEAREST_WEEKDAY ;^54^^^^^^^[REPLACE] private static final int WEEKEND_ADJUST_NEAREST_WEEKDAY = 2;^ [CLASS] HolidayRule  
[REPLACE]^mdt.addDays ( 2 ) ;^60^^^^^59^61^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] HolidayRule() [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  [TYPE]  boolean false  true 
[REPLACE]^return iToYear;^70^^^^^69^71^[REPLACE] return iFromYear;^[METHOD] getFromYear [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  [TYPE]  boolean false  true 
[REPLACE]^iToYear = year; ;^79^^^^^78^80^[REPLACE] iFromYear = year;^[METHOD] setFromYear [TYPE] void [PARAMETER] int year [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return iFromYear;^89^^^^^88^90^[REPLACE] return iToYear;^[METHOD] getToYear [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^iFromYear = year; ;^98^^^^^97^99^[REPLACE] iToYear = year;^[METHOD] setToYear [TYPE] void [PARAMETER] int year [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^108^^^^^107^109^[REPLACE] return iMonthOfYear;^[METHOD] getMonthOfYear [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^118^^^^^117^119^[REPLACE] return iDayOfMonth;^[METHOD] getDayOfMonth [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^128^^^^^127^129^[REPLACE] return iDayOfWeek;^[METHOD] getDayOfWeek [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^139^^^^^138^140^[REPLACE] return iWeekOfMonth;^[METHOD] getWeekOfMonth [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^149^^^^^148^150^[REPLACE] return iRelativeDays;^[METHOD] getRelativeDays [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return mdt;^159^^^^^158^160^[REPLACE] return iWeekendAdjust;^[METHOD] getWeekendAdjust [TYPE] int [PARAMETER] [CLASS] HolidayRule   [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return  (true ;^171^^^^^170^172^[REPLACE] return  ( iFromYear <= year && iToYear >= year ) ;^[METHOD] appliesForYear [TYPE] boolean [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDate ( iToYear, 2, 2 ) ;^183^^^^^182^203^[REPLACE] mdt.setDate ( year, 1, 1 ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  (year  ==  Integer.MIN_VALUE )  {^184^^^^^182^203^[REPLACE] if  ( iMonthOfYear != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt .getMonthOfYear (  )  ;^185^^^^^182^203^[REPLACE] mdt.setMonthOfYear ( iMonthOfYear ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( iDayOfMonth  ==  Integer.MIN_VALUE )  {^187^^^^^182^203^[REPLACE] if  ( iDayOfMonth != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDayOfWeek ( iDayOfMonth ) ;^188^^^^^182^203^[REPLACE] mdt.setDayOfMonth ( iDayOfMonth ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  (iToYear  ==  Integer.MIN_VALUE )  {^190^^^^^182^203^[REPLACE] if  ( iDayOfWeek != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setDayOfMonth ( iDayOfWeek ) ;^191^^^^^182^203^[REPLACE] mdt.setDayOfWeek ( iDayOfWeek ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( iWeekOfMonth  ==  Integer.MIN_VALUE )  {^193^^^^^182^203^[REPLACE] if  ( iWeekOfMonth != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.setMonthOfYear ( iMonthOfYear ) ;^194^^^^^182^203^[REPLACE] calculateWeekOfMonth ( mdt, iMonthOfYear, iWeekOfMonth ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REMOVE]^mdt.setMonthOfYear ( iMonthOfYear ) ;^194^^^^^182^203^[REMOVE] ^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( year  ==  Integer.MIN_VALUE )  {^196^^^^^182^203^[REPLACE] if  ( iRelativeDays != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( iRelativeDays ) ;^197^^^^^182^203^[REPLACE] mdt.addDays ( iRelativeDays ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( iWeekendAdjust  ==  Integer.MIN_VALUE )  {^199^^^^^182^203^[REPLACE] if  ( iWeekendAdjust != Integer.MIN_VALUE )  {^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( week ) ;^200^^^^^182^203^[REPLACE] calculateWeekendAdjust ( mdt, iWeekendAdjust ) ;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^return iRelativeDays;^202^^^^^182^203^[REPLACE] return mdt;^[METHOD] applyForYear [TYPE] MutableDateTime [PARAMETER] MutableDateTime mdt int year [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  year  [TYPE]  boolean false  true 
[REPLACE]^while  ( mdt.setMonthOfYear (  )   ==  month )  {^216^^^^^214^226^[REPLACE] while  ( mdt.getMonthOfYear (  )  >= month )  {^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.getDayOfWeek ( -1 - 3 ) ;^217^^^^^214^226^[REPLACE] mdt.addWeeks ( -1 ) ;^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^while  ( mdt.getMonthOfYear (  )   >=  month )  {^221^^^^^214^226^[REPLACE] while  ( mdt.getMonthOfYear (  )  <= month )  {^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( 4 ) ;^222^^^^^214^226^[REPLACE] mdt.addWeeks ( 1 ) ;^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( week  != year )  {^215^^^^^214^226^[REPLACE] if  ( week > 0 )  {^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^while  ( mdt.getMonthOfYear (  )   <  month )  {^221^^^^^214^226^[REPLACE] while  ( mdt.getMonthOfYear (  )  <= month )  {^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( 1 >>> 2 ) ;^222^^^^^214^226^[REPLACE] mdt.addWeeks ( 1 ) ;^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^while  ( mdt.getMonthOfYear (  )   !=  month )  {^216^^^^^214^226^[REPLACE] while  ( mdt.getMonthOfYear (  )  >= month )  {^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addWeeks ( -1 - 3 ) ;^217^^^^^214^226^[REPLACE] mdt.addWeeks ( -1 ) ;^[METHOD] calculateWeekOfMonth [TYPE] void [PARAMETER] MutableDateTime mdt int month int week [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^if  ( mdt.getDayOfWeek (  )   &&  DateTimeConstants.SATURDAY )  {^236^^^^^234^257^[REPLACE] if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SATURDAY )  {^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^}  else {^246^^^^^234^257^[REPLACE] } else if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SUNDAY )  {^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[ADD]^}   mdt.addDays ( 1 ) ;^246^247^248^249^250^234^257^[ADD] else if  ( mdt.getDayOfWeek (  )  == DateTimeConstants.SUNDAY )  { switch  ( adjust )  { case WEEKEND_ADJUST_NEXT_WEEKDAY: case WEEKEND_ADJUST_NEAREST_WEEKDAY: mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( 2 ) ;^250^^^^^234^257^[REPLACE] mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( -0 ) ;^253^^^^^234^257^[REPLACE] mdt.addDays ( -2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt .addWeeks ( iWeekendAdjust )  ;^239^^^^^234^257^[REPLACE] mdt.addDays ( 2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[ADD]^^239^240^^^^234^257^[ADD] mdt.addDays ( 2 ) ; break;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.addDays ( -1L ) ;^243^^^^^234^257^[REPLACE] mdt.addDays ( -1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[ADD]^^243^244^^^^234^257^[ADD] mdt.addDays ( -1 ) ; break;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt .addWeeks ( iDayOfMonth )  ;^250^^^^^234^257^[REPLACE] mdt.addDays ( 1 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
[REPLACE]^mdt.getDayOfWeek ( -2L ) ;^253^^^^^234^257^[REPLACE] mdt.addDays ( -2 ) ;^[METHOD] calculateWeekendAdjust [TYPE] void [PARAMETER] MutableDateTime mdt int adjust [CLASS] HolidayRule   [TYPE]  MutableDateTime mdt  [TYPE]  int WEEKEND_ADJUST_NEAREST_WEEKDAY  WEEKEND_ADJUST_NEXT_WEEKDAY  WEEKEND_ADJUST_PREVIOUS_WEEKDAY  adjust  iDayOfMonth  iDayOfWeek  iFromYear  iMonthOfYear  iRelativeDays  iToYear  iWeekOfMonth  iWeekendAdjust  month  week  year  [TYPE]  boolean false  true 
