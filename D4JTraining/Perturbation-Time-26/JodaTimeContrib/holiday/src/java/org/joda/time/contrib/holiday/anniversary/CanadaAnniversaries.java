[REPLACE]^public static final AnniversaryFactory NEW_YEAR_HOLIDAY ;^33^34^^^^33^40^[REPLACE] public static final AnniversaryFactory NEW_YEAR_HOLIDAY = new AnniversaryFactory ( "CanadaDayHoliday" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static final AnniversaryFactory VICTORIA_DAY  = null ;^42^43^^^^42^48^[REPLACE] public static final AnniversaryFactory VICTORIA_DAY = new AnniversaryFactory ( "VictoriaDay" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static final AnniversaryFactory CANADA_DAY  = null ;^50^51^^^^50^56^[REPLACE] public static final AnniversaryFactory CANADA_DAY = new AnniversaryFactory ( "CanadaDay" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public  final AnniversaryFactory CANADA_DAY_HOLIDAY = new AnniversaryFactory ( "CanadaDayHoliday" )  {^58^59^^^^58^65^[REPLACE] public static final AnniversaryFactory CANADA_DAY_HOLIDAY = new AnniversaryFactory ( "CanadaDayHoliday" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static final AnniversaryFactory THANKSGIVING  = null ;^67^68^^^^67^75^[REPLACE] public static final AnniversaryFactory THANKSGIVING = new AnniversaryFactory ( "Thanksgiving" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static  AnniversaryFactory REMEMBRANCE_DAY_HOLIDAY = new AnniversaryFactory ( "RemembranceDayHoliday" )  {^77^78^^^^77^84^[REPLACE] public static final AnniversaryFactory REMEMBRANCE_DAY_HOLIDAY = new AnniversaryFactory ( "RemembranceDayHoliday" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static  AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory ( "ChristmasHoliday" )  {^86^87^^^^86^93^[REPLACE] public static final AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory ( "ChristmasHoliday" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^public static  AnniversaryFactory BOXING_DAY_HOLIDAY = new AnniversaryFactory ( "BoxingDayHoliday" )  {^95^96^^^^95^103^[REPLACE] public static final AnniversaryFactory BOXING_DAY_HOLIDAY = new AnniversaryFactory ( "BoxingDayHoliday" )  {^ [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8  
[REPLACE]^return TimeUtility .GetFirstXWeekdayOfMonth ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^36^37^38^^^35^39^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, 7, iYear, DateTimeConstants.MAY ) ;^45^46^^^^44^47^[REPLACE] return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, 25, iYear, DateTimeConstants.MAY ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 - 3 ) .toDateTime (  ) ;^53^54^^^^52^55^[REPLACE] return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 ) .toDateTime (  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .AnniversaryFactory ( iYear )  ) ;^61^62^63^^^60^64^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 1L ) ;^71^72^73^^^69^74^[REPLACE] return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 1 ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility  .GetLastXWeekdayOfMonthBeforeYMonthday ( iYear , iYear )  ;^80^81^82^^^79^83^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.ARMISTICE_DAY .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility  .GetLastXWeekdayOfMonthBeforeYMonthday ( iYear , iYear )  ;^89^90^91^^^88^92^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.CHRISTMAS .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility .GetFirstXWeekdayOfMonth ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^99^100^101^^^98^102^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] CanadaAnniversaries 1 2 3 4 5 6 7 8   [TYPE]  AnniversaryFactory BOXING_DAY_HOLIDAY  CANADA_DAY  CANADA_DAY_HOLIDAY  CHRISTMAS_HOLIDAY  NEW_YEAR_HOLIDAY  REMEMBRANCE_DAY_HOLIDAY  THANKSGIVING  VICTORIA_DAY  [TYPE]  int iYear  [TYPE]  boolean false  true 
[REPLACE]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY  .create ( iYear )   ) ;^36^37^38^^^35^39^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CanadaAnniversaries.CANADA_DAY .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, 0, iYear, DateTimeConstants.MAY ) ;^45^46^^^^44^47^[REPLACE] return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday ( DateTimeConstants.MONDAY, 25, iYear, DateTimeConstants.MAY ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 + 2 ) .toDateTime (  ) ;^53^54^^^^52^55^[REPLACE] return new DateMidnight ( iYear, DateTimeConstants.JULY, 1 ) .toDateTime (  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 4 ) ;^71^72^73^^^69^74^[REPLACE] return TimeUtility.GetFirstXWeekdayOfMonth ( DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER ) .plusWeeks ( 1 ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 5   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.ARMISTICE_DAY  .create ( iYear )   ) ;^80^81^82^^^79^83^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.ARMISTICE_DAY .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 6   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.CHRISTMAS  .create ( iYear )   ) ;^89^90^91^^^88^92^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CommonAnniversaries.CHRISTMAS .create ( iYear )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 7   [TYPE]  boolean false  true  [TYPE]  int iYear 
[REPLACE]^return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 4 )  ) ;^99^100^101^^^98^102^[REPLACE] return TimeUtility .AdjustCanadianHolidayForWeekend ( CHRISTMAS_HOLIDAY.create ( iYear ) .plusDays ( 1 )  ) ;^[METHOD] create [TYPE] DateTime [PARAMETER] int iYear [CLASS] 8   [TYPE]  boolean false  true  [TYPE]  int iYear 
